
MPU6050_F103RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b22c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800b418  0800b418  0001b418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bccc  0800bccc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bccc  0800bccc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bccc  0800bccc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bcd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001e8  0800bebc  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800bebc  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b22  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003311  00000000  00000000  00035d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00039040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef99  00000000  00000000  0003b580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017086  00000000  00000000  0005a519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5f62  00000000  00000000  0007159f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117501  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006748  00000000  00000000  00117554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b3fc 	.word	0x0800b3fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800b3fc 	.word	0x0800b3fc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_fcmpun>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011b4:	d102      	bne.n	80011bc <__aeabi_fcmpun+0x14>
 80011b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011ba:	d108      	bne.n	80011ce <__aeabi_fcmpun+0x26>
 80011bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011c0:	d102      	bne.n	80011c8 <__aeabi_fcmpun+0x20>
 80011c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011c6:	d102      	bne.n	80011ce <__aeabi_fcmpun+0x26>
 80011c8:	f04f 0000 	mov.w	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0001 	mov.w	r0, #1
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_f2iz>:
 80011d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011dc:	d30f      	bcc.n	80011fe <__aeabi_f2iz+0x2a>
 80011de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011e6:	d90d      	bls.n	8001204 <__aeabi_f2iz+0x30>
 80011e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011f4:	fa23 f002 	lsr.w	r0, r3, r2
 80011f8:	bf18      	it	ne
 80011fa:	4240      	negne	r0, r0
 80011fc:	4770      	bx	lr
 80011fe:	f04f 0000 	mov.w	r0, #0
 8001202:	4770      	bx	lr
 8001204:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001208:	d101      	bne.n	800120e <__aeabi_f2iz+0x3a>
 800120a:	0242      	lsls	r2, r0, #9
 800120c:	d105      	bne.n	800121a <__aeabi_f2iz+0x46>
 800120e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001212:	bf08      	it	eq
 8001214:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001218:	4770      	bx	lr
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	4770      	bx	lr

08001220 <__aeabi_f2uiz>:
 8001220:	0042      	lsls	r2, r0, #1
 8001222:	d20e      	bcs.n	8001242 <__aeabi_f2uiz+0x22>
 8001224:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001228:	d30b      	bcc.n	8001242 <__aeabi_f2uiz+0x22>
 800122a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800122e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001232:	d409      	bmi.n	8001248 <__aeabi_f2uiz+0x28>
 8001234:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800123c:	fa23 f002 	lsr.w	r0, r3, r2
 8001240:	4770      	bx	lr
 8001242:	f04f 0000 	mov.w	r0, #0
 8001246:	4770      	bx	lr
 8001248:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800124c:	d101      	bne.n	8001252 <__aeabi_f2uiz+0x32>
 800124e:	0242      	lsls	r2, r0, #9
 8001250:	d102      	bne.n	8001258 <__aeabi_f2uiz+0x38>
 8001252:	f04f 30ff 	mov.w	r0, #4294967295
 8001256:	4770      	bx	lr
 8001258:	f04f 0000 	mov.w	r0, #0
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f006 f981 	bl	8007574 <atan2f>
 8001272:	4603      	mov	r3, r0
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f006 f903 	bl	8007490 <cosf>
 800128a:	4603      	mov	r3, r0
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f006 f92f 	bl	8007500 <sinf>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f006 f95f 	bl	8007578 <sqrtf>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN6KalmanC1Ef>:
#include <Kalman_cpp.h>
#include "math.h"

float PI = 3.1416;

Kalman::Kalman(float z0)
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <_ZN6KalmanC1Ef+0x30>)
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <_ZN6KalmanC1Ef+0x34>)
 80012e0:	609a      	str	r2, [r3, #8]
{
	x = z0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	3e051eb8 	.word	0x3e051eb8
 80012f8:	447a0000 	.word	0x447a0000

080012fc <_ZN6Kalman6updateEf>:

float Kalman::update(float z)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	float D_ = D + Q;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f7ff fc7b 	bl	8000c0c <__addsf3>
 8001316:	4603      	mov	r3, r0
 8001318:	60fb      	str	r3, [r7, #12]
	float K = D_ / (D_ + R);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fc73 	bl	8000c0c <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	4619      	mov	r1, r3
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff fe2a 	bl	8000f84 <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	60bb      	str	r3, [r7, #8]
	x = x + K * (z - x);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68dc      	ldr	r4, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4619      	mov	r1, r3
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff fc62 	bl	8000c08 <__aeabi_fsub>
 8001344:	4603      	mov	r3, r0
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fd67 	bl	8000e1c <__aeabi_fmul>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff fc5a 	bl	8000c0c <__addsf3>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
	D = (1 - K) * D_;
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001366:	f7ff fc4f 	bl	8000c08 <__aeabi_fsub>
 800136a:	4603      	mov	r3, r0
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd54 	bl	8000e1c <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
	return x;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <_ZN10GradFilterC1Effi>:

GradFilter::GradFilter(float beta_1, float eps_1, int count_to_change_params)
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <_ZN10GradFilterC1Effi+0x40>)
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013a2:	609a      	str	r2, [r3, #8]
{
	beta1 = beta_1;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	605a      	str	r2, [r3, #4]
	eps1 = eps_1;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]
	cnt_thres = count_to_change_params;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	621a      	str	r2, [r3, #32]
	cnt = 0;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
}
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	41700000 	.word	0x41700000

080013cc <_ZN10GradFilter4initEf>:
{
	roll = atan2(gz, gx);
}

void GradFilter::init(float roll0)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	roll = roll0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	611a      	str	r2, [r3, #16]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
	...

080013e8 <_ZN10GradFilter6updateEffff>:

float GradFilter::update(float wz, float gx, float gy, float delT)
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
	if (cnt == cnt_thres)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d107      	bne.n	8001412 <_ZN10GradFilter6updateEffff+0x2a>
	{
        beta = beta1;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]
        eps = eps1;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	609a      	str	r2, [r3, #8]
	}
	float norm = sqrt(gx*gx + gy*gy);
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fd01 	bl	8000e1c <__aeabi_fmul>
 800141a:	4603      	mov	r3, r0
 800141c:	461c      	mov	r4, r3
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f7ff fcfb 	bl	8000e1c <__aeabi_fmul>
 8001426:	4603      	mov	r3, r0
 8001428:	4619      	mov	r1, r3
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff fbee 	bl	8000c0c <__addsf3>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff3a 	bl	80012ac <_ZSt4sqrtf>
 8001438:	61f8      	str	r0, [r7, #28]
	if(norm == 0)
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	69f8      	ldr	r0, [r7, #28]
 8001440:	f7ff fe80 	bl	8001144 <__aeabi_fcmpeq>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d03f      	beq.n	80014ca <_ZN10GradFilter6updateEffff+0xe2>
	{
		w_bias += eps*fDiv*delT;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	699c      	ldr	r4, [r3, #24]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f7ff fcdf 	bl	8000e1c <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcda 	bl	8000e1c <__aeabi_fmul>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fbcd 	bl	8000c0c <__addsf3>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	619a      	str	r2, [r3, #24]
		roll += (wz - w_bias - beta*fDiv)*delT;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	691c      	ldr	r4, [r3, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4619      	mov	r1, r3
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f7ff fbbf 	bl	8000c08 <__aeabi_fsub>
 800148a:	4603      	mov	r3, r0
 800148c:	461d      	mov	r5, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f7ff fcbf 	bl	8000e1c <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4628      	mov	r0, r5
 80014a4:	f7ff fbb0 	bl	8000c08 <__aeabi_fsub>
 80014a8:	4603      	mov	r3, r0
 80014aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fcb5 	bl	8000e1c <__aeabi_fmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fba8 	bl	8000c0c <__addsf3>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	611a      	str	r2, [r3, #16]
		return roll;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	e0b1      	b.n	800162e <_ZN10GradFilter6updateEffff+0x246>
	}
	float gxNorm = gx/norm;
 80014ca:	69f9      	ldr	r1, [r7, #28]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fd59 	bl	8000f84 <__aeabi_fdiv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	61bb      	str	r3, [r7, #24]
	float gyNorm = gy/norm;
 80014d6:	69f9      	ldr	r1, [r7, #28]
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff fd53 	bl	8000f84 <__aeabi_fdiv>
 80014de:	4603      	mov	r3, r0
 80014e0:	617b      	str	r3, [r7, #20]
	fDiv = sin(roll)*gyNorm - cos(roll)*gxNorm;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fed4 	bl	8001294 <_ZSt3sinf>
 80014ec:	4603      	mov	r3, r0
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc93 	bl	8000e1c <__aeabi_fmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461c      	mov	r4, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff febc 	bl	800127c <_ZSt3cosf>
 8001504:	4603      	mov	r3, r0
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc87 	bl	8000e1c <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	4619      	mov	r1, r3
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff fb78 	bl	8000c08 <__aeabi_fsub>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	615a      	str	r2, [r3, #20]
	w_bias += eps*fDiv*delT;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	699c      	ldr	r4, [r3, #24]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff fc74 	bl	8000e1c <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc6f 	bl	8000e1c <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fb62 	bl	8000c0c <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	619a      	str	r2, [r3, #24]
	float wCalib = wz - w_bias;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4619      	mov	r1, r3
 8001556:	68b8      	ldr	r0, [r7, #8]
 8001558:	f7ff fb56 	bl	8000c08 <__aeabi_fsub>
 800155c:	4603      	mov	r3, r0
 800155e:	613b      	str	r3, [r7, #16]
	roll += (wCalib - beta*fDiv)*delT;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	691c      	ldr	r4, [r3, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff fc54 	bl	8000e1c <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	4619      	mov	r1, r3
 8001578:	6938      	ldr	r0, [r7, #16]
 800157a:	f7ff fb45 	bl	8000c08 <__aeabi_fsub>
 800157e:	4603      	mov	r3, r0
 8001580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fc4a 	bl	8000e1c <__aeabi_fmul>
 8001588:	4603      	mov	r3, r0
 800158a:	4619      	mov	r1, r3
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff fb3d 	bl	8000c0c <__addsf3>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	611a      	str	r2, [r3, #16]
	if (roll >= 2*PI)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691c      	ldr	r4, [r3, #16]
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fb31 	bl	8000c0c <__addsf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fde6 	bl	8001180 <__aeabi_fcmpge>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d010      	beq.n	80015dc <_ZN10GradFilter6updateEffff+0x1f4>
	{
		roll -= 2*PI;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	691c      	ldr	r4, [r3, #16]
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb21 	bl	8000c0c <__addsf3>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fb1a 	bl	8000c08 <__aeabi_fsub>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	611a      	str	r2, [r3, #16]
	}
	if (roll <= -2*PI)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	691c      	ldr	r4, [r3, #16]
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc17 	bl	8000e1c <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fdba 	bl	800116c <__aeabi_fcmple>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <_ZN10GradFilter6updateEffff+0x238>
	{
		roll += 2*PI;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	691c      	ldr	r4, [r3, #16]
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff faff 	bl	8000c0c <__addsf3>
 800160e:	4603      	mov	r3, r0
 8001610:	4619      	mov	r1, r3
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fafa 	bl	8000c0c <__addsf3>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	611a      	str	r2, [r3, #16]
	}
	cnt++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	61da      	str	r2, [r3, #28]
	return roll;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	691b      	ldr	r3, [r3, #16]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000

0800163c <MPU6050_Init>:
uint32_t countTest;

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd, MPU_ConfigTypeDef *mpuCon)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001646:	2254      	movs	r2, #84	; 0x54
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MPU6050_Init+0x24>)
 800164c:	f006 ff58 	bl	8008500 <memcpy>
	//MPU config handle to local library
	MpuConfig = mpuCon;
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <MPU6050_Init+0x28>)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6013      	str	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000204 	.word	0x20000204
 8001664:	20000258 	.word	0x20000258

08001668 <I2C_Read>:

//2- i2c Read
HAL_StatusTypeDef I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	71bb      	strb	r3, [r7, #6]
	uint8_t MPUADDR;
	uint8_t i2cBuf[2] = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	81bb      	strh	r3, [r7, #12]
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 800167c:	23d0      	movs	r3, #208	; 0xd0
 800167e:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 100)!= HAL_OK) return HAL_ERROR;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	b299      	uxth	r1, r3
 8001688:	f107 020c 	add.w	r2, r7, #12
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <I2C_Read+0x64>)
 8001694:	f003 fa6c 	bl	8004b70 <HAL_I2C_Master_Transmit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <I2C_Read+0x3a>
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <I2C_Read+0x5a>
	if(HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100)!= HAL_OK) return HAL_ERROR;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	b299      	uxth	r1, r3
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2264      	movs	r2, #100	; 0x64
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <I2C_Read+0x64>)
 80016b2:	f003 fb5b 	bl	8004d6c <HAL_I2C_Master_Receive>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <I2C_Read+0x58>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <I2C_Read+0x5a>
	return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000204 	.word	0x20000204

080016d0 <I2C_Write8>:

//3- i2c Write
HAL_StatusTypeDef I2C_Write8(uint8_t ADDR, uint8_t data)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2] = {0};
 80016e0:	2300      	movs	r3, #0
 80016e2:	81bb      	strh	r3, [r7, #12]
	i2cData[0] = ADDR;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 80016ec:	23d0      	movs	r3, #208	; 0xd0
 80016ee:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,5)!= HAL_OK) return HAL_ERROR;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	b299      	uxth	r1, r3
 80016f4:	f107 020c 	add.w	r2, r7, #12
 80016f8:	2305      	movs	r3, #5
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2302      	movs	r3, #2
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <I2C_Write8+0x48>)
 8001700:	f003 fa36 	bl	8004b70 <HAL_I2C_Master_Transmit>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <I2C_Write8+0x3e>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <I2C_Write8+0x40>
	return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000204 	.word	0x20000204

0800171c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	uint8_t Buffer = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	71fb      	strb	r3, [r7, #7]
	float PI = 3.14159f;
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <MPU6050_Config+0x198>)
 8001728:	603b      	str	r3, [r7, #0]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	206b      	movs	r0, #107	; 0x6b
 800172e:	f7ff ffcf 	bl	80016d0 <I2C_Write8>
	HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	; 0x64
 8001734:	f001 fbbc 	bl	8002eb0 <HAL_Delay>
	Buffer = MpuConfig ->ClockSource & 0x07; //change the 7th bits of register
 8001738:	4b5f      	ldr	r3, [pc, #380]	; (80018b8 <MPU6050_Config+0x19c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	71fb      	strb	r3, [r7, #7]
	Buffer |= (MpuConfig ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001744:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <MPU6050_Config+0x19c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	019b      	lsls	r3, r3, #6
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001752:	b25a      	sxtb	r2, r3
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4313      	orrs	r3, r2
 800175a:	b25b      	sxtb	r3, r3
 800175c:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4619      	mov	r1, r3
 8001762:	206b      	movs	r0, #107	; 0x6b
 8001764:	f7ff ffb4 	bl	80016d0 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001768:	2064      	movs	r0, #100	; 0x64
 800176a:	f001 fba1 	bl	8002eb0 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
	Buffer = MpuConfig->CONFIG_DLPF & 0x07;
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <MPU6050_Config+0x19c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(CONFIG_REG, Buffer);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4619      	mov	r1, r3
 8001782:	201a      	movs	r0, #26
 8001784:	f7ff ffa4 	bl	80016d0 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Gyro_Full_Scale << 3) & 0x18;
 800178c:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <MPU6050_Config+0x19c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0318 	and.w	r3, r3, #24
 800179a:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4619      	mov	r1, r3
 80017a0:	201b      	movs	r0, #27
 80017a2:	f7ff ff95 	bl	80016d0 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 80017a6:	2300      	movs	r3, #0
 80017a8:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Accel_Full_Scale << 3) & 0x18;
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <MPU6050_Config+0x19c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0318 	and.w	r3, r3, #24
 80017b8:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4619      	mov	r1, r3
 80017be:	201c      	movs	r0, #28
 80017c0:	f7ff ff86 	bl	80016d0 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 80017c4:	2004      	movs	r0, #4
 80017c6:	f000 f887 	bl	80018d8 <MPU6050_Set_SMPRT_DIV>
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (MpuConfig->Accel_Full_Scale)
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <MPU6050_Config+0x19c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	789b      	ldrb	r3, [r3, #2]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d81f      	bhi.n	8001814 <MPU6050_Config+0xf8>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <MPU6050_Config+0xc0>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f7 	.word	0x080017f7
 80017e4:	08001801 	.word	0x08001801
 80017e8:	0800180b 	.word	0x0800180b
	{
		case AFS_SEL_2g:
			accelScalingFactor = 2.00f/32768.00f;
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <MPU6050_Config+0x1a0>)
 80017ee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80017f2:	601a      	str	r2, [r3, #0]
			break;
 80017f4:	e00f      	b.n	8001816 <MPU6050_Config+0xfa>
		
		case AFS_SEL_4g:
			accelScalingFactor = 4.00f/32768.00f;
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <MPU6050_Config+0x1a0>)
 80017f8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80017fc:	601a      	str	r2, [r3, #0]
				break;
 80017fe:	e00a      	b.n	8001816 <MPU6050_Config+0xfa>
		
		case AFS_SEL_8g:
			accelScalingFactor = 8.00f/32768.00f;
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <MPU6050_Config+0x1a0>)
 8001802:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001806:	601a      	str	r2, [r3, #0]
			break;
 8001808:	e005      	b.n	8001816 <MPU6050_Config+0xfa>
		
		case AFS_SEL_16g:
			accelScalingFactor = 16.00f/32768.00f;
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <MPU6050_Config+0x1a0>)
 800180c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001810:	601a      	str	r2, [r3, #0]
			break;
 8001812:	e000      	b.n	8001816 <MPU6050_Config+0xfa>
		
		default:
			break;
 8001814:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (MpuConfig->Gyro_Full_Scale)
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <MPU6050_Config+0x19c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d843      	bhi.n	80018a8 <MPU6050_Config+0x18c>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <MPU6050_Config+0x10c>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	08001855 	.word	0x08001855
 8001830:	08001871 	.word	0x08001871
 8001834:	0800188d 	.word	0x0800188d
	{
		case FS_SEL_250:
			gyroScalingFactor = (250.0f/32768.0f)*PI/180;
 8001838:	4921      	ldr	r1, [pc, #132]	; (80018c0 <MPU6050_Config+0x1a4>)
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f7ff faee 	bl	8000e1c <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	4920      	ldr	r1, [pc, #128]	; (80018c4 <MPU6050_Config+0x1a8>)
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb9d 	bl	8000f84 <__aeabi_fdiv>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MPU6050_Config+0x1ac>)
 8001850:	601a      	str	r2, [r3, #0]
			break;
 8001852:	e02a      	b.n	80018aa <MPU6050_Config+0x18e>
		
		case FS_SEL_500:
			gyroScalingFactor = (500.0f/32768.0f)*PI/180;
 8001854:	491d      	ldr	r1, [pc, #116]	; (80018cc <MPU6050_Config+0x1b0>)
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f7ff fae0 	bl	8000e1c <__aeabi_fmul>
 800185c:	4603      	mov	r3, r0
 800185e:	4919      	ldr	r1, [pc, #100]	; (80018c4 <MPU6050_Config+0x1a8>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fb8f 	bl	8000f84 <__aeabi_fdiv>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MPU6050_Config+0x1ac>)
 800186c:	601a      	str	r2, [r3, #0]
			break;
 800186e:	e01c      	b.n	80018aa <MPU6050_Config+0x18e>
		
		case FS_SEL_1000:
			gyroScalingFactor = (1000.0f/32768.0f)*PI/180;
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <MPU6050_Config+0x1b4>)
 8001872:	6838      	ldr	r0, [r7, #0]
 8001874:	f7ff fad2 	bl	8000e1c <__aeabi_fmul>
 8001878:	4603      	mov	r3, r0
 800187a:	4912      	ldr	r1, [pc, #72]	; (80018c4 <MPU6050_Config+0x1a8>)
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb81 	bl	8000f84 <__aeabi_fdiv>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MPU6050_Config+0x1ac>)
 8001888:	601a      	str	r2, [r3, #0]
			break;
 800188a:	e00e      	b.n	80018aa <MPU6050_Config+0x18e>
		
		case FS_SEL_2000:
			gyroScalingFactor = (2000.0f/32768.0f)*PI/180;
 800188c:	4911      	ldr	r1, [pc, #68]	; (80018d4 <MPU6050_Config+0x1b8>)
 800188e:	6838      	ldr	r0, [r7, #0]
 8001890:	f7ff fac4 	bl	8000e1c <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	490b      	ldr	r1, [pc, #44]	; (80018c4 <MPU6050_Config+0x1a8>)
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fb73 	bl	8000f84 <__aeabi_fdiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MPU6050_Config+0x1ac>)
 80018a4:	601a      	str	r2, [r3, #0]
			break;
 80018a6:	e000      	b.n	80018aa <MPU6050_Config+0x18e>
		
		default:
			break;
 80018a8:	bf00      	nop
	}
	
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40490fd0 	.word	0x40490fd0
 80018b8:	20000258 	.word	0x20000258
 80018bc:	2000025c 	.word	0x2000025c
 80018c0:	3bfa0000 	.word	0x3bfa0000
 80018c4:	43340000 	.word	0x43340000
 80018c8:	20000260 	.word	0x20000260
 80018cc:	3c7a0000 	.word	0x3c7a0000
 80018d0:	3cfa0000 	.word	0x3cfa0000
 80018d4:	3d7a0000 	.word	0x3d7a0000

080018d8 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4619      	mov	r1, r3
 80018e6:	2019      	movs	r0, #25
 80018e8:	f7ff fef2 	bl	80016d0 <I2C_Write8>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <ReadI2C_MPU>:
	I2C_Write8(CONFIG_REG, Buffer);	
}

//9- Get Accel Raw Data
HAL_StatusTypeDef ReadI2C_MPU(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
	uint8_t AcceArr[6];
	uint8_t GyroArr[6];
	if(I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6)== HAL_OK && I2C_Read(GYRO_XOUT_H_REG, GyroArr,6) == HAL_OK)
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	2206      	movs	r2, #6
 8001900:	4619      	mov	r1, r3
 8001902:	203b      	movs	r0, #59	; 0x3b
 8001904:	f7ff feb0 	bl	8001668 <I2C_Read>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d159      	bne.n	80019c2 <ReadI2C_MPU+0xce>
 800190e:	463b      	mov	r3, r7
 8001910:	2206      	movs	r2, #6
 8001912:	4619      	mov	r1, r3
 8001914:	2043      	movs	r0, #67	; 0x43
 8001916:	f7ff fea7 	bl	8001668 <I2C_Read>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d150      	bne.n	80019c2 <ReadI2C_MPU+0xce>
	{
		//Accel Raw Data
		Accel.x = (int16_t)((AcceArr[0]<<8) | AcceArr[1]);
 8001920:	7a3b      	ldrb	r3, [r7, #8]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	7a7b      	ldrb	r3, [r7, #9]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001930:	801a      	strh	r2, [r3, #0]
		Accel.y = (int16_t)((AcceArr[2]<<8) | AcceArr[3]);
 8001932:	7abb      	ldrb	r3, [r7, #10]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21a      	sxth	r2, r3
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	b21b      	sxth	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b21a      	sxth	r2, r3
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001942:	805a      	strh	r2, [r3, #2]
		Accel.z = (int16_t)((AcceArr[4]<<8) | AcceArr[5]);
 8001944:	7b3b      	ldrb	r3, [r7, #12]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	b21a      	sxth	r2, r3
 800194a:	7b7b      	ldrb	r3, [r7, #13]
 800194c:	b21b      	sxth	r3, r3
 800194e:	4313      	orrs	r3, r2
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001954:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		Gyro.x = (int16_t)((GyroArr[0]<<8) | GyroArr[1]);
 8001956:	783b      	ldrb	r3, [r7, #0]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <ReadI2C_MPU+0xf8>)
 8001966:	801a      	strh	r2, [r3, #0]
		Gyro.y = (int16_t)((GyroArr[2]<<8) | GyroArr[3]);
 8001968:	78bb      	ldrb	r3, [r7, #2]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21a      	sxth	r2, r3
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <ReadI2C_MPU+0xf8>)
 8001978:	805a      	strh	r2, [r3, #2]
		Gyro.z = (int16_t)((GyroArr[4]<<8) | GyroArr[5]);
 800197a:	793b      	ldrb	r3, [r7, #4]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	b21b      	sxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b21a      	sxth	r2, r3
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <ReadI2C_MPU+0xf8>)
 800198a:	809a      	strh	r2, [r3, #4]

		if (Accel.x == 0 && Accel.y == 0 && Accel.z == 0)
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <ReadI2C_MPU+0xf4>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d121      	bne.n	80019da <ReadI2C_MPU+0xe6>
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001998:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d11c      	bne.n	80019da <ReadI2C_MPU+0xe6>
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <ReadI2C_MPU+0xf4>)
 80019a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d117      	bne.n	80019da <ReadI2C_MPU+0xe6>
		{
			HAL_I2C_Init(&i2cHandler);
 80019aa:	4811      	ldr	r0, [pc, #68]	; (80019f0 <ReadI2C_MPU+0xfc>)
 80019ac:	f002 ff9c 	bl	80048e8 <HAL_I2C_Init>
			MPU6050_Config();
 80019b0:	f7ff feb4 	bl	800171c <MPU6050_Config>
			errtest++;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019bc:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00d      	b.n	80019de <ReadI2C_MPU+0xea>
		}
	}
	else
	{
		HAL_I2C_Init(&i2cHandler);
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <ReadI2C_MPU+0xfc>)
 80019c4:	f002 ff90 	bl	80048e8 <HAL_I2C_Init>
		MPU6050_Config();
 80019c8:	f7ff fea8 	bl	800171c <MPU6050_Config>
		errtest++;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019d4:	6013      	str	r3, [r2, #0]
		return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e001      	b.n	80019de <ReadI2C_MPU+0xea>
		if (Accel.x == 0 && Accel.y == 0 && Accel.z == 0)
 80019da:	bf00      	nop
	}
	return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000264 	.word	0x20000264
 80019ec:	2000026c 	.word	0x2000026c
 80019f0:	20000204 	.word	0x20000204
 80019f4:	2000028c 	.word	0x2000028c

080019f8 <CalibrateMPU6050>:
	return HAL_OK;
}

//11- Calibrate MPU6050
HAL_StatusTypeDef CalibrateMPU6050(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b091      	sub	sp, #68	; 0x44
 80019fc:	af00      	add	r7, sp, #0
	float accelOffset[3] = {0}, gyroOffset[3] = {0};
 80019fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
	int32_t at[3] = {0}, wt[3] = {0};
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
	uint16_t count = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	countTest = 0;	
 8001a30:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <CalibrateMPU6050+0x168>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<20000; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a3a:	e035      	b.n	8001aa8 <CalibrateMPU6050+0xb0>
	{
		if(ReadI2C_MPU() == HAL_OK)
 8001a3c:	f7ff ff5a 	bl	80018f4 <ReadI2C_MPU>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12d      	bne.n	8001aa2 <CalibrateMPU6050+0xaa>
		{
			at[0] += Accel.x;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <CalibrateMPU6050+0x16c>)
 8001a4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a4e:	4413      	add	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
			at[1] += Accel.y;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <CalibrateMPU6050+0x16c>)
 8001a56:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
			at[2] += (Accel.z - 16384);
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <CalibrateMPU6050+0x16c>)
 8001a62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001a6a:	4413      	add	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
			wt[0] += Gyro.x;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a3d      	ldr	r2, [pc, #244]	; (8001b68 <CalibrateMPU6050+0x170>)
 8001a72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a76:	4413      	add	r3, r2
 8001a78:	607b      	str	r3, [r7, #4]
			wt[1] += Gyro.y;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <CalibrateMPU6050+0x170>)
 8001a7e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001a82:	4413      	add	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
			wt[2] += Gyro.z;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <CalibrateMPU6050+0x170>)
 8001a8a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
			count++;
 8001a92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001a94:	3301      	adds	r3, #1
 8001a96:	87fb      	strh	r3, [r7, #62]	; 0x3e
			countTest++;
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <CalibrateMPU6050+0x168>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <CalibrateMPU6050+0x168>)
 8001aa0:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<20000; i++)
 8001aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aaa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	ddc4      	ble.n	8001a3c <CalibrateMPU6050+0x44>
		}
	}
	if(count < 15000) return HAL_ERROR;
 8001ab2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ab4:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d801      	bhi.n	8001ac0 <CalibrateMPU6050+0xc8>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04b      	b.n	8001b58 <CalibrateMPU6050+0x160>

	for(int i = 0; i < 3; i++){
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac4:	e03c      	b.n	8001b40 <CalibrateMPU6050+0x148>
		// calculate Acc offset
		accelOffset[i] = -(at[i]*1.0000f)/count;
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	3340      	adds	r3, #64	; 0x40
 8001acc:	443b      	add	r3, r7
 8001ace:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f94e 	bl	8000d74 <__aeabi_i2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001ade:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f947 	bl	8000d74 <__aeabi_i2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fa4a 	bl	8000f84 <__aeabi_fdiv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	3340      	adds	r3, #64	; 0x40
 8001afa:	443b      	add	r3, r7
 8001afc:	f843 2c18 	str.w	r2, [r3, #-24]
		// calculate Gyr offset
		gyroOffset[i] = -(wt[i]*1.0000f)/count;
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	3340      	adds	r3, #64	; 0x40
 8001b06:	443b      	add	r3, r7
 8001b08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f931 	bl	8000d74 <__aeabi_i2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001b18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f92a 	bl	8000d74 <__aeabi_i2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4619      	mov	r1, r3
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff fa2d 	bl	8000f84 <__aeabi_fdiv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	3340      	adds	r3, #64	; 0x40
 8001b34:	443b      	add	r3, r7
 8001b36:	f843 2c24 	str.w	r2, [r3, #-36]
	for(int i = 0; i < 3; i++){
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	ddbf      	ble.n	8001ac6 <CalibrateMPU6050+0xce>
	}
	
	Soft_SetOffset(accelOffset, gyroOffset);
 8001b46:	f107 021c 	add.w	r2, r7, #28
 8001b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f80b 	bl	8001b6c <Soft_SetOffset>
	
	return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3744      	adds	r7, #68	; 0x44
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	20000290 	.word	0x20000290
 8001b64:	20000264 	.word	0x20000264
 8001b68:	2000026c 	.word	0x2000026c

08001b6c <Soft_SetOffset>:

//12 - Set offset Soft
void Soft_SetOffset(float accelOffset[3], float gyroOffset[3])
{
 8001b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b70:	b088      	sub	sp, #32
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError;
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbPages = 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = startAddressFlash;
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <Soft_SetOffset+0xbc>)
 8001b86:	617b      	str	r3, [r7, #20]

	HAL_FLASH_Unlock();
 8001b88:	f002 fb8a 	bl	80042a0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001b8c:	f107 0208 	add.w	r2, r7, #8
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fc6a 	bl	8004470 <HAL_FLASHEx_Erase>
	for (int i = 0; i < 3; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	e038      	b.n	8001c14 <Soft_SetOffset+0xa8>
	{
		accel_reg_bias[i] = accelOffset[i];
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	491f      	ldr	r1, [pc, #124]	; (8001c2c <Soft_SetOffset+0xc0>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressFlash + 4*i, *((uint32_t*)&accel_reg_bias[i]));
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <Soft_SetOffset+0xc4>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <Soft_SetOffset+0xc0>)
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	461c      	mov	r4, r3
 8001bcc:	4615      	mov	r5, r2
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f002 faf4 	bl	80041c0 <HAL_FLASH_Program>
		gyr_reg_bias[i] = gyroOffset[i];
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4914      	ldr	r1, [pc, #80]	; (8001c34 <Soft_SetOffset+0xc8>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressFlash + 4*i + 12, *((uint32_t*)&gyr_reg_bias[i]));
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <Soft_SetOffset+0xcc>)
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <Soft_SetOffset+0xc8>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4698      	mov	r8, r3
 8001c02:	4691      	mov	r9, r2
 8001c04:	4642      	mov	r2, r8
 8001c06:	464b      	mov	r3, r9
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f002 fad9 	bl	80041c0 <HAL_FLASH_Program>
	for (int i = 0; i < 3; i++)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	ddc3      	ble.n	8001ba2 <Soft_SetOffset+0x36>
	}
	HAL_FLASH_Lock();
 8001c1a:	f002 fb67 	bl	80042ec <HAL_FLASH_Lock>
}
 8001c1e:	bf00      	nop
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c28:	0801f820 	.word	0x0801f820
 8001c2c:	20000274 	.word	0x20000274
 8001c30:	02007e08 	.word	0x02007e08
 8001c34:	20000280 	.word	0x20000280
 8001c38:	02007e0b 	.word	0x02007e0b

08001c3c <Read_MPU_Calc>:
	return rs;
}

//15. Read MPU values calculated
HAL_StatusTypeDef Read_MPU_Calc(float* acc, float* gyr)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	if (ReadI2C_MPU() == HAL_OK)
 8001c46:	f7ff fe55 	bl	80018f4 <ReadI2C_MPU>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f040 8096 	bne.w	8001d7e <Read_MPU_Calc+0x142>
	{
		acc[0] = (Accel.x + accel_reg_bias[0]) * accelScalingFactor;
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <Read_MPU_Calc+0x14c>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f88b 	bl	8000d74 <__aeabi_i2f>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <Read_MPU_Calc+0x150>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe ffd0 	bl	8000c0c <__addsf3>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <Read_MPU_Calc+0x154>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f7ff f8d0 	bl	8000e1c <__aeabi_fmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	601a      	str	r2, [r3, #0]
		acc[1] = (Accel.y + accel_reg_bias[1]) * accelScalingFactor;
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <Read_MPU_Calc+0x14c>)
 8001c86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f872 	bl	8000d74 <__aeabi_i2f>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <Read_MPU_Calc+0x150>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7fe ffb7 	bl	8000c0c <__addsf3>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <Read_MPU_Calc+0x154>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	1d1c      	adds	r4, r3, #4
 8001caa:	4611      	mov	r1, r2
 8001cac:	f7ff f8b6 	bl	8000e1c <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	6023      	str	r3, [r4, #0]
		acc[2] = (Accel.z + accel_reg_bias[2]) * accelScalingFactor;
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <Read_MPU_Calc+0x14c>)
 8001cb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f85a 	bl	8000d74 <__aeabi_i2f>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <Read_MPU_Calc+0x150>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f7fe ff9f 	bl	8000c0c <__addsf3>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <Read_MPU_Calc+0x154>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 0408 	add.w	r4, r3, #8
 8001cdc:	4611      	mov	r1, r2
 8001cde:	f7ff f89d 	bl	8000e1c <__aeabi_fmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6023      	str	r3, [r4, #0]
		gyr[0] = (Gyro.x + gyr_reg_bias[0]) * gyroScalingFactor;
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <Read_MPU_Calc+0x158>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f841 	bl	8000d74 <__aeabi_i2f>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <Read_MPU_Calc+0x15c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7fe ff86 	bl	8000c0c <__addsf3>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <Read_MPU_Calc+0x160>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f886 	bl	8000e1c <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	601a      	str	r2, [r3, #0]
		gyr[1] = (Gyro.y + gyr_reg_bias[1]) * gyroScalingFactor;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <Read_MPU_Calc+0x158>)
 8001d1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f828 	bl	8000d74 <__aeabi_i2f>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <Read_MPU_Calc+0x15c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f7fe ff6d 	bl	8000c0c <__addsf3>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4618      	mov	r0, r3
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <Read_MPU_Calc+0x160>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	1d1c      	adds	r4, r3, #4
 8001d3e:	4611      	mov	r1, r2
 8001d40:	f7ff f86c 	bl	8000e1c <__aeabi_fmul>
 8001d44:	4603      	mov	r3, r0
 8001d46:	6023      	str	r3, [r4, #0]
		gyr[2] = (Gyro.z + gyr_reg_bias[2]) * gyroScalingFactor;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <Read_MPU_Calc+0x158>)
 8001d4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f810 	bl	8000d74 <__aeabi_i2f>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <Read_MPU_Calc+0x15c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7fe ff55 	bl	8000c0c <__addsf3>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <Read_MPU_Calc+0x160>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f103 0408 	add.w	r4, r3, #8
 8001d70:	4611      	mov	r1, r2
 8001d72:	f7ff f853 	bl	8000e1c <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	6023      	str	r3, [r4, #0]
		return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <Read_MPU_Calc+0x144>
	}
	return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000264 	.word	0x20000264
 8001d8c:	20000274 	.word	0x20000274
 8001d90:	2000025c 	.word	0x2000025c
 8001d94:	2000026c 	.word	0x2000026c
 8001d98:	20000280 	.word	0x20000280
 8001d9c:	20000260 	.word	0x20000260

08001da0 <Flash_Assign_Param>:
uint16_t *maxRFC;
uint16_t minRFC_default;
uint16_t maxRFC_default;

void Flash_Assign_Param(uint16_t *min_RFC, uint16_t *max_RFC, uint16_t min_RFC_default, uint16_t max_RFC_default)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	4613      	mov	r3, r2
 8001db4:	80bb      	strh	r3, [r7, #4]
	minRFC = min_RFC;
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <Flash_Assign_Param+0x38>)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6013      	str	r3, [r2, #0]
	maxRFC = max_RFC;
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <Flash_Assign_Param+0x3c>)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6013      	str	r3, [r2, #0]
	minRFC_default = min_RFC_default;
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <Flash_Assign_Param+0x40>)
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	8013      	strh	r3, [r2, #0]
	maxRFC_default = max_RFC_default;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <Flash_Assign_Param+0x44>)
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	8013      	strh	r3, [r2, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000294 	.word	0x20000294
 8001ddc:	20000298 	.word	0x20000298
 8001de0:	2000029c 	.word	0x2000029c
 8001de4:	2000029e 	.word	0x2000029e

08001de8 <Flash_Soft_SetOffset>:

void Flash_Soft_SetOffset(int RFC_min, int RFC_max)
{
 8001de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dec:	b088      	sub	sp, #32
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError;
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.PageAddress = startAddressRFC;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <Flash_Soft_SetOffset+0x90>)
 8001e02:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8001e04:	f002 fa4c 	bl	80042a0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fb2c 	bl	8004470 <HAL_FLASHEx_Erase>

	if (RFC_min >= 0)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db10      	blt.n	8001e40 <Flash_Soft_SetOffset+0x58>
	{
		*minRFC = RFC_min;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <Flash_Soft_SetOffset+0x94>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	b292      	uxth	r2, r2
 8001e26:	801a      	strh	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressRFC, *((uint32_t*)minRFC));
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <Flash_Soft_SetOffset+0x94>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4698      	mov	r8, r3
 8001e32:	4691      	mov	r9, r2
 8001e34:	4642      	mov	r2, r8
 8001e36:	464b      	mov	r3, r9
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <Flash_Soft_SetOffset+0x90>)
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f002 f9c0 	bl	80041c0 <HAL_FLASH_Program>
	}

	if(RFC_max >= 0)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db10      	blt.n	8001e68 <Flash_Soft_SetOffset+0x80>
	{
		*maxRFC = RFC_max;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <Flash_Soft_SetOffset+0x98>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	801a      	strh	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressRFC + 4, *((uint32_t*)maxRFC));
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <Flash_Soft_SetOffset+0x98>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	461c      	mov	r4, r3
 8001e5a:	4615      	mov	r5, r2
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	462b      	mov	r3, r5
 8001e60:	4908      	ldr	r1, [pc, #32]	; (8001e84 <Flash_Soft_SetOffset+0x9c>)
 8001e62:	2002      	movs	r0, #2
 8001e64:	f002 f9ac 	bl	80041c0 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8001e68:	f002 fa40 	bl	80042ec <HAL_FLASH_Lock>
}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e76:	bf00      	nop
 8001e78:	0801f810 	.word	0x0801f810
 8001e7c:	20000294 	.word	0x20000294
 8001e80:	20000298 	.word	0x20000298
 8001e84:	0801f814 	.word	0x0801f814

08001e88 <Flash_Soft_GetOffset>:


void Flash_Soft_GetOffset(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
	uint16_t temp;
	temp = *((uint16_t*)((__IO uint32_t *)(startAddressRFC)));
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <Flash_Soft_GetOffset+0x54>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	80fb      	strh	r3, [r7, #6]
	if (temp>4095) *minRFC = minRFC_default;
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9a:	d305      	bcc.n	8001ea8 <Flash_Soft_GetOffset+0x20>
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <Flash_Soft_GetOffset+0x58>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <Flash_Soft_GetOffset+0x5c>)
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	e003      	b.n	8001eb0 <Flash_Soft_GetOffset+0x28>
	else *minRFC = temp;
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <Flash_Soft_GetOffset+0x58>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	801a      	strh	r2, [r3, #0]

	temp = *((uint16_t*)((__IO uint32_t *)(startAddressRFC + 4)));
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <Flash_Soft_GetOffset+0x60>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	80fb      	strh	r3, [r7, #6]
	if (temp>4095) *maxRFC = maxRFC_default;
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ebc:	d305      	bcc.n	8001eca <Flash_Soft_GetOffset+0x42>
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <Flash_Soft_GetOffset+0x64>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <Flash_Soft_GetOffset+0x68>)
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	801a      	strh	r2, [r3, #0]
	else *maxRFC = temp;
}
 8001ec8:	e003      	b.n	8001ed2 <Flash_Soft_GetOffset+0x4a>
	else *maxRFC = temp;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Flash_Soft_GetOffset+0x64>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	801a      	strh	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	0801f810 	.word	0x0801f810
 8001ee0:	20000294 	.word	0x20000294
 8001ee4:	2000029c 	.word	0x2000029c
 8001ee8:	0801f814 	.word	0x0801f814
 8001eec:	20000298 	.word	0x20000298
 8001ef0:	2000029e 	.word	0x2000029e

08001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f000 ff78 	bl	8002dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f80f 	bl	8001f1e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f00:	f000 f974 	bl	80021ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001f04:	f000 f94c 	bl	80021a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f08:	f000 f866 	bl	8001fd8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f0c:	f000 f8a2 	bl	8002054 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f10:	f000 f8ce 	bl	80020b0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001f14:	f000 f91a 	bl	800214c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  myMain();
 8001f18:	f000 fa86 	bl	8002428 <myMain>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <main+0x28>

08001f1e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b096      	sub	sp, #88	; 0x58
 8001f22:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f28:	2228      	movs	r2, #40	; 0x28
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 faf5 	bl	800851c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f60:	2301      	movs	r3, #1
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fc83 	bl	8005884 <HAL_RCC_OscConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001f84:	f000 f960 	bl	8002248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f88:	230f      	movs	r3, #15
 8001f8a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 feef 	bl	8005d88 <HAL_RCC_ClockConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fb0:	f000 f94a 	bl	8002248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fbc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 f879 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001fcc:	f000 f93c 	bl	8002248 <Error_Handler>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3758      	adds	r7, #88	; 0x58
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <MX_ADC1_Init+0x74>)
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <MX_ADC1_Init+0x78>)
 8001fec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_ADC1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <MX_ADC1_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_ADC1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <MX_ADC1_Init+0x74>)
 8002002:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002006:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_ADC1_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_ADC1_Init+0x74>)
 8002010:	2201      	movs	r2, #1
 8002012:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_ADC1_Init+0x74>)
 8002016:	f000 ff6f 	bl	8002ef8 <HAL_ADC_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002020:	f000 f912 	bl	8002248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002024:	2301      	movs	r3, #1
 8002026:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002028:	2301      	movs	r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_ADC1_Init+0x74>)
 8002036:	f001 f939 	bl	80032ac <HAL_ADC_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002040:	f000 f902 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200002a0 	.word	0x200002a0
 8002050:	40012400 	.word	0x40012400

08002054 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_I2C1_Init+0x50>)
 800205a:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <MX_I2C1_Init+0x54>)
 800205c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_I2C1_Init+0x50>)
 8002060:	4a12      	ldr	r2, [pc, #72]	; (80020ac <MX_I2C1_Init+0x58>)
 8002062:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_I2C1_Init+0x50>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_I2C1_Init+0x50>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_I2C1_Init+0x50>)
 8002072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002076:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <MX_I2C1_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_I2C1_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <MX_I2C1_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_I2C1_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_I2C1_Init+0x50>)
 8002092:	f002 fc29 	bl	80048e8 <HAL_I2C_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800209c:	f000 f8d4 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000314 	.word	0x20000314
 80020a8:	40005400 	.word	0x40005400
 80020ac:	00061a80 	.word	0x00061a80

080020b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c4:	463b      	mov	r3, r7
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <MX_TIM2_Init+0x98>)
 80020ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_TIM2_Init+0x98>)
 80020d6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80020da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <MX_TIM2_Init+0x98>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <MX_TIM2_Init+0x98>)
 80020e4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80020e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <MX_TIM2_Init+0x98>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <MX_TIM2_Init+0x98>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f6:	4814      	ldr	r0, [pc, #80]	; (8002148 <MX_TIM2_Init+0x98>)
 80020f8:	f004 f894 	bl	8006224 <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002102:	f000 f8a1 	bl	8002248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4619      	mov	r1, r3
 8002112:	480d      	ldr	r0, [pc, #52]	; (8002148 <MX_TIM2_Init+0x98>)
 8002114:	f004 f92e 	bl	8006374 <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800211e:	f000 f893 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4619      	mov	r1, r3
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <MX_TIM2_Init+0x98>)
 8002130:	f004 faf4 	bl	800671c <HAL_TIMEx_MasterConfigSynchronization>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800213a:	f000 f885 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000368 	.word	0x20000368

0800214c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <MX_USART2_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002184:	f004 fb36 	bl	80067f4 <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f000 f85b 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003b0 	.word	0x200003b0
 800219c:	40004400 	.word	0x40004400

080021a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <MX_DMA_Init+0x48>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <MX_DMA_Init+0x48>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6153      	str	r3, [r2, #20]
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <MX_DMA_Init+0x48>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	200b      	movs	r0, #11
 80021c4:	f001 fb43 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021c8:	200b      	movs	r0, #11
 80021ca:	f001 fb5c 	bl	8003886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2010      	movs	r0, #16
 80021d4:	f001 fb3b 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80021d8:	2010      	movs	r0, #16
 80021da:	f001 fb54 	bl	8003886 <HAL_NVIC_EnableIRQ>

}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000

080021ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_GPIO_Init+0x58>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <MX_GPIO_Init+0x58>)
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_GPIO_Init+0x58>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_GPIO_Init+0x58>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <MX_GPIO_Init+0x58>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6193      	str	r3, [r2, #24]
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_GPIO_Init+0x58>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_GPIO_Init+0x58>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <MX_GPIO_Init+0x58>)
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	6193      	str	r3, [r2, #24]
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <MX_GPIO_Init+0x58>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40021000 	.word	0x40021000

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <HAL_ADC_ConvCpltCallback>:

uint8_t buffUART[BUFFER_SIZE];
uint8_t PcData[BUFFER_SIZE];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
	RFCAdcValue = RFCKal.update(RFCAdcValue);
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_ADC_ConvCpltCallback+0x58>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fd82 	bl	8000d6c <__aeabi_ui2f>
 8002268:	4603      	mov	r3, r0
 800226a:	4619      	mov	r1, r3
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800226e:	f7ff f845 	bl	80012fc <_ZN6Kalman6updateEf>
 8002272:	4603      	mov	r3, r0
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ffd3 	bl	8001220 <__aeabi_f2uiz>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_ADC_ConvCpltCallback+0x58>)
 8002280:	801a      	strh	r2, [r3, #0]
	RFCAngle = RFCAdcValue*RFC_Factor;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_ADC_ConvCpltCallback+0x58>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fd73 	bl	8000d74 <__aeabi_i2f>
 800228e:	4602      	mov	r2, r0
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f7fe fdc0 	bl	8000e1c <__aeabi_fmul>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_ADC_ConvCpltCallback+0x64>)
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200004f4 	.word	0x200004f4
 80022b0:	20000468 	.word	0x20000468
 80022b4:	200004f8 	.word	0x200004f8
 80022b8:	20000500 	.word	0x20000500

080022bc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <HAL_UARTEx_RxEventCallback+0x40>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10f      	bne.n	80022f2 <HAL_UARTEx_RxEventCallback+0x36>
	{
		memset(PcData,0,BUFFER_SIZE);
 80022d2:	2264      	movs	r2, #100	; 0x64
 80022d4:	2100      	movs	r1, #0
 80022d6:	480a      	ldr	r0, [pc, #40]	; (8002300 <HAL_UARTEx_RxEventCallback+0x44>)
 80022d8:	f006 f920 	bl	800851c <memset>
		memcpy(PcData,buffUART,Size);
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	461a      	mov	r2, r3
 80022e0:	4908      	ldr	r1, [pc, #32]	; (8002304 <HAL_UARTEx_RxEventCallback+0x48>)
 80022e2:	4807      	ldr	r0, [pc, #28]	; (8002300 <HAL_UARTEx_RxEventCallback+0x44>)
 80022e4:	f006 f90c 	bl	8008500 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffUART, BUFFER_SIZE);
 80022e8:	2264      	movs	r2, #100	; 0x64
 80022ea:	4906      	ldr	r1, [pc, #24]	; (8002304 <HAL_UARTEx_RxEventCallback+0x48>)
 80022ec:	4806      	ldr	r0, [pc, #24]	; (8002308 <HAL_UARTEx_RxEventCallback+0x4c>)
 80022ee:	f004 fb60 	bl	80069b2 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40004400 	.word	0x40004400
 8002300:	20000568 	.word	0x20000568
 8002304:	20000504 	.word	0x20000504
 8002308:	200003b0 	.word	0x200003b0

0800230c <_Z10UARTRXInitv>:

void UARTRXInit(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffUART, BUFFER_SIZE);
 8002310:	2264      	movs	r2, #100	; 0x64
 8002312:	4907      	ldr	r1, [pc, #28]	; (8002330 <_Z10UARTRXInitv+0x24>)
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <_Z10UARTRXInitv+0x28>)
 8002316:	f004 fb4c 	bl	80069b2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_Z10UARTRXInitv+0x2c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <_Z10UARTRXInitv+0x2c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0204 	bic.w	r2, r2, #4
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000504 	.word	0x20000504
 8002334:	200003b0 	.word	0x200003b0
 8002338:	200003f4 	.word	0x200003f4

0800233c <_Z9RFC_Calibv>:

void RFC_Calib()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
	sprintf(tx2pcData,">.Bat dau hieu chinh RFC\r");
 8002342:	492d      	ldr	r1, [pc, #180]	; (80023f8 <_Z9RFC_Calibv+0xbc>)
 8002344:	482d      	ldr	r0, [pc, #180]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 8002346:	f006 fd51 	bl	8008dec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 800234a:	482c      	ldr	r0, [pc, #176]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 800234c:	f7fd ff6c 	bl	8000228 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	b29a      	uxth	r2, r3
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	4929      	ldr	r1, [pc, #164]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 8002358:	4829      	ldr	r0, [pc, #164]	; (8002400 <_Z9RFC_Calibv+0xc4>)
 800235a:	f004 fa98 	bl	800688e <HAL_UART_Transmit>
	while(1)
	{
		if(strstr((char*)PcData,"RFCCE"))
 800235e:	4929      	ldr	r1, [pc, #164]	; (8002404 <_Z9RFC_Calibv+0xc8>)
 8002360:	4829      	ldr	r0, [pc, #164]	; (8002408 <_Z9RFC_Calibv+0xcc>)
 8002362:	f006 fd63 	bl	8008e2c <strstr>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d027      	beq.n	80023bc <_Z9RFC_Calibv+0x80>
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <_Z9RFC_Calibv+0xcc>)
 800236e:	f8d3 3005 	ldr.w	r3, [r3, #5]
		{
			char str[5];
			memcpy(str,&PcData[5],4);
 8002372:	603b      	str	r3, [r7, #0]
			MinRFC = atoi(str);
 8002374:	463b      	mov	r3, r7
 8002376:	4618      	mov	r0, r3
 8002378:	f006 f894 	bl	80084a4 <atoi>
 800237c:	4603      	mov	r3, r0
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <_Z9RFC_Calibv+0xd0>)
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <_Z9RFC_Calibv+0xcc>)
 8002386:	f8d3 3009 	ldr.w	r3, [r3, #9]
			memcpy(str,&PcData[9],4);
 800238a:	603b      	str	r3, [r7, #0]
			MaxRFC = atoi(str);
 800238c:	463b      	mov	r3, r7
 800238e:	4618      	mov	r0, r3
 8002390:	f006 f888 	bl	80084a4 <atoi>
 8002394:	4603      	mov	r3, r0
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <_Z9RFC_Calibv+0xd4>)
 800239a:	801a      	strh	r2, [r3, #0]
			break;
 800239c:	bf00      	nop
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
		sprintf(tx2pcData,">%d\r",RFCAdcValue);
		HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
		HAL_Delay(3);
	}
	sprintf(tx2pcData,">.Hieu chinh RFC xong\r");
 800239e:	491d      	ldr	r1, [pc, #116]	; (8002414 <_Z9RFC_Calibv+0xd8>)
 80023a0:	4816      	ldr	r0, [pc, #88]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 80023a2:	f006 fd23 	bl	8008dec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 80023a6:	4815      	ldr	r0, [pc, #84]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 80023a8:	f7fd ff3e 	bl	8000228 <strlen>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	2364      	movs	r3, #100	; 0x64
 80023b2:	4912      	ldr	r1, [pc, #72]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 80023b4:	4812      	ldr	r0, [pc, #72]	; (8002400 <_Z9RFC_Calibv+0xc4>)
 80023b6:	f004 fa6a 	bl	800688e <HAL_UART_Transmit>
}
 80023ba:	e01a      	b.n	80023f2 <_Z9RFC_Calibv+0xb6>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 80023bc:	2201      	movs	r2, #1
 80023be:	4916      	ldr	r1, [pc, #88]	; (8002418 <_Z9RFC_Calibv+0xdc>)
 80023c0:	4816      	ldr	r0, [pc, #88]	; (800241c <_Z9RFC_Calibv+0xe0>)
 80023c2:	f000 fe83 	bl	80030cc <HAL_ADC_Start_DMA>
		sprintf(tx2pcData,">%d\r",RFCAdcValue);
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <_Z9RFC_Calibv+0xdc>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	4914      	ldr	r1, [pc, #80]	; (8002420 <_Z9RFC_Calibv+0xe4>)
 80023d0:	480a      	ldr	r0, [pc, #40]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 80023d2:	f006 fd0b 	bl	8008dec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 80023d6:	4809      	ldr	r0, [pc, #36]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 80023d8:	f7fd ff26 	bl	8000228 <strlen>
 80023dc:	4603      	mov	r3, r0
 80023de:	b29a      	uxth	r2, r3
 80023e0:	2364      	movs	r3, #100	; 0x64
 80023e2:	4906      	ldr	r1, [pc, #24]	; (80023fc <_Z9RFC_Calibv+0xc0>)
 80023e4:	4806      	ldr	r0, [pc, #24]	; (8002400 <_Z9RFC_Calibv+0xc4>)
 80023e6:	f004 fa52 	bl	800688e <HAL_UART_Transmit>
		HAL_Delay(3);
 80023ea:	2003      	movs	r0, #3
 80023ec:	f000 fd60 	bl	8002eb0 <HAL_Delay>
	}
 80023f0:	e7b5      	b.n	800235e <_Z9RFC_Calibv+0x22>
}
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	0800b418 	.word	0x0800b418
 80023fc:	20000478 	.word	0x20000478
 8002400:	200003b0 	.word	0x200003b0
 8002404:	0800b434 	.word	0x0800b434
 8002408:	20000568 	.word	0x20000568
 800240c:	20000004 	.word	0x20000004
 8002410:	20000006 	.word	0x20000006
 8002414:	0800b43c 	.word	0x0800b43c
 8002418:	200004f4 	.word	0x200004f4
 800241c:	200002a0 	.word	0x200002a0
 8002420:	0800b454 	.word	0x0800b454
 8002424:	00000000 	.word	0x00000000

08002428 <myMain>:

int myMain(void)
{
 8002428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800242c:	b094      	sub	sp, #80	; 0x50
 800242e:	af08      	add	r7, sp, #32
	MPU_ConfigTypeDef myMpuConfig;

	UARTRXInit();
 8002430:	f7ff ff6c 	bl	800230c <_Z10UARTRXInitv>
	//1. Initialise the MPU6050 module and I2C
	MPU6050_Init(&hi2c1, &myMpuConfig);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	4619      	mov	r1, r3
 800243a:	488d      	ldr	r0, [pc, #564]	; (8002670 <myMain+0x248>)
 800243c:	f7ff f8fe 	bl	800163c <MPU6050_Init>
	//2. Configure Accel and Gyro parameters
	myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 8002440:	2301      	movs	r3, #1
 8002442:	73bb      	strb	r3, [r7, #14]
	myMpuConfig.ClockSource = Internal_8MHz;
 8002444:	2300      	movs	r3, #0
 8002446:	733b      	strb	r3, [r7, #12]
	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 800244c:	2301      	movs	r3, #1
 800244e:	737b      	strb	r3, [r7, #13]
	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8002450:	2300      	movs	r3, #0
 8002452:	743b      	strb	r3, [r7, #16]
	MPU6050_Config();
 8002454:	f7ff f962 	bl	800171c <MPU6050_Config>

	Flash_Assign_Param(&MinRFC, &MaxRFC, MinRFC, MaxRFC);
 8002458:	4b86      	ldr	r3, [pc, #536]	; (8002674 <myMain+0x24c>)
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	4b86      	ldr	r3, [pc, #536]	; (8002678 <myMain+0x250>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	4985      	ldr	r1, [pc, #532]	; (8002678 <myMain+0x250>)
 8002462:	4884      	ldr	r0, [pc, #528]	; (8002674 <myMain+0x24c>)
 8002464:	f7ff fc9c 	bl	8001da0 <Flash_Assign_Param>
	// Init values
	Flash_Soft_GetOffset();
 8002468:	f7ff fd0e 	bl	8001e88 <Flash_Soft_GetOffset>
	RangeADC = MaxRFC - MinRFC;
 800246c:	4b82      	ldr	r3, [pc, #520]	; (8002678 <myMain+0x250>)
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	4b80      	ldr	r3, [pc, #512]	; (8002674 <myMain+0x24c>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b80      	ldr	r3, [pc, #512]	; (800267c <myMain+0x254>)
 800247a:	801a      	strh	r2, [r3, #0]
	RFC_Factor = 360.0f/RangeADC;
 800247c:	4b7f      	ldr	r3, [pc, #508]	; (800267c <myMain+0x254>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fc77 	bl	8000d74 <__aeabi_i2f>
 8002486:	4603      	mov	r3, r0
 8002488:	4619      	mov	r1, r3
 800248a:	487d      	ldr	r0, [pc, #500]	; (8002680 <myMain+0x258>)
 800248c:	f7fe fd7a 	bl	8000f84 <__aeabi_fdiv>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <myMain+0x25c>)
 8002496:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 8002498:	2201      	movs	r2, #1
 800249a:	497b      	ldr	r1, [pc, #492]	; (8002688 <myMain+0x260>)
 800249c:	487b      	ldr	r0, [pc, #492]	; (800268c <myMain+0x264>)
 800249e:	f000 fe15 	bl	80030cc <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim2);
 80024a2:	487b      	ldr	r0, [pc, #492]	; (8002690 <myMain+0x268>)
 80024a4:	f003 ff0e 	bl	80062c4 <HAL_TIM_Base_Start>
	uint32_t t_old = __HAL_TIM_GetCounter(&htim2);
 80024a8:	4b79      	ldr	r3, [pc, #484]	; (8002690 <myMain+0x268>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t init_loops = 50;
 80024b0:	2332      	movs	r3, #50	; 0x32
 80024b2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t num_loop = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	857b      	strh	r3, [r7, #42]	; 0x2a
	Roll_IMU = 0;
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <myMain+0x26c>)
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
	uint8_t cnt_trans = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	while (1)
	{
		cnt_trans++;
 80024c6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80024ca:	3301      	adds	r3, #1
 80024cc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (strstr((char*) PcData, "IMUCS"))
 80024d0:	4971      	ldr	r1, [pc, #452]	; (8002698 <myMain+0x270>)
 80024d2:	4872      	ldr	r0, [pc, #456]	; (800269c <myMain+0x274>)
 80024d4:	f006 fcaa 	bl	8008e2c <strstr>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d022      	beq.n	8002524 <myMain+0xfc>
		{
			sprintf(tx2pcData, ">Bat dau hieu chinh MPU6050\r");
 80024de:	4970      	ldr	r1, [pc, #448]	; (80026a0 <myMain+0x278>)
 80024e0:	4870      	ldr	r0, [pc, #448]	; (80026a4 <myMain+0x27c>)
 80024e2:	f006 fc83 	bl	8008dec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 80024e6:	486f      	ldr	r0, [pc, #444]	; (80026a4 <myMain+0x27c>)
 80024e8:	f7fd fe9e 	bl	8000228 <strlen>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	2364      	movs	r3, #100	; 0x64
 80024f2:	496c      	ldr	r1, [pc, #432]	; (80026a4 <myMain+0x27c>)
 80024f4:	486c      	ldr	r0, [pc, #432]	; (80026a8 <myMain+0x280>)
 80024f6:	f004 f9ca 	bl	800688e <HAL_UART_Transmit>
			CalibrateMPU6050();
 80024fa:	f7ff fa7d 	bl	80019f8 <CalibrateMPU6050>
			memset(PcData, 0, BUFFER_SIZE);
 80024fe:	2264      	movs	r2, #100	; 0x64
 8002500:	2100      	movs	r1, #0
 8002502:	4866      	ldr	r0, [pc, #408]	; (800269c <myMain+0x274>)
 8002504:	f006 f80a 	bl	800851c <memset>
			sprintf(tx2pcData, ">Hieu chinh xong\r");
 8002508:	4968      	ldr	r1, [pc, #416]	; (80026ac <myMain+0x284>)
 800250a:	4866      	ldr	r0, [pc, #408]	; (80026a4 <myMain+0x27c>)
 800250c:	f006 fc6e 	bl	8008dec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 8002510:	4864      	ldr	r0, [pc, #400]	; (80026a4 <myMain+0x27c>)
 8002512:	f7fd fe89 	bl	8000228 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	2364      	movs	r3, #100	; 0x64
 800251c:	4961      	ldr	r1, [pc, #388]	; (80026a4 <myMain+0x27c>)
 800251e:	4862      	ldr	r0, [pc, #392]	; (80026a8 <myMain+0x280>)
 8002520:	f004 f9b5 	bl	800688e <HAL_UART_Transmit>
		}
		if (strstr((char*) PcData, "RFCCS"))
 8002524:	4962      	ldr	r1, [pc, #392]	; (80026b0 <myMain+0x288>)
 8002526:	485d      	ldr	r0, [pc, #372]	; (800269c <myMain+0x274>)
 8002528:	f006 fc80 	bl	8008e2c <strstr>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d025      	beq.n	800257e <myMain+0x156>
		{
			RFC_Calib();
 8002532:	f7ff ff03 	bl	800233c <_Z9RFC_Calibv>
			memset(PcData, 0, BUFFER_SIZE);
 8002536:	2264      	movs	r2, #100	; 0x64
 8002538:	2100      	movs	r1, #0
 800253a:	4858      	ldr	r0, [pc, #352]	; (800269c <myMain+0x274>)
 800253c:	f005 ffee 	bl	800851c <memset>
			Flash_Soft_SetOffset(MinRFC, MaxRFC);
 8002540:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <myMain+0x24c>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <myMain+0x250>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f7ff fc4b 	bl	8001de8 <Flash_Soft_SetOffset>
			RangeADC = MaxRFC - MinRFC;
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <myMain+0x250>)
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <myMain+0x24c>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <myMain+0x254>)
 8002560:	801a      	strh	r2, [r3, #0]
			RFC_Factor = 360.0f / RangeADC;
 8002562:	4b46      	ldr	r3, [pc, #280]	; (800267c <myMain+0x254>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fc04 	bl	8000d74 <__aeabi_i2f>
 800256c:	4603      	mov	r3, r0
 800256e:	4619      	mov	r1, r3
 8002570:	4843      	ldr	r0, [pc, #268]	; (8002680 <myMain+0x258>)
 8002572:	f7fe fd07 	bl	8000f84 <__aeabi_fdiv>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	4b42      	ldr	r3, [pc, #264]	; (8002684 <myMain+0x25c>)
 800257c:	601a      	str	r2, [r3, #0]
		}

		if (Read_MPU_Calc(acc, gyr) != HAL_OK)
 800257e:	494d      	ldr	r1, [pc, #308]	; (80026b4 <myMain+0x28c>)
 8002580:	484d      	ldr	r0, [pc, #308]	; (80026b8 <myMain+0x290>)
 8002582:	f7ff fb5b 	bl	8001c3c <Read_MPU_Calc>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 813b 	bne.w	800280e <myMain+0x3e6>
			continue;

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 8002598:	2201      	movs	r2, #1
 800259a:	493b      	ldr	r1, [pc, #236]	; (8002688 <myMain+0x260>)
 800259c:	483b      	ldr	r0, [pc, #236]	; (800268c <myMain+0x264>)
 800259e:	f000 fd95 	bl	80030cc <HAL_ADC_Start_DMA>

		float wz = gyr[2];
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <myMain+0x28c>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	623b      	str	r3, [r7, #32]
		float gx = acc[1];
 80025a8:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <myMain+0x290>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61fb      	str	r3, [r7, #28]
		float gy = -acc[0];
 80025ae:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <myMain+0x290>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	61bb      	str	r3, [r7, #24]
		if (num_loop < init_loops)
 80025b8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80025ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025bc:	429a      	cmp	r2, r3
 80025be:	d216      	bcs.n	80025ee <myMain+0x1c6>
		{
			Roll_IMU += atan2(gy, gx);
 80025c0:	69f9      	ldr	r1, [r7, #28]
 80025c2:	69b8      	ldr	r0, [r7, #24]
 80025c4:	f7fe fe4c 	bl	8001260 <_ZSt5atan2ff>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <myMain+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7fe fb1b 	bl	8000c0c <__addsf3>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <myMain+0x26c>)
 80025dc:	601a      	str	r2, [r3, #0]
			t_old = __HAL_TIM_GetCounter(&htim2);
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <myMain+0x268>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			num_loop++;
 80025e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025e8:	3301      	adds	r3, #1
 80025ea:	857b      	strh	r3, [r7, #42]	; 0x2a
			continue;
 80025ec:	e110      	b.n	8002810 <myMain+0x3e8>
		}
		else if (num_loop == init_loops)
 80025ee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80025f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d117      	bne.n	8002626 <myMain+0x1fe>
		{
			Roll_IMU /= init_loops;
 80025f6:	4b27      	ldr	r3, [pc, #156]	; (8002694 <myMain+0x26c>)
 80025f8:	681c      	ldr	r4, [r3, #0]
 80025fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fbb9 	bl	8000d74 <__aeabi_i2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	4620      	mov	r0, r4
 8002608:	f7fe fcbc 	bl	8000f84 <__aeabi_fdiv>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <myMain+0x26c>)
 8002612:	601a      	str	r2, [r3, #0]
			Filter.init(Roll_IMU);
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <myMain+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	4828      	ldr	r0, [pc, #160]	; (80026bc <myMain+0x294>)
 800261c:	f7fe fed6 	bl	80013cc <_ZN10GradFilter4initEf>
			num_loop++;
 8002620:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002622:	3301      	adds	r3, #1
 8002624:	857b      	strh	r3, [r7, #42]	; 0x2a
		}

		uint32_t t_cur = __HAL_TIM_GetCounter(&htim2);
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <myMain+0x268>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	617b      	str	r3, [r7, #20]
		if(t_cur <= t_old)
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	429a      	cmp	r2, r3
 8002634:	d846      	bhi.n	80026c4 <myMain+0x29c>
		{
			T = (60000 - t_old + t_cur) * 0.0001;
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8002640:	3360      	adds	r3, #96	; 0x60
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ff3a 	bl	80004bc <__aeabi_ui2d>
 8002648:	a307      	add	r3, pc, #28	; (adr r3, 8002668 <myMain+0x240>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fd ffaf 	bl	80005b0 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe fa81 	bl	8000b60 <__aeabi_d2f>
 800265e:	4603      	mov	r3, r0
 8002660:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <myMain+0x298>)
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e042      	b.n	80026ec <myMain+0x2c4>
 8002666:	bf00      	nop
 8002668:	eb1c432d 	.word	0xeb1c432d
 800266c:	3f1a36e2 	.word	0x3f1a36e2
 8002670:	20000314 	.word	0x20000314
 8002674:	20000004 	.word	0x20000004
 8002678:	20000006 	.word	0x20000006
 800267c:	200004fc 	.word	0x200004fc
 8002680:	43b40000 	.word	0x43b40000
 8002684:	200004f8 	.word	0x200004f8
 8002688:	200004f4 	.word	0x200004f4
 800268c:	200002a0 	.word	0x200002a0
 8002690:	20000368 	.word	0x20000368
 8002694:	2000043c 	.word	0x2000043c
 8002698:	0800b45c 	.word	0x0800b45c
 800269c:	20000568 	.word	0x20000568
 80026a0:	0800b464 	.word	0x0800b464
 80026a4:	20000478 	.word	0x20000478
 80026a8:	200003b0 	.word	0x200003b0
 80026ac:	0800b484 	.word	0x0800b484
 80026b0:	0800b498 	.word	0x0800b498
 80026b4:	200004e8 	.word	0x200004e8
 80026b8:	200004dc 	.word	0x200004dc
 80026bc:	20000444 	.word	0x20000444
 80026c0:	20000438 	.word	0x20000438
		}
		else
		{
			T = (t_cur - t_old) * 0.0001;
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fef6 	bl	80004bc <__aeabi_ui2d>
 80026d0:	a351      	add	r3, pc, #324	; (adr r3, 8002818 <myMain+0x3f0>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd ff6b 	bl	80005b0 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7fe fa3d 	bl	8000b60 <__aeabi_d2f>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <myMain+0x3f8>)
 80026ea:	6013      	str	r3, [r2, #0]
		}
		t_old = t_cur;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		Roll_IMU = Filter.update(wz, gx, gy, T);
 80026f0:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <myMain+0x3f8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	6a39      	ldr	r1, [r7, #32]
 80026fc:	4849      	ldr	r0, [pc, #292]	; (8002824 <myMain+0x3fc>)
 80026fe:	f7fe fe73 	bl	80013e8 <_ZN10GradFilter6updateEffff>
 8002702:	4603      	mov	r3, r0
 8002704:	4a48      	ldr	r2, [pc, #288]	; (8002828 <myMain+0x400>)
 8002706:	6013      	str	r3, [r2, #0]
		Roll_IMU = Roll_IMU*(180 / PI);
 8002708:	4b48      	ldr	r3, [pc, #288]	; (800282c <myMain+0x404>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	4848      	ldr	r0, [pc, #288]	; (8002830 <myMain+0x408>)
 8002710:	f7fe fc38 	bl	8000f84 <__aeabi_fdiv>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b43      	ldr	r3, [pc, #268]	; (8002828 <myMain+0x400>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7fe fb7c 	bl	8000e1c <__aeabi_fmul>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <myMain+0x400>)
 800272a:	601a      	str	r2, [r3, #0]
		Roll_T = Roll_IMU - RFCAngle;
 800272c:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <myMain+0x400>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a40      	ldr	r2, [pc, #256]	; (8002834 <myMain+0x40c>)
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fa66 	bl	8000c08 <__aeabi_fsub>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <myMain+0x410>)
 8002742:	601a      	str	r2, [r3, #0]
		if(Roll_T >= 180)
 8002744:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <myMain+0x410>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4939      	ldr	r1, [pc, #228]	; (8002830 <myMain+0x408>)
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fd18 	bl	8001180 <__aeabi_fcmpge>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <myMain+0x344>
		{
			Roll_T -= 360;
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <myMain+0x410>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4938      	ldr	r1, [pc, #224]	; (800283c <myMain+0x414>)
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fa53 	bl	8000c08 <__aeabi_fsub>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	4b34      	ldr	r3, [pc, #208]	; (8002838 <myMain+0x410>)
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e012      	b.n	8002792 <myMain+0x36a>
		}
		else if(Roll_T < -180)
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <myMain+0x410>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4933      	ldr	r1, [pc, #204]	; (8002840 <myMain+0x418>)
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fcf0 	bl	8001158 <__aeabi_fcmplt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <myMain+0x36a>
		{
			Roll_T += 360;
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <myMain+0x410>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	492e      	ldr	r1, [pc, #184]	; (800283c <myMain+0x414>)
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fa41 	bl	8000c0c <__addsf3>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <myMain+0x410>)
 8002790:	601a      	str	r2, [r3, #0]
		}
		if(cnt_trans >= 10)
 8002792:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002796:	2b09      	cmp	r3, #9
 8002798:	f67f ae95 	bls.w	80024c6 <myMain+0x9e>
		{
			cnt_trans = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			sprintf(tx2pcData, ">%.4f*%.4f|%.4f|%.4f|%.4f\r\n", Roll_T, wz, gx, gy, T);
 80027a2:	4b25      	ldr	r3, [pc, #148]	; (8002838 <myMain+0x410>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd feaa 	bl	8000500 <__aeabi_f2d>
 80027ac:	e9c7 0100 	strd	r0, r1, [r7]
 80027b0:	6a38      	ldr	r0, [r7, #32]
 80027b2:	f7fd fea5 	bl	8000500 <__aeabi_f2d>
 80027b6:	4604      	mov	r4, r0
 80027b8:	460d      	mov	r5, r1
 80027ba:	69f8      	ldr	r0, [r7, #28]
 80027bc:	f7fd fea0 	bl	8000500 <__aeabi_f2d>
 80027c0:	4680      	mov	r8, r0
 80027c2:	4689      	mov	r9, r1
 80027c4:	69b8      	ldr	r0, [r7, #24]
 80027c6:	f7fd fe9b 	bl	8000500 <__aeabi_f2d>
 80027ca:	4682      	mov	sl, r0
 80027cc:	468b      	mov	fp, r1
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <myMain+0x3f8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fe94 	bl	8000500 <__aeabi_f2d>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80027e0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80027e4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027e8:	e9cd 4500 	strd	r4, r5, [sp]
 80027ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f0:	4914      	ldr	r1, [pc, #80]	; (8002844 <myMain+0x41c>)
 80027f2:	4815      	ldr	r0, [pc, #84]	; (8002848 <myMain+0x420>)
 80027f4:	f006 fafa 	bl	8008dec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 80027f8:	4813      	ldr	r0, [pc, #76]	; (8002848 <myMain+0x420>)
 80027fa:	f7fd fd15 	bl	8000228 <strlen>
 80027fe:	4603      	mov	r3, r0
 8002800:	b29a      	uxth	r2, r3
 8002802:	2364      	movs	r3, #100	; 0x64
 8002804:	4910      	ldr	r1, [pc, #64]	; (8002848 <myMain+0x420>)
 8002806:	4811      	ldr	r0, [pc, #68]	; (800284c <myMain+0x424>)
 8002808:	f004 f841 	bl	800688e <HAL_UART_Transmit>
 800280c:	e65b      	b.n	80024c6 <myMain+0x9e>
			continue;
 800280e:	bf00      	nop
		}
	}
 8002810:	e659      	b.n	80024c6 <myMain+0x9e>
 8002812:	bf00      	nop
 8002814:	f3af 8000 	nop.w
 8002818:	eb1c432d 	.word	0xeb1c432d
 800281c:	3f1a36e2 	.word	0x3f1a36e2
 8002820:	20000438 	.word	0x20000438
 8002824:	20000444 	.word	0x20000444
 8002828:	2000043c 	.word	0x2000043c
 800282c:	20000000 	.word	0x20000000
 8002830:	43340000 	.word	0x43340000
 8002834:	20000500 	.word	0x20000500
 8002838:	20000440 	.word	0x20000440
 800283c:	43b40000 	.word	0x43b40000
 8002840:	c3340000 	.word	0xc3340000
 8002844:	0800b4a0 	.word	0x0800b4a0
 8002848:	20000478 	.word	0x20000478
 800284c:	200003b0 	.word	0x200003b0

08002850 <_Z41__static_initialization_and_destruction_0ii>:
}
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d111      	bne.n	8002884 <_Z41__static_initialization_and_destruction_0ii+0x34>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002866:	4293      	cmp	r3, r2
 8002868:	d10c      	bne.n	8002884 <_Z41__static_initialization_and_destruction_0ii+0x34>
GradFilter Filter(15,1,-1);
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002872:	4906      	ldr	r1, [pc, #24]	; (800288c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002874:	4806      	ldr	r0, [pc, #24]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002876:	f7fe fd87 	bl	8001388 <_ZN10GradFilterC1Effi>
Kalman RFCKal(0);
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002880:	f7fe fd20 	bl	80012c4 <_ZN6KalmanC1Ef>
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	41700000 	.word	0x41700000
 8002890:	20000444 	.word	0x20000444
 8002894:	20000468 	.word	0x20000468

08002898 <_GLOBAL__sub_I_T>:
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
 800289c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7ff ffd5 	bl	8002850 <_Z41__static_initialization_and_destruction_0ii>
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_MspInit+0x5c>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	4a14      	ldr	r2, [pc, #80]	; (8002904 <HAL_MspInit+0x5c>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6193      	str	r3, [r2, #24]
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_MspInit+0x5c>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_MspInit+0x5c>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_MspInit+0x5c>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	61d3      	str	r3, [r2, #28]
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_MspInit+0x5c>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_MspInit+0x60>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_MspInit+0x60>)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000

0800290c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_ADC_MspInit+0xbc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d149      	bne.n	80029c0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_ADC_MspInit+0xc0>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <HAL_ADC_MspInit+0xc0>)
 8002932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_ADC_MspInit+0xc0>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_ADC_MspInit+0xc0>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_ADC_MspInit+0xc0>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_ADC_MspInit+0xc0>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800295c:	2302      	movs	r3, #2
 800295e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002960:	2303      	movs	r3, #3
 8002962:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	4619      	mov	r1, r3
 800296a:	4819      	ldr	r0, [pc, #100]	; (80029d0 <HAL_ADC_MspInit+0xc4>)
 800296c:	f001 fe28 	bl	80045c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 8002972:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_ADC_MspInit+0xcc>)
 8002974:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 800298a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 8002992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002996:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 800299a:	2220      	movs	r2, #32
 800299c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029a4:	480b      	ldr	r0, [pc, #44]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 80029a6:	f000 ff89 	bl	80038bc <HAL_DMA_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80029b0:	f7ff fc4a 	bl	8002248 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 80029b8:	621a      	str	r2, [r3, #32]
 80029ba:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_ADC_MspInit+0xc8>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40012400 	.word	0x40012400
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010800 	.word	0x40010800
 80029d4:	200002d0 	.word	0x200002d0
 80029d8:	40020008 	.word	0x40020008

080029dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <HAL_I2C_MspInit+0x70>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d123      	bne.n	8002a44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_I2C_MspInit+0x74>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <HAL_I2C_MspInit+0x74>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_I2C_MspInit+0x74>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a14:	23c0      	movs	r3, #192	; 0xc0
 8002a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a18:	2312      	movs	r3, #18
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	4619      	mov	r1, r3
 8002a26:	480b      	ldr	r0, [pc, #44]	; (8002a54 <HAL_I2C_MspInit+0x78>)
 8002a28:	f001 fdca 	bl	80045c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_I2C_MspInit+0x74>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_I2C_MspInit+0x74>)
 8002a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a36:	61d3      	str	r3, [r2, #28]
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_I2C_MspInit+0x74>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a44:	bf00      	nop
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40005400 	.word	0x40005400
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010c00 	.word	0x40010c00

08002a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d10b      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_TIM_Base_MspInit+0x34>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_TIM_Base_MspInit+0x34>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_TIM_Base_MspInit+0x34>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a32      	ldr	r2, [pc, #200]	; (8002b74 <HAL_UART_MspInit+0xe4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d15d      	bne.n	8002b6c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ab0:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_UART_MspInit+0xe8>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_UART_MspInit+0xe8>)
 8002ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aba:	61d3      	str	r3, [r2, #28]
 8002abc:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <HAL_UART_MspInit+0xe8>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_UART_MspInit+0xe8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_UART_MspInit+0xe8>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_UART_MspInit+0xe8>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	4619      	mov	r1, r3
 8002af2:	4822      	ldr	r0, [pc, #136]	; (8002b7c <HAL_UART_MspInit+0xec>)
 8002af4:	f001 fd64 	bl	80045c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002af8:	2308      	movs	r3, #8
 8002afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	4619      	mov	r1, r3
 8002b0a:	481c      	ldr	r0, [pc, #112]	; (8002b7c <HAL_UART_MspInit+0xec>)
 8002b0c:	f001 fd58 	bl	80045c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b12:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_UART_MspInit+0xf4>)
 8002b14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b40:	480f      	ldr	r0, [pc, #60]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b42:	f000 febb 	bl	80038bc <HAL_DMA_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002b4c:	f7ff fb7c 	bl	8002248 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_UART_MspInit+0xf0>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2026      	movs	r0, #38	; 0x26
 8002b62:	f000 fe74 	bl	800384e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b66:	2026      	movs	r0, #38	; 0x26
 8002b68:	f000 fe8d 	bl	8003886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b6c:	bf00      	nop
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	200003f4 	.word	0x200003f4
 8002b84:	4002006c 	.word	0x4002006c

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bce:	f000 f953 	bl	8002e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <DMA1_Channel1_IRQHandler+0x10>)
 8002bde:	f001 f885 	bl	8003cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200002d0 	.word	0x200002d0

08002bec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA1_Channel6_IRQHandler+0x10>)
 8002bf2:	f001 f87b 	bl	8003cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200003f4 	.word	0x200003f4

08002c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <USART2_IRQHandler+0x10>)
 8002c06:	f003 ff23 	bl	8006a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200003b0 	.word	0x200003b0

08002c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
	return 1;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <_kill>:

int _kill(int pid, int sig)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c2c:	f005 fc3e 	bl	80084ac <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2216      	movs	r2, #22
 8002c34:	601a      	str	r2, [r3, #0]
	return -1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_exit>:

void _exit (int status)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffe7 	bl	8002c22 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c54:	e7fe      	b.n	8002c54 <_exit+0x12>

08002c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e00a      	b.n	8002c7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c68:	f3af 8000 	nop.w
 8002c6c:	4601      	mov	r1, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	60ba      	str	r2, [r7, #8]
 8002c74:	b2ca      	uxtb	r2, r1
 8002c76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dbf0      	blt.n	8002c68 <_read+0x12>
	}

return len;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e009      	b.n	8002cb6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	60ba      	str	r2, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	dbf1      	blt.n	8002ca2 <_write+0x12>
	}
	return len;
 8002cbe:	687b      	ldr	r3, [r7, #4]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_close>:

int _close(int file)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cee:	605a      	str	r2, [r3, #4]
	return 0;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <_isatty>:

int _isatty(int file)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <_sbrk+0x5c>)
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <_sbrk+0x60>)
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <_sbrk+0x64>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <_sbrk+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d58:	f005 fba8 	bl	80084ac <__errno>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	e009      	b.n	8002d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <_sbrk+0x64>)
 8002d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000c000 	.word	0x2000c000
 8002d88:	00000400 	.word	0x00000400
 8002d8c:	200005cc 	.word	0x200005cc
 8002d90:	20000608 	.word	0x20000608

08002d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002da2:	490d      	ldr	r1, [pc, #52]	; (8002dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da8:	e002      	b.n	8002db0 <LoopCopyDataInit>

08002daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dae:	3304      	adds	r3, #4

08002db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db4:	d3f9      	bcc.n	8002daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002db8:	4c0a      	ldr	r4, [pc, #40]	; (8002de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dbc:	e001      	b.n	8002dc2 <LoopFillZerobss>

08002dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc0:	3204      	adds	r2, #4

08002dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc4:	d3fb      	bcc.n	8002dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dc6:	f7ff ffe5 	bl	8002d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dca:	f005 fb75 	bl	80084b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dce:	f7ff f891 	bl	8001ef4 <main>
  bx lr
 8002dd2:	4770      	bx	lr
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ddc:	0800bcd8 	.word	0x0800bcd8
  ldr r2, =_sbss
 8002de0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002de4:	20000608 	.word	0x20000608

08002de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC1_2_IRQHandler>
	...

08002dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_Init+0x28>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_Init+0x28>)
 8002df6:	f043 0310 	orr.w	r3, r3, #16
 8002dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f000 fd1b 	bl	8003838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f000 f808 	bl	8002e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e08:	f7ff fd4e 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_InitTick+0x54>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x58>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fd33 	bl	80038a2 <HAL_SYSTICK_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00e      	b.n	8002e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d80a      	bhi.n	8002e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f000 fcfb 	bl	800384e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e58:	4a06      	ldr	r2, [pc, #24]	; (8002e74 <HAL_InitTick+0x5c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	20000010 	.word	0x20000010
 8002e74:	2000000c 	.word	0x2000000c

08002e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_IncTick+0x1c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x20>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	4a03      	ldr	r2, [pc, #12]	; (8002e98 <HAL_IncTick+0x20>)
 8002e8a:	6013      	str	r3, [r2, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	20000010 	.word	0x20000010
 8002e98:	200005d0 	.word	0x200005d0

08002e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b02      	ldr	r3, [pc, #8]	; (8002eac <HAL_GetTick+0x10>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	200005d0 	.word	0x200005d0

08002eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff fff0 	bl	8002e9c <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d005      	beq.n	8002ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_Delay+0x44>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed6:	bf00      	nop
 8002ed8:	f7ff ffe0 	bl	8002e9c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d8f7      	bhi.n	8002ed8 <HAL_Delay+0x28>
  {
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000010 	.word	0x20000010

08002ef8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0ce      	b.n	80030b8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fce8 	bl	800290c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fb07 	bl	8003550 <ADC_ConversionStop_Disable>
 8002f42:	4603      	mov	r3, r0
 8002f44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 80a9 	bne.w	80030a6 <HAL_ADC_Init+0x1ae>
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 80a5 	bne.w	80030a6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f64:	f023 0302 	bic.w	r3, r3, #2
 8002f68:	f043 0202 	orr.w	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4951      	ldr	r1, [pc, #324]	; (80030c0 <HAL_ADC_Init+0x1c8>)
 8002f7a:	428b      	cmp	r3, r1
 8002f7c:	d10a      	bne.n	8002f94 <HAL_ADC_Init+0x9c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f86:	d002      	beq.n	8002f8e <HAL_ADC_Init+0x96>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	e004      	b.n	8002f98 <HAL_ADC_Init+0xa0>
 8002f8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f92:	e001      	b.n	8002f98 <HAL_ADC_Init+0xa0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7b1b      	ldrb	r3, [r3, #12]
 8002f9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb0:	d003      	beq.n	8002fba <HAL_ADC_Init+0xc2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d102      	bne.n	8002fc0 <HAL_ADC_Init+0xc8>
 8002fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADC_Init+0xca>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7d1b      	ldrb	r3, [r3, #20]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d119      	bne.n	8003004 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7b1b      	ldrb	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	035a      	lsls	r2, r3, #13
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e00b      	b.n	8003004 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_ADC_Init+0x1cc>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	430b      	orrs	r3, r1
 800302a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d003      	beq.n	800303e <HAL_ADC_Init+0x146>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d104      	bne.n	8003048 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	3b01      	subs	r3, #1
 8003044:	051b      	lsls	r3, r3, #20
 8003046:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	430a      	orrs	r2, r1
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_ADC_Init+0x1d0>)
 8003064:	4013      	ands	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d10b      	bne.n	8003084 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003082:	e018      	b.n	80030b6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f023 0312 	bic.w	r3, r3, #18
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a4:	e007      	b.n	80030b6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f043 0210 	orr.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40013c00 	.word	0x40013c00
 80030c4:	ffe1f7fd 	.word	0xffe1f7fd
 80030c8:	ff1f0efe 	.word	0xff1f0efe

080030cc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a64      	ldr	r2, [pc, #400]	; (8003274 <HAL_ADC_Start_DMA+0x1a8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_Start_DMA+0x24>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a63      	ldr	r2, [pc, #396]	; (8003278 <HAL_ADC_Start_DMA+0x1ac>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d106      	bne.n	80030fe <HAL_ADC_Start_DMA+0x32>
 80030f0:	4b60      	ldr	r3, [pc, #384]	; (8003274 <HAL_ADC_Start_DMA+0x1a8>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 80b3 	bne.w	8003264 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_ADC_Start_DMA+0x40>
 8003108:	2302      	movs	r3, #2
 800310a:	e0ae      	b.n	800326a <HAL_ADC_Start_DMA+0x19e>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f9c1 	bl	800349c <ADC_Enable>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 809a 	bne.w	800325a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4e      	ldr	r2, [pc, #312]	; (8003278 <HAL_ADC_Start_DMA+0x1ac>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d105      	bne.n	8003150 <HAL_ADC_Start_DMA+0x84>
 8003144:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <HAL_ADC_Start_DMA+0x1a8>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d115      	bne.n	800317c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003166:	2b00      	cmp	r3, #0
 8003168:	d026      	beq.n	80031b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003172:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800317a:	e01d      	b.n	80031b8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a39      	ldr	r2, [pc, #228]	; (8003274 <HAL_ADC_Start_DMA+0x1a8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_ADC_Start_DMA+0xd0>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <HAL_ADC_Start_DMA+0x1ac>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d10d      	bne.n	80031b8 <HAL_ADC_Start_DMA+0xec>
 800319c:	4b35      	ldr	r3, [pc, #212]	; (8003274 <HAL_ADC_Start_DMA+0x1a8>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	f023 0206 	bic.w	r2, r3, #6
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80031d0:	e002      	b.n	80031d8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_ADC_Start_DMA+0x1b0>)
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a24      	ldr	r2, [pc, #144]	; (8003280 <HAL_ADC_Start_DMA+0x1b4>)
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_ADC_Start_DMA+0x1b8>)
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0202 	mvn.w	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a18      	ldr	r0, [r3, #32]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	334c      	adds	r3, #76	; 0x4c
 800321c:	4619      	mov	r1, r3
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f000 fbc1 	bl	80039a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003230:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003234:	d108      	bne.n	8003248 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003244:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003246:	e00f      	b.n	8003268 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003256:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003258:	e006      	b.n	8003268 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003262:	e001      	b.n	8003268 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40012400 	.word	0x40012400
 8003278:	40012800 	.word	0x40012800
 800327c:	080035d3 	.word	0x080035d3
 8003280:	0800364f 	.word	0x0800364f
 8003284:	0800366b 	.word	0x0800366b

08003288 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x20>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0dc      	b.n	8003486 <HAL_ADC_ConfigChannel+0x1da>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d81c      	bhi.n	8003316 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	3b05      	subs	r3, #5
 80032ee:	221f      	movs	r2, #31
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4019      	ands	r1, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	3b05      	subs	r3, #5
 8003308:	fa00 f203 	lsl.w	r2, r0, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	635a      	str	r2, [r3, #52]	; 0x34
 8003314:	e03c      	b.n	8003390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d81c      	bhi.n	8003358 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	3b23      	subs	r3, #35	; 0x23
 8003330:	221f      	movs	r2, #31
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	4019      	ands	r1, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	3b23      	subs	r3, #35	; 0x23
 800334a:	fa00 f203 	lsl.w	r2, r0, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
 8003356:	e01b      	b.n	8003390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	3b41      	subs	r3, #65	; 0x41
 800336a:	221f      	movs	r2, #31
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	4019      	ands	r1, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b41      	subs	r3, #65	; 0x41
 8003384:	fa00 f203 	lsl.w	r2, r0, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b09      	cmp	r3, #9
 8003396:	d91c      	bls.n	80033d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68d9      	ldr	r1, [r3, #12]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	3b1e      	subs	r3, #30
 80033aa:	2207      	movs	r2, #7
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	4019      	ands	r1, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6898      	ldr	r0, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	3b1e      	subs	r3, #30
 80033c4:	fa00 f203 	lsl.w	r2, r0, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	e019      	b.n	8003406 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6919      	ldr	r1, [r3, #16]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4019      	ands	r1, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6898      	ldr	r0, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	fa00 f203 	lsl.w	r2, r0, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b10      	cmp	r3, #16
 800340c:	d003      	beq.n	8003416 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003412:	2b11      	cmp	r3, #17
 8003414:	d132      	bne.n	800347c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_ADC_ConfigChannel+0x1e4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d125      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d126      	bne.n	800347c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800343c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d11a      	bne.n	800347c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_ADC_ConfigChannel+0x1e8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <HAL_ADC_ConfigChannel+0x1ec>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0c9a      	lsrs	r2, r3, #18
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800345c:	e002      	b.n	8003464 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3b01      	subs	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f9      	bne.n	800345e <HAL_ADC_ConfigChannel+0x1b2>
 800346a:	e007      	b.n	800347c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	40012400 	.word	0x40012400
 8003494:	20000008 	.word	0x20000008
 8003498:	431bde83 	.word	0x431bde83

0800349c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d040      	beq.n	800353c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <ADC_Enable+0xac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <ADC_Enable+0xb0>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034d8:	e002      	b.n	80034e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3b01      	subs	r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f9      	bne.n	80034da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034e6:	f7ff fcd9 	bl	8002e9c <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034ec:	e01f      	b.n	800352e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034ee:	f7ff fcd5 	bl	8002e9c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d918      	bls.n	800352e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d011      	beq.n	800352e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e007      	b.n	800353e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d1d8      	bne.n	80034ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000008 	.word	0x20000008
 800354c:	431bde83 	.word	0x431bde83

08003550 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d12e      	bne.n	80035c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800357a:	f7ff fc8f 	bl	8002e9c <HAL_GetTick>
 800357e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003580:	e01b      	b.n	80035ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003582:	f7ff fc8b 	bl	8002e9c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d914      	bls.n	80035ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10d      	bne.n	80035ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e007      	b.n	80035ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d0dc      	beq.n	8003582 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d127      	bne.n	800363c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003602:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003606:	d115      	bne.n	8003634 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7fe fe0d 	bl	8002254 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800363a:	e004      	b.n	8003646 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fe13 	bl	8003288 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff fe02 	bl	800329a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036bc:	4013      	ands	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036d2:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	60d3      	str	r3, [r2, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <__NVIC_GetPriorityGrouping+0x18>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 0307 	and.w	r3, r3, #7
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	2b00      	cmp	r3, #0
 8003714:	db0b      	blt.n	800372e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4906      	ldr	r1, [pc, #24]	; (8003738 <__NVIC_EnableIRQ+0x34>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2001      	movs	r0, #1
 8003726:	fa00 f202 	lsl.w	r2, r0, r2
 800372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100

0800373c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	6039      	str	r1, [r7, #0]
 8003746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	2b00      	cmp	r3, #0
 800374e:	db0a      	blt.n	8003766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	490c      	ldr	r1, [pc, #48]	; (8003788 <__NVIC_SetPriority+0x4c>)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	0112      	lsls	r2, r2, #4
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	440b      	add	r3, r1
 8003760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003764:	e00a      	b.n	800377c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4908      	ldr	r1, [pc, #32]	; (800378c <__NVIC_SetPriority+0x50>)
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	3b04      	subs	r3, #4
 8003774:	0112      	lsls	r2, r2, #4
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	440b      	add	r3, r1
 800377a:	761a      	strb	r2, [r3, #24]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000e100 	.word	0xe000e100
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f1c3 0307 	rsb	r3, r3, #7
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	bf28      	it	cs
 80037ae:	2304      	movcs	r3, #4
 80037b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d902      	bls.n	80037c0 <NVIC_EncodePriority+0x30>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3b03      	subs	r3, #3
 80037be:	e000      	b.n	80037c2 <NVIC_EncodePriority+0x32>
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43da      	mvns	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	401a      	ands	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d8:	f04f 31ff 	mov.w	r1, #4294967295
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	43d9      	mvns	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e8:	4313      	orrs	r3, r2
         );
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3724      	adds	r7, #36	; 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003804:	d301      	bcc.n	800380a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003806:	2301      	movs	r3, #1
 8003808:	e00f      	b.n	800382a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <SysTick_Config+0x40>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003812:	210f      	movs	r1, #15
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f7ff ff90 	bl	800373c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <SysTick_Config+0x40>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <SysTick_Config+0x40>)
 8003824:	2207      	movs	r2, #7
 8003826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	e000e010 	.word	0xe000e010

08003838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff2d 	bl	80036a0 <__NVIC_SetPriorityGrouping>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003860:	f7ff ff42 	bl	80036e8 <__NVIC_GetPriorityGrouping>
 8003864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f7ff ff90 	bl	8003790 <NVIC_EncodePriority>
 8003870:	4602      	mov	r2, r0
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff5f 	bl	800373c <__NVIC_SetPriority>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	4603      	mov	r3, r0
 800388e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff35 	bl	8003704 <__NVIC_EnableIRQ>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ffa2 	bl	80037f4 <SysTick_Config>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e059      	b.n	8003986 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_DMA_Init+0xd4>)
 80038da:	429a      	cmp	r2, r3
 80038dc:	d80f      	bhi.n	80038fe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <HAL_DMA_Init+0xd8>)
 80038e6:	4413      	add	r3, r2
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <HAL_DMA_Init+0xdc>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	009a      	lsls	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <HAL_DMA_Init+0xe0>)
 80038fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80038fc:	e00e      	b.n	800391c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_DMA_Init+0xe4>)
 8003906:	4413      	add	r3, r2
 8003908:	4a23      	ldr	r2, [pc, #140]	; (8003998 <HAL_DMA_Init+0xdc>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	009a      	lsls	r2, r3, #2
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a22      	ldr	r2, [pc, #136]	; (80039a4 <HAL_DMA_Init+0xe8>)
 800391a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003932:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003936:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	40020407 	.word	0x40020407
 8003994:	bffdfff8 	.word	0xbffdfff8
 8003998:	cccccccd 	.word	0xcccccccd
 800399c:	40020000 	.word	0x40020000
 80039a0:	bffdfbf8 	.word	0xbffdfbf8
 80039a4:	40020400 	.word	0x40020400

080039a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_DMA_Start_IT+0x20>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e04a      	b.n	8003a5e <HAL_DMA_Start_IT+0xb6>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d13a      	bne.n	8003a50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fbb0 	bl	8004164 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 020e 	orr.w	r2, r2, #14
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e00f      	b.n	8003a3e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0204 	bic.w	r2, r2, #4
 8003a2c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 020a 	orr.w	r2, r2, #10
 8003a3c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e005      	b.n	8003a5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d008      	beq.n	8003a8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e020      	b.n	8003ad0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 020e 	bic.w	r2, r2, #14
 8003a9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d005      	beq.n	8003afe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e0d6      	b.n	8003cac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 020e 	bic.w	r2, r2, #14
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d958      	bls.n	8003bdc <HAL_DMA_Abort_IT+0x100>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a63      	ldr	r2, [pc, #396]	; (8003cbc <HAL_DMA_Abort_IT+0x1e0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04f      	beq.n	8003bd4 <HAL_DMA_Abort_IT+0xf8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <HAL_DMA_Abort_IT+0x1e4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d048      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0xf4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a60      	ldr	r2, [pc, #384]	; (8003cc4 <HAL_DMA_Abort_IT+0x1e8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_Abort_IT+0xee>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5e      	ldr	r2, [pc, #376]	; (8003cc8 <HAL_DMA_Abort_IT+0x1ec>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d038      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0xe8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a5d      	ldr	r2, [pc, #372]	; (8003ccc <HAL_DMA_Abort_IT+0x1f0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d030      	beq.n	8003bbe <HAL_DMA_Abort_IT+0xe2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5b      	ldr	r2, [pc, #364]	; (8003cd0 <HAL_DMA_Abort_IT+0x1f4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d028      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0xdc>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a53      	ldr	r2, [pc, #332]	; (8003cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d020      	beq.n	8003bb2 <HAL_DMA_Abort_IT+0xd6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a57      	ldr	r2, [pc, #348]	; (8003cd4 <HAL_DMA_Abort_IT+0x1f8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_DMA_Abort_IT+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_DMA_Abort_IT+0x1fc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d012      	beq.n	8003baa <HAL_DMA_Abort_IT+0xce>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a54      	ldr	r2, [pc, #336]	; (8003cdc <HAL_DMA_Abort_IT+0x200>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a53      	ldr	r2, [pc, #332]	; (8003ce0 <HAL_DMA_Abort_IT+0x204>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d102      	bne.n	8003b9e <HAL_DMA_Abort_IT+0xc2>
 8003b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b9c:	e01b      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba2:	e018      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ba8:	e015      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003baa:	2310      	movs	r3, #16
 8003bac:	e013      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e011      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bb6:	e00e      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bbc:	e00b      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bc2:	e008      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc8:	e005      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bce:	e002      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	e000      	b.n	8003bd6 <HAL_DMA_Abort_IT+0xfa>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4a43      	ldr	r2, [pc, #268]	; (8003ce4 <HAL_DMA_Abort_IT+0x208>)
 8003bd8:	6053      	str	r3, [r2, #4]
 8003bda:	e057      	b.n	8003c8c <HAL_DMA_Abort_IT+0x1b0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a36      	ldr	r2, [pc, #216]	; (8003cbc <HAL_DMA_Abort_IT+0x1e0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d04f      	beq.n	8003c86 <HAL_DMA_Abort_IT+0x1aa>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a35      	ldr	r2, [pc, #212]	; (8003cc0 <HAL_DMA_Abort_IT+0x1e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d048      	beq.n	8003c82 <HAL_DMA_Abort_IT+0x1a6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a33      	ldr	r2, [pc, #204]	; (8003cc4 <HAL_DMA_Abort_IT+0x1e8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d040      	beq.n	8003c7c <HAL_DMA_Abort_IT+0x1a0>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a32      	ldr	r2, [pc, #200]	; (8003cc8 <HAL_DMA_Abort_IT+0x1ec>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d038      	beq.n	8003c76 <HAL_DMA_Abort_IT+0x19a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a30      	ldr	r2, [pc, #192]	; (8003ccc <HAL_DMA_Abort_IT+0x1f0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d030      	beq.n	8003c70 <HAL_DMA_Abort_IT+0x194>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2f      	ldr	r2, [pc, #188]	; (8003cd0 <HAL_DMA_Abort_IT+0x1f4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d028      	beq.n	8003c6a <HAL_DMA_Abort_IT+0x18e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a26      	ldr	r2, [pc, #152]	; (8003cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d020      	beq.n	8003c64 <HAL_DMA_Abort_IT+0x188>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2b      	ldr	r2, [pc, #172]	; (8003cd4 <HAL_DMA_Abort_IT+0x1f8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d019      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x184>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a29      	ldr	r2, [pc, #164]	; (8003cd8 <HAL_DMA_Abort_IT+0x1fc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d012      	beq.n	8003c5c <HAL_DMA_Abort_IT+0x180>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a28      	ldr	r2, [pc, #160]	; (8003cdc <HAL_DMA_Abort_IT+0x200>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00a      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x17a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <HAL_DMA_Abort_IT+0x204>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d102      	bne.n	8003c50 <HAL_DMA_Abort_IT+0x174>
 8003c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4e:	e01b      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c54:	e018      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c5a:	e015      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	e013      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e011      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c68:	e00e      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c6e:	e00b      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c74:	e008      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c7a:	e005      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c80:	e002      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c82:	2310      	movs	r3, #16
 8003c84:	e000      	b.n	8003c88 <HAL_DMA_Abort_IT+0x1ac>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <HAL_DMA_Abort_IT+0x20c>)
 8003c8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
    } 
  }
  return status;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40020080 	.word	0x40020080
 8003cbc:	40020008 	.word	0x40020008
 8003cc0:	4002001c 	.word	0x4002001c
 8003cc4:	40020030 	.word	0x40020030
 8003cc8:	40020044 	.word	0x40020044
 8003ccc:	40020058 	.word	0x40020058
 8003cd0:	4002006c 	.word	0x4002006c
 8003cd4:	40020408 	.word	0x40020408
 8003cd8:	4002041c 	.word	0x4002041c
 8003cdc:	40020430 	.word	0x40020430
 8003ce0:	40020444 	.word	0x40020444
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020000 	.word	0x40020000

08003cec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	2204      	movs	r2, #4
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80f1 	beq.w	8003ef8 <HAL_DMA_IRQHandler+0x20c>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80eb 	beq.w	8003ef8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d107      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b5f      	ldr	r3, [pc, #380]	; (8003ec4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d958      	bls.n	8003dfe <HAL_DMA_IRQHandler+0x112>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5d      	ldr	r2, [pc, #372]	; (8003ec8 <HAL_DMA_IRQHandler+0x1dc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04f      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x10a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ecc <HAL_DMA_IRQHandler+0x1e0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d048      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x106>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a5a      	ldr	r2, [pc, #360]	; (8003ed0 <HAL_DMA_IRQHandler+0x1e4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d040      	beq.n	8003dec <HAL_DMA_IRQHandler+0x100>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a59      	ldr	r2, [pc, #356]	; (8003ed4 <HAL_DMA_IRQHandler+0x1e8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d038      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xfa>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a57      	ldr	r2, [pc, #348]	; (8003ed8 <HAL_DMA_IRQHandler+0x1ec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d030      	beq.n	8003de0 <HAL_DMA_IRQHandler+0xf4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a56      	ldr	r2, [pc, #344]	; (8003edc <HAL_DMA_IRQHandler+0x1f0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d028      	beq.n	8003dda <HAL_DMA_IRQHandler+0xee>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a4d      	ldr	r2, [pc, #308]	; (8003ec4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d020      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0xe8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_DMA_IRQHandler+0x1f4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d019      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0xe4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a50      	ldr	r2, [pc, #320]	; (8003ee4 <HAL_DMA_IRQHandler+0x1f8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d012      	beq.n	8003dcc <HAL_DMA_IRQHandler+0xe0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a4f      	ldr	r2, [pc, #316]	; (8003ee8 <HAL_DMA_IRQHandler+0x1fc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00a      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xda>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a4d      	ldr	r2, [pc, #308]	; (8003eec <HAL_DMA_IRQHandler+0x200>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d102      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0xd4>
 8003dba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dbe:	e01b      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003dc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dc4:	e018      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dca:	e015      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003dcc:	2340      	movs	r3, #64	; 0x40
 8003dce:	e013      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e011      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003dd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dd8:	e00e      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dde:	e00b      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003de0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003de4:	e008      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003de6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dea:	e005      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df0:	e002      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_IRQHandler+0x10c>
 8003df6:	2304      	movs	r3, #4
 8003df8:	4a3d      	ldr	r2, [pc, #244]	; (8003ef0 <HAL_DMA_IRQHandler+0x204>)
 8003dfa:	6053      	str	r3, [r2, #4]
 8003dfc:	e057      	b.n	8003eae <HAL_DMA_IRQHandler+0x1c2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a31      	ldr	r2, [pc, #196]	; (8003ec8 <HAL_DMA_IRQHandler+0x1dc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d04f      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x1bc>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ecc <HAL_DMA_IRQHandler+0x1e0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d048      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x1b8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2e      	ldr	r2, [pc, #184]	; (8003ed0 <HAL_DMA_IRQHandler+0x1e4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d040      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x1b2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2c      	ldr	r2, [pc, #176]	; (8003ed4 <HAL_DMA_IRQHandler+0x1e8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d038      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x1ac>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ed8 <HAL_DMA_IRQHandler+0x1ec>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d030      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x1a6>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a29      	ldr	r2, [pc, #164]	; (8003edc <HAL_DMA_IRQHandler+0x1f0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d028      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x1a0>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <HAL_DMA_IRQHandler+0x1d8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d020      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x19a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <HAL_DMA_IRQHandler+0x1f4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d019      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x196>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <HAL_DMA_IRQHandler+0x1f8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d012      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x192>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <HAL_DMA_IRQHandler+0x1fc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00a      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x18c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a21      	ldr	r2, [pc, #132]	; (8003eec <HAL_DMA_IRQHandler+0x200>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x186>
 8003e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e70:	e01b      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e76:	e018      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e7c:	e015      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	e013      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e82:	2304      	movs	r3, #4
 8003e84:	e011      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e8a:	e00e      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e90:	e00b      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e96:	e008      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e9c:	e005      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea2:	e002      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003ea4:	2340      	movs	r3, #64	; 0x40
 8003ea6:	e000      	b.n	8003eaa <HAL_DMA_IRQHandler+0x1be>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <HAL_DMA_IRQHandler+0x208>)
 8003eac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8136 	beq.w	8004124 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ec0:	e130      	b.n	8004124 <HAL_DMA_IRQHandler+0x438>
 8003ec2:	bf00      	nop
 8003ec4:	40020080 	.word	0x40020080
 8003ec8:	40020008 	.word	0x40020008
 8003ecc:	4002001c 	.word	0x4002001c
 8003ed0:	40020030 	.word	0x40020030
 8003ed4:	40020044 	.word	0x40020044
 8003ed8:	40020058 	.word	0x40020058
 8003edc:	4002006c 	.word	0x4002006c
 8003ee0:	40020408 	.word	0x40020408
 8003ee4:	4002041c 	.word	0x4002041c
 8003ee8:	40020430 	.word	0x40020430
 8003eec:	40020444 	.word	0x40020444
 8003ef0:	40020400 	.word	0x40020400
 8003ef4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	2202      	movs	r2, #2
 8003efe:	409a      	lsls	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80dd 	beq.w	80040c4 <HAL_DMA_IRQHandler+0x3d8>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80d7 	beq.w	80040c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 020a 	bic.w	r2, r2, #10
 8003f32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <HAL_DMA_IRQHandler+0x444>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d958      	bls.n	8003ffa <HAL_DMA_IRQHandler+0x30e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a79      	ldr	r2, [pc, #484]	; (8004134 <HAL_DMA_IRQHandler+0x448>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d04f      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x306>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a78      	ldr	r2, [pc, #480]	; (8004138 <HAL_DMA_IRQHandler+0x44c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d048      	beq.n	8003fee <HAL_DMA_IRQHandler+0x302>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a76      	ldr	r2, [pc, #472]	; (800413c <HAL_DMA_IRQHandler+0x450>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d040      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x2fc>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a75      	ldr	r2, [pc, #468]	; (8004140 <HAL_DMA_IRQHandler+0x454>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d038      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2f6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a73      	ldr	r2, [pc, #460]	; (8004144 <HAL_DMA_IRQHandler+0x458>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d030      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x2f0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a72      	ldr	r2, [pc, #456]	; (8004148 <HAL_DMA_IRQHandler+0x45c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d028      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x2ea>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a69      	ldr	r2, [pc, #420]	; (8004130 <HAL_DMA_IRQHandler+0x444>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d020      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2e4>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6e      	ldr	r2, [pc, #440]	; (800414c <HAL_DMA_IRQHandler+0x460>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d019      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x2e0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6c      	ldr	r2, [pc, #432]	; (8004150 <HAL_DMA_IRQHandler+0x464>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d012      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x2dc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a6b      	ldr	r2, [pc, #428]	; (8004154 <HAL_DMA_IRQHandler+0x468>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00a      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x2d6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a69      	ldr	r2, [pc, #420]	; (8004158 <HAL_DMA_IRQHandler+0x46c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d102      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x2d0>
 8003fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fba:	e01b      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fc0:	e018      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc6:	e015      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e013      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e011      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fd4:	e00e      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fda:	e00b      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fe0:	e008      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe6:	e005      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fec:	e002      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e000      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x308>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	4a59      	ldr	r2, [pc, #356]	; (800415c <HAL_DMA_IRQHandler+0x470>)
 8003ff6:	6053      	str	r3, [r2, #4]
 8003ff8:	e057      	b.n	80040aa <HAL_DMA_IRQHandler+0x3be>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a4d      	ldr	r2, [pc, #308]	; (8004134 <HAL_DMA_IRQHandler+0x448>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d04f      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x3b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4b      	ldr	r2, [pc, #300]	; (8004138 <HAL_DMA_IRQHandler+0x44c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d048      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x3b4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a4a      	ldr	r2, [pc, #296]	; (800413c <HAL_DMA_IRQHandler+0x450>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d040      	beq.n	800409a <HAL_DMA_IRQHandler+0x3ae>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a48      	ldr	r2, [pc, #288]	; (8004140 <HAL_DMA_IRQHandler+0x454>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d038      	beq.n	8004094 <HAL_DMA_IRQHandler+0x3a8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a47      	ldr	r2, [pc, #284]	; (8004144 <HAL_DMA_IRQHandler+0x458>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d030      	beq.n	800408e <HAL_DMA_IRQHandler+0x3a2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a45      	ldr	r2, [pc, #276]	; (8004148 <HAL_DMA_IRQHandler+0x45c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d028      	beq.n	8004088 <HAL_DMA_IRQHandler+0x39c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3d      	ldr	r2, [pc, #244]	; (8004130 <HAL_DMA_IRQHandler+0x444>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d020      	beq.n	8004082 <HAL_DMA_IRQHandler+0x396>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a41      	ldr	r2, [pc, #260]	; (800414c <HAL_DMA_IRQHandler+0x460>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d019      	beq.n	800407e <HAL_DMA_IRQHandler+0x392>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a40      	ldr	r2, [pc, #256]	; (8004150 <HAL_DMA_IRQHandler+0x464>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d012      	beq.n	800407a <HAL_DMA_IRQHandler+0x38e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3e      	ldr	r2, [pc, #248]	; (8004154 <HAL_DMA_IRQHandler+0x468>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00a      	beq.n	8004074 <HAL_DMA_IRQHandler+0x388>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3d      	ldr	r2, [pc, #244]	; (8004158 <HAL_DMA_IRQHandler+0x46c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d102      	bne.n	800406e <HAL_DMA_IRQHandler+0x382>
 8004068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800406c:	e01b      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 800406e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004072:	e018      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 8004074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004078:	e015      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 800407a:	2320      	movs	r3, #32
 800407c:	e013      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 800407e:	2302      	movs	r3, #2
 8004080:	e011      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 8004082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004086:	e00e      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 8004088:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800408c:	e00b      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 800408e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004092:	e008      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 8004094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004098:	e005      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 800409a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409e:	e002      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 80040a0:	2320      	movs	r3, #32
 80040a2:	e000      	b.n	80040a6 <HAL_DMA_IRQHandler+0x3ba>
 80040a4:	2302      	movs	r3, #2
 80040a6:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <HAL_DMA_IRQHandler+0x474>)
 80040a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d034      	beq.n	8004124 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040c2:	e02f      	b.n	8004124 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2208      	movs	r2, #8
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d028      	beq.n	8004126 <HAL_DMA_IRQHandler+0x43a>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d023      	beq.n	8004126 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 020e 	bic.w	r2, r2, #14
 80040ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	2101      	movs	r1, #1
 80040f8:	fa01 f202 	lsl.w	r2, r1, r2
 80040fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
    }
  }
  return;
 8004124:	bf00      	nop
 8004126:	bf00      	nop
}
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40020080 	.word	0x40020080
 8004134:	40020008 	.word	0x40020008
 8004138:	4002001c 	.word	0x4002001c
 800413c:	40020030 	.word	0x40020030
 8004140:	40020044 	.word	0x40020044
 8004144:	40020058 	.word	0x40020058
 8004148:	4002006c 	.word	0x4002006c
 800414c:	40020408 	.word	0x40020408
 8004150:	4002041c 	.word	0x4002041c
 8004154:	40020430 	.word	0x40020430
 8004158:	40020444 	.word	0x40020444
 800415c:	40020400 	.word	0x40020400
 8004160:	40020000 	.word	0x40020000

08004164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b10      	cmp	r3, #16
 8004190:	d108      	bne.n	80041a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041a2:	e007      	b.n	80041b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041da:	4b2f      	ldr	r3, [pc, #188]	; (8004298 <HAL_FLASH_Program+0xd8>)
 80041dc:	7e1b      	ldrb	r3, [r3, #24]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_FLASH_Program+0x26>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e054      	b.n	8004290 <HAL_FLASH_Program+0xd0>
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <HAL_FLASH_Program+0xd8>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041f0:	f000 f8a8 	bl	8004344 <FLASH_WaitForLastOperation>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d144      	bne.n	8004288 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d102      	bne.n	800420a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004204:	2301      	movs	r3, #1
 8004206:	757b      	strb	r3, [r7, #21]
 8004208:	e007      	b.n	800421a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d102      	bne.n	8004216 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004210:	2302      	movs	r3, #2
 8004212:	757b      	strb	r3, [r7, #21]
 8004214:	e001      	b.n	800421a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004216:	2304      	movs	r3, #4
 8004218:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800421a:	2300      	movs	r3, #0
 800421c:	75bb      	strb	r3, [r7, #22]
 800421e:	e02d      	b.n	800427c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004220:	7dbb      	ldrb	r3, [r7, #22]
 8004222:	005a      	lsls	r2, r3, #1
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	eb02 0c03 	add.w	ip, r2, r3
 800422a:	7dbb      	ldrb	r3, [r7, #22]
 800422c:	0119      	lsls	r1, r3, #4
 800422e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004232:	f1c1 0620 	rsb	r6, r1, #32
 8004236:	f1a1 0020 	sub.w	r0, r1, #32
 800423a:	fa22 f401 	lsr.w	r4, r2, r1
 800423e:	fa03 f606 	lsl.w	r6, r3, r6
 8004242:	4334      	orrs	r4, r6
 8004244:	fa23 f000 	lsr.w	r0, r3, r0
 8004248:	4304      	orrs	r4, r0
 800424a:	fa23 f501 	lsr.w	r5, r3, r1
 800424e:	b2a3      	uxth	r3, r4
 8004250:	4619      	mov	r1, r3
 8004252:	4660      	mov	r0, ip
 8004254:	f000 f85a 	bl	800430c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004258:	f24c 3050 	movw	r0, #50000	; 0xc350
 800425c:	f000 f872 	bl	8004344 <FLASH_WaitForLastOperation>
 8004260:	4603      	mov	r3, r0
 8004262:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_FLASH_Program+0xdc>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	4a0c      	ldr	r2, [pc, #48]	; (800429c <HAL_FLASH_Program+0xdc>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004276:	7dbb      	ldrb	r3, [r7, #22]
 8004278:	3301      	adds	r3, #1
 800427a:	75bb      	strb	r3, [r7, #22]
 800427c:	7dba      	ldrb	r2, [r7, #22]
 800427e:	7d7b      	ldrb	r3, [r7, #21]
 8004280:	429a      	cmp	r2, r3
 8004282:	d3cd      	bcc.n	8004220 <HAL_FLASH_Program+0x60>
 8004284:	e000      	b.n	8004288 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004286:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_FLASH_Program+0xd8>)
 800428a:	2200      	movs	r2, #0
 800428c:	761a      	strb	r2, [r3, #24]

  return status;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004290:	4618      	mov	r0, r3
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004298:	200005d8 	.word	0x200005d8
 800429c:	40022000 	.word	0x40022000

080042a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_FLASH_Unlock+0x40>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <HAL_FLASH_Unlock+0x40>)
 80042b8:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <HAL_FLASH_Unlock+0x44>)
 80042ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_FLASH_Unlock+0x40>)
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <HAL_FLASH_Unlock+0x48>)
 80042c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_FLASH_Unlock+0x40>)
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80042d2:	79fb      	ldrb	r3, [r7, #7]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40022000 	.word	0x40022000
 80042e4:	45670123 	.word	0x45670123
 80042e8:	cdef89ab 	.word	0xcdef89ab

080042ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_FLASH_Lock+0x1c>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_FLASH_Lock+0x1c>)
 80042f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40022000 	.word	0x40022000

0800430c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <FLASH_Program_HalfWord+0x30>)
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <FLASH_Program_HalfWord+0x34>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	4a07      	ldr	r2, [pc, #28]	; (8004340 <FLASH_Program_HalfWord+0x34>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	801a      	strh	r2, [r3, #0]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200005d8 	.word	0x200005d8
 8004340:	40022000 	.word	0x40022000

08004344 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800434c:	f7fe fda6 	bl	8002e9c <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004352:	e010      	b.n	8004376 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d00c      	beq.n	8004376 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <FLASH_WaitForLastOperation+0x2e>
 8004362:	f7fe fd9b 	bl	8002e9c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d201      	bcs.n	8004376 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e025      	b.n	80043c2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <FLASH_WaitForLastOperation+0x88>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e8      	bne.n	8004354 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <FLASH_WaitForLastOperation+0x88>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <FLASH_WaitForLastOperation+0x88>)
 8004390:	2220      	movs	r2, #32
 8004392:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <FLASH_WaitForLastOperation+0x88>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <FLASH_WaitForLastOperation+0x88>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <FLASH_WaitForLastOperation+0x88>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80043b8:	f000 f80a 	bl	80043d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40022000 	.word	0x40022000

080043d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <FLASH_SetErrorCode+0x98>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80043e6:	4b21      	ldr	r3, [pc, #132]	; (800446c <FLASH_SetErrorCode+0x9c>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	4a1f      	ldr	r2, [pc, #124]	; (800446c <FLASH_SetErrorCode+0x9c>)
 80043f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f043 0310 	orr.w	r3, r3, #16
 80043f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043fa:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <FLASH_SetErrorCode+0x98>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004406:	4b19      	ldr	r3, [pc, #100]	; (800446c <FLASH_SetErrorCode+0x9c>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <FLASH_SetErrorCode+0x9c>)
 8004410:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <FLASH_SetErrorCode+0x98>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004426:	4b11      	ldr	r3, [pc, #68]	; (800446c <FLASH_SetErrorCode+0x9c>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f043 0304 	orr.w	r3, r3, #4
 800442e:	4a0f      	ldr	r2, [pc, #60]	; (800446c <FLASH_SetErrorCode+0x9c>)
 8004430:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <FLASH_SetErrorCode+0x98>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <FLASH_SetErrorCode+0x98>)
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f240 1201 	movw	r2, #257	; 0x101
 8004444:	4293      	cmp	r3, r2
 8004446:	d106      	bne.n	8004456 <FLASH_SetErrorCode+0x86>
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <FLASH_SetErrorCode+0x98>)
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	4a06      	ldr	r2, [pc, #24]	; (8004468 <FLASH_SetErrorCode+0x98>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	61d3      	str	r3, [r2, #28]
}  
 8004454:	e002      	b.n	800445c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004456:	4a04      	ldr	r2, [pc, #16]	; (8004468 <FLASH_SetErrorCode+0x98>)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60d3      	str	r3, [r2, #12]
}  
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40022000 	.word	0x40022000
 800446c:	200005d8 	.word	0x200005d8

08004470 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_FLASHEx_Erase+0xd0>)
 8004484:	7e1b      	ldrb	r3, [r3, #24]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_FLASHEx_Erase+0x1e>
 800448a:	2302      	movs	r3, #2
 800448c:	e053      	b.n	8004536 <HAL_FLASHEx_Erase+0xc6>
 800448e:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <HAL_FLASHEx_Erase+0xd0>)
 8004490:	2201      	movs	r2, #1
 8004492:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d116      	bne.n	80044ca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800449c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044a0:	f7ff ff50 	bl	8004344 <FLASH_WaitForLastOperation>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d141      	bne.n	800452e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80044aa:	2001      	movs	r0, #1
 80044ac:	f000 f84c 	bl	8004548 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044b4:	f7ff ff46 	bl	8004344 <FLASH_WaitForLastOperation>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_FLASHEx_Erase+0xd4>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	4a20      	ldr	r2, [pc, #128]	; (8004544 <HAL_FLASHEx_Erase+0xd4>)
 80044c2:	f023 0304 	bic.w	r3, r3, #4
 80044c6:	6113      	str	r3, [r2, #16]
 80044c8:	e031      	b.n	800452e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80044ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044ce:	f7ff ff39 	bl	8004344 <FLASH_WaitForLastOperation>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d12a      	bne.n	800452e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f04f 32ff 	mov.w	r2, #4294967295
 80044de:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	e019      	b.n	800451c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f000 f849 	bl	8004580 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044f2:	f7ff ff27 	bl	8004344 <FLASH_WaitForLastOperation>
 80044f6:	4603      	mov	r3, r0
 80044f8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_FLASHEx_Erase+0xd4>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	4a11      	ldr	r2, [pc, #68]	; (8004544 <HAL_FLASHEx_Erase+0xd4>)
 8004500:	f023 0302 	bic.w	r3, r3, #2
 8004504:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	601a      	str	r2, [r3, #0]
            break;
 8004512:	e00c      	b.n	800452e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	02da      	lsls	r2, r3, #11
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d3dc      	bcc.n	80044e8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800452e:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_FLASHEx_Erase+0xd0>)
 8004530:	2200      	movs	r2, #0
 8004532:	761a      	strb	r2, [r3, #24]

  return status;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200005d8 	.word	0x200005d8
 8004544:	40022000 	.word	0x40022000

08004548 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <FLASH_MassErase+0x30>)
 8004552:	2200      	movs	r2, #0
 8004554:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <FLASH_MassErase+0x34>)
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	4a08      	ldr	r2, [pc, #32]	; (800457c <FLASH_MassErase+0x34>)
 800455c:	f043 0304 	orr.w	r3, r3, #4
 8004560:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <FLASH_MassErase+0x34>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <FLASH_MassErase+0x34>)
 8004568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	200005d8 	.word	0x200005d8
 800457c:	40022000 	.word	0x40022000

08004580 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <FLASH_PageErase+0x38>)
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <FLASH_PageErase+0x3c>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <FLASH_PageErase+0x3c>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800459a:	4a08      	ldr	r2, [pc, #32]	; (80045bc <FLASH_PageErase+0x3c>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <FLASH_PageErase+0x3c>)
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	4a05      	ldr	r2, [pc, #20]	; (80045bc <FLASH_PageErase+0x3c>)
 80045a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	200005d8 	.word	0x200005d8
 80045bc:	40022000 	.word	0x40022000

080045c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b08b      	sub	sp, #44	; 0x2c
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d2:	e179      	b.n	80048c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045d4:	2201      	movs	r2, #1
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	f040 8168 	bne.w	80048c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a96      	ldr	r2, [pc, #600]	; (8004850 <HAL_GPIO_Init+0x290>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d05e      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 80045fc:	4a94      	ldr	r2, [pc, #592]	; (8004850 <HAL_GPIO_Init+0x290>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d875      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 8004602:	4a94      	ldr	r2, [pc, #592]	; (8004854 <HAL_GPIO_Init+0x294>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d058      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 8004608:	4a92      	ldr	r2, [pc, #584]	; (8004854 <HAL_GPIO_Init+0x294>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d86f      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 800460e:	4a92      	ldr	r2, [pc, #584]	; (8004858 <HAL_GPIO_Init+0x298>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d052      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 8004614:	4a90      	ldr	r2, [pc, #576]	; (8004858 <HAL_GPIO_Init+0x298>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d869      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 800461a:	4a90      	ldr	r2, [pc, #576]	; (800485c <HAL_GPIO_Init+0x29c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d04c      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 8004620:	4a8e      	ldr	r2, [pc, #568]	; (800485c <HAL_GPIO_Init+0x29c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d863      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 8004626:	4a8e      	ldr	r2, [pc, #568]	; (8004860 <HAL_GPIO_Init+0x2a0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d046      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 800462c:	4a8c      	ldr	r2, [pc, #560]	; (8004860 <HAL_GPIO_Init+0x2a0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d85d      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 8004632:	2b12      	cmp	r3, #18
 8004634:	d82a      	bhi.n	800468c <HAL_GPIO_Init+0xcc>
 8004636:	2b12      	cmp	r3, #18
 8004638:	d859      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 800463a:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <HAL_GPIO_Init+0x80>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	080046bb 	.word	0x080046bb
 8004644:	08004695 	.word	0x08004695
 8004648:	080046a7 	.word	0x080046a7
 800464c:	080046e9 	.word	0x080046e9
 8004650:	080046ef 	.word	0x080046ef
 8004654:	080046ef 	.word	0x080046ef
 8004658:	080046ef 	.word	0x080046ef
 800465c:	080046ef 	.word	0x080046ef
 8004660:	080046ef 	.word	0x080046ef
 8004664:	080046ef 	.word	0x080046ef
 8004668:	080046ef 	.word	0x080046ef
 800466c:	080046ef 	.word	0x080046ef
 8004670:	080046ef 	.word	0x080046ef
 8004674:	080046ef 	.word	0x080046ef
 8004678:	080046ef 	.word	0x080046ef
 800467c:	080046ef 	.word	0x080046ef
 8004680:	080046ef 	.word	0x080046ef
 8004684:	0800469d 	.word	0x0800469d
 8004688:	080046b1 	.word	0x080046b1
 800468c:	4a75      	ldr	r2, [pc, #468]	; (8004864 <HAL_GPIO_Init+0x2a4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004692:	e02c      	b.n	80046ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	623b      	str	r3, [r7, #32]
          break;
 800469a:	e029      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	3304      	adds	r3, #4
 80046a2:	623b      	str	r3, [r7, #32]
          break;
 80046a4:	e024      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	3308      	adds	r3, #8
 80046ac:	623b      	str	r3, [r7, #32]
          break;
 80046ae:	e01f      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	330c      	adds	r3, #12
 80046b6:	623b      	str	r3, [r7, #32]
          break;
 80046b8:	e01a      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046c2:	2304      	movs	r3, #4
 80046c4:	623b      	str	r3, [r7, #32]
          break;
 80046c6:	e013      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046d0:	2308      	movs	r3, #8
 80046d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	611a      	str	r2, [r3, #16]
          break;
 80046da:	e009      	b.n	80046f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046dc:	2308      	movs	r3, #8
 80046de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	615a      	str	r2, [r3, #20]
          break;
 80046e6:	e003      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046e8:	2300      	movs	r3, #0
 80046ea:	623b      	str	r3, [r7, #32]
          break;
 80046ec:	e000      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          break;
 80046ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2bff      	cmp	r3, #255	; 0xff
 80046f4:	d801      	bhi.n	80046fa <HAL_GPIO_Init+0x13a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	e001      	b.n	80046fe <HAL_GPIO_Init+0x13e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2bff      	cmp	r3, #255	; 0xff
 8004704:	d802      	bhi.n	800470c <HAL_GPIO_Init+0x14c>
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	e002      	b.n	8004712 <HAL_GPIO_Init+0x152>
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	3b08      	subs	r3, #8
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	210f      	movs	r1, #15
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	431a      	orrs	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80c1 	beq.w	80048c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004740:	4b49      	ldr	r3, [pc, #292]	; (8004868 <HAL_GPIO_Init+0x2a8>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	4a48      	ldr	r2, [pc, #288]	; (8004868 <HAL_GPIO_Init+0x2a8>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6193      	str	r3, [r2, #24]
 800474c:	4b46      	ldr	r3, [pc, #280]	; (8004868 <HAL_GPIO_Init+0x2a8>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004758:	4a44      	ldr	r2, [pc, #272]	; (800486c <HAL_GPIO_Init+0x2ac>)
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	220f      	movs	r2, #15
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3c      	ldr	r2, [pc, #240]	; (8004870 <HAL_GPIO_Init+0x2b0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d01f      	beq.n	80047c4 <HAL_GPIO_Init+0x204>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3b      	ldr	r2, [pc, #236]	; (8004874 <HAL_GPIO_Init+0x2b4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d019      	beq.n	80047c0 <HAL_GPIO_Init+0x200>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3a      	ldr	r2, [pc, #232]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_GPIO_Init+0x1fc>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a39      	ldr	r2, [pc, #228]	; (800487c <HAL_GPIO_Init+0x2bc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00d      	beq.n	80047b8 <HAL_GPIO_Init+0x1f8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_GPIO_Init+0x2c0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <HAL_GPIO_Init+0x1f4>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a37      	ldr	r2, [pc, #220]	; (8004884 <HAL_GPIO_Init+0x2c4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_GPIO_Init+0x1f0>
 80047ac:	2305      	movs	r3, #5
 80047ae:	e00a      	b.n	80047c6 <HAL_GPIO_Init+0x206>
 80047b0:	2306      	movs	r3, #6
 80047b2:	e008      	b.n	80047c6 <HAL_GPIO_Init+0x206>
 80047b4:	2304      	movs	r3, #4
 80047b6:	e006      	b.n	80047c6 <HAL_GPIO_Init+0x206>
 80047b8:	2303      	movs	r3, #3
 80047ba:	e004      	b.n	80047c6 <HAL_GPIO_Init+0x206>
 80047bc:	2302      	movs	r3, #2
 80047be:	e002      	b.n	80047c6 <HAL_GPIO_Init+0x206>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_GPIO_Init+0x206>
 80047c4:	2300      	movs	r3, #0
 80047c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c8:	f002 0203 	and.w	r2, r2, #3
 80047cc:	0092      	lsls	r2, r2, #2
 80047ce:	4093      	lsls	r3, r2
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047d6:	4925      	ldr	r1, [pc, #148]	; (800486c <HAL_GPIO_Init+0x2ac>)
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	3302      	adds	r3, #2
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4924      	ldr	r1, [pc, #144]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e006      	b.n	800480c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	43db      	mvns	r3, r3
 8004806:	4920      	ldr	r1, [pc, #128]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 8004808:	4013      	ands	r3, r2
 800480a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	491a      	ldr	r1, [pc, #104]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	e006      	b.n	8004834 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	43db      	mvns	r3, r3
 800482e:	4916      	ldr	r1, [pc, #88]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 8004830:	4013      	ands	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d025      	beq.n	800488c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	4910      	ldr	r1, [pc, #64]	; (8004888 <HAL_GPIO_Init+0x2c8>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	608b      	str	r3, [r1, #8]
 800484c:	e025      	b.n	800489a <HAL_GPIO_Init+0x2da>
 800484e:	bf00      	nop
 8004850:	10320000 	.word	0x10320000
 8004854:	10310000 	.word	0x10310000
 8004858:	10220000 	.word	0x10220000
 800485c:	10210000 	.word	0x10210000
 8004860:	10120000 	.word	0x10120000
 8004864:	10110000 	.word	0x10110000
 8004868:	40021000 	.word	0x40021000
 800486c:	40010000 	.word	0x40010000
 8004870:	40010800 	.word	0x40010800
 8004874:	40010c00 	.word	0x40010c00
 8004878:	40011000 	.word	0x40011000
 800487c:	40011400 	.word	0x40011400
 8004880:	40011800 	.word	0x40011800
 8004884:	40011c00 	.word	0x40011c00
 8004888:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800488c:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <HAL_GPIO_Init+0x324>)
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	43db      	mvns	r3, r3
 8004894:	4913      	ldr	r1, [pc, #76]	; (80048e4 <HAL_GPIO_Init+0x324>)
 8004896:	4013      	ands	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048a6:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <HAL_GPIO_Init+0x324>)
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	490e      	ldr	r1, [pc, #56]	; (80048e4 <HAL_GPIO_Init+0x324>)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60cb      	str	r3, [r1, #12]
 80048b2:	e006      	b.n	80048c2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_GPIO_Init+0x324>)
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	4909      	ldr	r1, [pc, #36]	; (80048e4 <HAL_GPIO_Init+0x324>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	3301      	adds	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f47f ae7e 	bne.w	80045d4 <HAL_GPIO_Init+0x14>
  }
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	372c      	adds	r7, #44	; 0x2c
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	40010400 	.word	0x40010400

080048e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e12b      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fe f864 	bl	80029dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800494a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800494c:	f001 fb6e 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a81      	ldr	r2, [pc, #516]	; (8004b5c <HAL_I2C_Init+0x274>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d807      	bhi.n	800496c <HAL_I2C_Init+0x84>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a80      	ldr	r2, [pc, #512]	; (8004b60 <HAL_I2C_Init+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e006      	b.n	800497a <HAL_I2C_Init+0x92>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a7d      	ldr	r2, [pc, #500]	; (8004b64 <HAL_I2C_Init+0x27c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	bf94      	ite	ls
 8004974:	2301      	movls	r3, #1
 8004976:	2300      	movhi	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0e7      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a78      	ldr	r2, [pc, #480]	; (8004b68 <HAL_I2C_Init+0x280>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9b      	lsrs	r3, r3, #18
 800498c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a6a      	ldr	r2, [pc, #424]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d802      	bhi.n	80049bc <HAL_I2C_Init+0xd4>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3301      	adds	r3, #1
 80049ba:	e009      	b.n	80049d0 <HAL_I2C_Init+0xe8>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	4a69      	ldr	r2, [pc, #420]	; (8004b6c <HAL_I2C_Init+0x284>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	3301      	adds	r3, #1
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	495c      	ldr	r1, [pc, #368]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d819      	bhi.n	8004a24 <HAL_I2C_Init+0x13c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e59      	subs	r1, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a04:	400b      	ands	r3, r1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_I2C_Init+0x138>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1e59      	subs	r1, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	e051      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e04f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d111      	bne.n	8004a50 <HAL_I2C_Init+0x168>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e58      	subs	r0, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e012      	b.n	8004a76 <HAL_I2C_Init+0x18e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Init+0x196>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e022      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <HAL_I2C_Init+0x1bc>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1e58      	subs	r0, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	440b      	add	r3, r1
 8004a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa2:	e00f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	0099      	lsls	r1, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6911      	ldr	r1, [r2, #16]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68d2      	ldr	r2, [r2, #12]
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	000186a0 	.word	0x000186a0
 8004b60:	001e847f 	.word	0x001e847f
 8004b64:	003d08ff 	.word	0x003d08ff
 8004b68:	431bde83 	.word	0x431bde83
 8004b6c:	10624dd3 	.word	0x10624dd3

08004b70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	817b      	strh	r3, [r7, #10]
 8004b80:	4613      	mov	r3, r2
 8004b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b84:	f7fe f98a 	bl	8002e9c <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	f040 80e0 	bne.w	8004d58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2319      	movs	r3, #25
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4970      	ldr	r1, [pc, #448]	; (8004d64 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fc92 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0d3      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_I2C_Master_Transmit+0x50>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0cc      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d007      	beq.n	8004be6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2221      	movs	r2, #33	; 0x21
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2210      	movs	r2, #16
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	893a      	ldrh	r2, [r7, #8]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a50      	ldr	r2, [pc, #320]	; (8004d68 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fafc 	bl	800522c <I2C_MasterRequestWrite>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e08d      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c54:	e066      	b.n	8004d24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	6a39      	ldr	r1, [r7, #32]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fd0c 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d107      	bne.n	8004c7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06b      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_I2C_Master_Transmit+0x188>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d017      	beq.n	8004cf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	6a39      	ldr	r1, [r7, #32]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fcfc 	bl	80056fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d107      	bne.n	8004d20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e01a      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d194      	bne.n	8004c56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e000      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d58:	2302      	movs	r3, #2
  }
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	00100002 	.word	0x00100002
 8004d68:	ffff0000 	.word	0xffff0000

08004d6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	461a      	mov	r2, r3
 8004d78:	460b      	mov	r3, r1
 8004d7a:	817b      	strh	r3, [r7, #10]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d84:	f7fe f88a 	bl	8002e9c <HAL_GetTick>
 8004d88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	f040 823f 	bne.w	8005216 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2319      	movs	r3, #25
 8004d9e:	2201      	movs	r2, #1
 8004da0:	497f      	ldr	r1, [pc, #508]	; (8004fa0 <HAL_I2C_Master_Receive+0x234>)
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fb92 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
 8004db0:	e232      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_I2C_Master_Receive+0x54>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e22b      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d007      	beq.n	8004de6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2222      	movs	r2, #34	; 0x22
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2210      	movs	r2, #16
 8004e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	893a      	ldrh	r2, [r7, #8]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a5f      	ldr	r2, [pc, #380]	; (8004fa4 <HAL_I2C_Master_Receive+0x238>)
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e28:	8979      	ldrh	r1, [r7, #10]
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fa7e 	bl	8005330 <I2C_MasterRequestRead>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e1ec      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d113      	bne.n	8004e6e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e1c0      	b.n	80051f0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d11e      	bne.n	8004eb4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e86:	b672      	cpsid	i
}
 8004e88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004eb0:	b662      	cpsie	i
}
 8004eb2:	e035      	b.n	8004f20 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11e      	bne.n	8004efa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ecc:	b672      	cpsid	i
}
 8004ece:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ef6:	b662      	cpsie	i
}
 8004ef8:	e012      	b.n	8004f20 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004f20:	e166      	b.n	80051f0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	f200 811f 	bhi.w	800516a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d123      	bne.n	8004f7c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fc1f 	bl	800577c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e167      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f7a:	e139      	b.n	80051f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d152      	bne.n	800502a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4906      	ldr	r1, [pc, #24]	; (8004fa8 <HAL_I2C_Master_Receive+0x23c>)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fa9c 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e13c      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
 8004f9e:	bf00      	nop
 8004fa0:	00100002 	.word	0x00100002
 8004fa4:	ffff0000 	.word	0xffff0000
 8004fa8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004fac:	b672      	cpsid	i
}
 8004fae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ff2:	b662      	cpsie	i
}
 8004ff4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005028:	e0e2      	b.n	80051f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	2200      	movs	r2, #0
 8005032:	497b      	ldr	r1, [pc, #492]	; (8005220 <HAL_I2C_Master_Receive+0x4b4>)
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fa49 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0e9      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005052:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005054:	b672      	cpsid	i
}
 8005056:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800508a:	4b66      	ldr	r3, [pc, #408]	; (8005224 <HAL_I2C_Master_Receive+0x4b8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	4a65      	ldr	r2, [pc, #404]	; (8005228 <HAL_I2C_Master_Receive+0x4bc>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	0a1a      	lsrs	r2, r3, #8
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	00da      	lsls	r2, r3, #3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d118      	bne.n	80050e2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80050d2:	b662      	cpsie	i
}
 80050d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e09a      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d1d9      	bne.n	80050a4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005132:	b662      	cpsie	i
}
 8005134:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005168:	e042      	b.n	80051f0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fb04 	bl	800577c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e04c      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d118      	bne.n	80051f0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f47f ae94 	bne.w	8004f22 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e000      	b.n	8005218 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005216:	2302      	movs	r3, #2
  }
}
 8005218:	4618      	mov	r0, r3
 800521a:	3728      	adds	r7, #40	; 0x28
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	00010004 	.word	0x00010004
 8005224:	20000008 	.word	0x20000008
 8005228:	14f8b589 	.word	0x14f8b589

0800522c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	460b      	mov	r3, r1
 800523a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d006      	beq.n	8005256 <I2C_MasterRequestWrite+0x2a>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d003      	beq.n	8005256 <I2C_MasterRequestWrite+0x2a>
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005254:	d108      	bne.n	8005268 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e00b      	b.n	8005280 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	2b12      	cmp	r3, #18
 800526e:	d107      	bne.n	8005280 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f91d 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a6:	d103      	bne.n	80052b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e035      	b.n	8005320 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052bc:	d108      	bne.n	80052d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052be:	897b      	ldrh	r3, [r7, #10]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052cc:	611a      	str	r2, [r3, #16]
 80052ce:	e01b      	b.n	8005308 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052d0:	897b      	ldrh	r3, [r7, #10]
 80052d2:	11db      	asrs	r3, r3, #7
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 0306 	and.w	r3, r3, #6
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f063 030f 	orn	r3, r3, #15
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	490e      	ldr	r1, [pc, #56]	; (8005328 <I2C_MasterRequestWrite+0xfc>)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f943 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e010      	b.n	8005320 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052fe:	897b      	ldrh	r3, [r7, #10]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4907      	ldr	r1, [pc, #28]	; (800532c <I2C_MasterRequestWrite+0x100>)
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f933 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	00010008 	.word	0x00010008
 800532c:	00010002 	.word	0x00010002

08005330 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	460b      	mov	r3, r1
 800533e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d006      	beq.n	800536a <I2C_MasterRequestRead+0x3a>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d003      	beq.n	800536a <I2C_MasterRequestRead+0x3a>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005368:	d108      	bne.n	800537c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e00b      	b.n	8005394 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	2b11      	cmp	r3, #17
 8005382:	d107      	bne.n	8005394 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005392:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f893 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00d      	beq.n	80053c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ba:	d103      	bne.n	80053c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e079      	b.n	80054bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d0:	d108      	bne.n	80053e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053d2:	897b      	ldrh	r3, [r7, #10]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	611a      	str	r2, [r3, #16]
 80053e2:	e05f      	b.n	80054a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053e4:	897b      	ldrh	r3, [r7, #10]
 80053e6:	11db      	asrs	r3, r3, #7
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f063 030f 	orn	r3, r3, #15
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4930      	ldr	r1, [pc, #192]	; (80054c4 <I2C_MasterRequestRead+0x194>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f8b9 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e054      	b.n	80054bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005412:	897b      	ldrh	r3, [r7, #10]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4929      	ldr	r1, [pc, #164]	; (80054c8 <I2C_MasterRequestRead+0x198>)
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f8a9 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e044      	b.n	80054bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005456:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f831 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547e:	d103      	bne.n	8005488 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e017      	b.n	80054bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800548c:	897b      	ldrh	r3, [r7, #10]
 800548e:	11db      	asrs	r3, r3, #7
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0306 	and.w	r3, r3, #6
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f063 030e 	orn	r3, r3, #14
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4907      	ldr	r1, [pc, #28]	; (80054c8 <I2C_MasterRequestRead+0x198>)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f865 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	00010008 	.word	0x00010008
 80054c8:	00010002 	.word	0x00010002

080054cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054dc:	e025      	b.n	800552a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d021      	beq.n	800552a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fd fcd9 	bl	8002e9c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e023      	b.n	8005572 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10d      	bne.n	8005550 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	43da      	mvns	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	e00c      	b.n	800556a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	43da      	mvns	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d0b6      	beq.n	80054de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005588:	e051      	b.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005598:	d123      	bne.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e046      	b.n	8005670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d021      	beq.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fd fc57 	bl	8002e9c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d116      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e020      	b.n	8005670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10c      	bne.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	e00b      	b.n	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	43da      	mvns	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4013      	ands	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d18d      	bne.n	800558a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005684:	e02d      	b.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f8ce 	bl	8005828 <I2C_IsAcknowledgeFailed>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e02d      	b.n	80056f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d021      	beq.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fd fbfd 	bl	8002e9c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d116      	bne.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e007      	b.n	80056f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ec:	2b80      	cmp	r3, #128	; 0x80
 80056ee:	d1ca      	bne.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005706:	e02d      	b.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f88d 	bl	8005828 <I2C_IsAcknowledgeFailed>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e02d      	b.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d021      	beq.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005720:	f7fd fbbc 	bl	8002e9c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d116      	bne.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e007      	b.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b04      	cmp	r3, #4
 8005770:	d1ca      	bne.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005788:	e042      	b.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b10      	cmp	r3, #16
 8005796:	d119      	bne.n	80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0210 	mvn.w	r2, #16
 80057a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e029      	b.n	8005820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fd fb66 	bl	8002e9c <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d116      	bne.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d1b5      	bne.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	d11b      	bne.n	8005878 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005848:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0204 	orr.w	r2, r3, #4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e272      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8087 	beq.w	80059b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058a4:	4b92      	ldr	r3, [pc, #584]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 030c 	and.w	r3, r3, #12
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d00c      	beq.n	80058ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058b0:	4b8f      	ldr	r3, [pc, #572]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 030c 	and.w	r3, r3, #12
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d112      	bne.n	80058e2 <HAL_RCC_OscConfig+0x5e>
 80058bc:	4b8c      	ldr	r3, [pc, #560]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c8:	d10b      	bne.n	80058e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ca:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d06c      	beq.n	80059b0 <HAL_RCC_OscConfig+0x12c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d168      	bne.n	80059b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e24c      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ea:	d106      	bne.n	80058fa <HAL_RCC_OscConfig+0x76>
 80058ec:	4b80      	ldr	r3, [pc, #512]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a7f      	ldr	r2, [pc, #508]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80058f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e02e      	b.n	8005958 <HAL_RCC_OscConfig+0xd4>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10c      	bne.n	800591c <HAL_RCC_OscConfig+0x98>
 8005902:	4b7b      	ldr	r3, [pc, #492]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a7a      	ldr	r2, [pc, #488]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4b78      	ldr	r3, [pc, #480]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a77      	ldr	r2, [pc, #476]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e01d      	b.n	8005958 <HAL_RCC_OscConfig+0xd4>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005924:	d10c      	bne.n	8005940 <HAL_RCC_OscConfig+0xbc>
 8005926:	4b72      	ldr	r3, [pc, #456]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a71      	ldr	r2, [pc, #452]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 800592c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a6e      	ldr	r2, [pc, #440]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e00b      	b.n	8005958 <HAL_RCC_OscConfig+0xd4>
 8005940:	4b6b      	ldr	r3, [pc, #428]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6a      	ldr	r2, [pc, #424]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	4b68      	ldr	r3, [pc, #416]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a67      	ldr	r2, [pc, #412]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005960:	f7fd fa9c 	bl	8002e9c <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005968:	f7fd fa98 	bl	8002e9c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e200      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597a:	4b5d      	ldr	r3, [pc, #372]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0xe4>
 8005986:	e014      	b.n	80059b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005988:	f7fd fa88 	bl	8002e9c <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005990:	f7fd fa84 	bl	8002e9c <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b64      	cmp	r3, #100	; 0x64
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e1ec      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a2:	4b53      	ldr	r3, [pc, #332]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x10c>
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d063      	beq.n	8005a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059be:	4b4c      	ldr	r3, [pc, #304]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059ca:	4b49      	ldr	r3, [pc, #292]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d11c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x18c>
 80059d6:	4b46      	ldr	r3, [pc, #280]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d116      	bne.n	8005a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e2:	4b43      	ldr	r3, [pc, #268]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_RCC_OscConfig+0x176>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e1c0      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fa:	4b3d      	ldr	r3, [pc, #244]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4939      	ldr	r1, [pc, #228]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0e:	e03a      	b.n	8005a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d020      	beq.n	8005a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a18:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <HAL_RCC_OscConfig+0x270>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1e:	f7fd fa3d 	bl	8002e9c <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a26:	f7fd fa39 	bl	8002e9c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e1a1      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a44:	4b2a      	ldr	r3, [pc, #168]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4927      	ldr	r1, [pc, #156]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]
 8005a58:	e015      	b.n	8005a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a5a:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <HAL_RCC_OscConfig+0x270>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fd fa1c 	bl	8002e9c <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a68:	f7fd fa18 	bl	8002e9c <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e180      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d03a      	beq.n	8005b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d019      	beq.n	8005ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a9a:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <HAL_RCC_OscConfig+0x274>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa0:	f7fd f9fc 	bl	8002e9c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7fd f9f8 	bl	8002e9c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e160      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <HAL_RCC_OscConfig+0x26c>)
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	f000 fad8 	bl	800607c <RCC_Delay>
 8005acc:	e01c      	b.n	8005b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <HAL_RCC_OscConfig+0x274>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad4:	f7fd f9e2 	bl	8002e9c <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ada:	e00f      	b.n	8005afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005adc:	f7fd f9de 	bl	8002e9c <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d908      	bls.n	8005afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e146      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	42420000 	.word	0x42420000
 8005af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afc:	4b92      	ldr	r3, [pc, #584]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e9      	bne.n	8005adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80a6 	beq.w	8005c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b1a:	4b8b      	ldr	r3, [pc, #556]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10d      	bne.n	8005b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b26:	4b88      	ldr	r3, [pc, #544]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4a87      	ldr	r2, [pc, #540]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b30:	61d3      	str	r3, [r2, #28]
 8005b32:	4b85      	ldr	r3, [pc, #532]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b42:	4b82      	ldr	r3, [pc, #520]	; (8005d4c <HAL_RCC_OscConfig+0x4c8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d118      	bne.n	8005b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b4e:	4b7f      	ldr	r3, [pc, #508]	; (8005d4c <HAL_RCC_OscConfig+0x4c8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7e      	ldr	r2, [pc, #504]	; (8005d4c <HAL_RCC_OscConfig+0x4c8>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5a:	f7fd f99f 	bl	8002e9c <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b62:	f7fd f99b 	bl	8002e9c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b64      	cmp	r3, #100	; 0x64
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e103      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b74:	4b75      	ldr	r3, [pc, #468]	; (8005d4c <HAL_RCC_OscConfig+0x4c8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d106      	bne.n	8005b96 <HAL_RCC_OscConfig+0x312>
 8005b88:	4b6f      	ldr	r3, [pc, #444]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4a6e      	ldr	r2, [pc, #440]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6213      	str	r3, [r2, #32]
 8005b94:	e02d      	b.n	8005bf2 <HAL_RCC_OscConfig+0x36e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x334>
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	4a69      	ldr	r2, [pc, #420]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	6213      	str	r3, [r2, #32]
 8005baa:	4b67      	ldr	r3, [pc, #412]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	4a66      	ldr	r2, [pc, #408]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bb0:	f023 0304 	bic.w	r3, r3, #4
 8005bb4:	6213      	str	r3, [r2, #32]
 8005bb6:	e01c      	b.n	8005bf2 <HAL_RCC_OscConfig+0x36e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b05      	cmp	r3, #5
 8005bbe:	d10c      	bne.n	8005bda <HAL_RCC_OscConfig+0x356>
 8005bc0:	4b61      	ldr	r3, [pc, #388]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	4a60      	ldr	r2, [pc, #384]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bc6:	f043 0304 	orr.w	r3, r3, #4
 8005bca:	6213      	str	r3, [r2, #32]
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	4a5d      	ldr	r2, [pc, #372]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6213      	str	r3, [r2, #32]
 8005bd8:	e00b      	b.n	8005bf2 <HAL_RCC_OscConfig+0x36e>
 8005bda:	4b5b      	ldr	r3, [pc, #364]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	4a5a      	ldr	r2, [pc, #360]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	6213      	str	r3, [r2, #32]
 8005be6:	4b58      	ldr	r3, [pc, #352]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	4a57      	ldr	r2, [pc, #348]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005bec:	f023 0304 	bic.w	r3, r3, #4
 8005bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d015      	beq.n	8005c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfa:	f7fd f94f 	bl	8002e9c <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c00:	e00a      	b.n	8005c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c02:	f7fd f94b 	bl	8002e9c <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0b1      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c18:	4b4b      	ldr	r3, [pc, #300]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0ee      	beq.n	8005c02 <HAL_RCC_OscConfig+0x37e>
 8005c24:	e014      	b.n	8005c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c26:	f7fd f939 	bl	8002e9c <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fd f935 	bl	8002e9c <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e09b      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c44:	4b40      	ldr	r3, [pc, #256]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1ee      	bne.n	8005c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d105      	bne.n	8005c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c56:	4b3c      	ldr	r3, [pc, #240]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4a3b      	ldr	r2, [pc, #236]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8087 	beq.w	8005d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c6c:	4b36      	ldr	r3, [pc, #216]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d061      	beq.n	8005d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d146      	bne.n	8005d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c80:	4b33      	ldr	r3, [pc, #204]	; (8005d50 <HAL_RCC_OscConfig+0x4cc>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c86:	f7fd f909 	bl	8002e9c <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fd f905 	bl	8002e9c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e06d      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ca0:	4b29      	ldr	r3, [pc, #164]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb4:	d108      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cb6:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4921      	ldr	r1, [pc, #132]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc8:	4b1f      	ldr	r3, [pc, #124]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a19      	ldr	r1, [r3, #32]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	491b      	ldr	r1, [pc, #108]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_RCC_OscConfig+0x4cc>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce6:	f7fd f8d9 	bl	8002e9c <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cee:	f7fd f8d5 	bl	8002e9c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e03d      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d00:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x46a>
 8005d0c:	e035      	b.n	8005d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <HAL_RCC_OscConfig+0x4cc>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fd f8c2 	bl	8002e9c <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fd f8be 	bl	8002e9c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e026      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_RCC_OscConfig+0x4c4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x498>
 8005d3a:	e01e      	b.n	8005d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e019      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40007000 	.word	0x40007000
 8005d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_OscConfig+0x500>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d106      	bne.n	8005d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d001      	beq.n	8005d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000

08005d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0d0      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d910      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b67      	ldr	r3, [pc, #412]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 0207 	bic.w	r2, r3, #7
 8005db2:	4965      	ldr	r1, [pc, #404]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b63      	ldr	r3, [pc, #396]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0b8      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d020      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005de4:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a58      	ldr	r2, [pc, #352]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	4a52      	ldr	r2, [pc, #328]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e08:	4b50      	ldr	r3, [pc, #320]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	494d      	ldr	r1, [pc, #308]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d040      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	4b47      	ldr	r3, [pc, #284]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d115      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e07f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e073      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e56:	4b3d      	ldr	r3, [pc, #244]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e06b      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e66:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f023 0203 	bic.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	4936      	ldr	r1, [pc, #216]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e78:	f7fd f810 	bl	8002e9c <HAL_GetTick>
 8005e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e80:	f7fd f80c 	bl	8002e9c <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e053      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f003 020c 	and.w	r2, r3, #12
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d1eb      	bne.n	8005e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b27      	ldr	r3, [pc, #156]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d210      	bcs.n	8005ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 0207 	bic.w	r2, r3, #7
 8005ebe:	4922      	ldr	r1, [pc, #136]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e032      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4916      	ldr	r1, [pc, #88]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	490e      	ldr	r1, [pc, #56]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f16:	f000 f821 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	490a      	ldr	r1, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x1c8>)
 8005f28:	5ccb      	ldrb	r3, [r1, r3]
 8005f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2e:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <HAL_RCC_ClockConfig+0x1cc>)
 8005f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <HAL_RCC_ClockConfig+0x1d0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc ff6e 	bl	8002e18 <HAL_InitTick>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40022000 	.word	0x40022000
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	0800b4cc 	.word	0x0800b4cc
 8005f54:	20000008 	.word	0x20000008
 8005f58:	2000000c 	.word	0x2000000c

08005f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f5c:	b490      	push	{r4, r7}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f62:	4b29      	ldr	r3, [pc, #164]	; (8006008 <HAL_RCC_GetSysClockFreq+0xac>)
 8005f64:	1d3c      	adds	r4, r7, #4
 8005f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f6c:	f240 2301 	movw	r3, #513	; 0x201
 8005f70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f86:	4b21      	ldr	r3, [pc, #132]	; (800600c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 030c 	and.w	r3, r3, #12
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d002      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0x40>
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x46>
 8005f9a:	e02b      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f9c:	4b1c      	ldr	r3, [pc, #112]	; (8006010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f9e:	623b      	str	r3, [r7, #32]
      break;
 8005fa0:	e02b      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	0c9b      	lsrs	r3, r3, #18
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	3328      	adds	r3, #40	; 0x28
 8005fac:	443b      	add	r3, r7
 8005fae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005fb2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	0c5b      	lsrs	r3, r3, #17
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	3328      	adds	r3, #40	; 0x28
 8005fca:	443b      	add	r3, r7
 8005fcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005fd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4a0e      	ldr	r2, [pc, #56]	; (8006010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005fd6:	fb03 f202 	mul.w	r2, r3, r2
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	e004      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4a0b      	ldr	r2, [pc, #44]	; (8006014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fe8:	fb02 f303 	mul.w	r3, r2, r3
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	623b      	str	r3, [r7, #32]
      break;
 8005ff2:	e002      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ff4:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ff6:	623b      	str	r3, [r7, #32]
      break;
 8005ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3728      	adds	r7, #40	; 0x28
 8006000:	46bd      	mov	sp, r7
 8006002:	bc90      	pop	{r4, r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	0800b4bc 	.word	0x0800b4bc
 800600c:	40021000 	.word	0x40021000
 8006010:	007a1200 	.word	0x007a1200
 8006014:	003d0900 	.word	0x003d0900

08006018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800601c:	4b02      	ldr	r3, [pc, #8]	; (8006028 <HAL_RCC_GetHCLKFreq+0x10>)
 800601e:	681b      	ldr	r3, [r3, #0]
}
 8006020:	4618      	mov	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr
 8006028:	20000008 	.word	0x20000008

0800602c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006030:	f7ff fff2 	bl	8006018 <HAL_RCC_GetHCLKFreq>
 8006034:	4602      	mov	r2, r0
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4903      	ldr	r1, [pc, #12]	; (8006050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006042:	5ccb      	ldrb	r3, [r1, r3]
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40021000 	.word	0x40021000
 8006050:	0800b4dc 	.word	0x0800b4dc

08006054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006058:	f7ff ffde 	bl	8006018 <HAL_RCC_GetHCLKFreq>
 800605c:	4602      	mov	r2, r0
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	0adb      	lsrs	r3, r3, #11
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4903      	ldr	r1, [pc, #12]	; (8006078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800606a:	5ccb      	ldrb	r3, [r1, r3]
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40021000 	.word	0x40021000
 8006078:	0800b4dc 	.word	0x0800b4dc

0800607c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <RCC_Delay+0x34>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <RCC_Delay+0x38>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	0a5b      	lsrs	r3, r3, #9
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006098:	bf00      	nop
  }
  while (Delay --);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1e5a      	subs	r2, r3, #1
 800609e:	60fa      	str	r2, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f9      	bne.n	8006098 <RCC_Delay+0x1c>
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr
 80060b0:	20000008 	.word	0x20000008
 80060b4:	10624dd3 	.word	0x10624dd3

080060b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d07d      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80060d4:	2300      	movs	r3, #0
 80060d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060d8:	4b4f      	ldr	r3, [pc, #316]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10d      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060e4:	4b4c      	ldr	r3, [pc, #304]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4a4b      	ldr	r2, [pc, #300]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ee:	61d3      	str	r3, [r2, #28]
 80060f0:	4b49      	ldr	r3, [pc, #292]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006100:	4b46      	ldr	r3, [pc, #280]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006108:	2b00      	cmp	r3, #0
 800610a:	d118      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800610c:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a42      	ldr	r2, [pc, #264]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006118:	f7fc fec0 	bl	8002e9c <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611e:	e008      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006120:	f7fc febc 	bl	8002e9c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b64      	cmp	r3, #100	; 0x64
 800612c:	d901      	bls.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e06d      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006132:	4b3a      	ldr	r3, [pc, #232]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800613e:	4b36      	ldr	r3, [pc, #216]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006146:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d02e      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	429a      	cmp	r2, r3
 800615a:	d027      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800615c:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006164:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006166:	4b2e      	ldr	r3, [pc, #184]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800616c:	4b2c      	ldr	r3, [pc, #176]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006172:	4a29      	ldr	r2, [pc, #164]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d014      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006182:	f7fc fe8b 	bl	8002e9c <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006188:	e00a      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618a:	f7fc fe87 	bl	8002e9c <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f241 3288 	movw	r2, #5000	; 0x1388
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e036      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a0:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0ee      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ac:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	4917      	ldr	r1, [pc, #92]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d105      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c4:	4b14      	ldr	r3, [pc, #80]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4a13      	ldr	r2, [pc, #76]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061dc:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	490b      	ldr	r1, [pc, #44]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	4904      	ldr	r1, [pc, #16]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006208:	4313      	orrs	r3, r2
 800620a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	40007000 	.word	0x40007000
 8006220:	42420440 	.word	0x42420440

08006224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e041      	b.n	80062ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fc fc04 	bl	8002a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f000 f94a 	bl	80064fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d001      	beq.n	80062dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e03c      	b.n	8006356 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <HAL_TIM_Base_Start+0x9c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1c      	ldr	r2, [pc, #112]	; (8006364 <HAL_TIM_Base_Start+0xa0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <HAL_TIM_Base_Start+0xa4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a16      	ldr	r2, [pc, #88]	; (800636c <HAL_TIM_Base_Start+0xa8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIM_Base_Start+0x5c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <HAL_TIM_Base_Start+0xac>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d111      	bne.n	8006344 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b06      	cmp	r3, #6
 8006330:	d010      	beq.n	8006354 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e007      	b.n	8006354 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40013400 	.word	0x40013400
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800
 8006370:	40000c00 	.word	0x40000c00

08006374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_TIM_ConfigClockSource+0x18>
 8006388:	2302      	movs	r3, #2
 800638a:	e0b3      	b.n	80064f4 <HAL_TIM_ConfigClockSource+0x180>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c4:	d03e      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0xd0>
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ca:	f200 8087 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x168>
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	f000 8085 	beq.w	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063da:	d87f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
 80063dc:	2b70      	cmp	r3, #112	; 0x70
 80063de:	d01a      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0xa2>
 80063e0:	2b70      	cmp	r3, #112	; 0x70
 80063e2:	d87b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
 80063e4:	2b60      	cmp	r3, #96	; 0x60
 80063e6:	d050      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x116>
 80063e8:	2b60      	cmp	r3, #96	; 0x60
 80063ea:	d877      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
 80063ec:	2b50      	cmp	r3, #80	; 0x50
 80063ee:	d03c      	beq.n	800646a <HAL_TIM_ConfigClockSource+0xf6>
 80063f0:	2b50      	cmp	r3, #80	; 0x50
 80063f2:	d873      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	d058      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x136>
 80063f8:	2b40      	cmp	r3, #64	; 0x40
 80063fa:	d86f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
 80063fc:	2b30      	cmp	r3, #48	; 0x30
 80063fe:	d064      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x156>
 8006400:	2b30      	cmp	r3, #48	; 0x30
 8006402:	d86b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d060      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x156>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d867      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d05c      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x156>
 8006410:	2b10      	cmp	r3, #16
 8006412:	d05a      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006414:	e062      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6899      	ldr	r1, [r3, #8]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f000 f95a 	bl	80066de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006438:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	609a      	str	r2, [r3, #8]
      break;
 8006442:	e04e      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6899      	ldr	r1, [r3, #8]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f000 f943 	bl	80066de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006466:	609a      	str	r2, [r3, #8]
      break;
 8006468:	e03b      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6859      	ldr	r1, [r3, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	461a      	mov	r2, r3
 8006478:	f000 f8ba 	bl	80065f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2150      	movs	r1, #80	; 0x50
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f911 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 8006488:	e02b      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	461a      	mov	r2, r3
 8006498:	f000 f8d8 	bl	800664c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2160      	movs	r1, #96	; 0x60
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f901 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 80064a8:	e01b      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 f89a 	bl	80065f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2140      	movs	r1, #64	; 0x40
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f8f1 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 80064c8:	e00b      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f000 f8e8 	bl	80066aa <TIM_ITRx_SetConfig>
        break;
 80064da:	e002      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a33      	ldr	r2, [pc, #204]	; (80065dc <TIM_Base_SetConfig+0xe0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d013      	beq.n	800653c <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <TIM_Base_SetConfig+0xe4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00f      	beq.n	800653c <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d00b      	beq.n	800653c <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <TIM_Base_SetConfig+0xe8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d007      	beq.n	800653c <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a2e      	ldr	r2, [pc, #184]	; (80065e8 <TIM_Base_SetConfig+0xec>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <TIM_Base_SetConfig+0xf0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d108      	bne.n	800654e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a22      	ldr	r2, [pc, #136]	; (80065dc <TIM_Base_SetConfig+0xe0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_Base_SetConfig+0x82>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a21      	ldr	r2, [pc, #132]	; (80065e0 <TIM_Base_SetConfig+0xe4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_Base_SetConfig+0x82>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006564:	d00b      	beq.n	800657e <TIM_Base_SetConfig+0x82>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1e      	ldr	r2, [pc, #120]	; (80065e4 <TIM_Base_SetConfig+0xe8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_Base_SetConfig+0x82>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <TIM_Base_SetConfig+0xec>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_Base_SetConfig+0x82>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <TIM_Base_SetConfig+0xf0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <TIM_Base_SetConfig+0xe0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0xc8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <TIM_Base_SetConfig+0xe4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d103      	bne.n	80065cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	615a      	str	r2, [r3, #20]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40013400 	.word	0x40013400
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00

080065f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800661a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 030a 	bic.w	r3, r3, #10
 800662c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f023 0210 	bic.w	r2, r3, #16
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006676:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	031b      	lsls	r3, r3, #12
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006688:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	621a      	str	r2, [r3, #32]
}
 80066a0:	bf00      	nop
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f043 0307 	orr.w	r3, r3, #7
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	021a      	lsls	r2, r3, #8
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	431a      	orrs	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4313      	orrs	r3, r2
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	609a      	str	r2, [r3, #8]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e050      	b.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678a:	d00e      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a14      	ldr	r2, [pc, #80]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10c      	bne.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	40013400 	.word	0x40013400
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00

080067f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e03f      	b.n	8006886 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fc f938 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fd9b 	bl	8007374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800684c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800685c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800686c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b08a      	sub	sp, #40	; 0x28
 8006892:	af02      	add	r7, sp, #8
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d17c      	bne.n	80069a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_UART_Transmit+0x2c>
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e075      	b.n	80069aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_UART_Transmit+0x3e>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e06e      	b.n	80069aa <HAL_UART_Transmit+0x11c>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2221      	movs	r2, #33	; 0x21
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068e2:	f7fc fadb 	bl	8002e9c <HAL_GetTick>
 80068e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fc:	d108      	bne.n	8006910 <HAL_UART_Transmit+0x82>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e003      	b.n	8006918 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006920:	e02a      	b.n	8006978 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2200      	movs	r2, #0
 800692a:	2180      	movs	r1, #128	; 0x80
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fb0d 	bl	8006f4c <UART_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e036      	b.n	80069aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006950:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	3302      	adds	r3, #2
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	e007      	b.n	800696a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	3301      	adds	r3, #1
 8006968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1cf      	bne.n	8006922 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2200      	movs	r2, #0
 800698a:	2140      	movs	r1, #64	; 0x40
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fadd 	bl	8006f4c <UART_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e006      	b.n	80069aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e000      	b.n	80069aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
  }
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b086      	sub	sp, #24
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	4613      	mov	r3, r2
 80069be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d13c      	bne.n	8006a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e035      	b.n	8006a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e02e      	b.n	8006a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	461a      	mov	r2, r3
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 faee 	bl	8006fe0 <UART_Start_Receive_DMA>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d119      	bne.n	8006a42 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d113      	bne.n	8006a3e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0210 	orr.w	r2, r2, #16
 8006a3a:	60da      	str	r2, [r3, #12]
 8006a3c:	e001      	b.n	8006a42 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	e000      	b.n	8006a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	; 0x28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x52>
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fbc0 	bl	8007220 <UART_Receive_IT>
      return;
 8006aa0:	e17b      	b.n	8006d9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80b1 	beq.w	8006c0c <HAL_UART_IRQHandler+0x1bc>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x70>
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80a6 	beq.w	8006c0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x90>
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	f043 0201 	orr.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <HAL_UART_IRQHandler+0xb0>
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	f043 0202 	orr.w	r2, r3, #2
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <HAL_UART_IRQHandler+0xd0>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f043 0204 	orr.w	r2, r3, #4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00f      	beq.n	8006b4a <HAL_UART_IRQHandler+0xfa>
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <HAL_UART_IRQHandler+0xee>
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f043 0208 	orr.w	r2, r3, #8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 811e 	beq.w	8006d90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_UART_IRQHandler+0x11e>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fb59 	bl	8007220 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf14      	ite	ne
 8006b7c:	2301      	movne	r3, #1
 8006b7e:	2300      	moveq	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <HAL_UART_IRQHandler+0x146>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d031      	beq.n	8006bfa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fa9b 	bl	80070d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d023      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d013      	beq.n	8006bea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	4a76      	ldr	r2, [pc, #472]	; (8006da0 <HAL_UART_IRQHandler+0x350>)
 8006bc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fc ff84 	bl	8003adc <HAL_DMA_Abort_IT>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d016      	beq.n	8006c08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	e00e      	b.n	8006c08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8f5 	bl	8006dda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	e00a      	b.n	8006c08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8f1 	bl	8006dda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf8:	e006      	b.n	8006c08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f8ed 	bl	8006dda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c06:	e0c3      	b.n	8006d90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c08:	bf00      	nop
    return;
 8006c0a:	e0c1      	b.n	8006d90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	f040 80a1 	bne.w	8006d58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 809b 	beq.w	8006d58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8095 	beq.w	8006d58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d04e      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006c5c:	8a3b      	ldrh	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8098 	beq.w	8006d94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c68:	8a3a      	ldrh	r2, [r7, #16]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	f080 8092 	bcs.w	8006d94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8a3a      	ldrh	r2, [r7, #16]
 8006c74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d02b      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695a      	ldr	r2, [r3, #20]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0201 	bic.w	r2, r2, #1
 8006c9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0210 	bic.w	r2, r2, #16
 8006ccc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fc fec7 	bl	8003a66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fb fae7 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006cee:	e051      	b.n	8006d94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d047      	beq.n	8006d98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006d08:	8a7b      	ldrh	r3, [r7, #18]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d044      	beq.n	8006d98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0210 	bic.w	r2, r2, #16
 8006d4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d4c:	8a7b      	ldrh	r3, [r7, #18]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7fb fab3 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d56:	e01f      	b.n	8006d98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d008      	beq.n	8006d74 <HAL_UART_IRQHandler+0x324>
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f9f0 	bl	8007152 <UART_Transmit_IT>
    return;
 8006d72:	e012      	b.n	8006d9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00d      	beq.n	8006d9a <HAL_UART_IRQHandler+0x34a>
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa31 	bl	80071f0 <UART_EndTransmit_IT>
    return;
 8006d8e:	e004      	b.n	8006d9a <HAL_UART_IRQHandler+0x34a>
    return;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <HAL_UART_IRQHandler+0x34a>
      return;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <HAL_UART_IRQHandler+0x34a>
      return;
 8006d98:	bf00      	nop
  }
}
 8006d9a:	3728      	adds	r7, #40	; 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	0800712b 	.word	0x0800712b

08006da4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d12a      	bne.n	8006e5e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e1c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695a      	ldr	r2, [r3, #20]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e3c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d107      	bne.n	8006e5e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0210 	bic.w	r2, r2, #16
 8006e5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d106      	bne.n	8006e74 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f7fb fa25 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e72:	e002      	b.n	8006e7a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f7ff ff9e 	bl	8006db6 <HAL_UART_RxCpltCallback>
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d108      	bne.n	8006eaa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7fb fa0a 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ea8:	e002      	b.n	8006eb0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7ff ff8c 	bl	8006dc8 <HAL_UART_RxHalfCpltCallback>
}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf14      	ite	ne
 8006ed8:	2301      	movne	r3, #1
 8006eda:	2300      	moveq	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b21      	cmp	r3, #33	; 0x21
 8006eea:	d108      	bne.n	8006efe <UART_DMAError+0x46>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	f000 f8d5 	bl	80070a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b22      	cmp	r3, #34	; 0x22
 8006f1e:	d108      	bne.n	8006f32 <UART_DMAError+0x7a>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f2c:	68b8      	ldr	r0, [r7, #8]
 8006f2e:	f000 f8d0 	bl	80070d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f043 0210 	orr.w	r2, r3, #16
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f7ff ff4b 	bl	8006dda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5c:	e02c      	b.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d028      	beq.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f6c:	f7fb ff96 	bl	8002e9c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d21d      	bcs.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e00f      	b.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	bf0c      	ite	eq
 8006fc8:	2301      	moveq	r3, #1
 8006fca:	2300      	movne	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d0c3      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2222      	movs	r2, #34	; 0x22
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	4a23      	ldr	r2, [pc, #140]	; (800709c <UART_Start_Receive_DMA+0xbc>)
 800700e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	4a22      	ldr	r2, [pc, #136]	; (80070a0 <UART_Start_Receive_DMA+0xc0>)
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	4a21      	ldr	r2, [pc, #132]	; (80070a4 <UART_Start_Receive_DMA+0xc4>)
 800701e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	2200      	movs	r2, #0
 8007026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007028:	f107 0308 	add.w	r3, r7, #8
 800702c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	f7fc fcb2 	bl	80039a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007070:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695a      	ldr	r2, [r3, #20]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0201 	orr.w	r2, r2, #1
 8007080:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007090:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	08006ded 	.word	0x08006ded
 80070a0:	08006e83 	.word	0x08006e83
 80070a4:	08006eb9 	.word	0x08006eb9

080070a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80070be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695a      	ldr	r2, [r3, #20]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d107      	bne.n	8007112 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0210 	bic.w	r2, r2, #16
 8007110:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7ff fe48 	bl	8006dda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b21      	cmp	r3, #33	; 0x21
 8007164:	d13e      	bne.n	80071e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716e:	d114      	bne.n	800719a <UART_Transmit_IT+0x48>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d110      	bne.n	800719a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800718c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	1c9a      	adds	r2, r3, #2
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	621a      	str	r2, [r3, #32]
 8007198:	e008      	b.n	80071ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6211      	str	r1, [r2, #32]
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4619      	mov	r1, r3
 80071ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10f      	bne.n	80071e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e000      	b.n	80071e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071e4:	2302      	movs	r3, #2
  }
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007206:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff fdc7 	bl	8006da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b22      	cmp	r3, #34	; 0x22
 8007232:	f040 8099 	bne.w	8007368 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723e:	d117      	bne.n	8007270 <UART_Receive_IT+0x50>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d113      	bne.n	8007270 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	b29b      	uxth	r3, r3
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	b29a      	uxth	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	1c9a      	adds	r2, r3, #2
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	629a      	str	r2, [r3, #40]	; 0x28
 800726e:	e026      	b.n	80072be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007282:	d007      	beq.n	8007294 <UART_Receive_IT+0x74>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <UART_Receive_IT+0x82>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e008      	b.n	80072b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	4619      	mov	r1, r3
 80072cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d148      	bne.n	8007364 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0220 	bic.w	r2, r2, #32
 80072e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695a      	ldr	r2, [r3, #20]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f022 0201 	bic.w	r2, r2, #1
 8007300:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	2b01      	cmp	r3, #1
 8007310:	d123      	bne.n	800735a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0210 	bic.w	r2, r2, #16
 8007326:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b10      	cmp	r3, #16
 8007334:	d10a      	bne.n	800734c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fa ffb2 	bl	80022bc <HAL_UARTEx_RxEventCallback>
 8007358:	e002      	b.n	8007360 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fd2b 	bl	8006db6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	e002      	b.n	800736a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	e000      	b.n	800736a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007368:	2302      	movs	r3, #2
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073ae:	f023 030c 	bic.w	r3, r3, #12
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	430b      	orrs	r3, r1
 80073ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2c      	ldr	r2, [pc, #176]	; (8007488 <UART_SetConfig+0x114>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d103      	bne.n	80073e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80073dc:	f7fe fe3a 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	e002      	b.n	80073ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80073e4:	f7fe fe22 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 80073e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	009a      	lsls	r2, r3, #2
 80073f4:	441a      	add	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007400:	4a22      	ldr	r2, [pc, #136]	; (800748c <UART_SetConfig+0x118>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	0119      	lsls	r1, r3, #4
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009a      	lsls	r2, r3, #2
 8007414:	441a      	add	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007420:	4b1a      	ldr	r3, [pc, #104]	; (800748c <UART_SetConfig+0x118>)
 8007422:	fba3 0302 	umull	r0, r3, r3, r2
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	2064      	movs	r0, #100	; 0x64
 800742a:	fb00 f303 	mul.w	r3, r0, r3
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	3332      	adds	r3, #50	; 0x32
 8007434:	4a15      	ldr	r2, [pc, #84]	; (800748c <UART_SetConfig+0x118>)
 8007436:	fba2 2303 	umull	r2, r3, r2, r3
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007440:	4419      	add	r1, r3
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009a      	lsls	r2, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	fbb2 f2f3 	udiv	r2, r2, r3
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <UART_SetConfig+0x118>)
 800745a:	fba3 0302 	umull	r0, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	2064      	movs	r0, #100	; 0x64
 8007462:	fb00 f303 	mul.w	r3, r0, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	3332      	adds	r3, #50	; 0x32
 800746c:	4a07      	ldr	r2, [pc, #28]	; (800748c <UART_SetConfig+0x118>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	440a      	add	r2, r1
 800747e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	40013800 	.word	0x40013800
 800748c:	51eb851f 	.word	0x51eb851f

08007490 <cosf>:
 8007490:	b507      	push	{r0, r1, r2, lr}
 8007492:	4a1a      	ldr	r2, [pc, #104]	; (80074fc <cosf+0x6c>)
 8007494:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007498:	4293      	cmp	r3, r2
 800749a:	4601      	mov	r1, r0
 800749c:	dc05      	bgt.n	80074aa <cosf+0x1a>
 800749e:	2100      	movs	r1, #0
 80074a0:	b003      	add	sp, #12
 80074a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a6:	f000 bab7 	b.w	8007a18 <__kernel_cosf>
 80074aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80074ae:	db04      	blt.n	80074ba <cosf+0x2a>
 80074b0:	f7f9 fbaa 	bl	8000c08 <__aeabi_fsub>
 80074b4:	b003      	add	sp, #12
 80074b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ba:	4669      	mov	r1, sp
 80074bc:	f000 f8fc 	bl	80076b8 <__ieee754_rem_pio2f>
 80074c0:	f000 0203 	and.w	r2, r0, #3
 80074c4:	2a01      	cmp	r2, #1
 80074c6:	d007      	beq.n	80074d8 <cosf+0x48>
 80074c8:	2a02      	cmp	r2, #2
 80074ca:	d00c      	beq.n	80074e6 <cosf+0x56>
 80074cc:	b982      	cbnz	r2, 80074f0 <cosf+0x60>
 80074ce:	9901      	ldr	r1, [sp, #4]
 80074d0:	9800      	ldr	r0, [sp, #0]
 80074d2:	f000 faa1 	bl	8007a18 <__kernel_cosf>
 80074d6:	e7ed      	b.n	80074b4 <cosf+0x24>
 80074d8:	9901      	ldr	r1, [sp, #4]
 80074da:	9800      	ldr	r0, [sp, #0]
 80074dc:	f000 fdce 	bl	800807c <__kernel_sinf>
 80074e0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80074e4:	e7e6      	b.n	80074b4 <cosf+0x24>
 80074e6:	9901      	ldr	r1, [sp, #4]
 80074e8:	9800      	ldr	r0, [sp, #0]
 80074ea:	f000 fa95 	bl	8007a18 <__kernel_cosf>
 80074ee:	e7f7      	b.n	80074e0 <cosf+0x50>
 80074f0:	2201      	movs	r2, #1
 80074f2:	9901      	ldr	r1, [sp, #4]
 80074f4:	9800      	ldr	r0, [sp, #0]
 80074f6:	f000 fdc1 	bl	800807c <__kernel_sinf>
 80074fa:	e7db      	b.n	80074b4 <cosf+0x24>
 80074fc:	3f490fd8 	.word	0x3f490fd8

08007500 <sinf>:
 8007500:	b507      	push	{r0, r1, r2, lr}
 8007502:	4a1b      	ldr	r2, [pc, #108]	; (8007570 <sinf+0x70>)
 8007504:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007508:	4293      	cmp	r3, r2
 800750a:	4601      	mov	r1, r0
 800750c:	dc06      	bgt.n	800751c <sinf+0x1c>
 800750e:	2200      	movs	r2, #0
 8007510:	2100      	movs	r1, #0
 8007512:	b003      	add	sp, #12
 8007514:	f85d eb04 	ldr.w	lr, [sp], #4
 8007518:	f000 bdb0 	b.w	800807c <__kernel_sinf>
 800751c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007520:	db04      	blt.n	800752c <sinf+0x2c>
 8007522:	f7f9 fb71 	bl	8000c08 <__aeabi_fsub>
 8007526:	b003      	add	sp, #12
 8007528:	f85d fb04 	ldr.w	pc, [sp], #4
 800752c:	4669      	mov	r1, sp
 800752e:	f000 f8c3 	bl	80076b8 <__ieee754_rem_pio2f>
 8007532:	f000 0003 	and.w	r0, r0, #3
 8007536:	2801      	cmp	r0, #1
 8007538:	d008      	beq.n	800754c <sinf+0x4c>
 800753a:	2802      	cmp	r0, #2
 800753c:	d00b      	beq.n	8007556 <sinf+0x56>
 800753e:	b990      	cbnz	r0, 8007566 <sinf+0x66>
 8007540:	2201      	movs	r2, #1
 8007542:	9901      	ldr	r1, [sp, #4]
 8007544:	9800      	ldr	r0, [sp, #0]
 8007546:	f000 fd99 	bl	800807c <__kernel_sinf>
 800754a:	e7ec      	b.n	8007526 <sinf+0x26>
 800754c:	9901      	ldr	r1, [sp, #4]
 800754e:	9800      	ldr	r0, [sp, #0]
 8007550:	f000 fa62 	bl	8007a18 <__kernel_cosf>
 8007554:	e7e7      	b.n	8007526 <sinf+0x26>
 8007556:	2201      	movs	r2, #1
 8007558:	9901      	ldr	r1, [sp, #4]
 800755a:	9800      	ldr	r0, [sp, #0]
 800755c:	f000 fd8e 	bl	800807c <__kernel_sinf>
 8007560:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007564:	e7df      	b.n	8007526 <sinf+0x26>
 8007566:	9901      	ldr	r1, [sp, #4]
 8007568:	9800      	ldr	r0, [sp, #0]
 800756a:	f000 fa55 	bl	8007a18 <__kernel_cosf>
 800756e:	e7f7      	b.n	8007560 <sinf+0x60>
 8007570:	3f490fd8 	.word	0x3f490fd8

08007574 <atan2f>:
 8007574:	f000 b81a 	b.w	80075ac <__ieee754_atan2f>

08007578 <sqrtf>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4605      	mov	r5, r0
 800757c:	f000 f9fa 	bl	8007974 <__ieee754_sqrtf>
 8007580:	4629      	mov	r1, r5
 8007582:	4604      	mov	r4, r0
 8007584:	4628      	mov	r0, r5
 8007586:	f7f9 fe0f 	bl	80011a8 <__aeabi_fcmpun>
 800758a:	b968      	cbnz	r0, 80075a8 <sqrtf+0x30>
 800758c:	2100      	movs	r1, #0
 800758e:	4628      	mov	r0, r5
 8007590:	f7f9 fde2 	bl	8001158 <__aeabi_fcmplt>
 8007594:	b140      	cbz	r0, 80075a8 <sqrtf+0x30>
 8007596:	f000 ff89 	bl	80084ac <__errno>
 800759a:	2321      	movs	r3, #33	; 0x21
 800759c:	2100      	movs	r1, #0
 800759e:	6003      	str	r3, [r0, #0]
 80075a0:	4608      	mov	r0, r1
 80075a2:	f7f9 fcef 	bl	8000f84 <__aeabi_fdiv>
 80075a6:	4604      	mov	r4, r0
 80075a8:	4620      	mov	r0, r4
 80075aa:	bd38      	pop	{r3, r4, r5, pc}

080075ac <__ieee754_atan2f>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80075b2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80075b6:	4603      	mov	r3, r0
 80075b8:	dc05      	bgt.n	80075c6 <__ieee754_atan2f+0x1a>
 80075ba:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80075be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80075c2:	4607      	mov	r7, r0
 80075c4:	dd04      	ble.n	80075d0 <__ieee754_atan2f+0x24>
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7f9 fb20 	bl	8000c0c <__addsf3>
 80075cc:	4603      	mov	r3, r0
 80075ce:	e011      	b.n	80075f4 <__ieee754_atan2f+0x48>
 80075d0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80075d4:	d103      	bne.n	80075de <__ieee754_atan2f+0x32>
 80075d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075da:	f000 bdc5 	b.w	8008168 <atanf>
 80075de:	178c      	asrs	r4, r1, #30
 80075e0:	f004 0402 	and.w	r4, r4, #2
 80075e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80075e8:	b932      	cbnz	r2, 80075f8 <__ieee754_atan2f+0x4c>
 80075ea:	2c02      	cmp	r4, #2
 80075ec:	d04c      	beq.n	8007688 <__ieee754_atan2f+0xdc>
 80075ee:	2c03      	cmp	r4, #3
 80075f0:	d100      	bne.n	80075f4 <__ieee754_atan2f+0x48>
 80075f2:	4b29      	ldr	r3, [pc, #164]	; (8007698 <__ieee754_atan2f+0xec>)
 80075f4:	4618      	mov	r0, r3
 80075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f8:	b91e      	cbnz	r6, 8007602 <__ieee754_atan2f+0x56>
 80075fa:	2f00      	cmp	r7, #0
 80075fc:	da4a      	bge.n	8007694 <__ieee754_atan2f+0xe8>
 80075fe:	4b27      	ldr	r3, [pc, #156]	; (800769c <__ieee754_atan2f+0xf0>)
 8007600:	e7f8      	b.n	80075f4 <__ieee754_atan2f+0x48>
 8007602:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007606:	d10e      	bne.n	8007626 <__ieee754_atan2f+0x7a>
 8007608:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800760c:	f104 34ff 	add.w	r4, r4, #4294967295
 8007610:	d105      	bne.n	800761e <__ieee754_atan2f+0x72>
 8007612:	2c02      	cmp	r4, #2
 8007614:	d83a      	bhi.n	800768c <__ieee754_atan2f+0xe0>
 8007616:	4b22      	ldr	r3, [pc, #136]	; (80076a0 <__ieee754_atan2f+0xf4>)
 8007618:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800761c:	e7ea      	b.n	80075f4 <__ieee754_atan2f+0x48>
 800761e:	2c02      	cmp	r4, #2
 8007620:	d836      	bhi.n	8007690 <__ieee754_atan2f+0xe4>
 8007622:	4b20      	ldr	r3, [pc, #128]	; (80076a4 <__ieee754_atan2f+0xf8>)
 8007624:	e7f8      	b.n	8007618 <__ieee754_atan2f+0x6c>
 8007626:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800762a:	d0e6      	beq.n	80075fa <__ieee754_atan2f+0x4e>
 800762c:	1b92      	subs	r2, r2, r6
 800762e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8007632:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8007636:	da17      	bge.n	8007668 <__ieee754_atan2f+0xbc>
 8007638:	2900      	cmp	r1, #0
 800763a:	da01      	bge.n	8007640 <__ieee754_atan2f+0x94>
 800763c:	303c      	adds	r0, #60	; 0x3c
 800763e:	db15      	blt.n	800766c <__ieee754_atan2f+0xc0>
 8007640:	4618      	mov	r0, r3
 8007642:	f7f9 fc9f 	bl	8000f84 <__aeabi_fdiv>
 8007646:	f000 fe9b 	bl	8008380 <fabsf>
 800764a:	f000 fd8d 	bl	8008168 <atanf>
 800764e:	4603      	mov	r3, r0
 8007650:	2c01      	cmp	r4, #1
 8007652:	d00d      	beq.n	8007670 <__ieee754_atan2f+0xc4>
 8007654:	2c02      	cmp	r4, #2
 8007656:	d00e      	beq.n	8007676 <__ieee754_atan2f+0xca>
 8007658:	2c00      	cmp	r4, #0
 800765a:	d0cb      	beq.n	80075f4 <__ieee754_atan2f+0x48>
 800765c:	4912      	ldr	r1, [pc, #72]	; (80076a8 <__ieee754_atan2f+0xfc>)
 800765e:	4618      	mov	r0, r3
 8007660:	f7f9 fad4 	bl	8000c0c <__addsf3>
 8007664:	4911      	ldr	r1, [pc, #68]	; (80076ac <__ieee754_atan2f+0x100>)
 8007666:	e00c      	b.n	8007682 <__ieee754_atan2f+0xd6>
 8007668:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <__ieee754_atan2f+0x104>)
 800766a:	e7f1      	b.n	8007650 <__ieee754_atan2f+0xa4>
 800766c:	2300      	movs	r3, #0
 800766e:	e7ef      	b.n	8007650 <__ieee754_atan2f+0xa4>
 8007670:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007674:	e7be      	b.n	80075f4 <__ieee754_atan2f+0x48>
 8007676:	490c      	ldr	r1, [pc, #48]	; (80076a8 <__ieee754_atan2f+0xfc>)
 8007678:	4618      	mov	r0, r3
 800767a:	f7f9 fac7 	bl	8000c0c <__addsf3>
 800767e:	4601      	mov	r1, r0
 8007680:	480a      	ldr	r0, [pc, #40]	; (80076ac <__ieee754_atan2f+0x100>)
 8007682:	f7f9 fac1 	bl	8000c08 <__aeabi_fsub>
 8007686:	e7a1      	b.n	80075cc <__ieee754_atan2f+0x20>
 8007688:	4b08      	ldr	r3, [pc, #32]	; (80076ac <__ieee754_atan2f+0x100>)
 800768a:	e7b3      	b.n	80075f4 <__ieee754_atan2f+0x48>
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <__ieee754_atan2f+0x108>)
 800768e:	e7b1      	b.n	80075f4 <__ieee754_atan2f+0x48>
 8007690:	2300      	movs	r3, #0
 8007692:	e7af      	b.n	80075f4 <__ieee754_atan2f+0x48>
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <__ieee754_atan2f+0x104>)
 8007696:	e7ad      	b.n	80075f4 <__ieee754_atan2f+0x48>
 8007698:	c0490fdb 	.word	0xc0490fdb
 800769c:	bfc90fdb 	.word	0xbfc90fdb
 80076a0:	0800b4e4 	.word	0x0800b4e4
 80076a4:	0800b4f0 	.word	0x0800b4f0
 80076a8:	33bbbd2e 	.word	0x33bbbd2e
 80076ac:	40490fdb 	.word	0x40490fdb
 80076b0:	3fc90fdb 	.word	0x3fc90fdb
 80076b4:	3f490fdb 	.word	0x3f490fdb

080076b8 <__ieee754_rem_pio2f>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4aa0      	ldr	r2, [pc, #640]	; (8007940 <__ieee754_rem_pio2f+0x288>)
 80076be:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80076c2:	4296      	cmp	r6, r2
 80076c4:	460c      	mov	r4, r1
 80076c6:	4682      	mov	sl, r0
 80076c8:	b087      	sub	sp, #28
 80076ca:	dc04      	bgt.n	80076d6 <__ieee754_rem_pio2f+0x1e>
 80076cc:	2300      	movs	r3, #0
 80076ce:	6008      	str	r0, [r1, #0]
 80076d0:	604b      	str	r3, [r1, #4]
 80076d2:	2500      	movs	r5, #0
 80076d4:	e01a      	b.n	800770c <__ieee754_rem_pio2f+0x54>
 80076d6:	4a9b      	ldr	r2, [pc, #620]	; (8007944 <__ieee754_rem_pio2f+0x28c>)
 80076d8:	4296      	cmp	r6, r2
 80076da:	dc4b      	bgt.n	8007774 <__ieee754_rem_pio2f+0xbc>
 80076dc:	2800      	cmp	r0, #0
 80076de:	499a      	ldr	r1, [pc, #616]	; (8007948 <__ieee754_rem_pio2f+0x290>)
 80076e0:	4f9a      	ldr	r7, [pc, #616]	; (800794c <__ieee754_rem_pio2f+0x294>)
 80076e2:	f026 060f 	bic.w	r6, r6, #15
 80076e6:	dd23      	ble.n	8007730 <__ieee754_rem_pio2f+0x78>
 80076e8:	f7f9 fa8e 	bl	8000c08 <__aeabi_fsub>
 80076ec:	42be      	cmp	r6, r7
 80076ee:	4605      	mov	r5, r0
 80076f0:	d010      	beq.n	8007714 <__ieee754_rem_pio2f+0x5c>
 80076f2:	4997      	ldr	r1, [pc, #604]	; (8007950 <__ieee754_rem_pio2f+0x298>)
 80076f4:	f7f9 fa88 	bl	8000c08 <__aeabi_fsub>
 80076f8:	4601      	mov	r1, r0
 80076fa:	6020      	str	r0, [r4, #0]
 80076fc:	4628      	mov	r0, r5
 80076fe:	f7f9 fa83 	bl	8000c08 <__aeabi_fsub>
 8007702:	4993      	ldr	r1, [pc, #588]	; (8007950 <__ieee754_rem_pio2f+0x298>)
 8007704:	f7f9 fa80 	bl	8000c08 <__aeabi_fsub>
 8007708:	2501      	movs	r5, #1
 800770a:	6060      	str	r0, [r4, #4]
 800770c:	4628      	mov	r0, r5
 800770e:	b007      	add	sp, #28
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	498f      	ldr	r1, [pc, #572]	; (8007954 <__ieee754_rem_pio2f+0x29c>)
 8007716:	f7f9 fa77 	bl	8000c08 <__aeabi_fsub>
 800771a:	498f      	ldr	r1, [pc, #572]	; (8007958 <__ieee754_rem_pio2f+0x2a0>)
 800771c:	4605      	mov	r5, r0
 800771e:	f7f9 fa73 	bl	8000c08 <__aeabi_fsub>
 8007722:	4601      	mov	r1, r0
 8007724:	6020      	str	r0, [r4, #0]
 8007726:	4628      	mov	r0, r5
 8007728:	f7f9 fa6e 	bl	8000c08 <__aeabi_fsub>
 800772c:	498a      	ldr	r1, [pc, #552]	; (8007958 <__ieee754_rem_pio2f+0x2a0>)
 800772e:	e7e9      	b.n	8007704 <__ieee754_rem_pio2f+0x4c>
 8007730:	f7f9 fa6c 	bl	8000c0c <__addsf3>
 8007734:	42be      	cmp	r6, r7
 8007736:	4605      	mov	r5, r0
 8007738:	d00e      	beq.n	8007758 <__ieee754_rem_pio2f+0xa0>
 800773a:	4985      	ldr	r1, [pc, #532]	; (8007950 <__ieee754_rem_pio2f+0x298>)
 800773c:	f7f9 fa66 	bl	8000c0c <__addsf3>
 8007740:	4601      	mov	r1, r0
 8007742:	6020      	str	r0, [r4, #0]
 8007744:	4628      	mov	r0, r5
 8007746:	f7f9 fa5f 	bl	8000c08 <__aeabi_fsub>
 800774a:	4981      	ldr	r1, [pc, #516]	; (8007950 <__ieee754_rem_pio2f+0x298>)
 800774c:	f7f9 fa5e 	bl	8000c0c <__addsf3>
 8007750:	f04f 35ff 	mov.w	r5, #4294967295
 8007754:	6060      	str	r0, [r4, #4]
 8007756:	e7d9      	b.n	800770c <__ieee754_rem_pio2f+0x54>
 8007758:	497e      	ldr	r1, [pc, #504]	; (8007954 <__ieee754_rem_pio2f+0x29c>)
 800775a:	f7f9 fa57 	bl	8000c0c <__addsf3>
 800775e:	497e      	ldr	r1, [pc, #504]	; (8007958 <__ieee754_rem_pio2f+0x2a0>)
 8007760:	4605      	mov	r5, r0
 8007762:	f7f9 fa53 	bl	8000c0c <__addsf3>
 8007766:	4601      	mov	r1, r0
 8007768:	6020      	str	r0, [r4, #0]
 800776a:	4628      	mov	r0, r5
 800776c:	f7f9 fa4c 	bl	8000c08 <__aeabi_fsub>
 8007770:	4979      	ldr	r1, [pc, #484]	; (8007958 <__ieee754_rem_pio2f+0x2a0>)
 8007772:	e7eb      	b.n	800774c <__ieee754_rem_pio2f+0x94>
 8007774:	4a79      	ldr	r2, [pc, #484]	; (800795c <__ieee754_rem_pio2f+0x2a4>)
 8007776:	4296      	cmp	r6, r2
 8007778:	f300 8091 	bgt.w	800789e <__ieee754_rem_pio2f+0x1e6>
 800777c:	f000 fe00 	bl	8008380 <fabsf>
 8007780:	4977      	ldr	r1, [pc, #476]	; (8007960 <__ieee754_rem_pio2f+0x2a8>)
 8007782:	4607      	mov	r7, r0
 8007784:	f7f9 fb4a 	bl	8000e1c <__aeabi_fmul>
 8007788:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800778c:	f7f9 fa3e 	bl	8000c0c <__addsf3>
 8007790:	f7f9 fd20 	bl	80011d4 <__aeabi_f2iz>
 8007794:	4605      	mov	r5, r0
 8007796:	f7f9 faed 	bl	8000d74 <__aeabi_i2f>
 800779a:	496b      	ldr	r1, [pc, #428]	; (8007948 <__ieee754_rem_pio2f+0x290>)
 800779c:	4681      	mov	r9, r0
 800779e:	f7f9 fb3d 	bl	8000e1c <__aeabi_fmul>
 80077a2:	4601      	mov	r1, r0
 80077a4:	4638      	mov	r0, r7
 80077a6:	f7f9 fa2f 	bl	8000c08 <__aeabi_fsub>
 80077aa:	4969      	ldr	r1, [pc, #420]	; (8007950 <__ieee754_rem_pio2f+0x298>)
 80077ac:	4680      	mov	r8, r0
 80077ae:	4648      	mov	r0, r9
 80077b0:	f7f9 fb34 	bl	8000e1c <__aeabi_fmul>
 80077b4:	2d1f      	cmp	r5, #31
 80077b6:	4607      	mov	r7, r0
 80077b8:	dc0c      	bgt.n	80077d4 <__ieee754_rem_pio2f+0x11c>
 80077ba:	4a6a      	ldr	r2, [pc, #424]	; (8007964 <__ieee754_rem_pio2f+0x2ac>)
 80077bc:	1e69      	subs	r1, r5, #1
 80077be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80077c2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <__ieee754_rem_pio2f+0x11c>
 80077ca:	4639      	mov	r1, r7
 80077cc:	4640      	mov	r0, r8
 80077ce:	f7f9 fa1b 	bl	8000c08 <__aeabi_fsub>
 80077d2:	e00b      	b.n	80077ec <__ieee754_rem_pio2f+0x134>
 80077d4:	4639      	mov	r1, r7
 80077d6:	4640      	mov	r0, r8
 80077d8:	f7f9 fa16 	bl	8000c08 <__aeabi_fsub>
 80077dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80077e0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80077e4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80077e8:	2e08      	cmp	r6, #8
 80077ea:	dc01      	bgt.n	80077f0 <__ieee754_rem_pio2f+0x138>
 80077ec:	6020      	str	r0, [r4, #0]
 80077ee:	e026      	b.n	800783e <__ieee754_rem_pio2f+0x186>
 80077f0:	4958      	ldr	r1, [pc, #352]	; (8007954 <__ieee754_rem_pio2f+0x29c>)
 80077f2:	4648      	mov	r0, r9
 80077f4:	f7f9 fb12 	bl	8000e1c <__aeabi_fmul>
 80077f8:	4607      	mov	r7, r0
 80077fa:	4601      	mov	r1, r0
 80077fc:	4640      	mov	r0, r8
 80077fe:	f7f9 fa03 	bl	8000c08 <__aeabi_fsub>
 8007802:	4601      	mov	r1, r0
 8007804:	4606      	mov	r6, r0
 8007806:	4640      	mov	r0, r8
 8007808:	f7f9 f9fe 	bl	8000c08 <__aeabi_fsub>
 800780c:	4639      	mov	r1, r7
 800780e:	f7f9 f9fb 	bl	8000c08 <__aeabi_fsub>
 8007812:	4607      	mov	r7, r0
 8007814:	4950      	ldr	r1, [pc, #320]	; (8007958 <__ieee754_rem_pio2f+0x2a0>)
 8007816:	4648      	mov	r0, r9
 8007818:	f7f9 fb00 	bl	8000e1c <__aeabi_fmul>
 800781c:	4639      	mov	r1, r7
 800781e:	f7f9 f9f3 	bl	8000c08 <__aeabi_fsub>
 8007822:	4601      	mov	r1, r0
 8007824:	4607      	mov	r7, r0
 8007826:	4630      	mov	r0, r6
 8007828:	f7f9 f9ee 	bl	8000c08 <__aeabi_fsub>
 800782c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007830:	ebab 0b03 	sub.w	fp, fp, r3
 8007834:	f1bb 0f19 	cmp.w	fp, #25
 8007838:	dc16      	bgt.n	8007868 <__ieee754_rem_pio2f+0x1b0>
 800783a:	46b0      	mov	r8, r6
 800783c:	6020      	str	r0, [r4, #0]
 800783e:	6826      	ldr	r6, [r4, #0]
 8007840:	4640      	mov	r0, r8
 8007842:	4631      	mov	r1, r6
 8007844:	f7f9 f9e0 	bl	8000c08 <__aeabi_fsub>
 8007848:	4639      	mov	r1, r7
 800784a:	f7f9 f9dd 	bl	8000c08 <__aeabi_fsub>
 800784e:	f1ba 0f00 	cmp.w	sl, #0
 8007852:	6060      	str	r0, [r4, #4]
 8007854:	f6bf af5a 	bge.w	800770c <__ieee754_rem_pio2f+0x54>
 8007858:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800785c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007860:	6026      	str	r6, [r4, #0]
 8007862:	6060      	str	r0, [r4, #4]
 8007864:	426d      	negs	r5, r5
 8007866:	e751      	b.n	800770c <__ieee754_rem_pio2f+0x54>
 8007868:	493f      	ldr	r1, [pc, #252]	; (8007968 <__ieee754_rem_pio2f+0x2b0>)
 800786a:	4648      	mov	r0, r9
 800786c:	f7f9 fad6 	bl	8000e1c <__aeabi_fmul>
 8007870:	4607      	mov	r7, r0
 8007872:	4601      	mov	r1, r0
 8007874:	4630      	mov	r0, r6
 8007876:	f7f9 f9c7 	bl	8000c08 <__aeabi_fsub>
 800787a:	4601      	mov	r1, r0
 800787c:	4680      	mov	r8, r0
 800787e:	4630      	mov	r0, r6
 8007880:	f7f9 f9c2 	bl	8000c08 <__aeabi_fsub>
 8007884:	4639      	mov	r1, r7
 8007886:	f7f9 f9bf 	bl	8000c08 <__aeabi_fsub>
 800788a:	4606      	mov	r6, r0
 800788c:	4937      	ldr	r1, [pc, #220]	; (800796c <__ieee754_rem_pio2f+0x2b4>)
 800788e:	4648      	mov	r0, r9
 8007890:	f7f9 fac4 	bl	8000e1c <__aeabi_fmul>
 8007894:	4631      	mov	r1, r6
 8007896:	f7f9 f9b7 	bl	8000c08 <__aeabi_fsub>
 800789a:	4607      	mov	r7, r0
 800789c:	e795      	b.n	80077ca <__ieee754_rem_pio2f+0x112>
 800789e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80078a2:	db05      	blt.n	80078b0 <__ieee754_rem_pio2f+0x1f8>
 80078a4:	4601      	mov	r1, r0
 80078a6:	f7f9 f9af 	bl	8000c08 <__aeabi_fsub>
 80078aa:	6060      	str	r0, [r4, #4]
 80078ac:	6020      	str	r0, [r4, #0]
 80078ae:	e710      	b.n	80076d2 <__ieee754_rem_pio2f+0x1a>
 80078b0:	15f7      	asrs	r7, r6, #23
 80078b2:	3f86      	subs	r7, #134	; 0x86
 80078b4:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7f9 fc8b 	bl	80011d4 <__aeabi_f2iz>
 80078be:	f7f9 fa59 	bl	8000d74 <__aeabi_i2f>
 80078c2:	4601      	mov	r1, r0
 80078c4:	9003      	str	r0, [sp, #12]
 80078c6:	4630      	mov	r0, r6
 80078c8:	f7f9 f99e 	bl	8000c08 <__aeabi_fsub>
 80078cc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80078d0:	f7f9 faa4 	bl	8000e1c <__aeabi_fmul>
 80078d4:	4606      	mov	r6, r0
 80078d6:	f7f9 fc7d 	bl	80011d4 <__aeabi_f2iz>
 80078da:	f7f9 fa4b 	bl	8000d74 <__aeabi_i2f>
 80078de:	4601      	mov	r1, r0
 80078e0:	9004      	str	r0, [sp, #16]
 80078e2:	4605      	mov	r5, r0
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7f9 f98f 	bl	8000c08 <__aeabi_fsub>
 80078ea:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80078ee:	f7f9 fa95 	bl	8000e1c <__aeabi_fmul>
 80078f2:	2100      	movs	r1, #0
 80078f4:	9005      	str	r0, [sp, #20]
 80078f6:	f7f9 fc25 	bl	8001144 <__aeabi_fcmpeq>
 80078fa:	b1f0      	cbz	r0, 800793a <__ieee754_rem_pio2f+0x282>
 80078fc:	2100      	movs	r1, #0
 80078fe:	4628      	mov	r0, r5
 8007900:	f7f9 fc20 	bl	8001144 <__aeabi_fcmpeq>
 8007904:	2800      	cmp	r0, #0
 8007906:	bf14      	ite	ne
 8007908:	2301      	movne	r3, #1
 800790a:	2302      	moveq	r3, #2
 800790c:	4a18      	ldr	r2, [pc, #96]	; (8007970 <__ieee754_rem_pio2f+0x2b8>)
 800790e:	4621      	mov	r1, r4
 8007910:	9201      	str	r2, [sp, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	a803      	add	r0, sp, #12
 8007916:	9200      	str	r2, [sp, #0]
 8007918:	463a      	mov	r2, r7
 800791a:	f000 f8fd 	bl	8007b18 <__kernel_rem_pio2f>
 800791e:	f1ba 0f00 	cmp.w	sl, #0
 8007922:	4605      	mov	r5, r0
 8007924:	f6bf aef2 	bge.w	800770c <__ieee754_rem_pio2f+0x54>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800792e:	6023      	str	r3, [r4, #0]
 8007930:	6863      	ldr	r3, [r4, #4]
 8007932:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	e794      	b.n	8007864 <__ieee754_rem_pio2f+0x1ac>
 800793a:	2303      	movs	r3, #3
 800793c:	e7e6      	b.n	800790c <__ieee754_rem_pio2f+0x254>
 800793e:	bf00      	nop
 8007940:	3f490fd8 	.word	0x3f490fd8
 8007944:	4016cbe3 	.word	0x4016cbe3
 8007948:	3fc90f80 	.word	0x3fc90f80
 800794c:	3fc90fd0 	.word	0x3fc90fd0
 8007950:	37354443 	.word	0x37354443
 8007954:	37354400 	.word	0x37354400
 8007958:	2e85a308 	.word	0x2e85a308
 800795c:	43490f80 	.word	0x43490f80
 8007960:	3f22f984 	.word	0x3f22f984
 8007964:	0800b4fc 	.word	0x0800b4fc
 8007968:	2e85a300 	.word	0x2e85a300
 800796c:	248d3132 	.word	0x248d3132
 8007970:	0800b57c 	.word	0x0800b57c

08007974 <__ieee754_sqrtf>:
 8007974:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007978:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4603      	mov	r3, r0
 8007980:	4604      	mov	r4, r0
 8007982:	d309      	bcc.n	8007998 <__ieee754_sqrtf+0x24>
 8007984:	4601      	mov	r1, r0
 8007986:	f7f9 fa49 	bl	8000e1c <__aeabi_fmul>
 800798a:	4601      	mov	r1, r0
 800798c:	4620      	mov	r0, r4
 800798e:	f7f9 f93d 	bl	8000c0c <__addsf3>
 8007992:	4604      	mov	r4, r0
 8007994:	4620      	mov	r0, r4
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	2a00      	cmp	r2, #0
 800799a:	d0fb      	beq.n	8007994 <__ieee754_sqrtf+0x20>
 800799c:	2800      	cmp	r0, #0
 800799e:	da06      	bge.n	80079ae <__ieee754_sqrtf+0x3a>
 80079a0:	4601      	mov	r1, r0
 80079a2:	f7f9 f931 	bl	8000c08 <__aeabi_fsub>
 80079a6:	4601      	mov	r1, r0
 80079a8:	f7f9 faec 	bl	8000f84 <__aeabi_fdiv>
 80079ac:	e7f1      	b.n	8007992 <__ieee754_sqrtf+0x1e>
 80079ae:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80079b2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80079b6:	d029      	beq.n	8007a0c <__ieee754_sqrtf+0x98>
 80079b8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80079bc:	07cb      	lsls	r3, r1, #31
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 80079c6:	f04f 0419 	mov.w	r4, #25
 80079ca:	461e      	mov	r6, r3
 80079cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80079d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80079d4:	bf58      	it	pl
 80079d6:	0052      	lslpl	r2, r2, #1
 80079d8:	1040      	asrs	r0, r0, #1
 80079da:	0052      	lsls	r2, r2, #1
 80079dc:	1875      	adds	r5, r6, r1
 80079de:	4295      	cmp	r5, r2
 80079e0:	bfde      	ittt	le
 80079e2:	186e      	addle	r6, r5, r1
 80079e4:	1b52      	suble	r2, r2, r5
 80079e6:	185b      	addle	r3, r3, r1
 80079e8:	3c01      	subs	r4, #1
 80079ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80079ee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80079f2:	d1f3      	bne.n	80079dc <__ieee754_sqrtf+0x68>
 80079f4:	b112      	cbz	r2, 80079fc <__ieee754_sqrtf+0x88>
 80079f6:	3301      	adds	r3, #1
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	105c      	asrs	r4, r3, #1
 80079fe:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8007a02:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8007a06:	e7c5      	b.n	8007994 <__ieee754_sqrtf+0x20>
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	0218      	lsls	r0, r3, #8
 8007a0e:	d5fb      	bpl.n	8007a08 <__ieee754_sqrtf+0x94>
 8007a10:	3a01      	subs	r2, #1
 8007a12:	1a89      	subs	r1, r1, r2
 8007a14:	e7d0      	b.n	80079b8 <__ieee754_sqrtf+0x44>
	...

08007a18 <__kernel_cosf>:
 8007a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8007a20:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007a24:	4606      	mov	r6, r0
 8007a26:	4688      	mov	r8, r1
 8007a28:	da03      	bge.n	8007a32 <__kernel_cosf+0x1a>
 8007a2a:	f7f9 fbd3 	bl	80011d4 <__aeabi_f2iz>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d05c      	beq.n	8007aec <__kernel_cosf+0xd4>
 8007a32:	4631      	mov	r1, r6
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7f9 f9f1 	bl	8000e1c <__aeabi_fmul>
 8007a3a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007a3e:	4605      	mov	r5, r0
 8007a40:	f7f9 f9ec 	bl	8000e1c <__aeabi_fmul>
 8007a44:	492b      	ldr	r1, [pc, #172]	; (8007af4 <__kernel_cosf+0xdc>)
 8007a46:	4607      	mov	r7, r0
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f7f9 f9e7 	bl	8000e1c <__aeabi_fmul>
 8007a4e:	492a      	ldr	r1, [pc, #168]	; (8007af8 <__kernel_cosf+0xe0>)
 8007a50:	f7f9 f8dc 	bl	8000c0c <__addsf3>
 8007a54:	4629      	mov	r1, r5
 8007a56:	f7f9 f9e1 	bl	8000e1c <__aeabi_fmul>
 8007a5a:	4928      	ldr	r1, [pc, #160]	; (8007afc <__kernel_cosf+0xe4>)
 8007a5c:	f7f9 f8d4 	bl	8000c08 <__aeabi_fsub>
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f9 f9db 	bl	8000e1c <__aeabi_fmul>
 8007a66:	4926      	ldr	r1, [pc, #152]	; (8007b00 <__kernel_cosf+0xe8>)
 8007a68:	f7f9 f8d0 	bl	8000c0c <__addsf3>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	f7f9 f9d5 	bl	8000e1c <__aeabi_fmul>
 8007a72:	4924      	ldr	r1, [pc, #144]	; (8007b04 <__kernel_cosf+0xec>)
 8007a74:	f7f9 f8c8 	bl	8000c08 <__aeabi_fsub>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	f7f9 f9cf 	bl	8000e1c <__aeabi_fmul>
 8007a7e:	4922      	ldr	r1, [pc, #136]	; (8007b08 <__kernel_cosf+0xf0>)
 8007a80:	f7f9 f8c4 	bl	8000c0c <__addsf3>
 8007a84:	4629      	mov	r1, r5
 8007a86:	f7f9 f9c9 	bl	8000e1c <__aeabi_fmul>
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	f7f9 f9c6 	bl	8000e1c <__aeabi_fmul>
 8007a90:	4641      	mov	r1, r8
 8007a92:	4605      	mov	r5, r0
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7f9 f9c1 	bl	8000e1c <__aeabi_fmul>
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f7f9 f8b3 	bl	8000c08 <__aeabi_fsub>
 8007aa2:	4b1a      	ldr	r3, [pc, #104]	; (8007b0c <__kernel_cosf+0xf4>)
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	dc0a      	bgt.n	8007ac0 <__kernel_cosf+0xa8>
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4638      	mov	r0, r7
 8007aae:	f7f9 f8ab 	bl	8000c08 <__aeabi_fsub>
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007ab8:	f7f9 f8a6 	bl	8000c08 <__aeabi_fsub>
 8007abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac0:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <__kernel_cosf+0xf8>)
 8007ac2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	bfcc      	ite	gt
 8007aca:	4c12      	ldrgt	r4, [pc, #72]	; (8007b14 <__kernel_cosf+0xfc>)
 8007acc:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	f7f9 f899 	bl	8000c08 <__aeabi_fsub>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	4606      	mov	r6, r0
 8007ada:	4638      	mov	r0, r7
 8007adc:	f7f9 f894 	bl	8000c08 <__aeabi_fsub>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f9 f891 	bl	8000c08 <__aeabi_fsub>
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	4630      	mov	r0, r6
 8007aea:	e7e5      	b.n	8007ab8 <__kernel_cosf+0xa0>
 8007aec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007af0:	e7e4      	b.n	8007abc <__kernel_cosf+0xa4>
 8007af2:	bf00      	nop
 8007af4:	ad47d74e 	.word	0xad47d74e
 8007af8:	310f74f6 	.word	0x310f74f6
 8007afc:	3493f27c 	.word	0x3493f27c
 8007b00:	37d00d01 	.word	0x37d00d01
 8007b04:	3ab60b61 	.word	0x3ab60b61
 8007b08:	3d2aaaab 	.word	0x3d2aaaab
 8007b0c:	3e999999 	.word	0x3e999999
 8007b10:	3f480000 	.word	0x3f480000
 8007b14:	3e900000 	.word	0x3e900000

08007b18 <__kernel_rem_pio2f>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	b0db      	sub	sp, #364	; 0x16c
 8007b1e:	9202      	str	r2, [sp, #8]
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007b24:	4bb2      	ldr	r3, [pc, #712]	; (8007df0 <__kernel_rem_pio2f+0x2d8>)
 8007b26:	9005      	str	r0, [sp, #20]
 8007b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2c:	9100      	str	r1, [sp, #0]
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	9b04      	ldr	r3, [sp, #16]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	1d1a      	adds	r2, r3, #4
 8007b3a:	f2c0 809b 	blt.w	8007c74 <__kernel_rem_pio2f+0x15c>
 8007b3e:	1edc      	subs	r4, r3, #3
 8007b40:	bf48      	it	mi
 8007b42:	1d1c      	addmi	r4, r3, #4
 8007b44:	10e4      	asrs	r4, r4, #3
 8007b46:	2500      	movs	r5, #0
 8007b48:	f04f 0b00 	mov.w	fp, #0
 8007b4c:	1c67      	adds	r7, r4, #1
 8007b4e:	00fb      	lsls	r3, r7, #3
 8007b50:	9306      	str	r3, [sp, #24]
 8007b52:	9b02      	ldr	r3, [sp, #8]
 8007b54:	9a03      	ldr	r2, [sp, #12]
 8007b56:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8007b5a:	9b01      	ldr	r3, [sp, #4]
 8007b5c:	eba4 0802 	sub.w	r8, r4, r2
 8007b60:	eb03 0902 	add.w	r9, r3, r2
 8007b64:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007b66:	ae1e      	add	r6, sp, #120	; 0x78
 8007b68:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8007b6c:	454d      	cmp	r5, r9
 8007b6e:	f340 8083 	ble.w	8007c78 <__kernel_rem_pio2f+0x160>
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	ab1e      	add	r3, sp, #120	; 0x78
 8007b76:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8007b7a:	f04f 0900 	mov.w	r9, #0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8007b84:	9a01      	ldr	r2, [sp, #4]
 8007b86:	4591      	cmp	r9, r2
 8007b88:	f340 809e 	ble.w	8007cc8 <__kernel_rem_pio2f+0x1b0>
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	aa0a      	add	r2, sp, #40	; 0x28
 8007b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b94:	9308      	str	r3, [sp, #32]
 8007b96:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007b98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007ba0:	9307      	str	r3, [sp, #28]
 8007ba2:	ac0a      	add	r4, sp, #40	; 0x28
 8007ba4:	4626      	mov	r6, r4
 8007ba6:	46c3      	mov	fp, r8
 8007ba8:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8007bac:	ab5a      	add	r3, sp, #360	; 0x168
 8007bae:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007bb2:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8007bb6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8007bba:	f1bb 0f00 	cmp.w	fp, #0
 8007bbe:	f300 8088 	bgt.w	8007cd2 <__kernel_rem_pio2f+0x1ba>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	f000 fc21 	bl	800840c <scalbnf>
 8007bca:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8007bce:	4605      	mov	r5, r0
 8007bd0:	f7f9 f924 	bl	8000e1c <__aeabi_fmul>
 8007bd4:	f000 fbd8 	bl	8008388 <floorf>
 8007bd8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8007bdc:	f7f9 f91e 	bl	8000e1c <__aeabi_fmul>
 8007be0:	4601      	mov	r1, r0
 8007be2:	4628      	mov	r0, r5
 8007be4:	f7f9 f810 	bl	8000c08 <__aeabi_fsub>
 8007be8:	4605      	mov	r5, r0
 8007bea:	f7f9 faf3 	bl	80011d4 <__aeabi_f2iz>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	f7f9 f8c0 	bl	8000d74 <__aeabi_i2f>
 8007bf4:	4601      	mov	r1, r0
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f7f9 f806 	bl	8000c08 <__aeabi_fsub>
 8007bfc:	2f00      	cmp	r7, #0
 8007bfe:	4681      	mov	r9, r0
 8007c00:	f340 8086 	ble.w	8007d10 <__kernel_rem_pio2f+0x1f8>
 8007c04:	f108 32ff 	add.w	r2, r8, #4294967295
 8007c08:	ab0a      	add	r3, sp, #40	; 0x28
 8007c0a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007c0e:	f1c7 0108 	rsb	r1, r7, #8
 8007c12:	fa45 f301 	asr.w	r3, r5, r1
 8007c16:	441e      	add	r6, r3
 8007c18:	408b      	lsls	r3, r1
 8007c1a:	1aed      	subs	r5, r5, r3
 8007c1c:	f1c7 0007 	rsb	r0, r7, #7
 8007c20:	ab0a      	add	r3, sp, #40	; 0x28
 8007c22:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c26:	4105      	asrs	r5, r0
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	dd7f      	ble.n	8007d2c <__kernel_rem_pio2f+0x214>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4692      	mov	sl, r2
 8007c30:	3601      	adds	r6, #1
 8007c32:	4590      	cmp	r8, r2
 8007c34:	f300 80b0 	bgt.w	8007d98 <__kernel_rem_pio2f+0x280>
 8007c38:	2f00      	cmp	r7, #0
 8007c3a:	dd05      	ble.n	8007c48 <__kernel_rem_pio2f+0x130>
 8007c3c:	2f01      	cmp	r7, #1
 8007c3e:	f000 80bd 	beq.w	8007dbc <__kernel_rem_pio2f+0x2a4>
 8007c42:	2f02      	cmp	r7, #2
 8007c44:	f000 80c5 	beq.w	8007dd2 <__kernel_rem_pio2f+0x2ba>
 8007c48:	2d02      	cmp	r5, #2
 8007c4a:	d16f      	bne.n	8007d2c <__kernel_rem_pio2f+0x214>
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007c52:	f7f8 ffd9 	bl	8000c08 <__aeabi_fsub>
 8007c56:	4681      	mov	r9, r0
 8007c58:	f1ba 0f00 	cmp.w	sl, #0
 8007c5c:	d066      	beq.n	8007d2c <__kernel_rem_pio2f+0x214>
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007c64:	f000 fbd2 	bl	800840c <scalbnf>
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4648      	mov	r0, r9
 8007c6c:	f7f8 ffcc 	bl	8000c08 <__aeabi_fsub>
 8007c70:	4681      	mov	r9, r0
 8007c72:	e05b      	b.n	8007d2c <__kernel_rem_pio2f+0x214>
 8007c74:	2400      	movs	r4, #0
 8007c76:	e766      	b.n	8007b46 <__kernel_rem_pio2f+0x2e>
 8007c78:	eb18 0f05 	cmn.w	r8, r5
 8007c7c:	d407      	bmi.n	8007c8e <__kernel_rem_pio2f+0x176>
 8007c7e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8007c82:	f7f9 f877 	bl	8000d74 <__aeabi_i2f>
 8007c86:	f846 0b04 	str.w	r0, [r6], #4
 8007c8a:	3501      	adds	r5, #1
 8007c8c:	e76e      	b.n	8007b6c <__kernel_rem_pio2f+0x54>
 8007c8e:	4658      	mov	r0, fp
 8007c90:	e7f9      	b.n	8007c86 <__kernel_rem_pio2f+0x16e>
 8007c92:	9307      	str	r3, [sp, #28]
 8007c94:	9b05      	ldr	r3, [sp, #20]
 8007c96:	f8da 1000 	ldr.w	r1, [sl]
 8007c9a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c9e:	f7f9 f8bd 	bl	8000e1c <__aeabi_fmul>
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f7f8 ffb1 	bl	8000c0c <__addsf3>
 8007caa:	4606      	mov	r6, r0
 8007cac:	9b07      	ldr	r3, [sp, #28]
 8007cae:	f108 0801 	add.w	r8, r8, #1
 8007cb2:	9a03      	ldr	r2, [sp, #12]
 8007cb4:	f1aa 0a04 	sub.w	sl, sl, #4
 8007cb8:	4590      	cmp	r8, r2
 8007cba:	ddea      	ble.n	8007c92 <__kernel_rem_pio2f+0x17a>
 8007cbc:	f84b 6b04 	str.w	r6, [fp], #4
 8007cc0:	f109 0901 	add.w	r9, r9, #1
 8007cc4:	3504      	adds	r5, #4
 8007cc6:	e75d      	b.n	8007b84 <__kernel_rem_pio2f+0x6c>
 8007cc8:	46aa      	mov	sl, r5
 8007cca:	461e      	mov	r6, r3
 8007ccc:	f04f 0800 	mov.w	r8, #0
 8007cd0:	e7ef      	b.n	8007cb2 <__kernel_rem_pio2f+0x19a>
 8007cd2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7f9 f8a0 	bl	8000e1c <__aeabi_fmul>
 8007cdc:	f7f9 fa7a 	bl	80011d4 <__aeabi_f2iz>
 8007ce0:	f7f9 f848 	bl	8000d74 <__aeabi_i2f>
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	9009      	str	r0, [sp, #36]	; 0x24
 8007ce8:	f7f9 f898 	bl	8000e1c <__aeabi_fmul>
 8007cec:	4601      	mov	r1, r0
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f7f8 ff8a 	bl	8000c08 <__aeabi_fsub>
 8007cf4:	f7f9 fa6e 	bl	80011d4 <__aeabi_f2iz>
 8007cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cfe:	f846 0b04 	str.w	r0, [r6], #4
 8007d02:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7f8 ff80 	bl	8000c0c <__addsf3>
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	e754      	b.n	8007bba <__kernel_rem_pio2f+0xa2>
 8007d10:	d106      	bne.n	8007d20 <__kernel_rem_pio2f+0x208>
 8007d12:	f108 33ff 	add.w	r3, r8, #4294967295
 8007d16:	aa0a      	add	r2, sp, #40	; 0x28
 8007d18:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8007d1c:	11ed      	asrs	r5, r5, #7
 8007d1e:	e783      	b.n	8007c28 <__kernel_rem_pio2f+0x110>
 8007d20:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007d24:	f7f9 fa2c 	bl	8001180 <__aeabi_fcmpge>
 8007d28:	4605      	mov	r5, r0
 8007d2a:	bb98      	cbnz	r0, 8007d94 <__kernel_rem_pio2f+0x27c>
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4648      	mov	r0, r9
 8007d30:	f7f9 fa08 	bl	8001144 <__aeabi_fcmpeq>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	f000 8098 	beq.w	8007e6a <__kernel_rem_pio2f+0x352>
 8007d3a:	f108 34ff 	add.w	r4, r8, #4294967295
 8007d3e:	4623      	mov	r3, r4
 8007d40:	2200      	movs	r2, #0
 8007d42:	9901      	ldr	r1, [sp, #4]
 8007d44:	428b      	cmp	r3, r1
 8007d46:	da4c      	bge.n	8007de2 <__kernel_rem_pio2f+0x2ca>
 8007d48:	2a00      	cmp	r2, #0
 8007d4a:	d07a      	beq.n	8007e42 <__kernel_rem_pio2f+0x32a>
 8007d4c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d4e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007d52:	3f08      	subs	r7, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8086 	beq.w	8007e66 <__kernel_rem_pio2f+0x34e>
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007d60:	f000 fb54 	bl	800840c <scalbnf>
 8007d64:	46a2      	mov	sl, r4
 8007d66:	4681      	mov	r9, r0
 8007d68:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8007d6c:	af46      	add	r7, sp, #280	; 0x118
 8007d6e:	f1ba 0f00 	cmp.w	sl, #0
 8007d72:	f280 80af 	bge.w	8007ed4 <__kernel_rem_pio2f+0x3bc>
 8007d76:	4627      	mov	r7, r4
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2f00      	cmp	r7, #0
 8007d7c:	f2c0 80d9 	blt.w	8007f32 <__kernel_rem_pio2f+0x41a>
 8007d80:	a946      	add	r1, sp, #280	; 0x118
 8007d82:	4690      	mov	r8, r2
 8007d84:	f04f 0a00 	mov.w	sl, #0
 8007d88:	4b1a      	ldr	r3, [pc, #104]	; (8007df4 <__kernel_rem_pio2f+0x2dc>)
 8007d8a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8007d8e:	eba4 0907 	sub.w	r9, r4, r7
 8007d92:	e0c2      	b.n	8007f1a <__kernel_rem_pio2f+0x402>
 8007d94:	2502      	movs	r5, #2
 8007d96:	e749      	b.n	8007c2c <__kernel_rem_pio2f+0x114>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	f1ba 0f00 	cmp.w	sl, #0
 8007d9e:	d108      	bne.n	8007db2 <__kernel_rem_pio2f+0x29a>
 8007da0:	b11b      	cbz	r3, 8007daa <__kernel_rem_pio2f+0x292>
 8007da2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007da6:	6023      	str	r3, [r4, #0]
 8007da8:	2301      	movs	r3, #1
 8007daa:	469a      	mov	sl, r3
 8007dac:	3201      	adds	r2, #1
 8007dae:	3404      	adds	r4, #4
 8007db0:	e73f      	b.n	8007c32 <__kernel_rem_pio2f+0x11a>
 8007db2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007db6:	6023      	str	r3, [r4, #0]
 8007db8:	4653      	mov	r3, sl
 8007dba:	e7f6      	b.n	8007daa <__kernel_rem_pio2f+0x292>
 8007dbc:	f108 32ff 	add.w	r2, r8, #4294967295
 8007dc0:	ab0a      	add	r3, sp, #40	; 0x28
 8007dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dca:	a90a      	add	r1, sp, #40	; 0x28
 8007dcc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007dd0:	e73a      	b.n	8007c48 <__kernel_rem_pio2f+0x130>
 8007dd2:	f108 32ff 	add.w	r2, r8, #4294967295
 8007dd6:	ab0a      	add	r3, sp, #40	; 0x28
 8007dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007de0:	e7f3      	b.n	8007dca <__kernel_rem_pio2f+0x2b2>
 8007de2:	a90a      	add	r1, sp, #40	; 0x28
 8007de4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	430a      	orrs	r2, r1
 8007dec:	e7a9      	b.n	8007d42 <__kernel_rem_pio2f+0x22a>
 8007dee:	bf00      	nop
 8007df0:	0800b8c0 	.word	0x0800b8c0
 8007df4:	0800b894 	.word	0x0800b894
 8007df8:	3301      	adds	r3, #1
 8007dfa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	d0fa      	beq.n	8007df8 <__kernel_rem_pio2f+0x2e0>
 8007e02:	9a04      	ldr	r2, [sp, #16]
 8007e04:	f108 0501 	add.w	r5, r8, #1
 8007e08:	eb08 0402 	add.w	r4, r8, r2
 8007e0c:	aa1e      	add	r2, sp, #120	; 0x78
 8007e0e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007e12:	4498      	add	r8, r3
 8007e14:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8007e18:	45a8      	cmp	r8, r5
 8007e1a:	f6ff aec2 	blt.w	8007ba2 <__kernel_rem_pio2f+0x8a>
 8007e1e:	9b07      	ldr	r3, [sp, #28]
 8007e20:	46a3      	mov	fp, r4
 8007e22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e26:	f7f8 ffa5 	bl	8000d74 <__aeabi_i2f>
 8007e2a:	f04f 0a00 	mov.w	sl, #0
 8007e2e:	2600      	movs	r6, #0
 8007e30:	6020      	str	r0, [r4, #0]
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	459a      	cmp	sl, r3
 8007e36:	dd07      	ble.n	8007e48 <__kernel_rem_pio2f+0x330>
 8007e38:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8007e3c:	3404      	adds	r4, #4
 8007e3e:	3501      	adds	r5, #1
 8007e40:	e7ea      	b.n	8007e18 <__kernel_rem_pio2f+0x300>
 8007e42:	2301      	movs	r3, #1
 8007e44:	9a08      	ldr	r2, [sp, #32]
 8007e46:	e7d8      	b.n	8007dfa <__kernel_rem_pio2f+0x2e2>
 8007e48:	9b05      	ldr	r3, [sp, #20]
 8007e4a:	f85b 0904 	ldr.w	r0, [fp], #-4
 8007e4e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8007e52:	f7f8 ffe3 	bl	8000e1c <__aeabi_fmul>
 8007e56:	4601      	mov	r1, r0
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7f8 fed7 	bl	8000c0c <__addsf3>
 8007e5e:	f10a 0a01 	add.w	sl, sl, #1
 8007e62:	4606      	mov	r6, r0
 8007e64:	e7e5      	b.n	8007e32 <__kernel_rem_pio2f+0x31a>
 8007e66:	3c01      	subs	r4, #1
 8007e68:	e770      	b.n	8007d4c <__kernel_rem_pio2f+0x234>
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	9a02      	ldr	r2, [sp, #8]
 8007e6e:	4648      	mov	r0, r9
 8007e70:	1a99      	subs	r1, r3, r2
 8007e72:	f000 facb 	bl	800840c <scalbnf>
 8007e76:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	f7f9 f980 	bl	8001180 <__aeabi_fcmpge>
 8007e80:	b300      	cbz	r0, 8007ec4 <__kernel_rem_pio2f+0x3ac>
 8007e82:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007e86:	4620      	mov	r0, r4
 8007e88:	f7f8 ffc8 	bl	8000e1c <__aeabi_fmul>
 8007e8c:	f7f9 f9a2 	bl	80011d4 <__aeabi_f2iz>
 8007e90:	f7f8 ff70 	bl	8000d74 <__aeabi_i2f>
 8007e94:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007e98:	4681      	mov	r9, r0
 8007e9a:	f7f8 ffbf 	bl	8000e1c <__aeabi_fmul>
 8007e9e:	4601      	mov	r1, r0
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7f8 feb1 	bl	8000c08 <__aeabi_fsub>
 8007ea6:	f7f9 f995 	bl	80011d4 <__aeabi_f2iz>
 8007eaa:	ab0a      	add	r3, sp, #40	; 0x28
 8007eac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007eb0:	4648      	mov	r0, r9
 8007eb2:	f7f9 f98f 	bl	80011d4 <__aeabi_f2iz>
 8007eb6:	f108 0401 	add.w	r4, r8, #1
 8007eba:	ab0a      	add	r3, sp, #40	; 0x28
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ec2:	e74a      	b.n	8007d5a <__kernel_rem_pio2f+0x242>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7f9 f985 	bl	80011d4 <__aeabi_f2iz>
 8007eca:	ab0a      	add	r3, sp, #40	; 0x28
 8007ecc:	4644      	mov	r4, r8
 8007ece:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007ed2:	e742      	b.n	8007d5a <__kernel_rem_pio2f+0x242>
 8007ed4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ed6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007eda:	f7f8 ff4b 	bl	8000d74 <__aeabi_i2f>
 8007ede:	4649      	mov	r1, r9
 8007ee0:	f7f8 ff9c 	bl	8000e1c <__aeabi_fmul>
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8007eea:	4648      	mov	r0, r9
 8007eec:	f7f8 ff96 	bl	8000e1c <__aeabi_fmul>
 8007ef0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ef4:	4681      	mov	r9, r0
 8007ef6:	e73a      	b.n	8007d6e <__kernel_rem_pio2f+0x256>
 8007ef8:	f853 0b04 	ldr.w	r0, [r3], #4
 8007efc:	f85b 1b04 	ldr.w	r1, [fp], #4
 8007f00:	9203      	str	r2, [sp, #12]
 8007f02:	9302      	str	r3, [sp, #8]
 8007f04:	f7f8 ff8a 	bl	8000e1c <__aeabi_fmul>
 8007f08:	4601      	mov	r1, r0
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7f8 fe7e 	bl	8000c0c <__addsf3>
 8007f10:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007f14:	4680      	mov	r8, r0
 8007f16:	f10a 0a01 	add.w	sl, sl, #1
 8007f1a:	9901      	ldr	r1, [sp, #4]
 8007f1c:	458a      	cmp	sl, r1
 8007f1e:	dc01      	bgt.n	8007f24 <__kernel_rem_pio2f+0x40c>
 8007f20:	45ca      	cmp	sl, r9
 8007f22:	dde9      	ble.n	8007ef8 <__kernel_rem_pio2f+0x3e0>
 8007f24:	ab5a      	add	r3, sp, #360	; 0x168
 8007f26:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8007f2a:	f849 8ca0 	str.w	r8, [r9, #-160]
 8007f2e:	3f01      	subs	r7, #1
 8007f30:	e723      	b.n	8007d7a <__kernel_rem_pio2f+0x262>
 8007f32:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	dc07      	bgt.n	8007f48 <__kernel_rem_pio2f+0x430>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dc4d      	bgt.n	8007fd8 <__kernel_rem_pio2f+0x4c0>
 8007f3c:	d02e      	beq.n	8007f9c <__kernel_rem_pio2f+0x484>
 8007f3e:	f006 0007 	and.w	r0, r6, #7
 8007f42:	b05b      	add	sp, #364	; 0x16c
 8007f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f48:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d1f7      	bne.n	8007f3e <__kernel_rem_pio2f+0x426>
 8007f4e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8007f52:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8007f56:	46b8      	mov	r8, r7
 8007f58:	46a2      	mov	sl, r4
 8007f5a:	f1ba 0f00 	cmp.w	sl, #0
 8007f5e:	dc48      	bgt.n	8007ff2 <__kernel_rem_pio2f+0x4da>
 8007f60:	46a1      	mov	r9, r4
 8007f62:	f1b9 0f01 	cmp.w	r9, #1
 8007f66:	dc5f      	bgt.n	8008028 <__kernel_rem_pio2f+0x510>
 8007f68:	2000      	movs	r0, #0
 8007f6a:	2c01      	cmp	r4, #1
 8007f6c:	dc75      	bgt.n	800805a <__kernel_rem_pio2f+0x542>
 8007f6e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007f70:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	d177      	bne.n	8008066 <__kernel_rem_pio2f+0x54e>
 8007f76:	9900      	ldr	r1, [sp, #0]
 8007f78:	600a      	str	r2, [r1, #0]
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	604b      	str	r3, [r1, #4]
 8007f7e:	6090      	str	r0, [r2, #8]
 8007f80:	e7dd      	b.n	8007f3e <__kernel_rem_pio2f+0x426>
 8007f82:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007f86:	f7f8 fe41 	bl	8000c0c <__addsf3>
 8007f8a:	3c01      	subs	r4, #1
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	daf8      	bge.n	8007f82 <__kernel_rem_pio2f+0x46a>
 8007f90:	b10d      	cbz	r5, 8007f96 <__kernel_rem_pio2f+0x47e>
 8007f92:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	6018      	str	r0, [r3, #0]
 8007f9a:	e7d0      	b.n	8007f3e <__kernel_rem_pio2f+0x426>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	af32      	add	r7, sp, #200	; 0xc8
 8007fa0:	e7f4      	b.n	8007f8c <__kernel_rem_pio2f+0x474>
 8007fa2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8007fa6:	f7f8 fe31 	bl	8000c0c <__addsf3>
 8007faa:	3f01      	subs	r7, #1
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	daf8      	bge.n	8007fa2 <__kernel_rem_pio2f+0x48a>
 8007fb0:	b1bd      	cbz	r5, 8007fe2 <__kernel_rem_pio2f+0x4ca>
 8007fb2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8007fb6:	9a00      	ldr	r2, [sp, #0]
 8007fb8:	4601      	mov	r1, r0
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8007fbe:	f7f8 fe23 	bl	8000c08 <__aeabi_fsub>
 8007fc2:	2701      	movs	r7, #1
 8007fc4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8007fc8:	42bc      	cmp	r4, r7
 8007fca:	da0c      	bge.n	8007fe6 <__kernel_rem_pio2f+0x4ce>
 8007fcc:	b10d      	cbz	r5, 8007fd2 <__kernel_rem_pio2f+0x4ba>
 8007fce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	6058      	str	r0, [r3, #4]
 8007fd6:	e7b2      	b.n	8007f3e <__kernel_rem_pio2f+0x426>
 8007fd8:	4627      	mov	r7, r4
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8007fe0:	e7e4      	b.n	8007fac <__kernel_rem_pio2f+0x494>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	e7e7      	b.n	8007fb6 <__kernel_rem_pio2f+0x49e>
 8007fe6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8007fea:	f7f8 fe0f 	bl	8000c0c <__addsf3>
 8007fee:	3701      	adds	r7, #1
 8007ff0:	e7ea      	b.n	8007fc8 <__kernel_rem_pio2f+0x4b0>
 8007ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	9201      	str	r2, [sp, #4]
 8008002:	f7f8 fe03 	bl	8000c0c <__addsf3>
 8008006:	9a01      	ldr	r2, [sp, #4]
 8008008:	4601      	mov	r1, r0
 800800a:	4681      	mov	r9, r0
 800800c:	4610      	mov	r0, r2
 800800e:	f7f8 fdfb 	bl	8000c08 <__aeabi_fsub>
 8008012:	9b02      	ldr	r3, [sp, #8]
 8008014:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008018:	4619      	mov	r1, r3
 800801a:	f7f8 fdf7 	bl	8000c0c <__addsf3>
 800801e:	f848 0904 	str.w	r0, [r8], #-4
 8008022:	f8c8 9000 	str.w	r9, [r8]
 8008026:	e798      	b.n	8007f5a <__kernel_rem_pio2f+0x442>
 8008028:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800802c:	f8d7 a000 	ldr.w	sl, [r7]
 8008030:	4618      	mov	r0, r3
 8008032:	4651      	mov	r1, sl
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	f7f8 fde9 	bl	8000c0c <__addsf3>
 800803a:	9b01      	ldr	r3, [sp, #4]
 800803c:	4601      	mov	r1, r0
 800803e:	4680      	mov	r8, r0
 8008040:	4618      	mov	r0, r3
 8008042:	f7f8 fde1 	bl	8000c08 <__aeabi_fsub>
 8008046:	4651      	mov	r1, sl
 8008048:	f7f8 fde0 	bl	8000c0c <__addsf3>
 800804c:	f847 0904 	str.w	r0, [r7], #-4
 8008050:	f109 39ff 	add.w	r9, r9, #4294967295
 8008054:	f8c7 8000 	str.w	r8, [r7]
 8008058:	e783      	b.n	8007f62 <__kernel_rem_pio2f+0x44a>
 800805a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800805e:	f7f8 fdd5 	bl	8000c0c <__addsf3>
 8008062:	3c01      	subs	r4, #1
 8008064:	e781      	b.n	8007f6a <__kernel_rem_pio2f+0x452>
 8008066:	9900      	ldr	r1, [sp, #0]
 8008068:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800806c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008070:	600a      	str	r2, [r1, #0]
 8008072:	604b      	str	r3, [r1, #4]
 8008074:	460a      	mov	r2, r1
 8008076:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800807a:	e780      	b.n	8007f7e <__kernel_rem_pio2f+0x466>

0800807c <__kernel_sinf>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008084:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008088:	4604      	mov	r4, r0
 800808a:	460f      	mov	r7, r1
 800808c:	4691      	mov	r9, r2
 800808e:	da03      	bge.n	8008098 <__kernel_sinf+0x1c>
 8008090:	f7f9 f8a0 	bl	80011d4 <__aeabi_f2iz>
 8008094:	2800      	cmp	r0, #0
 8008096:	d035      	beq.n	8008104 <__kernel_sinf+0x88>
 8008098:	4621      	mov	r1, r4
 800809a:	4620      	mov	r0, r4
 800809c:	f7f8 febe 	bl	8000e1c <__aeabi_fmul>
 80080a0:	4605      	mov	r5, r0
 80080a2:	4601      	mov	r1, r0
 80080a4:	4620      	mov	r0, r4
 80080a6:	f7f8 feb9 	bl	8000e1c <__aeabi_fmul>
 80080aa:	4929      	ldr	r1, [pc, #164]	; (8008150 <__kernel_sinf+0xd4>)
 80080ac:	4606      	mov	r6, r0
 80080ae:	4628      	mov	r0, r5
 80080b0:	f7f8 feb4 	bl	8000e1c <__aeabi_fmul>
 80080b4:	4927      	ldr	r1, [pc, #156]	; (8008154 <__kernel_sinf+0xd8>)
 80080b6:	f7f8 fda7 	bl	8000c08 <__aeabi_fsub>
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7f8 feae 	bl	8000e1c <__aeabi_fmul>
 80080c0:	4925      	ldr	r1, [pc, #148]	; (8008158 <__kernel_sinf+0xdc>)
 80080c2:	f7f8 fda3 	bl	8000c0c <__addsf3>
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 fea8 	bl	8000e1c <__aeabi_fmul>
 80080cc:	4923      	ldr	r1, [pc, #140]	; (800815c <__kernel_sinf+0xe0>)
 80080ce:	f7f8 fd9b 	bl	8000c08 <__aeabi_fsub>
 80080d2:	4629      	mov	r1, r5
 80080d4:	f7f8 fea2 	bl	8000e1c <__aeabi_fmul>
 80080d8:	4921      	ldr	r1, [pc, #132]	; (8008160 <__kernel_sinf+0xe4>)
 80080da:	f7f8 fd97 	bl	8000c0c <__addsf3>
 80080de:	4680      	mov	r8, r0
 80080e0:	f1b9 0f00 	cmp.w	r9, #0
 80080e4:	d111      	bne.n	800810a <__kernel_sinf+0x8e>
 80080e6:	4601      	mov	r1, r0
 80080e8:	4628      	mov	r0, r5
 80080ea:	f7f8 fe97 	bl	8000e1c <__aeabi_fmul>
 80080ee:	491d      	ldr	r1, [pc, #116]	; (8008164 <__kernel_sinf+0xe8>)
 80080f0:	f7f8 fd8a 	bl	8000c08 <__aeabi_fsub>
 80080f4:	4631      	mov	r1, r6
 80080f6:	f7f8 fe91 	bl	8000e1c <__aeabi_fmul>
 80080fa:	4601      	mov	r1, r0
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7f8 fd85 	bl	8000c0c <__addsf3>
 8008102:	4604      	mov	r4, r0
 8008104:	4620      	mov	r0, r4
 8008106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800810e:	4638      	mov	r0, r7
 8008110:	f7f8 fe84 	bl	8000e1c <__aeabi_fmul>
 8008114:	4641      	mov	r1, r8
 8008116:	4681      	mov	r9, r0
 8008118:	4630      	mov	r0, r6
 800811a:	f7f8 fe7f 	bl	8000e1c <__aeabi_fmul>
 800811e:	4601      	mov	r1, r0
 8008120:	4648      	mov	r0, r9
 8008122:	f7f8 fd71 	bl	8000c08 <__aeabi_fsub>
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 fe78 	bl	8000e1c <__aeabi_fmul>
 800812c:	4639      	mov	r1, r7
 800812e:	f7f8 fd6b 	bl	8000c08 <__aeabi_fsub>
 8008132:	490c      	ldr	r1, [pc, #48]	; (8008164 <__kernel_sinf+0xe8>)
 8008134:	4605      	mov	r5, r0
 8008136:	4630      	mov	r0, r6
 8008138:	f7f8 fe70 	bl	8000e1c <__aeabi_fmul>
 800813c:	4601      	mov	r1, r0
 800813e:	4628      	mov	r0, r5
 8008140:	f7f8 fd64 	bl	8000c0c <__addsf3>
 8008144:	4601      	mov	r1, r0
 8008146:	4620      	mov	r0, r4
 8008148:	f7f8 fd5e 	bl	8000c08 <__aeabi_fsub>
 800814c:	e7d9      	b.n	8008102 <__kernel_sinf+0x86>
 800814e:	bf00      	nop
 8008150:	2f2ec9d3 	.word	0x2f2ec9d3
 8008154:	32d72f34 	.word	0x32d72f34
 8008158:	3638ef1b 	.word	0x3638ef1b
 800815c:	39500d01 	.word	0x39500d01
 8008160:	3c088889 	.word	0x3c088889
 8008164:	3e2aaaab 	.word	0x3e2aaaab

08008168 <atanf>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008170:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008174:	4604      	mov	r4, r0
 8008176:	4680      	mov	r8, r0
 8008178:	db0e      	blt.n	8008198 <atanf+0x30>
 800817a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800817e:	dd04      	ble.n	800818a <atanf+0x22>
 8008180:	4601      	mov	r1, r0
 8008182:	f7f8 fd43 	bl	8000c0c <__addsf3>
 8008186:	4604      	mov	r4, r0
 8008188:	e003      	b.n	8008192 <atanf+0x2a>
 800818a:	2800      	cmp	r0, #0
 800818c:	f300 80ce 	bgt.w	800832c <atanf+0x1c4>
 8008190:	4c67      	ldr	r4, [pc, #412]	; (8008330 <atanf+0x1c8>)
 8008192:	4620      	mov	r0, r4
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	4b66      	ldr	r3, [pc, #408]	; (8008334 <atanf+0x1cc>)
 800819a:	429d      	cmp	r5, r3
 800819c:	dc0e      	bgt.n	80081bc <atanf+0x54>
 800819e:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80081a2:	da08      	bge.n	80081b6 <atanf+0x4e>
 80081a4:	4964      	ldr	r1, [pc, #400]	; (8008338 <atanf+0x1d0>)
 80081a6:	f7f8 fd31 	bl	8000c0c <__addsf3>
 80081aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80081ae:	f7f8 fff1 	bl	8001194 <__aeabi_fcmpgt>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d1ed      	bne.n	8008192 <atanf+0x2a>
 80081b6:	f04f 36ff 	mov.w	r6, #4294967295
 80081ba:	e01c      	b.n	80081f6 <atanf+0x8e>
 80081bc:	f000 f8e0 	bl	8008380 <fabsf>
 80081c0:	4b5e      	ldr	r3, [pc, #376]	; (800833c <atanf+0x1d4>)
 80081c2:	4604      	mov	r4, r0
 80081c4:	429d      	cmp	r5, r3
 80081c6:	dc7c      	bgt.n	80082c2 <atanf+0x15a>
 80081c8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80081cc:	429d      	cmp	r5, r3
 80081ce:	dc67      	bgt.n	80082a0 <atanf+0x138>
 80081d0:	4601      	mov	r1, r0
 80081d2:	f7f8 fd1b 	bl	8000c0c <__addsf3>
 80081d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80081da:	f7f8 fd15 	bl	8000c08 <__aeabi_fsub>
 80081de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80081e2:	4605      	mov	r5, r0
 80081e4:	4620      	mov	r0, r4
 80081e6:	f7f8 fd11 	bl	8000c0c <__addsf3>
 80081ea:	4601      	mov	r1, r0
 80081ec:	4628      	mov	r0, r5
 80081ee:	f7f8 fec9 	bl	8000f84 <__aeabi_fdiv>
 80081f2:	2600      	movs	r6, #0
 80081f4:	4604      	mov	r4, r0
 80081f6:	4621      	mov	r1, r4
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7f8 fe0f 	bl	8000e1c <__aeabi_fmul>
 80081fe:	4601      	mov	r1, r0
 8008200:	4607      	mov	r7, r0
 8008202:	f7f8 fe0b 	bl	8000e1c <__aeabi_fmul>
 8008206:	4605      	mov	r5, r0
 8008208:	494d      	ldr	r1, [pc, #308]	; (8008340 <atanf+0x1d8>)
 800820a:	f7f8 fe07 	bl	8000e1c <__aeabi_fmul>
 800820e:	494d      	ldr	r1, [pc, #308]	; (8008344 <atanf+0x1dc>)
 8008210:	f7f8 fcfc 	bl	8000c0c <__addsf3>
 8008214:	4629      	mov	r1, r5
 8008216:	f7f8 fe01 	bl	8000e1c <__aeabi_fmul>
 800821a:	494b      	ldr	r1, [pc, #300]	; (8008348 <atanf+0x1e0>)
 800821c:	f7f8 fcf6 	bl	8000c0c <__addsf3>
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 fdfb 	bl	8000e1c <__aeabi_fmul>
 8008226:	4949      	ldr	r1, [pc, #292]	; (800834c <atanf+0x1e4>)
 8008228:	f7f8 fcf0 	bl	8000c0c <__addsf3>
 800822c:	4629      	mov	r1, r5
 800822e:	f7f8 fdf5 	bl	8000e1c <__aeabi_fmul>
 8008232:	4947      	ldr	r1, [pc, #284]	; (8008350 <atanf+0x1e8>)
 8008234:	f7f8 fcea 	bl	8000c0c <__addsf3>
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 fdef 	bl	8000e1c <__aeabi_fmul>
 800823e:	4945      	ldr	r1, [pc, #276]	; (8008354 <atanf+0x1ec>)
 8008240:	f7f8 fce4 	bl	8000c0c <__addsf3>
 8008244:	4639      	mov	r1, r7
 8008246:	f7f8 fde9 	bl	8000e1c <__aeabi_fmul>
 800824a:	4943      	ldr	r1, [pc, #268]	; (8008358 <atanf+0x1f0>)
 800824c:	4607      	mov	r7, r0
 800824e:	4628      	mov	r0, r5
 8008250:	f7f8 fde4 	bl	8000e1c <__aeabi_fmul>
 8008254:	4941      	ldr	r1, [pc, #260]	; (800835c <atanf+0x1f4>)
 8008256:	f7f8 fcd7 	bl	8000c08 <__aeabi_fsub>
 800825a:	4629      	mov	r1, r5
 800825c:	f7f8 fdde 	bl	8000e1c <__aeabi_fmul>
 8008260:	493f      	ldr	r1, [pc, #252]	; (8008360 <atanf+0x1f8>)
 8008262:	f7f8 fcd1 	bl	8000c08 <__aeabi_fsub>
 8008266:	4629      	mov	r1, r5
 8008268:	f7f8 fdd8 	bl	8000e1c <__aeabi_fmul>
 800826c:	493d      	ldr	r1, [pc, #244]	; (8008364 <atanf+0x1fc>)
 800826e:	f7f8 fccb 	bl	8000c08 <__aeabi_fsub>
 8008272:	4629      	mov	r1, r5
 8008274:	f7f8 fdd2 	bl	8000e1c <__aeabi_fmul>
 8008278:	493b      	ldr	r1, [pc, #236]	; (8008368 <atanf+0x200>)
 800827a:	f7f8 fcc5 	bl	8000c08 <__aeabi_fsub>
 800827e:	4629      	mov	r1, r5
 8008280:	f7f8 fdcc 	bl	8000e1c <__aeabi_fmul>
 8008284:	4601      	mov	r1, r0
 8008286:	4638      	mov	r0, r7
 8008288:	f7f8 fcc0 	bl	8000c0c <__addsf3>
 800828c:	4621      	mov	r1, r4
 800828e:	f7f8 fdc5 	bl	8000e1c <__aeabi_fmul>
 8008292:	1c73      	adds	r3, r6, #1
 8008294:	4601      	mov	r1, r0
 8008296:	d133      	bne.n	8008300 <atanf+0x198>
 8008298:	4620      	mov	r0, r4
 800829a:	f7f8 fcb5 	bl	8000c08 <__aeabi_fsub>
 800829e:	e772      	b.n	8008186 <atanf+0x1e>
 80082a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082a4:	f7f8 fcb0 	bl	8000c08 <__aeabi_fsub>
 80082a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082ac:	4605      	mov	r5, r0
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7f8 fcac 	bl	8000c0c <__addsf3>
 80082b4:	4601      	mov	r1, r0
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7f8 fe64 	bl	8000f84 <__aeabi_fdiv>
 80082bc:	2601      	movs	r6, #1
 80082be:	4604      	mov	r4, r0
 80082c0:	e799      	b.n	80081f6 <atanf+0x8e>
 80082c2:	4b2a      	ldr	r3, [pc, #168]	; (800836c <atanf+0x204>)
 80082c4:	429d      	cmp	r5, r3
 80082c6:	dc14      	bgt.n	80082f2 <atanf+0x18a>
 80082c8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80082cc:	f7f8 fc9c 	bl	8000c08 <__aeabi_fsub>
 80082d0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80082d4:	4605      	mov	r5, r0
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7f8 fda0 	bl	8000e1c <__aeabi_fmul>
 80082dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082e0:	f7f8 fc94 	bl	8000c0c <__addsf3>
 80082e4:	4601      	mov	r1, r0
 80082e6:	4628      	mov	r0, r5
 80082e8:	f7f8 fe4c 	bl	8000f84 <__aeabi_fdiv>
 80082ec:	2602      	movs	r6, #2
 80082ee:	4604      	mov	r4, r0
 80082f0:	e781      	b.n	80081f6 <atanf+0x8e>
 80082f2:	4601      	mov	r1, r0
 80082f4:	481e      	ldr	r0, [pc, #120]	; (8008370 <atanf+0x208>)
 80082f6:	f7f8 fe45 	bl	8000f84 <__aeabi_fdiv>
 80082fa:	2603      	movs	r6, #3
 80082fc:	4604      	mov	r4, r0
 80082fe:	e77a      	b.n	80081f6 <atanf+0x8e>
 8008300:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <atanf+0x20c>)
 8008302:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008306:	f7f8 fc7f 	bl	8000c08 <__aeabi_fsub>
 800830a:	4621      	mov	r1, r4
 800830c:	f7f8 fc7c 	bl	8000c08 <__aeabi_fsub>
 8008310:	4b19      	ldr	r3, [pc, #100]	; (8008378 <atanf+0x210>)
 8008312:	4601      	mov	r1, r0
 8008314:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008318:	f7f8 fc76 	bl	8000c08 <__aeabi_fsub>
 800831c:	f1b8 0f00 	cmp.w	r8, #0
 8008320:	4604      	mov	r4, r0
 8008322:	f6bf af36 	bge.w	8008192 <atanf+0x2a>
 8008326:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800832a:	e72c      	b.n	8008186 <atanf+0x1e>
 800832c:	4c13      	ldr	r4, [pc, #76]	; (800837c <atanf+0x214>)
 800832e:	e730      	b.n	8008192 <atanf+0x2a>
 8008330:	bfc90fdb 	.word	0xbfc90fdb
 8008334:	3edfffff 	.word	0x3edfffff
 8008338:	7149f2ca 	.word	0x7149f2ca
 800833c:	3f97ffff 	.word	0x3f97ffff
 8008340:	3c8569d7 	.word	0x3c8569d7
 8008344:	3d4bda59 	.word	0x3d4bda59
 8008348:	3d886b35 	.word	0x3d886b35
 800834c:	3dba2e6e 	.word	0x3dba2e6e
 8008350:	3e124925 	.word	0x3e124925
 8008354:	3eaaaaab 	.word	0x3eaaaaab
 8008358:	bd15a221 	.word	0xbd15a221
 800835c:	3d6ef16b 	.word	0x3d6ef16b
 8008360:	3d9d8795 	.word	0x3d9d8795
 8008364:	3de38e38 	.word	0x3de38e38
 8008368:	3e4ccccd 	.word	0x3e4ccccd
 800836c:	401bffff 	.word	0x401bffff
 8008370:	bf800000 	.word	0xbf800000
 8008374:	0800b8dc 	.word	0x0800b8dc
 8008378:	0800b8cc 	.word	0x0800b8cc
 800837c:	3fc90fdb 	.word	0x3fc90fdb

08008380 <fabsf>:
 8008380:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008384:	4770      	bx	lr
	...

08008388 <floorf>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800838e:	3d7f      	subs	r5, #127	; 0x7f
 8008390:	2d16      	cmp	r5, #22
 8008392:	4601      	mov	r1, r0
 8008394:	4604      	mov	r4, r0
 8008396:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800839a:	dc26      	bgt.n	80083ea <floorf+0x62>
 800839c:	2d00      	cmp	r5, #0
 800839e:	da0e      	bge.n	80083be <floorf+0x36>
 80083a0:	4917      	ldr	r1, [pc, #92]	; (8008400 <floorf+0x78>)
 80083a2:	f7f8 fc33 	bl	8000c0c <__addsf3>
 80083a6:	2100      	movs	r1, #0
 80083a8:	f7f8 fef4 	bl	8001194 <__aeabi_fcmpgt>
 80083ac:	b128      	cbz	r0, 80083ba <floorf+0x32>
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	da23      	bge.n	80083fa <floorf+0x72>
 80083b2:	4b14      	ldr	r3, [pc, #80]	; (8008404 <floorf+0x7c>)
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	bf18      	it	ne
 80083b8:	461c      	movne	r4, r3
 80083ba:	4621      	mov	r1, r4
 80083bc:	e01b      	b.n	80083f6 <floorf+0x6e>
 80083be:	4e12      	ldr	r6, [pc, #72]	; (8008408 <floorf+0x80>)
 80083c0:	412e      	asrs	r6, r5
 80083c2:	4230      	tst	r0, r6
 80083c4:	d017      	beq.n	80083f6 <floorf+0x6e>
 80083c6:	490e      	ldr	r1, [pc, #56]	; (8008400 <floorf+0x78>)
 80083c8:	f7f8 fc20 	bl	8000c0c <__addsf3>
 80083cc:	2100      	movs	r1, #0
 80083ce:	f7f8 fee1 	bl	8001194 <__aeabi_fcmpgt>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d0f1      	beq.n	80083ba <floorf+0x32>
 80083d6:	2c00      	cmp	r4, #0
 80083d8:	bfbe      	ittt	lt
 80083da:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80083de:	fa43 f505 	asrlt.w	r5, r3, r5
 80083e2:	1964      	addlt	r4, r4, r5
 80083e4:	ea24 0406 	bic.w	r4, r4, r6
 80083e8:	e7e7      	b.n	80083ba <floorf+0x32>
 80083ea:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80083ee:	d302      	bcc.n	80083f6 <floorf+0x6e>
 80083f0:	f7f8 fc0c 	bl	8000c0c <__addsf3>
 80083f4:	4601      	mov	r1, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	bd70      	pop	{r4, r5, r6, pc}
 80083fa:	2400      	movs	r4, #0
 80083fc:	e7dd      	b.n	80083ba <floorf+0x32>
 80083fe:	bf00      	nop
 8008400:	7149f2ca 	.word	0x7149f2ca
 8008404:	bf800000 	.word	0xbf800000
 8008408:	007fffff 	.word	0x007fffff

0800840c <scalbnf>:
 800840c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4603      	mov	r3, r0
 8008414:	460d      	mov	r5, r1
 8008416:	4604      	mov	r4, r0
 8008418:	d02a      	beq.n	8008470 <scalbnf+0x64>
 800841a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800841e:	d304      	bcc.n	800842a <scalbnf+0x1e>
 8008420:	4601      	mov	r1, r0
 8008422:	f7f8 fbf3 	bl	8000c0c <__addsf3>
 8008426:	4603      	mov	r3, r0
 8008428:	e022      	b.n	8008470 <scalbnf+0x64>
 800842a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800842e:	d117      	bne.n	8008460 <scalbnf+0x54>
 8008430:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008434:	f7f8 fcf2 	bl	8000e1c <__aeabi_fmul>
 8008438:	4a17      	ldr	r2, [pc, #92]	; (8008498 <scalbnf+0x8c>)
 800843a:	4603      	mov	r3, r0
 800843c:	4295      	cmp	r5, r2
 800843e:	db0b      	blt.n	8008458 <scalbnf+0x4c>
 8008440:	4604      	mov	r4, r0
 8008442:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008446:	3a19      	subs	r2, #25
 8008448:	442a      	add	r2, r5
 800844a:	2afe      	cmp	r2, #254	; 0xfe
 800844c:	dd0a      	ble.n	8008464 <scalbnf+0x58>
 800844e:	4913      	ldr	r1, [pc, #76]	; (800849c <scalbnf+0x90>)
 8008450:	4618      	mov	r0, r3
 8008452:	f361 001e 	bfi	r0, r1, #0, #31
 8008456:	e000      	b.n	800845a <scalbnf+0x4e>
 8008458:	4911      	ldr	r1, [pc, #68]	; (80084a0 <scalbnf+0x94>)
 800845a:	f7f8 fcdf 	bl	8000e1c <__aeabi_fmul>
 800845e:	e7e2      	b.n	8008426 <scalbnf+0x1a>
 8008460:	0dd2      	lsrs	r2, r2, #23
 8008462:	e7f1      	b.n	8008448 <scalbnf+0x3c>
 8008464:	2a00      	cmp	r2, #0
 8008466:	dd05      	ble.n	8008474 <scalbnf+0x68>
 8008468:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800846c:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8008470:	4618      	mov	r0, r3
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	f112 0f16 	cmn.w	r2, #22
 8008478:	da05      	bge.n	8008486 <scalbnf+0x7a>
 800847a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800847e:	4295      	cmp	r5, r2
 8008480:	dce5      	bgt.n	800844e <scalbnf+0x42>
 8008482:	4907      	ldr	r1, [pc, #28]	; (80084a0 <scalbnf+0x94>)
 8008484:	e7e4      	b.n	8008450 <scalbnf+0x44>
 8008486:	3219      	adds	r2, #25
 8008488:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800848c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8008490:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8008494:	e7e1      	b.n	800845a <scalbnf+0x4e>
 8008496:	bf00      	nop
 8008498:	ffff3cb0 	.word	0xffff3cb0
 800849c:	7149f2ca 	.word	0x7149f2ca
 80084a0:	0da24260 	.word	0x0da24260

080084a4 <atoi>:
 80084a4:	220a      	movs	r2, #10
 80084a6:	2100      	movs	r1, #0
 80084a8:	f000 bd52 	b.w	8008f50 <strtol>

080084ac <__errno>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	; (80084b4 <__errno+0x8>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000014 	.word	0x20000014

080084b8 <__libc_init_array>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	2600      	movs	r6, #0
 80084bc:	4d0c      	ldr	r5, [pc, #48]	; (80084f0 <__libc_init_array+0x38>)
 80084be:	4c0d      	ldr	r4, [pc, #52]	; (80084f4 <__libc_init_array+0x3c>)
 80084c0:	1b64      	subs	r4, r4, r5
 80084c2:	10a4      	asrs	r4, r4, #2
 80084c4:	42a6      	cmp	r6, r4
 80084c6:	d109      	bne.n	80084dc <__libc_init_array+0x24>
 80084c8:	f002 ff98 	bl	800b3fc <_init>
 80084cc:	2600      	movs	r6, #0
 80084ce:	4d0a      	ldr	r5, [pc, #40]	; (80084f8 <__libc_init_array+0x40>)
 80084d0:	4c0a      	ldr	r4, [pc, #40]	; (80084fc <__libc_init_array+0x44>)
 80084d2:	1b64      	subs	r4, r4, r5
 80084d4:	10a4      	asrs	r4, r4, #2
 80084d6:	42a6      	cmp	r6, r4
 80084d8:	d105      	bne.n	80084e6 <__libc_init_array+0x2e>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e0:	4798      	blx	r3
 80084e2:	3601      	adds	r6, #1
 80084e4:	e7ee      	b.n	80084c4 <__libc_init_array+0xc>
 80084e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ea:	4798      	blx	r3
 80084ec:	3601      	adds	r6, #1
 80084ee:	e7f2      	b.n	80084d6 <__libc_init_array+0x1e>
 80084f0:	0800bccc 	.word	0x0800bccc
 80084f4:	0800bccc 	.word	0x0800bccc
 80084f8:	0800bccc 	.word	0x0800bccc
 80084fc:	0800bcd4 	.word	0x0800bcd4

08008500 <memcpy>:
 8008500:	440a      	add	r2, r1
 8008502:	4291      	cmp	r1, r2
 8008504:	f100 33ff 	add.w	r3, r0, #4294967295
 8008508:	d100      	bne.n	800850c <memcpy+0xc>
 800850a:	4770      	bx	lr
 800850c:	b510      	push	{r4, lr}
 800850e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008512:	4291      	cmp	r1, r2
 8008514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008518:	d1f9      	bne.n	800850e <memcpy+0xe>
 800851a:	bd10      	pop	{r4, pc}

0800851c <memset>:
 800851c:	4603      	mov	r3, r0
 800851e:	4402      	add	r2, r0
 8008520:	4293      	cmp	r3, r2
 8008522:	d100      	bne.n	8008526 <memset+0xa>
 8008524:	4770      	bx	lr
 8008526:	f803 1b01 	strb.w	r1, [r3], #1
 800852a:	e7f9      	b.n	8008520 <memset+0x4>

0800852c <__cvt>:
 800852c:	2b00      	cmp	r3, #0
 800852e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008532:	461f      	mov	r7, r3
 8008534:	bfbb      	ittet	lt
 8008536:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800853a:	461f      	movlt	r7, r3
 800853c:	2300      	movge	r3, #0
 800853e:	232d      	movlt	r3, #45	; 0x2d
 8008540:	b088      	sub	sp, #32
 8008542:	4614      	mov	r4, r2
 8008544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008546:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008548:	7013      	strb	r3, [r2, #0]
 800854a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800854c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008550:	f023 0820 	bic.w	r8, r3, #32
 8008554:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008558:	d005      	beq.n	8008566 <__cvt+0x3a>
 800855a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800855e:	d100      	bne.n	8008562 <__cvt+0x36>
 8008560:	3501      	adds	r5, #1
 8008562:	2302      	movs	r3, #2
 8008564:	e000      	b.n	8008568 <__cvt+0x3c>
 8008566:	2303      	movs	r3, #3
 8008568:	aa07      	add	r2, sp, #28
 800856a:	9204      	str	r2, [sp, #16]
 800856c:	aa06      	add	r2, sp, #24
 800856e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008572:	e9cd 3500 	strd	r3, r5, [sp]
 8008576:	4622      	mov	r2, r4
 8008578:	463b      	mov	r3, r7
 800857a:	f000 fd81 	bl	8009080 <_dtoa_r>
 800857e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008582:	4606      	mov	r6, r0
 8008584:	d102      	bne.n	800858c <__cvt+0x60>
 8008586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008588:	07db      	lsls	r3, r3, #31
 800858a:	d522      	bpl.n	80085d2 <__cvt+0xa6>
 800858c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008590:	eb06 0905 	add.w	r9, r6, r5
 8008594:	d110      	bne.n	80085b8 <__cvt+0x8c>
 8008596:	7833      	ldrb	r3, [r6, #0]
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	d10a      	bne.n	80085b2 <__cvt+0x86>
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	4620      	mov	r0, r4
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 fa6c 	bl	8000a80 <__aeabi_dcmpeq>
 80085a8:	b918      	cbnz	r0, 80085b2 <__cvt+0x86>
 80085aa:	f1c5 0501 	rsb	r5, r5, #1
 80085ae:	f8ca 5000 	str.w	r5, [sl]
 80085b2:	f8da 3000 	ldr.w	r3, [sl]
 80085b6:	4499      	add	r9, r3
 80085b8:	2200      	movs	r2, #0
 80085ba:	2300      	movs	r3, #0
 80085bc:	4620      	mov	r0, r4
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f8 fa5e 	bl	8000a80 <__aeabi_dcmpeq>
 80085c4:	b108      	cbz	r0, 80085ca <__cvt+0x9e>
 80085c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80085ca:	2230      	movs	r2, #48	; 0x30
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	454b      	cmp	r3, r9
 80085d0:	d307      	bcc.n	80085e2 <__cvt+0xb6>
 80085d2:	4630      	mov	r0, r6
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085d8:	1b9b      	subs	r3, r3, r6
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	b008      	add	sp, #32
 80085de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e2:	1c59      	adds	r1, r3, #1
 80085e4:	9107      	str	r1, [sp, #28]
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	e7f0      	b.n	80085cc <__cvt+0xa0>

080085ea <__exponent>:
 80085ea:	4603      	mov	r3, r0
 80085ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ee:	2900      	cmp	r1, #0
 80085f0:	f803 2b02 	strb.w	r2, [r3], #2
 80085f4:	bfb6      	itet	lt
 80085f6:	222d      	movlt	r2, #45	; 0x2d
 80085f8:	222b      	movge	r2, #43	; 0x2b
 80085fa:	4249      	neglt	r1, r1
 80085fc:	2909      	cmp	r1, #9
 80085fe:	7042      	strb	r2, [r0, #1]
 8008600:	dd2b      	ble.n	800865a <__exponent+0x70>
 8008602:	f10d 0407 	add.w	r4, sp, #7
 8008606:	46a4      	mov	ip, r4
 8008608:	270a      	movs	r7, #10
 800860a:	fb91 f6f7 	sdiv	r6, r1, r7
 800860e:	460a      	mov	r2, r1
 8008610:	46a6      	mov	lr, r4
 8008612:	fb07 1516 	mls	r5, r7, r6, r1
 8008616:	2a63      	cmp	r2, #99	; 0x63
 8008618:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800861c:	4631      	mov	r1, r6
 800861e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008622:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008626:	dcf0      	bgt.n	800860a <__exponent+0x20>
 8008628:	3130      	adds	r1, #48	; 0x30
 800862a:	f1ae 0502 	sub.w	r5, lr, #2
 800862e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008632:	4629      	mov	r1, r5
 8008634:	1c44      	adds	r4, r0, #1
 8008636:	4561      	cmp	r1, ip
 8008638:	d30a      	bcc.n	8008650 <__exponent+0x66>
 800863a:	f10d 0209 	add.w	r2, sp, #9
 800863e:	eba2 020e 	sub.w	r2, r2, lr
 8008642:	4565      	cmp	r5, ip
 8008644:	bf88      	it	hi
 8008646:	2200      	movhi	r2, #0
 8008648:	4413      	add	r3, r2
 800864a:	1a18      	subs	r0, r3, r0
 800864c:	b003      	add	sp, #12
 800864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008650:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008654:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008658:	e7ed      	b.n	8008636 <__exponent+0x4c>
 800865a:	2330      	movs	r3, #48	; 0x30
 800865c:	3130      	adds	r1, #48	; 0x30
 800865e:	7083      	strb	r3, [r0, #2]
 8008660:	70c1      	strb	r1, [r0, #3]
 8008662:	1d03      	adds	r3, r0, #4
 8008664:	e7f1      	b.n	800864a <__exponent+0x60>
	...

08008668 <_printf_float>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	b091      	sub	sp, #68	; 0x44
 800866e:	460c      	mov	r4, r1
 8008670:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008674:	4616      	mov	r6, r2
 8008676:	461f      	mov	r7, r3
 8008678:	4605      	mov	r5, r0
 800867a:	f001 faef 	bl	8009c5c <_localeconv_r>
 800867e:	6803      	ldr	r3, [r0, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	9309      	str	r3, [sp, #36]	; 0x24
 8008684:	f7f7 fdd0 	bl	8000228 <strlen>
 8008688:	2300      	movs	r3, #0
 800868a:	930e      	str	r3, [sp, #56]	; 0x38
 800868c:	f8d8 3000 	ldr.w	r3, [r8]
 8008690:	900a      	str	r0, [sp, #40]	; 0x28
 8008692:	3307      	adds	r3, #7
 8008694:	f023 0307 	bic.w	r3, r3, #7
 8008698:	f103 0208 	add.w	r2, r3, #8
 800869c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80086a0:	f8d4 b000 	ldr.w	fp, [r4]
 80086a4:	f8c8 2000 	str.w	r2, [r8]
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80086b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80086b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	4640      	mov	r0, r8
 80086c0:	4b9c      	ldr	r3, [pc, #624]	; (8008934 <_printf_float+0x2cc>)
 80086c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086c4:	f7f8 fa0e 	bl	8000ae4 <__aeabi_dcmpun>
 80086c8:	bb70      	cbnz	r0, 8008728 <_printf_float+0xc0>
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	4640      	mov	r0, r8
 80086d0:	4b98      	ldr	r3, [pc, #608]	; (8008934 <_printf_float+0x2cc>)
 80086d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086d4:	f7f8 f9e8 	bl	8000aa8 <__aeabi_dcmple>
 80086d8:	bb30      	cbnz	r0, 8008728 <_printf_float+0xc0>
 80086da:	2200      	movs	r2, #0
 80086dc:	2300      	movs	r3, #0
 80086de:	4640      	mov	r0, r8
 80086e0:	4651      	mov	r1, sl
 80086e2:	f7f8 f9d7 	bl	8000a94 <__aeabi_dcmplt>
 80086e6:	b110      	cbz	r0, 80086ee <_printf_float+0x86>
 80086e8:	232d      	movs	r3, #45	; 0x2d
 80086ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ee:	4b92      	ldr	r3, [pc, #584]	; (8008938 <_printf_float+0x2d0>)
 80086f0:	4892      	ldr	r0, [pc, #584]	; (800893c <_printf_float+0x2d4>)
 80086f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80086f6:	bf94      	ite	ls
 80086f8:	4698      	movls	r8, r3
 80086fa:	4680      	movhi	r8, r0
 80086fc:	2303      	movs	r3, #3
 80086fe:	f04f 0a00 	mov.w	sl, #0
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	f02b 0304 	bic.w	r3, fp, #4
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	4633      	mov	r3, r6
 800870c:	4621      	mov	r1, r4
 800870e:	4628      	mov	r0, r5
 8008710:	9700      	str	r7, [sp, #0]
 8008712:	aa0f      	add	r2, sp, #60	; 0x3c
 8008714:	f000 f9d4 	bl	8008ac0 <_printf_common>
 8008718:	3001      	adds	r0, #1
 800871a:	f040 8090 	bne.w	800883e <_printf_float+0x1d6>
 800871e:	f04f 30ff 	mov.w	r0, #4294967295
 8008722:	b011      	add	sp, #68	; 0x44
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	4642      	mov	r2, r8
 800872a:	4653      	mov	r3, sl
 800872c:	4640      	mov	r0, r8
 800872e:	4651      	mov	r1, sl
 8008730:	f7f8 f9d8 	bl	8000ae4 <__aeabi_dcmpun>
 8008734:	b148      	cbz	r0, 800874a <_printf_float+0xe2>
 8008736:	f1ba 0f00 	cmp.w	sl, #0
 800873a:	bfb8      	it	lt
 800873c:	232d      	movlt	r3, #45	; 0x2d
 800873e:	4880      	ldr	r0, [pc, #512]	; (8008940 <_printf_float+0x2d8>)
 8008740:	bfb8      	it	lt
 8008742:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008746:	4b7f      	ldr	r3, [pc, #508]	; (8008944 <_printf_float+0x2dc>)
 8008748:	e7d3      	b.n	80086f2 <_printf_float+0x8a>
 800874a:	6863      	ldr	r3, [r4, #4]
 800874c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	d142      	bne.n	80087da <_printf_float+0x172>
 8008754:	2306      	movs	r3, #6
 8008756:	6063      	str	r3, [r4, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	9206      	str	r2, [sp, #24]
 800875c:	aa0e      	add	r2, sp, #56	; 0x38
 800875e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008762:	aa0d      	add	r2, sp, #52	; 0x34
 8008764:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008768:	9203      	str	r2, [sp, #12]
 800876a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800876e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	4642      	mov	r2, r8
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	4628      	mov	r0, r5
 800877c:	4653      	mov	r3, sl
 800877e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008780:	f7ff fed4 	bl	800852c <__cvt>
 8008784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008786:	4680      	mov	r8, r0
 8008788:	2947      	cmp	r1, #71	; 0x47
 800878a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800878c:	d108      	bne.n	80087a0 <_printf_float+0x138>
 800878e:	1cc8      	adds	r0, r1, #3
 8008790:	db02      	blt.n	8008798 <_printf_float+0x130>
 8008792:	6863      	ldr	r3, [r4, #4]
 8008794:	4299      	cmp	r1, r3
 8008796:	dd40      	ble.n	800881a <_printf_float+0x1b2>
 8008798:	f1a9 0902 	sub.w	r9, r9, #2
 800879c:	fa5f f989 	uxtb.w	r9, r9
 80087a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087a4:	d81f      	bhi.n	80087e6 <_printf_float+0x17e>
 80087a6:	464a      	mov	r2, r9
 80087a8:	3901      	subs	r1, #1
 80087aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087ae:	910d      	str	r1, [sp, #52]	; 0x34
 80087b0:	f7ff ff1b 	bl	80085ea <__exponent>
 80087b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087b6:	4682      	mov	sl, r0
 80087b8:	1813      	adds	r3, r2, r0
 80087ba:	2a01      	cmp	r2, #1
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	dc02      	bgt.n	80087c6 <_printf_float+0x15e>
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	07d2      	lsls	r2, r2, #31
 80087c4:	d501      	bpl.n	80087ca <_printf_float+0x162>
 80087c6:	3301      	adds	r3, #1
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d09b      	beq.n	800870a <_printf_float+0xa2>
 80087d2:	232d      	movs	r3, #45	; 0x2d
 80087d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d8:	e797      	b.n	800870a <_printf_float+0xa2>
 80087da:	2947      	cmp	r1, #71	; 0x47
 80087dc:	d1bc      	bne.n	8008758 <_printf_float+0xf0>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1ba      	bne.n	8008758 <_printf_float+0xf0>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e7b7      	b.n	8008756 <_printf_float+0xee>
 80087e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80087ea:	d118      	bne.n	800881e <_printf_float+0x1b6>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	6863      	ldr	r3, [r4, #4]
 80087f0:	dd0b      	ble.n	800880a <_printf_float+0x1a2>
 80087f2:	6121      	str	r1, [r4, #16]
 80087f4:	b913      	cbnz	r3, 80087fc <_printf_float+0x194>
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	07d0      	lsls	r0, r2, #31
 80087fa:	d502      	bpl.n	8008802 <_printf_float+0x19a>
 80087fc:	3301      	adds	r3, #1
 80087fe:	440b      	add	r3, r1
 8008800:	6123      	str	r3, [r4, #16]
 8008802:	f04f 0a00 	mov.w	sl, #0
 8008806:	65a1      	str	r1, [r4, #88]	; 0x58
 8008808:	e7df      	b.n	80087ca <_printf_float+0x162>
 800880a:	b913      	cbnz	r3, 8008812 <_printf_float+0x1aa>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	07d2      	lsls	r2, r2, #31
 8008810:	d501      	bpl.n	8008816 <_printf_float+0x1ae>
 8008812:	3302      	adds	r3, #2
 8008814:	e7f4      	b.n	8008800 <_printf_float+0x198>
 8008816:	2301      	movs	r3, #1
 8008818:	e7f2      	b.n	8008800 <_printf_float+0x198>
 800881a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800881e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008820:	4299      	cmp	r1, r3
 8008822:	db05      	blt.n	8008830 <_printf_float+0x1c8>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	6121      	str	r1, [r4, #16]
 8008828:	07d8      	lsls	r0, r3, #31
 800882a:	d5ea      	bpl.n	8008802 <_printf_float+0x19a>
 800882c:	1c4b      	adds	r3, r1, #1
 800882e:	e7e7      	b.n	8008800 <_printf_float+0x198>
 8008830:	2900      	cmp	r1, #0
 8008832:	bfcc      	ite	gt
 8008834:	2201      	movgt	r2, #1
 8008836:	f1c1 0202 	rsble	r2, r1, #2
 800883a:	4413      	add	r3, r2
 800883c:	e7e0      	b.n	8008800 <_printf_float+0x198>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	055a      	lsls	r2, r3, #21
 8008842:	d407      	bmi.n	8008854 <_printf_float+0x1ec>
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	4642      	mov	r2, r8
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	d12b      	bne.n	80088aa <_printf_float+0x242>
 8008852:	e764      	b.n	800871e <_printf_float+0xb6>
 8008854:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008858:	f240 80dd 	bls.w	8008a16 <_printf_float+0x3ae>
 800885c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008860:	2200      	movs	r2, #0
 8008862:	2300      	movs	r3, #0
 8008864:	f7f8 f90c 	bl	8000a80 <__aeabi_dcmpeq>
 8008868:	2800      	cmp	r0, #0
 800886a:	d033      	beq.n	80088d4 <_printf_float+0x26c>
 800886c:	2301      	movs	r3, #1
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	4a35      	ldr	r2, [pc, #212]	; (8008948 <_printf_float+0x2e0>)
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f af51 	beq.w	800871e <_printf_float+0xb6>
 800887c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008880:	429a      	cmp	r2, r3
 8008882:	db02      	blt.n	800888a <_printf_float+0x222>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	07d8      	lsls	r0, r3, #31
 8008888:	d50f      	bpl.n	80088aa <_printf_float+0x242>
 800888a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	f43f af42 	beq.w	800871e <_printf_float+0xb6>
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	f104 091a 	add.w	r9, r4, #26
 80088a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088a4:	3b01      	subs	r3, #1
 80088a6:	4543      	cmp	r3, r8
 80088a8:	dc09      	bgt.n	80088be <_printf_float+0x256>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	079b      	lsls	r3, r3, #30
 80088ae:	f100 8102 	bmi.w	8008ab6 <_printf_float+0x44e>
 80088b2:	68e0      	ldr	r0, [r4, #12]
 80088b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088b6:	4298      	cmp	r0, r3
 80088b8:	bfb8      	it	lt
 80088ba:	4618      	movlt	r0, r3
 80088bc:	e731      	b.n	8008722 <_printf_float+0xba>
 80088be:	2301      	movs	r3, #1
 80088c0:	464a      	mov	r2, r9
 80088c2:	4631      	mov	r1, r6
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	f43f af28 	beq.w	800871e <_printf_float+0xb6>
 80088ce:	f108 0801 	add.w	r8, r8, #1
 80088d2:	e7e6      	b.n	80088a2 <_printf_float+0x23a>
 80088d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dc38      	bgt.n	800894c <_printf_float+0x2e4>
 80088da:	2301      	movs	r3, #1
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	4a19      	ldr	r2, [pc, #100]	; (8008948 <_printf_float+0x2e0>)
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f af1a 	beq.w	800871e <_printf_float+0xb6>
 80088ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088ee:	4313      	orrs	r3, r2
 80088f0:	d102      	bne.n	80088f8 <_printf_float+0x290>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	07d9      	lsls	r1, r3, #31
 80088f6:	d5d8      	bpl.n	80088aa <_printf_float+0x242>
 80088f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af0b 	beq.w	800871e <_printf_float+0xb6>
 8008908:	f04f 0900 	mov.w	r9, #0
 800890c:	f104 0a1a 	add.w	sl, r4, #26
 8008910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008912:	425b      	negs	r3, r3
 8008914:	454b      	cmp	r3, r9
 8008916:	dc01      	bgt.n	800891c <_printf_float+0x2b4>
 8008918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891a:	e794      	b.n	8008846 <_printf_float+0x1de>
 800891c:	2301      	movs	r3, #1
 800891e:	4652      	mov	r2, sl
 8008920:	4631      	mov	r1, r6
 8008922:	4628      	mov	r0, r5
 8008924:	47b8      	blx	r7
 8008926:	3001      	adds	r0, #1
 8008928:	f43f aef9 	beq.w	800871e <_printf_float+0xb6>
 800892c:	f109 0901 	add.w	r9, r9, #1
 8008930:	e7ee      	b.n	8008910 <_printf_float+0x2a8>
 8008932:	bf00      	nop
 8008934:	7fefffff 	.word	0x7fefffff
 8008938:	0800b8f0 	.word	0x0800b8f0
 800893c:	0800b8f4 	.word	0x0800b8f4
 8008940:	0800b8fc 	.word	0x0800b8fc
 8008944:	0800b8f8 	.word	0x0800b8f8
 8008948:	0800b900 	.word	0x0800b900
 800894c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800894e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008950:	429a      	cmp	r2, r3
 8008952:	bfa8      	it	ge
 8008954:	461a      	movge	r2, r3
 8008956:	2a00      	cmp	r2, #0
 8008958:	4691      	mov	r9, r2
 800895a:	dc37      	bgt.n	80089cc <_printf_float+0x364>
 800895c:	f04f 0b00 	mov.w	fp, #0
 8008960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008964:	f104 021a 	add.w	r2, r4, #26
 8008968:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800896c:	ebaa 0309 	sub.w	r3, sl, r9
 8008970:	455b      	cmp	r3, fp
 8008972:	dc33      	bgt.n	80089dc <_printf_float+0x374>
 8008974:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008978:	429a      	cmp	r2, r3
 800897a:	db3b      	blt.n	80089f4 <_printf_float+0x38c>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07da      	lsls	r2, r3, #31
 8008980:	d438      	bmi.n	80089f4 <_printf_float+0x38c>
 8008982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008984:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008986:	eba3 020a 	sub.w	r2, r3, sl
 800898a:	eba3 0901 	sub.w	r9, r3, r1
 800898e:	4591      	cmp	r9, r2
 8008990:	bfa8      	it	ge
 8008992:	4691      	movge	r9, r2
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	dc34      	bgt.n	8008a04 <_printf_float+0x39c>
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a2:	f104 0a1a 	add.w	sl, r4, #26
 80089a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	eba3 0309 	sub.w	r3, r3, r9
 80089b0:	4543      	cmp	r3, r8
 80089b2:	f77f af7a 	ble.w	80088aa <_printf_float+0x242>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4652      	mov	r2, sl
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f aeac 	beq.w	800871e <_printf_float+0xb6>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	e7ec      	b.n	80089a6 <_printf_float+0x33e>
 80089cc:	4613      	mov	r3, r2
 80089ce:	4631      	mov	r1, r6
 80089d0:	4642      	mov	r2, r8
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	d1c0      	bne.n	800895c <_printf_float+0x2f4>
 80089da:	e6a0      	b.n	800871e <_printf_float+0xb6>
 80089dc:	2301      	movs	r3, #1
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f ae99 	beq.w	800871e <_printf_float+0xb6>
 80089ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089ee:	f10b 0b01 	add.w	fp, fp, #1
 80089f2:	e7b9      	b.n	8008968 <_printf_float+0x300>
 80089f4:	4631      	mov	r1, r6
 80089f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b8      	blx	r7
 80089fe:	3001      	adds	r0, #1
 8008a00:	d1bf      	bne.n	8008982 <_printf_float+0x31a>
 8008a02:	e68c      	b.n	800871e <_printf_float+0xb6>
 8008a04:	464b      	mov	r3, r9
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	eb08 020a 	add.w	r2, r8, sl
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	d1c2      	bne.n	800899a <_printf_float+0x332>
 8008a14:	e683      	b.n	800871e <_printf_float+0xb6>
 8008a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a18:	2a01      	cmp	r2, #1
 8008a1a:	dc01      	bgt.n	8008a20 <_printf_float+0x3b8>
 8008a1c:	07db      	lsls	r3, r3, #31
 8008a1e:	d537      	bpl.n	8008a90 <_printf_float+0x428>
 8008a20:	2301      	movs	r3, #1
 8008a22:	4642      	mov	r2, r8
 8008a24:	4631      	mov	r1, r6
 8008a26:	4628      	mov	r0, r5
 8008a28:	47b8      	blx	r7
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	f43f ae77 	beq.w	800871e <_printf_float+0xb6>
 8008a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f ae6f 	beq.w	800871e <_printf_float+0xb6>
 8008a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	f7f8 f81a 	bl	8000a80 <__aeabi_dcmpeq>
 8008a4c:	b9d8      	cbnz	r0, 8008a86 <_printf_float+0x41e>
 8008a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a50:	f108 0201 	add.w	r2, r8, #1
 8008a54:	3b01      	subs	r3, #1
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d10e      	bne.n	8008a7e <_printf_float+0x416>
 8008a60:	e65d      	b.n	800871e <_printf_float+0xb6>
 8008a62:	2301      	movs	r3, #1
 8008a64:	464a      	mov	r2, r9
 8008a66:	4631      	mov	r1, r6
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f43f ae56 	beq.w	800871e <_printf_float+0xb6>
 8008a72:	f108 0801 	add.w	r8, r8, #1
 8008a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	4543      	cmp	r3, r8
 8008a7c:	dcf1      	bgt.n	8008a62 <_printf_float+0x3fa>
 8008a7e:	4653      	mov	r3, sl
 8008a80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a84:	e6e0      	b.n	8008848 <_printf_float+0x1e0>
 8008a86:	f04f 0800 	mov.w	r8, #0
 8008a8a:	f104 091a 	add.w	r9, r4, #26
 8008a8e:	e7f2      	b.n	8008a76 <_printf_float+0x40e>
 8008a90:	2301      	movs	r3, #1
 8008a92:	4642      	mov	r2, r8
 8008a94:	e7df      	b.n	8008a56 <_printf_float+0x3ee>
 8008a96:	2301      	movs	r3, #1
 8008a98:	464a      	mov	r2, r9
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	f43f ae3c 	beq.w	800871e <_printf_float+0xb6>
 8008aa6:	f108 0801 	add.w	r8, r8, #1
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008aae:	1a5b      	subs	r3, r3, r1
 8008ab0:	4543      	cmp	r3, r8
 8008ab2:	dcf0      	bgt.n	8008a96 <_printf_float+0x42e>
 8008ab4:	e6fd      	b.n	80088b2 <_printf_float+0x24a>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	f104 0919 	add.w	r9, r4, #25
 8008abe:	e7f4      	b.n	8008aaa <_printf_float+0x442>

08008ac0 <_printf_common>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	4699      	mov	r9, r3
 8008ac8:	688a      	ldr	r2, [r1, #8]
 8008aca:	690b      	ldr	r3, [r1, #16]
 8008acc:	4607      	mov	r7, r0
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	bfb8      	it	lt
 8008ad2:	4613      	movlt	r3, r2
 8008ad4:	6033      	str	r3, [r6, #0]
 8008ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ada:	460c      	mov	r4, r1
 8008adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ae0:	b10a      	cbz	r2, 8008ae6 <_printf_common+0x26>
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	6033      	str	r3, [r6, #0]
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	0699      	lsls	r1, r3, #26
 8008aea:	bf42      	ittt	mi
 8008aec:	6833      	ldrmi	r3, [r6, #0]
 8008aee:	3302      	addmi	r3, #2
 8008af0:	6033      	strmi	r3, [r6, #0]
 8008af2:	6825      	ldr	r5, [r4, #0]
 8008af4:	f015 0506 	ands.w	r5, r5, #6
 8008af8:	d106      	bne.n	8008b08 <_printf_common+0x48>
 8008afa:	f104 0a19 	add.w	sl, r4, #25
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	6832      	ldr	r2, [r6, #0]
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dc28      	bgt.n	8008b5a <_printf_common+0x9a>
 8008b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b0c:	1e13      	subs	r3, r2, #0
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	bf18      	it	ne
 8008b12:	2301      	movne	r3, #1
 8008b14:	0692      	lsls	r2, r2, #26
 8008b16:	d42d      	bmi.n	8008b74 <_printf_common+0xb4>
 8008b18:	4649      	mov	r1, r9
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b20:	47c0      	blx	r8
 8008b22:	3001      	adds	r0, #1
 8008b24:	d020      	beq.n	8008b68 <_printf_common+0xa8>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	68e5      	ldr	r5, [r4, #12]
 8008b2a:	f003 0306 	and.w	r3, r3, #6
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	bf18      	it	ne
 8008b32:	2500      	movne	r5, #0
 8008b34:	6832      	ldr	r2, [r6, #0]
 8008b36:	f04f 0600 	mov.w	r6, #0
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	bf08      	it	eq
 8008b3e:	1aad      	subeq	r5, r5, r2
 8008b40:	6922      	ldr	r2, [r4, #16]
 8008b42:	bf08      	it	eq
 8008b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bfc4      	itt	gt
 8008b4c:	1a9b      	subgt	r3, r3, r2
 8008b4e:	18ed      	addgt	r5, r5, r3
 8008b50:	341a      	adds	r4, #26
 8008b52:	42b5      	cmp	r5, r6
 8008b54:	d11a      	bne.n	8008b8c <_printf_common+0xcc>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e008      	b.n	8008b6c <_printf_common+0xac>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	4649      	mov	r1, r9
 8008b60:	4638      	mov	r0, r7
 8008b62:	47c0      	blx	r8
 8008b64:	3001      	adds	r0, #1
 8008b66:	d103      	bne.n	8008b70 <_printf_common+0xb0>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b70:	3501      	adds	r5, #1
 8008b72:	e7c4      	b.n	8008afe <_printf_common+0x3e>
 8008b74:	2030      	movs	r0, #48	; 0x30
 8008b76:	18e1      	adds	r1, r4, r3
 8008b78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b82:	4422      	add	r2, r4
 8008b84:	3302      	adds	r3, #2
 8008b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b8a:	e7c5      	b.n	8008b18 <_printf_common+0x58>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4649      	mov	r1, r9
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c0      	blx	r8
 8008b96:	3001      	adds	r0, #1
 8008b98:	d0e6      	beq.n	8008b68 <_printf_common+0xa8>
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7d9      	b.n	8008b52 <_printf_common+0x92>
	...

08008ba0 <_printf_i>:
 8008ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	7e0f      	ldrb	r7, [r1, #24]
 8008ba6:	4691      	mov	r9, r2
 8008ba8:	2f78      	cmp	r7, #120	; 0x78
 8008baa:	4680      	mov	r8, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	469a      	mov	sl, r3
 8008bb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bb6:	d807      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bb8:	2f62      	cmp	r7, #98	; 0x62
 8008bba:	d80a      	bhi.n	8008bd2 <_printf_i+0x32>
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	f000 80d9 	beq.w	8008d74 <_printf_i+0x1d4>
 8008bc2:	2f58      	cmp	r7, #88	; 0x58
 8008bc4:	f000 80a4 	beq.w	8008d10 <_printf_i+0x170>
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bd0:	e03a      	b.n	8008c48 <_printf_i+0xa8>
 8008bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bd6:	2b15      	cmp	r3, #21
 8008bd8:	d8f6      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bda:	a101      	add	r1, pc, #4	; (adr r1, 8008be0 <_printf_i+0x40>)
 8008bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c4d 	.word	0x08008c4d
 8008be8:	08008bc9 	.word	0x08008bc9
 8008bec:	08008bc9 	.word	0x08008bc9
 8008bf0:	08008bc9 	.word	0x08008bc9
 8008bf4:	08008bc9 	.word	0x08008bc9
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008bc9 	.word	0x08008bc9
 8008c00:	08008bc9 	.word	0x08008bc9
 8008c04:	08008bc9 	.word	0x08008bc9
 8008c08:	08008bc9 	.word	0x08008bc9
 8008c0c:	08008d5b 	.word	0x08008d5b
 8008c10:	08008c7d 	.word	0x08008c7d
 8008c14:	08008d3d 	.word	0x08008d3d
 8008c18:	08008bc9 	.word	0x08008bc9
 8008c1c:	08008bc9 	.word	0x08008bc9
 8008c20:	08008d7d 	.word	0x08008d7d
 8008c24:	08008bc9 	.word	0x08008bc9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bc9 	.word	0x08008bc9
 8008c30:	08008bc9 	.word	0x08008bc9
 8008c34:	08008d45 	.word	0x08008d45
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	602a      	str	r2, [r5, #0]
 8008c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0a4      	b.n	8008d96 <_printf_i+0x1f6>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	6829      	ldr	r1, [r5, #0]
 8008c50:	0606      	lsls	r6, r0, #24
 8008c52:	f101 0304 	add.w	r3, r1, #4
 8008c56:	d50a      	bpl.n	8008c6e <_printf_i+0xce>
 8008c58:	680e      	ldr	r6, [r1, #0]
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	da03      	bge.n	8008c68 <_printf_i+0xc8>
 8008c60:	232d      	movs	r3, #45	; 0x2d
 8008c62:	4276      	negs	r6, r6
 8008c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c68:	230a      	movs	r3, #10
 8008c6a:	485e      	ldr	r0, [pc, #376]	; (8008de4 <_printf_i+0x244>)
 8008c6c:	e019      	b.n	8008ca2 <_printf_i+0x102>
 8008c6e:	680e      	ldr	r6, [r1, #0]
 8008c70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	bf18      	it	ne
 8008c78:	b236      	sxthne	r6, r6
 8008c7a:	e7ef      	b.n	8008c5c <_printf_i+0xbc>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6029      	str	r1, [r5, #0]
 8008c84:	0601      	lsls	r1, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xec>
 8008c88:	681e      	ldr	r6, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0xf2>
 8008c8c:	0646      	lsls	r6, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xe8>
 8008c90:	881e      	ldrh	r6, [r3, #0]
 8008c92:	2f6f      	cmp	r7, #111	; 0x6f
 8008c94:	bf0c      	ite	eq
 8008c96:	2308      	moveq	r3, #8
 8008c98:	230a      	movne	r3, #10
 8008c9a:	4852      	ldr	r0, [pc, #328]	; (8008de4 <_printf_i+0x244>)
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ca2:	6865      	ldr	r5, [r4, #4]
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	bfa8      	it	ge
 8008ca8:	6821      	ldrge	r1, [r4, #0]
 8008caa:	60a5      	str	r5, [r4, #8]
 8008cac:	bfa4      	itt	ge
 8008cae:	f021 0104 	bicge.w	r1, r1, #4
 8008cb2:	6021      	strge	r1, [r4, #0]
 8008cb4:	b90e      	cbnz	r6, 8008cba <_printf_i+0x11a>
 8008cb6:	2d00      	cmp	r5, #0
 8008cb8:	d04d      	beq.n	8008d56 <_printf_i+0x1b6>
 8008cba:	4615      	mov	r5, r2
 8008cbc:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cc0:	fb03 6711 	mls	r7, r3, r1, r6
 8008cc4:	5dc7      	ldrb	r7, [r0, r7]
 8008cc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cca:	4637      	mov	r7, r6
 8008ccc:	42bb      	cmp	r3, r7
 8008cce:	460e      	mov	r6, r1
 8008cd0:	d9f4      	bls.n	8008cbc <_printf_i+0x11c>
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d10b      	bne.n	8008cee <_printf_i+0x14e>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	07de      	lsls	r6, r3, #31
 8008cda:	d508      	bpl.n	8008cee <_printf_i+0x14e>
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	6861      	ldr	r1, [r4, #4]
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	bfde      	ittt	le
 8008ce4:	2330      	movle	r3, #48	; 0x30
 8008ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cee:	1b52      	subs	r2, r2, r5
 8008cf0:	6122      	str	r2, [r4, #16]
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	f8cd a000 	str.w	sl, [sp]
 8008cfc:	aa03      	add	r2, sp, #12
 8008cfe:	f7ff fedf 	bl	8008ac0 <_printf_common>
 8008d02:	3001      	adds	r0, #1
 8008d04:	d14c      	bne.n	8008da0 <_printf_i+0x200>
 8008d06:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0a:	b004      	add	sp, #16
 8008d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d10:	4834      	ldr	r0, [pc, #208]	; (8008de4 <_printf_i+0x244>)
 8008d12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d16:	6829      	ldr	r1, [r5, #0]
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d1e:	6029      	str	r1, [r5, #0]
 8008d20:	061d      	lsls	r5, r3, #24
 8008d22:	d514      	bpl.n	8008d4e <_printf_i+0x1ae>
 8008d24:	07df      	lsls	r7, r3, #31
 8008d26:	bf44      	itt	mi
 8008d28:	f043 0320 	orrmi.w	r3, r3, #32
 8008d2c:	6023      	strmi	r3, [r4, #0]
 8008d2e:	b91e      	cbnz	r6, 8008d38 <_printf_i+0x198>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	f023 0320 	bic.w	r3, r3, #32
 8008d36:	6023      	str	r3, [r4, #0]
 8008d38:	2310      	movs	r3, #16
 8008d3a:	e7af      	b.n	8008c9c <_printf_i+0xfc>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	f043 0320 	orr.w	r3, r3, #32
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	2378      	movs	r3, #120	; 0x78
 8008d46:	4828      	ldr	r0, [pc, #160]	; (8008de8 <_printf_i+0x248>)
 8008d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d4c:	e7e3      	b.n	8008d16 <_printf_i+0x176>
 8008d4e:	0659      	lsls	r1, r3, #25
 8008d50:	bf48      	it	mi
 8008d52:	b2b6      	uxthmi	r6, r6
 8008d54:	e7e6      	b.n	8008d24 <_printf_i+0x184>
 8008d56:	4615      	mov	r5, r2
 8008d58:	e7bb      	b.n	8008cd2 <_printf_i+0x132>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	6826      	ldr	r6, [r4, #0]
 8008d5e:	1d18      	adds	r0, r3, #4
 8008d60:	6961      	ldr	r1, [r4, #20]
 8008d62:	6028      	str	r0, [r5, #0]
 8008d64:	0635      	lsls	r5, r6, #24
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	d501      	bpl.n	8008d6e <_printf_i+0x1ce>
 8008d6a:	6019      	str	r1, [r3, #0]
 8008d6c:	e002      	b.n	8008d74 <_printf_i+0x1d4>
 8008d6e:	0670      	lsls	r0, r6, #25
 8008d70:	d5fb      	bpl.n	8008d6a <_printf_i+0x1ca>
 8008d72:	8019      	strh	r1, [r3, #0]
 8008d74:	2300      	movs	r3, #0
 8008d76:	4615      	mov	r5, r2
 8008d78:	6123      	str	r3, [r4, #16]
 8008d7a:	e7ba      	b.n	8008cf2 <_printf_i+0x152>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	2100      	movs	r1, #0
 8008d80:	1d1a      	adds	r2, r3, #4
 8008d82:	602a      	str	r2, [r5, #0]
 8008d84:	681d      	ldr	r5, [r3, #0]
 8008d86:	6862      	ldr	r2, [r4, #4]
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f000 ff73 	bl	8009c74 <memchr>
 8008d8e:	b108      	cbz	r0, 8008d94 <_printf_i+0x1f4>
 8008d90:	1b40      	subs	r0, r0, r5
 8008d92:	6060      	str	r0, [r4, #4]
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9e:	e7a8      	b.n	8008cf2 <_printf_i+0x152>
 8008da0:	462a      	mov	r2, r5
 8008da2:	4649      	mov	r1, r9
 8008da4:	4640      	mov	r0, r8
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	47d0      	blx	sl
 8008daa:	3001      	adds	r0, #1
 8008dac:	d0ab      	beq.n	8008d06 <_printf_i+0x166>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	079b      	lsls	r3, r3, #30
 8008db2:	d413      	bmi.n	8008ddc <_printf_i+0x23c>
 8008db4:	68e0      	ldr	r0, [r4, #12]
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	4298      	cmp	r0, r3
 8008dba:	bfb8      	it	lt
 8008dbc:	4618      	movlt	r0, r3
 8008dbe:	e7a4      	b.n	8008d0a <_printf_i+0x16a>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	47d0      	blx	sl
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d09b      	beq.n	8008d06 <_printf_i+0x166>
 8008dce:	3501      	adds	r5, #1
 8008dd0:	68e3      	ldr	r3, [r4, #12]
 8008dd2:	9903      	ldr	r1, [sp, #12]
 8008dd4:	1a5b      	subs	r3, r3, r1
 8008dd6:	42ab      	cmp	r3, r5
 8008dd8:	dcf2      	bgt.n	8008dc0 <_printf_i+0x220>
 8008dda:	e7eb      	b.n	8008db4 <_printf_i+0x214>
 8008ddc:	2500      	movs	r5, #0
 8008dde:	f104 0619 	add.w	r6, r4, #25
 8008de2:	e7f5      	b.n	8008dd0 <_printf_i+0x230>
 8008de4:	0800b902 	.word	0x0800b902
 8008de8:	0800b913 	.word	0x0800b913

08008dec <siprintf>:
 8008dec:	b40e      	push	{r1, r2, r3}
 8008dee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008df2:	b500      	push	{lr}
 8008df4:	b09c      	sub	sp, #112	; 0x70
 8008df6:	ab1d      	add	r3, sp, #116	; 0x74
 8008df8:	9002      	str	r0, [sp, #8]
 8008dfa:	9006      	str	r0, [sp, #24]
 8008dfc:	9107      	str	r1, [sp, #28]
 8008dfe:	9104      	str	r1, [sp, #16]
 8008e00:	4808      	ldr	r0, [pc, #32]	; (8008e24 <siprintf+0x38>)
 8008e02:	4909      	ldr	r1, [pc, #36]	; (8008e28 <siprintf+0x3c>)
 8008e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e08:	9105      	str	r1, [sp, #20]
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	a902      	add	r1, sp, #8
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	f001 fc0c 	bl	800a62c <_svfiprintf_r>
 8008e14:	2200      	movs	r2, #0
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	b01c      	add	sp, #112	; 0x70
 8008e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e20:	b003      	add	sp, #12
 8008e22:	4770      	bx	lr
 8008e24:	20000014 	.word	0x20000014
 8008e28:	ffff0208 	.word	0xffff0208

08008e2c <strstr>:
 8008e2c:	780a      	ldrb	r2, [r1, #0]
 8008e2e:	b570      	push	{r4, r5, r6, lr}
 8008e30:	b96a      	cbnz	r2, 8008e4e <strstr+0x22>
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d109      	bne.n	8008e4c <strstr+0x20>
 8008e38:	460c      	mov	r4, r1
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0f6      	beq.n	8008e32 <strstr+0x6>
 8008e44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008e48:	429e      	cmp	r6, r3
 8008e4a:	d0f7      	beq.n	8008e3c <strstr+0x10>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	7803      	ldrb	r3, [r0, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1ef      	bne.n	8008e34 <strstr+0x8>
 8008e54:	4618      	mov	r0, r3
 8008e56:	e7ec      	b.n	8008e32 <strstr+0x6>

08008e58 <_strtol_l.constprop.0>:
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5e:	4680      	mov	r8, r0
 8008e60:	d001      	beq.n	8008e66 <_strtol_l.constprop.0+0xe>
 8008e62:	2b24      	cmp	r3, #36	; 0x24
 8008e64:	d906      	bls.n	8008e74 <_strtol_l.constprop.0+0x1c>
 8008e66:	f7ff fb21 	bl	80084ac <__errno>
 8008e6a:	2316      	movs	r3, #22
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e74:	460d      	mov	r5, r1
 8008e76:	4f35      	ldr	r7, [pc, #212]	; (8008f4c <_strtol_l.constprop.0+0xf4>)
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e7e:	5de6      	ldrb	r6, [r4, r7]
 8008e80:	f016 0608 	ands.w	r6, r6, #8
 8008e84:	d1f8      	bne.n	8008e78 <_strtol_l.constprop.0+0x20>
 8008e86:	2c2d      	cmp	r4, #45	; 0x2d
 8008e88:	d12f      	bne.n	8008eea <_strtol_l.constprop.0+0x92>
 8008e8a:	2601      	movs	r6, #1
 8008e8c:	782c      	ldrb	r4, [r5, #0]
 8008e8e:	1c85      	adds	r5, r0, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d057      	beq.n	8008f44 <_strtol_l.constprop.0+0xec>
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d109      	bne.n	8008eac <_strtol_l.constprop.0+0x54>
 8008e98:	2c30      	cmp	r4, #48	; 0x30
 8008e9a:	d107      	bne.n	8008eac <_strtol_l.constprop.0+0x54>
 8008e9c:	7828      	ldrb	r0, [r5, #0]
 8008e9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008ea2:	2858      	cmp	r0, #88	; 0x58
 8008ea4:	d149      	bne.n	8008f3a <_strtol_l.constprop.0+0xe2>
 8008ea6:	2310      	movs	r3, #16
 8008ea8:	786c      	ldrb	r4, [r5, #1]
 8008eaa:	3502      	adds	r5, #2
 8008eac:	2700      	movs	r7, #0
 8008eae:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008eb2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008eb6:	fbbe f9f3 	udiv	r9, lr, r3
 8008eba:	4638      	mov	r0, r7
 8008ebc:	fb03 ea19 	mls	sl, r3, r9, lr
 8008ec0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ec4:	f1bc 0f09 	cmp.w	ip, #9
 8008ec8:	d814      	bhi.n	8008ef4 <_strtol_l.constprop.0+0x9c>
 8008eca:	4664      	mov	r4, ip
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	dd22      	ble.n	8008f16 <_strtol_l.constprop.0+0xbe>
 8008ed0:	2f00      	cmp	r7, #0
 8008ed2:	db1d      	blt.n	8008f10 <_strtol_l.constprop.0+0xb8>
 8008ed4:	4581      	cmp	r9, r0
 8008ed6:	d31b      	bcc.n	8008f10 <_strtol_l.constprop.0+0xb8>
 8008ed8:	d101      	bne.n	8008ede <_strtol_l.constprop.0+0x86>
 8008eda:	45a2      	cmp	sl, r4
 8008edc:	db18      	blt.n	8008f10 <_strtol_l.constprop.0+0xb8>
 8008ede:	2701      	movs	r7, #1
 8008ee0:	fb00 4003 	mla	r0, r0, r3, r4
 8008ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ee8:	e7ea      	b.n	8008ec0 <_strtol_l.constprop.0+0x68>
 8008eea:	2c2b      	cmp	r4, #43	; 0x2b
 8008eec:	bf04      	itt	eq
 8008eee:	782c      	ldrbeq	r4, [r5, #0]
 8008ef0:	1c85      	addeq	r5, r0, #2
 8008ef2:	e7cd      	b.n	8008e90 <_strtol_l.constprop.0+0x38>
 8008ef4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ef8:	f1bc 0f19 	cmp.w	ip, #25
 8008efc:	d801      	bhi.n	8008f02 <_strtol_l.constprop.0+0xaa>
 8008efe:	3c37      	subs	r4, #55	; 0x37
 8008f00:	e7e4      	b.n	8008ecc <_strtol_l.constprop.0+0x74>
 8008f02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008f06:	f1bc 0f19 	cmp.w	ip, #25
 8008f0a:	d804      	bhi.n	8008f16 <_strtol_l.constprop.0+0xbe>
 8008f0c:	3c57      	subs	r4, #87	; 0x57
 8008f0e:	e7dd      	b.n	8008ecc <_strtol_l.constprop.0+0x74>
 8008f10:	f04f 37ff 	mov.w	r7, #4294967295
 8008f14:	e7e6      	b.n	8008ee4 <_strtol_l.constprop.0+0x8c>
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	da07      	bge.n	8008f2a <_strtol_l.constprop.0+0xd2>
 8008f1a:	2322      	movs	r3, #34	; 0x22
 8008f1c:	4670      	mov	r0, lr
 8008f1e:	f8c8 3000 	str.w	r3, [r8]
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	d0a4      	beq.n	8008e70 <_strtol_l.constprop.0+0x18>
 8008f26:	1e69      	subs	r1, r5, #1
 8008f28:	e005      	b.n	8008f36 <_strtol_l.constprop.0+0xde>
 8008f2a:	b106      	cbz	r6, 8008f2e <_strtol_l.constprop.0+0xd6>
 8008f2c:	4240      	negs	r0, r0
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	d09e      	beq.n	8008e70 <_strtol_l.constprop.0+0x18>
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	d1f7      	bne.n	8008f26 <_strtol_l.constprop.0+0xce>
 8008f36:	6011      	str	r1, [r2, #0]
 8008f38:	e79a      	b.n	8008e70 <_strtol_l.constprop.0+0x18>
 8008f3a:	2430      	movs	r4, #48	; 0x30
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1b5      	bne.n	8008eac <_strtol_l.constprop.0+0x54>
 8008f40:	2308      	movs	r3, #8
 8008f42:	e7b3      	b.n	8008eac <_strtol_l.constprop.0+0x54>
 8008f44:	2c30      	cmp	r4, #48	; 0x30
 8008f46:	d0a9      	beq.n	8008e9c <_strtol_l.constprop.0+0x44>
 8008f48:	230a      	movs	r3, #10
 8008f4a:	e7af      	b.n	8008eac <_strtol_l.constprop.0+0x54>
 8008f4c:	0800b925 	.word	0x0800b925

08008f50 <strtol>:
 8008f50:	4613      	mov	r3, r2
 8008f52:	460a      	mov	r2, r1
 8008f54:	4601      	mov	r1, r0
 8008f56:	4802      	ldr	r0, [pc, #8]	; (8008f60 <strtol+0x10>)
 8008f58:	6800      	ldr	r0, [r0, #0]
 8008f5a:	f7ff bf7d 	b.w	8008e58 <_strtol_l.constprop.0>
 8008f5e:	bf00      	nop
 8008f60:	20000014 	.word	0x20000014

08008f64 <quorem>:
 8008f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f68:	6903      	ldr	r3, [r0, #16]
 8008f6a:	690c      	ldr	r4, [r1, #16]
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	f2c0 8082 	blt.w	8009078 <quorem+0x114>
 8008f74:	3c01      	subs	r4, #1
 8008f76:	f100 0514 	add.w	r5, r0, #20
 8008f7a:	f101 0814 	add.w	r8, r1, #20
 8008f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f82:	9301      	str	r3, [sp, #4]
 8008f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f9c:	d331      	bcc.n	8009002 <quorem+0x9e>
 8008f9e:	f04f 0e00 	mov.w	lr, #0
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	46ac      	mov	ip, r5
 8008fa6:	46f2      	mov	sl, lr
 8008fa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fac:	b293      	uxth	r3, r2
 8008fae:	fb06 e303 	mla	r3, r6, r3, lr
 8008fb2:	0c12      	lsrs	r2, r2, #16
 8008fb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	fb06 e202 	mla	r2, r6, r2, lr
 8008fbe:	ebaa 0303 	sub.w	r3, sl, r3
 8008fc2:	f8dc a000 	ldr.w	sl, [ip]
 8008fc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fca:	fa1f fa8a 	uxth.w	sl, sl
 8008fce:	4453      	add	r3, sl
 8008fd0:	f8dc a000 	ldr.w	sl, [ip]
 8008fd4:	b292      	uxth	r2, r2
 8008fd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008fda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fe4:	4581      	cmp	r9, r0
 8008fe6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fea:	f84c 3b04 	str.w	r3, [ip], #4
 8008fee:	d2db      	bcs.n	8008fa8 <quorem+0x44>
 8008ff0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ff4:	b92b      	cbnz	r3, 8009002 <quorem+0x9e>
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	3b04      	subs	r3, #4
 8008ffa:	429d      	cmp	r5, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	d32f      	bcc.n	8009060 <quorem+0xfc>
 8009000:	613c      	str	r4, [r7, #16]
 8009002:	4638      	mov	r0, r7
 8009004:	f001 f8c2 	bl	800a18c <__mcmp>
 8009008:	2800      	cmp	r0, #0
 800900a:	db25      	blt.n	8009058 <quorem+0xf4>
 800900c:	4628      	mov	r0, r5
 800900e:	f04f 0c00 	mov.w	ip, #0
 8009012:	3601      	adds	r6, #1
 8009014:	f858 1b04 	ldr.w	r1, [r8], #4
 8009018:	f8d0 e000 	ldr.w	lr, [r0]
 800901c:	b28b      	uxth	r3, r1
 800901e:	ebac 0303 	sub.w	r3, ip, r3
 8009022:	fa1f f28e 	uxth.w	r2, lr
 8009026:	4413      	add	r3, r2
 8009028:	0c0a      	lsrs	r2, r1, #16
 800902a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800902e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009032:	b29b      	uxth	r3, r3
 8009034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009038:	45c1      	cmp	r9, r8
 800903a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800903e:	f840 3b04 	str.w	r3, [r0], #4
 8009042:	d2e7      	bcs.n	8009014 <quorem+0xb0>
 8009044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800904c:	b922      	cbnz	r2, 8009058 <quorem+0xf4>
 800904e:	3b04      	subs	r3, #4
 8009050:	429d      	cmp	r5, r3
 8009052:	461a      	mov	r2, r3
 8009054:	d30a      	bcc.n	800906c <quorem+0x108>
 8009056:	613c      	str	r4, [r7, #16]
 8009058:	4630      	mov	r0, r6
 800905a:	b003      	add	sp, #12
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	3b04      	subs	r3, #4
 8009064:	2a00      	cmp	r2, #0
 8009066:	d1cb      	bne.n	8009000 <quorem+0x9c>
 8009068:	3c01      	subs	r4, #1
 800906a:	e7c6      	b.n	8008ffa <quorem+0x96>
 800906c:	6812      	ldr	r2, [r2, #0]
 800906e:	3b04      	subs	r3, #4
 8009070:	2a00      	cmp	r2, #0
 8009072:	d1f0      	bne.n	8009056 <quorem+0xf2>
 8009074:	3c01      	subs	r4, #1
 8009076:	e7eb      	b.n	8009050 <quorem+0xec>
 8009078:	2000      	movs	r0, #0
 800907a:	e7ee      	b.n	800905a <quorem+0xf6>
 800907c:	0000      	movs	r0, r0
	...

08009080 <_dtoa_r>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	4616      	mov	r6, r2
 8009086:	461f      	mov	r7, r3
 8009088:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800908a:	b099      	sub	sp, #100	; 0x64
 800908c:	4605      	mov	r5, r0
 800908e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009092:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009096:	b974      	cbnz	r4, 80090b6 <_dtoa_r+0x36>
 8009098:	2010      	movs	r0, #16
 800909a:	f000 fde3 	bl	8009c64 <malloc>
 800909e:	4602      	mov	r2, r0
 80090a0:	6268      	str	r0, [r5, #36]	; 0x24
 80090a2:	b920      	cbnz	r0, 80090ae <_dtoa_r+0x2e>
 80090a4:	21ea      	movs	r1, #234	; 0xea
 80090a6:	4ba8      	ldr	r3, [pc, #672]	; (8009348 <_dtoa_r+0x2c8>)
 80090a8:	48a8      	ldr	r0, [pc, #672]	; (800934c <_dtoa_r+0x2cc>)
 80090aa:	f001 fbcf 	bl	800a84c <__assert_func>
 80090ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090b2:	6004      	str	r4, [r0, #0]
 80090b4:	60c4      	str	r4, [r0, #12]
 80090b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090b8:	6819      	ldr	r1, [r3, #0]
 80090ba:	b151      	cbz	r1, 80090d2 <_dtoa_r+0x52>
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	2301      	movs	r3, #1
 80090c0:	4093      	lsls	r3, r2
 80090c2:	604a      	str	r2, [r1, #4]
 80090c4:	608b      	str	r3, [r1, #8]
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 fe22 	bl	8009d10 <_Bfree>
 80090cc:	2200      	movs	r2, #0
 80090ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	1e3b      	subs	r3, r7, #0
 80090d4:	bfaf      	iteee	ge
 80090d6:	2300      	movge	r3, #0
 80090d8:	2201      	movlt	r2, #1
 80090da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090de:	9305      	strlt	r3, [sp, #20]
 80090e0:	bfa8      	it	ge
 80090e2:	f8c8 3000 	strge.w	r3, [r8]
 80090e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80090ea:	4b99      	ldr	r3, [pc, #612]	; (8009350 <_dtoa_r+0x2d0>)
 80090ec:	bfb8      	it	lt
 80090ee:	f8c8 2000 	strlt.w	r2, [r8]
 80090f2:	ea33 0309 	bics.w	r3, r3, r9
 80090f6:	d119      	bne.n	800912c <_dtoa_r+0xac>
 80090f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80090fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009104:	4333      	orrs	r3, r6
 8009106:	f000 857f 	beq.w	8009c08 <_dtoa_r+0xb88>
 800910a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800910c:	b953      	cbnz	r3, 8009124 <_dtoa_r+0xa4>
 800910e:	4b91      	ldr	r3, [pc, #580]	; (8009354 <_dtoa_r+0x2d4>)
 8009110:	e022      	b.n	8009158 <_dtoa_r+0xd8>
 8009112:	4b91      	ldr	r3, [pc, #580]	; (8009358 <_dtoa_r+0x2d8>)
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	3308      	adds	r3, #8
 8009118:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	9803      	ldr	r0, [sp, #12]
 800911e:	b019      	add	sp, #100	; 0x64
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009124:	4b8b      	ldr	r3, [pc, #556]	; (8009354 <_dtoa_r+0x2d4>)
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	3303      	adds	r3, #3
 800912a:	e7f5      	b.n	8009118 <_dtoa_r+0x98>
 800912c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009130:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009138:	2200      	movs	r2, #0
 800913a:	2300      	movs	r3, #0
 800913c:	f7f7 fca0 	bl	8000a80 <__aeabi_dcmpeq>
 8009140:	4680      	mov	r8, r0
 8009142:	b158      	cbz	r0, 800915c <_dtoa_r+0xdc>
 8009144:	2301      	movs	r3, #1
 8009146:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8558 	beq.w	8009c02 <_dtoa_r+0xb82>
 8009152:	4882      	ldr	r0, [pc, #520]	; (800935c <_dtoa_r+0x2dc>)
 8009154:	6018      	str	r0, [r3, #0]
 8009156:	1e43      	subs	r3, r0, #1
 8009158:	9303      	str	r3, [sp, #12]
 800915a:	e7df      	b.n	800911c <_dtoa_r+0x9c>
 800915c:	ab16      	add	r3, sp, #88	; 0x58
 800915e:	9301      	str	r3, [sp, #4]
 8009160:	ab17      	add	r3, sp, #92	; 0x5c
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	4628      	mov	r0, r5
 8009166:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800916a:	f001 f8b7 	bl	800a2dc <__d2b>
 800916e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009172:	4683      	mov	fp, r0
 8009174:	2c00      	cmp	r4, #0
 8009176:	d07f      	beq.n	8009278 <_dtoa_r+0x1f8>
 8009178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800917c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800917e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009186:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800918a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800918e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009192:	2200      	movs	r2, #0
 8009194:	4b72      	ldr	r3, [pc, #456]	; (8009360 <_dtoa_r+0x2e0>)
 8009196:	f7f7 f853 	bl	8000240 <__aeabi_dsub>
 800919a:	a365      	add	r3, pc, #404	; (adr r3, 8009330 <_dtoa_r+0x2b0>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f7 fa06 	bl	80005b0 <__aeabi_dmul>
 80091a4:	a364      	add	r3, pc, #400	; (adr r3, 8009338 <_dtoa_r+0x2b8>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f7f7 f84b 	bl	8000244 <__adddf3>
 80091ae:	4606      	mov	r6, r0
 80091b0:	4620      	mov	r0, r4
 80091b2:	460f      	mov	r7, r1
 80091b4:	f7f7 f992 	bl	80004dc <__aeabi_i2d>
 80091b8:	a361      	add	r3, pc, #388	; (adr r3, 8009340 <_dtoa_r+0x2c0>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 f9f7 	bl	80005b0 <__aeabi_dmul>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4630      	mov	r0, r6
 80091c8:	4639      	mov	r1, r7
 80091ca:	f7f7 f83b 	bl	8000244 <__adddf3>
 80091ce:	4606      	mov	r6, r0
 80091d0:	460f      	mov	r7, r1
 80091d2:	f7f7 fc9d 	bl	8000b10 <__aeabi_d2iz>
 80091d6:	2200      	movs	r2, #0
 80091d8:	4682      	mov	sl, r0
 80091da:	2300      	movs	r3, #0
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fc58 	bl	8000a94 <__aeabi_dcmplt>
 80091e4:	b148      	cbz	r0, 80091fa <_dtoa_r+0x17a>
 80091e6:	4650      	mov	r0, sl
 80091e8:	f7f7 f978 	bl	80004dc <__aeabi_i2d>
 80091ec:	4632      	mov	r2, r6
 80091ee:	463b      	mov	r3, r7
 80091f0:	f7f7 fc46 	bl	8000a80 <__aeabi_dcmpeq>
 80091f4:	b908      	cbnz	r0, 80091fa <_dtoa_r+0x17a>
 80091f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091fa:	f1ba 0f16 	cmp.w	sl, #22
 80091fe:	d858      	bhi.n	80092b2 <_dtoa_r+0x232>
 8009200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009204:	4b57      	ldr	r3, [pc, #348]	; (8009364 <_dtoa_r+0x2e4>)
 8009206:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	f7f7 fc41 	bl	8000a94 <__aeabi_dcmplt>
 8009212:	2800      	cmp	r0, #0
 8009214:	d04f      	beq.n	80092b6 <_dtoa_r+0x236>
 8009216:	2300      	movs	r3, #0
 8009218:	f10a 3aff 	add.w	sl, sl, #4294967295
 800921c:	930f      	str	r3, [sp, #60]	; 0x3c
 800921e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009220:	1b1c      	subs	r4, r3, r4
 8009222:	1e63      	subs	r3, r4, #1
 8009224:	9309      	str	r3, [sp, #36]	; 0x24
 8009226:	bf49      	itett	mi
 8009228:	f1c4 0301 	rsbmi	r3, r4, #1
 800922c:	2300      	movpl	r3, #0
 800922e:	9306      	strmi	r3, [sp, #24]
 8009230:	2300      	movmi	r3, #0
 8009232:	bf54      	ite	pl
 8009234:	9306      	strpl	r3, [sp, #24]
 8009236:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009238:	f1ba 0f00 	cmp.w	sl, #0
 800923c:	db3d      	blt.n	80092ba <_dtoa_r+0x23a>
 800923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009240:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009244:	4453      	add	r3, sl
 8009246:	9309      	str	r3, [sp, #36]	; 0x24
 8009248:	2300      	movs	r3, #0
 800924a:	930a      	str	r3, [sp, #40]	; 0x28
 800924c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800924e:	2b09      	cmp	r3, #9
 8009250:	f200 808c 	bhi.w	800936c <_dtoa_r+0x2ec>
 8009254:	2b05      	cmp	r3, #5
 8009256:	bfc4      	itt	gt
 8009258:	3b04      	subgt	r3, #4
 800925a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800925c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800925e:	bfc8      	it	gt
 8009260:	2400      	movgt	r4, #0
 8009262:	f1a3 0302 	sub.w	r3, r3, #2
 8009266:	bfd8      	it	le
 8009268:	2401      	movle	r4, #1
 800926a:	2b03      	cmp	r3, #3
 800926c:	f200 808a 	bhi.w	8009384 <_dtoa_r+0x304>
 8009270:	e8df f003 	tbb	[pc, r3]
 8009274:	5b4d4f2d 	.word	0x5b4d4f2d
 8009278:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800927c:	441c      	add	r4, r3
 800927e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009282:	2b20      	cmp	r3, #32
 8009284:	bfc3      	ittte	gt
 8009286:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800928a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800928e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009292:	f1c3 0320 	rsble	r3, r3, #32
 8009296:	bfc6      	itte	gt
 8009298:	fa26 f000 	lsrgt.w	r0, r6, r0
 800929c:	4318      	orrgt	r0, r3
 800929e:	fa06 f003 	lslle.w	r0, r6, r3
 80092a2:	f7f7 f90b 	bl	80004bc <__aeabi_ui2d>
 80092a6:	2301      	movs	r3, #1
 80092a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80092ac:	3c01      	subs	r4, #1
 80092ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80092b0:	e76f      	b.n	8009192 <_dtoa_r+0x112>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e7b2      	b.n	800921c <_dtoa_r+0x19c>
 80092b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80092b8:	e7b1      	b.n	800921e <_dtoa_r+0x19e>
 80092ba:	9b06      	ldr	r3, [sp, #24]
 80092bc:	eba3 030a 	sub.w	r3, r3, sl
 80092c0:	9306      	str	r3, [sp, #24]
 80092c2:	f1ca 0300 	rsb	r3, sl, #0
 80092c6:	930a      	str	r3, [sp, #40]	; 0x28
 80092c8:	2300      	movs	r3, #0
 80092ca:	930e      	str	r3, [sp, #56]	; 0x38
 80092cc:	e7be      	b.n	800924c <_dtoa_r+0x1cc>
 80092ce:	2300      	movs	r3, #0
 80092d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dc58      	bgt.n	800938a <_dtoa_r+0x30a>
 80092d8:	f04f 0901 	mov.w	r9, #1
 80092dc:	464b      	mov	r3, r9
 80092de:	f8cd 9020 	str.w	r9, [sp, #32]
 80092e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80092e6:	2200      	movs	r2, #0
 80092e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80092ea:	6042      	str	r2, [r0, #4]
 80092ec:	2204      	movs	r2, #4
 80092ee:	f102 0614 	add.w	r6, r2, #20
 80092f2:	429e      	cmp	r6, r3
 80092f4:	6841      	ldr	r1, [r0, #4]
 80092f6:	d94e      	bls.n	8009396 <_dtoa_r+0x316>
 80092f8:	4628      	mov	r0, r5
 80092fa:	f000 fcc9 	bl	8009c90 <_Balloc>
 80092fe:	9003      	str	r0, [sp, #12]
 8009300:	2800      	cmp	r0, #0
 8009302:	d14c      	bne.n	800939e <_dtoa_r+0x31e>
 8009304:	4602      	mov	r2, r0
 8009306:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800930a:	4b17      	ldr	r3, [pc, #92]	; (8009368 <_dtoa_r+0x2e8>)
 800930c:	e6cc      	b.n	80090a8 <_dtoa_r+0x28>
 800930e:	2301      	movs	r3, #1
 8009310:	e7de      	b.n	80092d0 <_dtoa_r+0x250>
 8009312:	2300      	movs	r3, #0
 8009314:	930b      	str	r3, [sp, #44]	; 0x2c
 8009316:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009318:	eb0a 0903 	add.w	r9, sl, r3
 800931c:	f109 0301 	add.w	r3, r9, #1
 8009320:	2b01      	cmp	r3, #1
 8009322:	9308      	str	r3, [sp, #32]
 8009324:	bfb8      	it	lt
 8009326:	2301      	movlt	r3, #1
 8009328:	e7dd      	b.n	80092e6 <_dtoa_r+0x266>
 800932a:	2301      	movs	r3, #1
 800932c:	e7f2      	b.n	8009314 <_dtoa_r+0x294>
 800932e:	bf00      	nop
 8009330:	636f4361 	.word	0x636f4361
 8009334:	3fd287a7 	.word	0x3fd287a7
 8009338:	8b60c8b3 	.word	0x8b60c8b3
 800933c:	3fc68a28 	.word	0x3fc68a28
 8009340:	509f79fb 	.word	0x509f79fb
 8009344:	3fd34413 	.word	0x3fd34413
 8009348:	0800ba32 	.word	0x0800ba32
 800934c:	0800ba49 	.word	0x0800ba49
 8009350:	7ff00000 	.word	0x7ff00000
 8009354:	0800ba2e 	.word	0x0800ba2e
 8009358:	0800ba25 	.word	0x0800ba25
 800935c:	0800b901 	.word	0x0800b901
 8009360:	3ff80000 	.word	0x3ff80000
 8009364:	0800bb40 	.word	0x0800bb40
 8009368:	0800baa4 	.word	0x0800baa4
 800936c:	2401      	movs	r4, #1
 800936e:	2300      	movs	r3, #0
 8009370:	940b      	str	r4, [sp, #44]	; 0x2c
 8009372:	9322      	str	r3, [sp, #136]	; 0x88
 8009374:	f04f 39ff 	mov.w	r9, #4294967295
 8009378:	2200      	movs	r2, #0
 800937a:	2312      	movs	r3, #18
 800937c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009380:	9223      	str	r2, [sp, #140]	; 0x8c
 8009382:	e7b0      	b.n	80092e6 <_dtoa_r+0x266>
 8009384:	2301      	movs	r3, #1
 8009386:	930b      	str	r3, [sp, #44]	; 0x2c
 8009388:	e7f4      	b.n	8009374 <_dtoa_r+0x2f4>
 800938a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800938e:	464b      	mov	r3, r9
 8009390:	f8cd 9020 	str.w	r9, [sp, #32]
 8009394:	e7a7      	b.n	80092e6 <_dtoa_r+0x266>
 8009396:	3101      	adds	r1, #1
 8009398:	6041      	str	r1, [r0, #4]
 800939a:	0052      	lsls	r2, r2, #1
 800939c:	e7a7      	b.n	80092ee <_dtoa_r+0x26e>
 800939e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093a0:	9a03      	ldr	r2, [sp, #12]
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	9b08      	ldr	r3, [sp, #32]
 80093a6:	2b0e      	cmp	r3, #14
 80093a8:	f200 80a8 	bhi.w	80094fc <_dtoa_r+0x47c>
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	f000 80a5 	beq.w	80094fc <_dtoa_r+0x47c>
 80093b2:	f1ba 0f00 	cmp.w	sl, #0
 80093b6:	dd34      	ble.n	8009422 <_dtoa_r+0x3a2>
 80093b8:	4a9a      	ldr	r2, [pc, #616]	; (8009624 <_dtoa_r+0x5a4>)
 80093ba:	f00a 030f 	and.w	r3, sl, #15
 80093be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80093c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80093ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80093d2:	d016      	beq.n	8009402 <_dtoa_r+0x382>
 80093d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093d8:	4b93      	ldr	r3, [pc, #588]	; (8009628 <_dtoa_r+0x5a8>)
 80093da:	2703      	movs	r7, #3
 80093dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093e0:	f7f7 fa10 	bl	8000804 <__aeabi_ddiv>
 80093e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093e8:	f004 040f 	and.w	r4, r4, #15
 80093ec:	4e8e      	ldr	r6, [pc, #568]	; (8009628 <_dtoa_r+0x5a8>)
 80093ee:	b954      	cbnz	r4, 8009406 <_dtoa_r+0x386>
 80093f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093f8:	f7f7 fa04 	bl	8000804 <__aeabi_ddiv>
 80093fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009400:	e029      	b.n	8009456 <_dtoa_r+0x3d6>
 8009402:	2702      	movs	r7, #2
 8009404:	e7f2      	b.n	80093ec <_dtoa_r+0x36c>
 8009406:	07e1      	lsls	r1, r4, #31
 8009408:	d508      	bpl.n	800941c <_dtoa_r+0x39c>
 800940a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800940e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009412:	f7f7 f8cd 	bl	80005b0 <__aeabi_dmul>
 8009416:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800941a:	3701      	adds	r7, #1
 800941c:	1064      	asrs	r4, r4, #1
 800941e:	3608      	adds	r6, #8
 8009420:	e7e5      	b.n	80093ee <_dtoa_r+0x36e>
 8009422:	f000 80a5 	beq.w	8009570 <_dtoa_r+0x4f0>
 8009426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800942a:	f1ca 0400 	rsb	r4, sl, #0
 800942e:	4b7d      	ldr	r3, [pc, #500]	; (8009624 <_dtoa_r+0x5a4>)
 8009430:	f004 020f 	and.w	r2, r4, #15
 8009434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f7f7 f8b8 	bl	80005b0 <__aeabi_dmul>
 8009440:	2702      	movs	r7, #2
 8009442:	2300      	movs	r3, #0
 8009444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009448:	4e77      	ldr	r6, [pc, #476]	; (8009628 <_dtoa_r+0x5a8>)
 800944a:	1124      	asrs	r4, r4, #4
 800944c:	2c00      	cmp	r4, #0
 800944e:	f040 8084 	bne.w	800955a <_dtoa_r+0x4da>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1d2      	bne.n	80093fc <_dtoa_r+0x37c>
 8009456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 808b 	beq.w	8009574 <_dtoa_r+0x4f4>
 800945e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009462:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009466:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800946a:	2200      	movs	r2, #0
 800946c:	4b6f      	ldr	r3, [pc, #444]	; (800962c <_dtoa_r+0x5ac>)
 800946e:	f7f7 fb11 	bl	8000a94 <__aeabi_dcmplt>
 8009472:	2800      	cmp	r0, #0
 8009474:	d07e      	beq.n	8009574 <_dtoa_r+0x4f4>
 8009476:	9b08      	ldr	r3, [sp, #32]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d07b      	beq.n	8009574 <_dtoa_r+0x4f4>
 800947c:	f1b9 0f00 	cmp.w	r9, #0
 8009480:	dd38      	ble.n	80094f4 <_dtoa_r+0x474>
 8009482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009486:	2200      	movs	r2, #0
 8009488:	4b69      	ldr	r3, [pc, #420]	; (8009630 <_dtoa_r+0x5b0>)
 800948a:	f7f7 f891 	bl	80005b0 <__aeabi_dmul>
 800948e:	464c      	mov	r4, r9
 8009490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009494:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009498:	3701      	adds	r7, #1
 800949a:	4638      	mov	r0, r7
 800949c:	f7f7 f81e 	bl	80004dc <__aeabi_i2d>
 80094a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a4:	f7f7 f884 	bl	80005b0 <__aeabi_dmul>
 80094a8:	2200      	movs	r2, #0
 80094aa:	4b62      	ldr	r3, [pc, #392]	; (8009634 <_dtoa_r+0x5b4>)
 80094ac:	f7f6 feca 	bl	8000244 <__adddf3>
 80094b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80094b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80094b8:	9611      	str	r6, [sp, #68]	; 0x44
 80094ba:	2c00      	cmp	r4, #0
 80094bc:	d15d      	bne.n	800957a <_dtoa_r+0x4fa>
 80094be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c2:	2200      	movs	r2, #0
 80094c4:	4b5c      	ldr	r3, [pc, #368]	; (8009638 <_dtoa_r+0x5b8>)
 80094c6:	f7f6 febb 	bl	8000240 <__aeabi_dsub>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094d2:	4633      	mov	r3, r6
 80094d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094d6:	f7f7 fafb 	bl	8000ad0 <__aeabi_dcmpgt>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f040 829c 	bne.w	8009a18 <_dtoa_r+0x998>
 80094e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80094ea:	f7f7 fad3 	bl	8000a94 <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f040 8290 	bne.w	8009a14 <_dtoa_r+0x994>
 80094f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80094f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80094fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f2c0 8152 	blt.w	80097a8 <_dtoa_r+0x728>
 8009504:	f1ba 0f0e 	cmp.w	sl, #14
 8009508:	f300 814e 	bgt.w	80097a8 <_dtoa_r+0x728>
 800950c:	4b45      	ldr	r3, [pc, #276]	; (8009624 <_dtoa_r+0x5a4>)
 800950e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009512:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009516:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800951a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800951c:	2b00      	cmp	r3, #0
 800951e:	f280 80db 	bge.w	80096d8 <_dtoa_r+0x658>
 8009522:	9b08      	ldr	r3, [sp, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f300 80d7 	bgt.w	80096d8 <_dtoa_r+0x658>
 800952a:	f040 8272 	bne.w	8009a12 <_dtoa_r+0x992>
 800952e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009532:	2200      	movs	r2, #0
 8009534:	4b40      	ldr	r3, [pc, #256]	; (8009638 <_dtoa_r+0x5b8>)
 8009536:	f7f7 f83b 	bl	80005b0 <__aeabi_dmul>
 800953a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800953e:	f7f7 fabd 	bl	8000abc <__aeabi_dcmpge>
 8009542:	9c08      	ldr	r4, [sp, #32]
 8009544:	4626      	mov	r6, r4
 8009546:	2800      	cmp	r0, #0
 8009548:	f040 8248 	bne.w	80099dc <_dtoa_r+0x95c>
 800954c:	2331      	movs	r3, #49	; 0x31
 800954e:	9f03      	ldr	r7, [sp, #12]
 8009550:	f10a 0a01 	add.w	sl, sl, #1
 8009554:	f807 3b01 	strb.w	r3, [r7], #1
 8009558:	e244      	b.n	80099e4 <_dtoa_r+0x964>
 800955a:	07e2      	lsls	r2, r4, #31
 800955c:	d505      	bpl.n	800956a <_dtoa_r+0x4ea>
 800955e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009562:	f7f7 f825 	bl	80005b0 <__aeabi_dmul>
 8009566:	2301      	movs	r3, #1
 8009568:	3701      	adds	r7, #1
 800956a:	1064      	asrs	r4, r4, #1
 800956c:	3608      	adds	r6, #8
 800956e:	e76d      	b.n	800944c <_dtoa_r+0x3cc>
 8009570:	2702      	movs	r7, #2
 8009572:	e770      	b.n	8009456 <_dtoa_r+0x3d6>
 8009574:	46d0      	mov	r8, sl
 8009576:	9c08      	ldr	r4, [sp, #32]
 8009578:	e78f      	b.n	800949a <_dtoa_r+0x41a>
 800957a:	9903      	ldr	r1, [sp, #12]
 800957c:	4b29      	ldr	r3, [pc, #164]	; (8009624 <_dtoa_r+0x5a4>)
 800957e:	4421      	add	r1, r4
 8009580:	9112      	str	r1, [sp, #72]	; 0x48
 8009582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009584:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009588:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800958c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009590:	2900      	cmp	r1, #0
 8009592:	d055      	beq.n	8009640 <_dtoa_r+0x5c0>
 8009594:	2000      	movs	r0, #0
 8009596:	4929      	ldr	r1, [pc, #164]	; (800963c <_dtoa_r+0x5bc>)
 8009598:	f7f7 f934 	bl	8000804 <__aeabi_ddiv>
 800959c:	463b      	mov	r3, r7
 800959e:	4632      	mov	r2, r6
 80095a0:	f7f6 fe4e 	bl	8000240 <__aeabi_dsub>
 80095a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095a8:	9f03      	ldr	r7, [sp, #12]
 80095aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095ae:	f7f7 faaf 	bl	8000b10 <__aeabi_d2iz>
 80095b2:	4604      	mov	r4, r0
 80095b4:	f7f6 ff92 	bl	80004dc <__aeabi_i2d>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095c0:	f7f6 fe3e 	bl	8000240 <__aeabi_dsub>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	3430      	adds	r4, #48	; 0x30
 80095ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095d2:	f807 4b01 	strb.w	r4, [r7], #1
 80095d6:	f7f7 fa5d 	bl	8000a94 <__aeabi_dcmplt>
 80095da:	2800      	cmp	r0, #0
 80095dc:	d174      	bne.n	80096c8 <_dtoa_r+0x648>
 80095de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095e2:	2000      	movs	r0, #0
 80095e4:	4911      	ldr	r1, [pc, #68]	; (800962c <_dtoa_r+0x5ac>)
 80095e6:	f7f6 fe2b 	bl	8000240 <__aeabi_dsub>
 80095ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095ee:	f7f7 fa51 	bl	8000a94 <__aeabi_dcmplt>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	f040 80b7 	bne.w	8009766 <_dtoa_r+0x6e6>
 80095f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095fa:	429f      	cmp	r7, r3
 80095fc:	f43f af7a 	beq.w	80094f4 <_dtoa_r+0x474>
 8009600:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009604:	2200      	movs	r2, #0
 8009606:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <_dtoa_r+0x5b0>)
 8009608:	f7f6 ffd2 	bl	80005b0 <__aeabi_dmul>
 800960c:	2200      	movs	r2, #0
 800960e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009616:	4b06      	ldr	r3, [pc, #24]	; (8009630 <_dtoa_r+0x5b0>)
 8009618:	f7f6 ffca 	bl	80005b0 <__aeabi_dmul>
 800961c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009620:	e7c3      	b.n	80095aa <_dtoa_r+0x52a>
 8009622:	bf00      	nop
 8009624:	0800bb40 	.word	0x0800bb40
 8009628:	0800bb18 	.word	0x0800bb18
 800962c:	3ff00000 	.word	0x3ff00000
 8009630:	40240000 	.word	0x40240000
 8009634:	401c0000 	.word	0x401c0000
 8009638:	40140000 	.word	0x40140000
 800963c:	3fe00000 	.word	0x3fe00000
 8009640:	4630      	mov	r0, r6
 8009642:	4639      	mov	r1, r7
 8009644:	f7f6 ffb4 	bl	80005b0 <__aeabi_dmul>
 8009648:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800964a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800964e:	9c03      	ldr	r4, [sp, #12]
 8009650:	9314      	str	r3, [sp, #80]	; 0x50
 8009652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009656:	f7f7 fa5b 	bl	8000b10 <__aeabi_d2iz>
 800965a:	9015      	str	r0, [sp, #84]	; 0x54
 800965c:	f7f6 ff3e 	bl	80004dc <__aeabi_i2d>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009668:	f7f6 fdea 	bl	8000240 <__aeabi_dsub>
 800966c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800966e:	4606      	mov	r6, r0
 8009670:	3330      	adds	r3, #48	; 0x30
 8009672:	f804 3b01 	strb.w	r3, [r4], #1
 8009676:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009678:	460f      	mov	r7, r1
 800967a:	429c      	cmp	r4, r3
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	d124      	bne.n	80096cc <_dtoa_r+0x64c>
 8009682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009686:	4bb0      	ldr	r3, [pc, #704]	; (8009948 <_dtoa_r+0x8c8>)
 8009688:	f7f6 fddc 	bl	8000244 <__adddf3>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f7 fa1c 	bl	8000ad0 <__aeabi_dcmpgt>
 8009698:	2800      	cmp	r0, #0
 800969a:	d163      	bne.n	8009764 <_dtoa_r+0x6e4>
 800969c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096a0:	2000      	movs	r0, #0
 80096a2:	49a9      	ldr	r1, [pc, #676]	; (8009948 <_dtoa_r+0x8c8>)
 80096a4:	f7f6 fdcc 	bl	8000240 <__aeabi_dsub>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4630      	mov	r0, r6
 80096ae:	4639      	mov	r1, r7
 80096b0:	f7f7 f9f0 	bl	8000a94 <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f43f af1d 	beq.w	80094f4 <_dtoa_r+0x474>
 80096ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80096bc:	1e7b      	subs	r3, r7, #1
 80096be:	9314      	str	r3, [sp, #80]	; 0x50
 80096c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80096c4:	2b30      	cmp	r3, #48	; 0x30
 80096c6:	d0f8      	beq.n	80096ba <_dtoa_r+0x63a>
 80096c8:	46c2      	mov	sl, r8
 80096ca:	e03b      	b.n	8009744 <_dtoa_r+0x6c4>
 80096cc:	4b9f      	ldr	r3, [pc, #636]	; (800994c <_dtoa_r+0x8cc>)
 80096ce:	f7f6 ff6f 	bl	80005b0 <__aeabi_dmul>
 80096d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096d6:	e7bc      	b.n	8009652 <_dtoa_r+0x5d2>
 80096d8:	9f03      	ldr	r7, [sp, #12]
 80096da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80096de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	f7f7 f88d 	bl	8000804 <__aeabi_ddiv>
 80096ea:	f7f7 fa11 	bl	8000b10 <__aeabi_d2iz>
 80096ee:	4604      	mov	r4, r0
 80096f0:	f7f6 fef4 	bl	80004dc <__aeabi_i2d>
 80096f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096f8:	f7f6 ff5a 	bl	80005b0 <__aeabi_dmul>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4640      	mov	r0, r8
 8009702:	4649      	mov	r1, r9
 8009704:	f7f6 fd9c 	bl	8000240 <__aeabi_dsub>
 8009708:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800970c:	f807 6b01 	strb.w	r6, [r7], #1
 8009710:	9e03      	ldr	r6, [sp, #12]
 8009712:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009716:	1bbe      	subs	r6, r7, r6
 8009718:	45b4      	cmp	ip, r6
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	d136      	bne.n	800978e <_dtoa_r+0x70e>
 8009720:	f7f6 fd90 	bl	8000244 <__adddf3>
 8009724:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009728:	4680      	mov	r8, r0
 800972a:	4689      	mov	r9, r1
 800972c:	f7f7 f9d0 	bl	8000ad0 <__aeabi_dcmpgt>
 8009730:	bb58      	cbnz	r0, 800978a <_dtoa_r+0x70a>
 8009732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009736:	4640      	mov	r0, r8
 8009738:	4649      	mov	r1, r9
 800973a:	f7f7 f9a1 	bl	8000a80 <__aeabi_dcmpeq>
 800973e:	b108      	cbz	r0, 8009744 <_dtoa_r+0x6c4>
 8009740:	07e1      	lsls	r1, r4, #31
 8009742:	d422      	bmi.n	800978a <_dtoa_r+0x70a>
 8009744:	4628      	mov	r0, r5
 8009746:	4659      	mov	r1, fp
 8009748:	f000 fae2 	bl	8009d10 <_Bfree>
 800974c:	2300      	movs	r3, #0
 800974e:	703b      	strb	r3, [r7, #0]
 8009750:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009752:	f10a 0001 	add.w	r0, sl, #1
 8009756:	6018      	str	r0, [r3, #0]
 8009758:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800975a:	2b00      	cmp	r3, #0
 800975c:	f43f acde 	beq.w	800911c <_dtoa_r+0x9c>
 8009760:	601f      	str	r7, [r3, #0]
 8009762:	e4db      	b.n	800911c <_dtoa_r+0x9c>
 8009764:	4627      	mov	r7, r4
 8009766:	463b      	mov	r3, r7
 8009768:	461f      	mov	r7, r3
 800976a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800976e:	2a39      	cmp	r2, #57	; 0x39
 8009770:	d107      	bne.n	8009782 <_dtoa_r+0x702>
 8009772:	9a03      	ldr	r2, [sp, #12]
 8009774:	429a      	cmp	r2, r3
 8009776:	d1f7      	bne.n	8009768 <_dtoa_r+0x6e8>
 8009778:	2230      	movs	r2, #48	; 0x30
 800977a:	9903      	ldr	r1, [sp, #12]
 800977c:	f108 0801 	add.w	r8, r8, #1
 8009780:	700a      	strb	r2, [r1, #0]
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	3201      	adds	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]
 8009788:	e79e      	b.n	80096c8 <_dtoa_r+0x648>
 800978a:	46d0      	mov	r8, sl
 800978c:	e7eb      	b.n	8009766 <_dtoa_r+0x6e6>
 800978e:	2200      	movs	r2, #0
 8009790:	4b6e      	ldr	r3, [pc, #440]	; (800994c <_dtoa_r+0x8cc>)
 8009792:	f7f6 ff0d 	bl	80005b0 <__aeabi_dmul>
 8009796:	2200      	movs	r2, #0
 8009798:	2300      	movs	r3, #0
 800979a:	4680      	mov	r8, r0
 800979c:	4689      	mov	r9, r1
 800979e:	f7f7 f96f 	bl	8000a80 <__aeabi_dcmpeq>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d09b      	beq.n	80096de <_dtoa_r+0x65e>
 80097a6:	e7cd      	b.n	8009744 <_dtoa_r+0x6c4>
 80097a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	f000 80d0 	beq.w	8009950 <_dtoa_r+0x8d0>
 80097b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80097b2:	2a01      	cmp	r2, #1
 80097b4:	f300 80ae 	bgt.w	8009914 <_dtoa_r+0x894>
 80097b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	f000 80a6 	beq.w	800990c <_dtoa_r+0x88c>
 80097c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097c6:	9f06      	ldr	r7, [sp, #24]
 80097c8:	9a06      	ldr	r2, [sp, #24]
 80097ca:	2101      	movs	r1, #1
 80097cc:	441a      	add	r2, r3
 80097ce:	9206      	str	r2, [sp, #24]
 80097d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097d2:	4628      	mov	r0, r5
 80097d4:	441a      	add	r2, r3
 80097d6:	9209      	str	r2, [sp, #36]	; 0x24
 80097d8:	f000 fb50 	bl	8009e7c <__i2b>
 80097dc:	4606      	mov	r6, r0
 80097de:	2f00      	cmp	r7, #0
 80097e0:	dd0c      	ble.n	80097fc <_dtoa_r+0x77c>
 80097e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dd09      	ble.n	80097fc <_dtoa_r+0x77c>
 80097e8:	42bb      	cmp	r3, r7
 80097ea:	bfa8      	it	ge
 80097ec:	463b      	movge	r3, r7
 80097ee:	9a06      	ldr	r2, [sp, #24]
 80097f0:	1aff      	subs	r7, r7, r3
 80097f2:	1ad2      	subs	r2, r2, r3
 80097f4:	9206      	str	r2, [sp, #24]
 80097f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	9309      	str	r3, [sp, #36]	; 0x24
 80097fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fe:	b1f3      	cbz	r3, 800983e <_dtoa_r+0x7be>
 8009800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 80a8 	beq.w	8009958 <_dtoa_r+0x8d8>
 8009808:	2c00      	cmp	r4, #0
 800980a:	dd10      	ble.n	800982e <_dtoa_r+0x7ae>
 800980c:	4631      	mov	r1, r6
 800980e:	4622      	mov	r2, r4
 8009810:	4628      	mov	r0, r5
 8009812:	f000 fbf1 	bl	8009ff8 <__pow5mult>
 8009816:	465a      	mov	r2, fp
 8009818:	4601      	mov	r1, r0
 800981a:	4606      	mov	r6, r0
 800981c:	4628      	mov	r0, r5
 800981e:	f000 fb43 	bl	8009ea8 <__multiply>
 8009822:	4680      	mov	r8, r0
 8009824:	4659      	mov	r1, fp
 8009826:	4628      	mov	r0, r5
 8009828:	f000 fa72 	bl	8009d10 <_Bfree>
 800982c:	46c3      	mov	fp, r8
 800982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009830:	1b1a      	subs	r2, r3, r4
 8009832:	d004      	beq.n	800983e <_dtoa_r+0x7be>
 8009834:	4659      	mov	r1, fp
 8009836:	4628      	mov	r0, r5
 8009838:	f000 fbde 	bl	8009ff8 <__pow5mult>
 800983c:	4683      	mov	fp, r0
 800983e:	2101      	movs	r1, #1
 8009840:	4628      	mov	r0, r5
 8009842:	f000 fb1b 	bl	8009e7c <__i2b>
 8009846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009848:	4604      	mov	r4, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	f340 8086 	ble.w	800995c <_dtoa_r+0x8dc>
 8009850:	461a      	mov	r2, r3
 8009852:	4601      	mov	r1, r0
 8009854:	4628      	mov	r0, r5
 8009856:	f000 fbcf 	bl	8009ff8 <__pow5mult>
 800985a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800985c:	4604      	mov	r4, r0
 800985e:	2b01      	cmp	r3, #1
 8009860:	dd7f      	ble.n	8009962 <_dtoa_r+0x8e2>
 8009862:	f04f 0800 	mov.w	r8, #0
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800986c:	6918      	ldr	r0, [r3, #16]
 800986e:	f000 fab7 	bl	8009de0 <__hi0bits>
 8009872:	f1c0 0020 	rsb	r0, r0, #32
 8009876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009878:	4418      	add	r0, r3
 800987a:	f010 001f 	ands.w	r0, r0, #31
 800987e:	f000 8092 	beq.w	80099a6 <_dtoa_r+0x926>
 8009882:	f1c0 0320 	rsb	r3, r0, #32
 8009886:	2b04      	cmp	r3, #4
 8009888:	f340 808a 	ble.w	80099a0 <_dtoa_r+0x920>
 800988c:	f1c0 001c 	rsb	r0, r0, #28
 8009890:	9b06      	ldr	r3, [sp, #24]
 8009892:	4407      	add	r7, r0
 8009894:	4403      	add	r3, r0
 8009896:	9306      	str	r3, [sp, #24]
 8009898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800989a:	4403      	add	r3, r0
 800989c:	9309      	str	r3, [sp, #36]	; 0x24
 800989e:	9b06      	ldr	r3, [sp, #24]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dd05      	ble.n	80098b0 <_dtoa_r+0x830>
 80098a4:	4659      	mov	r1, fp
 80098a6:	461a      	mov	r2, r3
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 fbff 	bl	800a0ac <__lshift>
 80098ae:	4683      	mov	fp, r0
 80098b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dd05      	ble.n	80098c2 <_dtoa_r+0x842>
 80098b6:	4621      	mov	r1, r4
 80098b8:	461a      	mov	r2, r3
 80098ba:	4628      	mov	r0, r5
 80098bc:	f000 fbf6 	bl	800a0ac <__lshift>
 80098c0:	4604      	mov	r4, r0
 80098c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d070      	beq.n	80099aa <_dtoa_r+0x92a>
 80098c8:	4621      	mov	r1, r4
 80098ca:	4658      	mov	r0, fp
 80098cc:	f000 fc5e 	bl	800a18c <__mcmp>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	da6a      	bge.n	80099aa <_dtoa_r+0x92a>
 80098d4:	2300      	movs	r3, #0
 80098d6:	4659      	mov	r1, fp
 80098d8:	220a      	movs	r2, #10
 80098da:	4628      	mov	r0, r5
 80098dc:	f000 fa3a 	bl	8009d54 <__multadd>
 80098e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098e2:	4683      	mov	fp, r0
 80098e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8194 	beq.w	8009c16 <_dtoa_r+0xb96>
 80098ee:	4631      	mov	r1, r6
 80098f0:	2300      	movs	r3, #0
 80098f2:	220a      	movs	r2, #10
 80098f4:	4628      	mov	r0, r5
 80098f6:	f000 fa2d 	bl	8009d54 <__multadd>
 80098fa:	f1b9 0f00 	cmp.w	r9, #0
 80098fe:	4606      	mov	r6, r0
 8009900:	f300 8093 	bgt.w	8009a2a <_dtoa_r+0x9aa>
 8009904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009906:	2b02      	cmp	r3, #2
 8009908:	dc57      	bgt.n	80099ba <_dtoa_r+0x93a>
 800990a:	e08e      	b.n	8009a2a <_dtoa_r+0x9aa>
 800990c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800990e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009912:	e757      	b.n	80097c4 <_dtoa_r+0x744>
 8009914:	9b08      	ldr	r3, [sp, #32]
 8009916:	1e5c      	subs	r4, r3, #1
 8009918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991a:	42a3      	cmp	r3, r4
 800991c:	bfb7      	itett	lt
 800991e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009920:	1b1c      	subge	r4, r3, r4
 8009922:	1ae2      	sublt	r2, r4, r3
 8009924:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009926:	bfbe      	ittt	lt
 8009928:	940a      	strlt	r4, [sp, #40]	; 0x28
 800992a:	189b      	addlt	r3, r3, r2
 800992c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800992e:	9b08      	ldr	r3, [sp, #32]
 8009930:	bfb8      	it	lt
 8009932:	2400      	movlt	r4, #0
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfbb      	ittet	lt
 8009938:	9b06      	ldrlt	r3, [sp, #24]
 800993a:	9a08      	ldrlt	r2, [sp, #32]
 800993c:	9f06      	ldrge	r7, [sp, #24]
 800993e:	1a9f      	sublt	r7, r3, r2
 8009940:	bfac      	ite	ge
 8009942:	9b08      	ldrge	r3, [sp, #32]
 8009944:	2300      	movlt	r3, #0
 8009946:	e73f      	b.n	80097c8 <_dtoa_r+0x748>
 8009948:	3fe00000 	.word	0x3fe00000
 800994c:	40240000 	.word	0x40240000
 8009950:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009952:	9f06      	ldr	r7, [sp, #24]
 8009954:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009956:	e742      	b.n	80097de <_dtoa_r+0x75e>
 8009958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995a:	e76b      	b.n	8009834 <_dtoa_r+0x7b4>
 800995c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800995e:	2b01      	cmp	r3, #1
 8009960:	dc19      	bgt.n	8009996 <_dtoa_r+0x916>
 8009962:	9b04      	ldr	r3, [sp, #16]
 8009964:	b9bb      	cbnz	r3, 8009996 <_dtoa_r+0x916>
 8009966:	9b05      	ldr	r3, [sp, #20]
 8009968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800996c:	b99b      	cbnz	r3, 8009996 <_dtoa_r+0x916>
 800996e:	9b05      	ldr	r3, [sp, #20]
 8009970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009974:	0d1b      	lsrs	r3, r3, #20
 8009976:	051b      	lsls	r3, r3, #20
 8009978:	b183      	cbz	r3, 800999c <_dtoa_r+0x91c>
 800997a:	f04f 0801 	mov.w	r8, #1
 800997e:	9b06      	ldr	r3, [sp, #24]
 8009980:	3301      	adds	r3, #1
 8009982:	9306      	str	r3, [sp, #24]
 8009984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009986:	3301      	adds	r3, #1
 8009988:	9309      	str	r3, [sp, #36]	; 0x24
 800998a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f af6a 	bne.w	8009866 <_dtoa_r+0x7e6>
 8009992:	2001      	movs	r0, #1
 8009994:	e76f      	b.n	8009876 <_dtoa_r+0x7f6>
 8009996:	f04f 0800 	mov.w	r8, #0
 800999a:	e7f6      	b.n	800998a <_dtoa_r+0x90a>
 800999c:	4698      	mov	r8, r3
 800999e:	e7f4      	b.n	800998a <_dtoa_r+0x90a>
 80099a0:	f43f af7d 	beq.w	800989e <_dtoa_r+0x81e>
 80099a4:	4618      	mov	r0, r3
 80099a6:	301c      	adds	r0, #28
 80099a8:	e772      	b.n	8009890 <_dtoa_r+0x810>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dc36      	bgt.n	8009a1e <_dtoa_r+0x99e>
 80099b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	dd33      	ble.n	8009a1e <_dtoa_r+0x99e>
 80099b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099ba:	f1b9 0f00 	cmp.w	r9, #0
 80099be:	d10d      	bne.n	80099dc <_dtoa_r+0x95c>
 80099c0:	4621      	mov	r1, r4
 80099c2:	464b      	mov	r3, r9
 80099c4:	2205      	movs	r2, #5
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f9c4 	bl	8009d54 <__multadd>
 80099cc:	4601      	mov	r1, r0
 80099ce:	4604      	mov	r4, r0
 80099d0:	4658      	mov	r0, fp
 80099d2:	f000 fbdb 	bl	800a18c <__mcmp>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f73f adb8 	bgt.w	800954c <_dtoa_r+0x4cc>
 80099dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099de:	9f03      	ldr	r7, [sp, #12]
 80099e0:	ea6f 0a03 	mvn.w	sl, r3
 80099e4:	f04f 0800 	mov.w	r8, #0
 80099e8:	4621      	mov	r1, r4
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 f990 	bl	8009d10 <_Bfree>
 80099f0:	2e00      	cmp	r6, #0
 80099f2:	f43f aea7 	beq.w	8009744 <_dtoa_r+0x6c4>
 80099f6:	f1b8 0f00 	cmp.w	r8, #0
 80099fa:	d005      	beq.n	8009a08 <_dtoa_r+0x988>
 80099fc:	45b0      	cmp	r8, r6
 80099fe:	d003      	beq.n	8009a08 <_dtoa_r+0x988>
 8009a00:	4641      	mov	r1, r8
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f984 	bl	8009d10 <_Bfree>
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f000 f980 	bl	8009d10 <_Bfree>
 8009a10:	e698      	b.n	8009744 <_dtoa_r+0x6c4>
 8009a12:	2400      	movs	r4, #0
 8009a14:	4626      	mov	r6, r4
 8009a16:	e7e1      	b.n	80099dc <_dtoa_r+0x95c>
 8009a18:	46c2      	mov	sl, r8
 8009a1a:	4626      	mov	r6, r4
 8009a1c:	e596      	b.n	800954c <_dtoa_r+0x4cc>
 8009a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 80fd 	beq.w	8009c24 <_dtoa_r+0xba4>
 8009a2a:	2f00      	cmp	r7, #0
 8009a2c:	dd05      	ble.n	8009a3a <_dtoa_r+0x9ba>
 8009a2e:	4631      	mov	r1, r6
 8009a30:	463a      	mov	r2, r7
 8009a32:	4628      	mov	r0, r5
 8009a34:	f000 fb3a 	bl	800a0ac <__lshift>
 8009a38:	4606      	mov	r6, r0
 8009a3a:	f1b8 0f00 	cmp.w	r8, #0
 8009a3e:	d05c      	beq.n	8009afa <_dtoa_r+0xa7a>
 8009a40:	4628      	mov	r0, r5
 8009a42:	6871      	ldr	r1, [r6, #4]
 8009a44:	f000 f924 	bl	8009c90 <_Balloc>
 8009a48:	4607      	mov	r7, r0
 8009a4a:	b928      	cbnz	r0, 8009a58 <_dtoa_r+0x9d8>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a52:	4b7f      	ldr	r3, [pc, #508]	; (8009c50 <_dtoa_r+0xbd0>)
 8009a54:	f7ff bb28 	b.w	80090a8 <_dtoa_r+0x28>
 8009a58:	6932      	ldr	r2, [r6, #16]
 8009a5a:	f106 010c 	add.w	r1, r6, #12
 8009a5e:	3202      	adds	r2, #2
 8009a60:	0092      	lsls	r2, r2, #2
 8009a62:	300c      	adds	r0, #12
 8009a64:	f7fe fd4c 	bl	8008500 <memcpy>
 8009a68:	2201      	movs	r2, #1
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f000 fb1d 	bl	800a0ac <__lshift>
 8009a72:	46b0      	mov	r8, r6
 8009a74:	4606      	mov	r6, r0
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	9308      	str	r3, [sp, #32]
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	444b      	add	r3, r9
 8009a80:	930a      	str	r3, [sp, #40]	; 0x28
 8009a82:	9b04      	ldr	r3, [sp, #16]
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8a:	9b08      	ldr	r3, [sp, #32]
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	4658      	mov	r0, fp
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	f7ff fa66 	bl	8008f64 <quorem>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	3330      	adds	r3, #48	; 0x30
 8009a9e:	9006      	str	r0, [sp, #24]
 8009aa0:	4658      	mov	r0, fp
 8009aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa4:	f000 fb72 	bl	800a18c <__mcmp>
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	4681      	mov	r9, r0
 8009aac:	4621      	mov	r1, r4
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 fb88 	bl	800a1c4 <__mdiff>
 8009ab4:	68c2      	ldr	r2, [r0, #12]
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aba:	bb02      	cbnz	r2, 8009afe <_dtoa_r+0xa7e>
 8009abc:	4601      	mov	r1, r0
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f000 fb64 	bl	800a18c <__mcmp>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac8:	4639      	mov	r1, r7
 8009aca:	4628      	mov	r0, r5
 8009acc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009ad0:	f000 f91e 	bl	8009d10 <_Bfree>
 8009ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ad8:	9f08      	ldr	r7, [sp, #32]
 8009ada:	ea43 0102 	orr.w	r1, r3, r2
 8009ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae0:	430b      	orrs	r3, r1
 8009ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae4:	d10d      	bne.n	8009b02 <_dtoa_r+0xa82>
 8009ae6:	2b39      	cmp	r3, #57	; 0x39
 8009ae8:	d029      	beq.n	8009b3e <_dtoa_r+0xabe>
 8009aea:	f1b9 0f00 	cmp.w	r9, #0
 8009aee:	dd01      	ble.n	8009af4 <_dtoa_r+0xa74>
 8009af0:	9b06      	ldr	r3, [sp, #24]
 8009af2:	3331      	adds	r3, #49	; 0x31
 8009af4:	9a04      	ldr	r2, [sp, #16]
 8009af6:	7013      	strb	r3, [r2, #0]
 8009af8:	e776      	b.n	80099e8 <_dtoa_r+0x968>
 8009afa:	4630      	mov	r0, r6
 8009afc:	e7b9      	b.n	8009a72 <_dtoa_r+0x9f2>
 8009afe:	2201      	movs	r2, #1
 8009b00:	e7e2      	b.n	8009ac8 <_dtoa_r+0xa48>
 8009b02:	f1b9 0f00 	cmp.w	r9, #0
 8009b06:	db06      	blt.n	8009b16 <_dtoa_r+0xa96>
 8009b08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009b0a:	ea41 0909 	orr.w	r9, r1, r9
 8009b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b10:	ea59 0101 	orrs.w	r1, r9, r1
 8009b14:	d120      	bne.n	8009b58 <_dtoa_r+0xad8>
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	ddec      	ble.n	8009af4 <_dtoa_r+0xa74>
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	4628      	mov	r0, r5
 8009b20:	9308      	str	r3, [sp, #32]
 8009b22:	f000 fac3 	bl	800a0ac <__lshift>
 8009b26:	4621      	mov	r1, r4
 8009b28:	4683      	mov	fp, r0
 8009b2a:	f000 fb2f 	bl	800a18c <__mcmp>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	9b08      	ldr	r3, [sp, #32]
 8009b32:	dc02      	bgt.n	8009b3a <_dtoa_r+0xaba>
 8009b34:	d1de      	bne.n	8009af4 <_dtoa_r+0xa74>
 8009b36:	07da      	lsls	r2, r3, #31
 8009b38:	d5dc      	bpl.n	8009af4 <_dtoa_r+0xa74>
 8009b3a:	2b39      	cmp	r3, #57	; 0x39
 8009b3c:	d1d8      	bne.n	8009af0 <_dtoa_r+0xa70>
 8009b3e:	2339      	movs	r3, #57	; 0x39
 8009b40:	9a04      	ldr	r2, [sp, #16]
 8009b42:	7013      	strb	r3, [r2, #0]
 8009b44:	463b      	mov	r3, r7
 8009b46:	461f      	mov	r7, r3
 8009b48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	2a39      	cmp	r2, #57	; 0x39
 8009b50:	d050      	beq.n	8009bf4 <_dtoa_r+0xb74>
 8009b52:	3201      	adds	r2, #1
 8009b54:	701a      	strb	r2, [r3, #0]
 8009b56:	e747      	b.n	80099e8 <_dtoa_r+0x968>
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	dd03      	ble.n	8009b64 <_dtoa_r+0xae4>
 8009b5c:	2b39      	cmp	r3, #57	; 0x39
 8009b5e:	d0ee      	beq.n	8009b3e <_dtoa_r+0xabe>
 8009b60:	3301      	adds	r3, #1
 8009b62:	e7c7      	b.n	8009af4 <_dtoa_r+0xa74>
 8009b64:	9a08      	ldr	r2, [sp, #32]
 8009b66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b6c:	428a      	cmp	r2, r1
 8009b6e:	d02a      	beq.n	8009bc6 <_dtoa_r+0xb46>
 8009b70:	4659      	mov	r1, fp
 8009b72:	2300      	movs	r3, #0
 8009b74:	220a      	movs	r2, #10
 8009b76:	4628      	mov	r0, r5
 8009b78:	f000 f8ec 	bl	8009d54 <__multadd>
 8009b7c:	45b0      	cmp	r8, r6
 8009b7e:	4683      	mov	fp, r0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	f04f 020a 	mov.w	r2, #10
 8009b88:	4641      	mov	r1, r8
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	d107      	bne.n	8009b9e <_dtoa_r+0xb1e>
 8009b8e:	f000 f8e1 	bl	8009d54 <__multadd>
 8009b92:	4680      	mov	r8, r0
 8009b94:	4606      	mov	r6, r0
 8009b96:	9b08      	ldr	r3, [sp, #32]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	9308      	str	r3, [sp, #32]
 8009b9c:	e775      	b.n	8009a8a <_dtoa_r+0xa0a>
 8009b9e:	f000 f8d9 	bl	8009d54 <__multadd>
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4680      	mov	r8, r0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	220a      	movs	r2, #10
 8009baa:	4628      	mov	r0, r5
 8009bac:	f000 f8d2 	bl	8009d54 <__multadd>
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	e7f0      	b.n	8009b96 <_dtoa_r+0xb16>
 8009bb4:	f1b9 0f00 	cmp.w	r9, #0
 8009bb8:	bfcc      	ite	gt
 8009bba:	464f      	movgt	r7, r9
 8009bbc:	2701      	movle	r7, #1
 8009bbe:	f04f 0800 	mov.w	r8, #0
 8009bc2:	9a03      	ldr	r2, [sp, #12]
 8009bc4:	4417      	add	r7, r2
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	2201      	movs	r2, #1
 8009bca:	4628      	mov	r0, r5
 8009bcc:	9308      	str	r3, [sp, #32]
 8009bce:	f000 fa6d 	bl	800a0ac <__lshift>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4683      	mov	fp, r0
 8009bd6:	f000 fad9 	bl	800a18c <__mcmp>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	dcb2      	bgt.n	8009b44 <_dtoa_r+0xac4>
 8009bde:	d102      	bne.n	8009be6 <_dtoa_r+0xb66>
 8009be0:	9b08      	ldr	r3, [sp, #32]
 8009be2:	07db      	lsls	r3, r3, #31
 8009be4:	d4ae      	bmi.n	8009b44 <_dtoa_r+0xac4>
 8009be6:	463b      	mov	r3, r7
 8009be8:	461f      	mov	r7, r3
 8009bea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bee:	2a30      	cmp	r2, #48	; 0x30
 8009bf0:	d0fa      	beq.n	8009be8 <_dtoa_r+0xb68>
 8009bf2:	e6f9      	b.n	80099e8 <_dtoa_r+0x968>
 8009bf4:	9a03      	ldr	r2, [sp, #12]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d1a5      	bne.n	8009b46 <_dtoa_r+0xac6>
 8009bfa:	2331      	movs	r3, #49	; 0x31
 8009bfc:	f10a 0a01 	add.w	sl, sl, #1
 8009c00:	e779      	b.n	8009af6 <_dtoa_r+0xa76>
 8009c02:	4b14      	ldr	r3, [pc, #80]	; (8009c54 <_dtoa_r+0xbd4>)
 8009c04:	f7ff baa8 	b.w	8009158 <_dtoa_r+0xd8>
 8009c08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f aa81 	bne.w	8009112 <_dtoa_r+0x92>
 8009c10:	4b11      	ldr	r3, [pc, #68]	; (8009c58 <_dtoa_r+0xbd8>)
 8009c12:	f7ff baa1 	b.w	8009158 <_dtoa_r+0xd8>
 8009c16:	f1b9 0f00 	cmp.w	r9, #0
 8009c1a:	dc03      	bgt.n	8009c24 <_dtoa_r+0xba4>
 8009c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	f73f aecb 	bgt.w	80099ba <_dtoa_r+0x93a>
 8009c24:	9f03      	ldr	r7, [sp, #12]
 8009c26:	4621      	mov	r1, r4
 8009c28:	4658      	mov	r0, fp
 8009c2a:	f7ff f99b 	bl	8008f64 <quorem>
 8009c2e:	9a03      	ldr	r2, [sp, #12]
 8009c30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c34:	f807 3b01 	strb.w	r3, [r7], #1
 8009c38:	1aba      	subs	r2, r7, r2
 8009c3a:	4591      	cmp	r9, r2
 8009c3c:	ddba      	ble.n	8009bb4 <_dtoa_r+0xb34>
 8009c3e:	4659      	mov	r1, fp
 8009c40:	2300      	movs	r3, #0
 8009c42:	220a      	movs	r2, #10
 8009c44:	4628      	mov	r0, r5
 8009c46:	f000 f885 	bl	8009d54 <__multadd>
 8009c4a:	4683      	mov	fp, r0
 8009c4c:	e7eb      	b.n	8009c26 <_dtoa_r+0xba6>
 8009c4e:	bf00      	nop
 8009c50:	0800baa4 	.word	0x0800baa4
 8009c54:	0800b900 	.word	0x0800b900
 8009c58:	0800ba25 	.word	0x0800ba25

08009c5c <_localeconv_r>:
 8009c5c:	4800      	ldr	r0, [pc, #0]	; (8009c60 <_localeconv_r+0x4>)
 8009c5e:	4770      	bx	lr
 8009c60:	20000168 	.word	0x20000168

08009c64 <malloc>:
 8009c64:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <malloc+0xc>)
 8009c66:	4601      	mov	r1, r0
 8009c68:	6818      	ldr	r0, [r3, #0]
 8009c6a:	f000 bc0f 	b.w	800a48c <_malloc_r>
 8009c6e:	bf00      	nop
 8009c70:	20000014 	.word	0x20000014

08009c74 <memchr>:
 8009c74:	4603      	mov	r3, r0
 8009c76:	b510      	push	{r4, lr}
 8009c78:	b2c9      	uxtb	r1, r1
 8009c7a:	4402      	add	r2, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	d101      	bne.n	8009c86 <memchr+0x12>
 8009c82:	2000      	movs	r0, #0
 8009c84:	e003      	b.n	8009c8e <memchr+0x1a>
 8009c86:	7804      	ldrb	r4, [r0, #0]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	428c      	cmp	r4, r1
 8009c8c:	d1f6      	bne.n	8009c7c <memchr+0x8>
 8009c8e:	bd10      	pop	{r4, pc}

08009c90 <_Balloc>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c94:	4604      	mov	r4, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	b976      	cbnz	r6, 8009cb8 <_Balloc+0x28>
 8009c9a:	2010      	movs	r0, #16
 8009c9c:	f7ff ffe2 	bl	8009c64 <malloc>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6260      	str	r0, [r4, #36]	; 0x24
 8009ca4:	b920      	cbnz	r0, 8009cb0 <_Balloc+0x20>
 8009ca6:	2166      	movs	r1, #102	; 0x66
 8009ca8:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <_Balloc+0x78>)
 8009caa:	4818      	ldr	r0, [pc, #96]	; (8009d0c <_Balloc+0x7c>)
 8009cac:	f000 fdce 	bl	800a84c <__assert_func>
 8009cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cb4:	6006      	str	r6, [r0, #0]
 8009cb6:	60c6      	str	r6, [r0, #12]
 8009cb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cba:	68f3      	ldr	r3, [r6, #12]
 8009cbc:	b183      	cbz	r3, 8009ce0 <_Balloc+0x50>
 8009cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cc6:	b9b8      	cbnz	r0, 8009cf8 <_Balloc+0x68>
 8009cc8:	2101      	movs	r1, #1
 8009cca:	fa01 f605 	lsl.w	r6, r1, r5
 8009cce:	1d72      	adds	r2, r6, #5
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	0092      	lsls	r2, r2, #2
 8009cd4:	f000 fb5e 	bl	800a394 <_calloc_r>
 8009cd8:	b160      	cbz	r0, 8009cf4 <_Balloc+0x64>
 8009cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cde:	e00e      	b.n	8009cfe <_Balloc+0x6e>
 8009ce0:	2221      	movs	r2, #33	; 0x21
 8009ce2:	2104      	movs	r1, #4
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 fb55 	bl	800a394 <_calloc_r>
 8009cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cec:	60f0      	str	r0, [r6, #12]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e4      	bne.n	8009cbe <_Balloc+0x2e>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	6802      	ldr	r2, [r0, #0]
 8009cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d04:	e7f7      	b.n	8009cf6 <_Balloc+0x66>
 8009d06:	bf00      	nop
 8009d08:	0800ba32 	.word	0x0800ba32
 8009d0c:	0800bab5 	.word	0x0800bab5

08009d10 <_Bfree>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d14:	4605      	mov	r5, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	b976      	cbnz	r6, 8009d38 <_Bfree+0x28>
 8009d1a:	2010      	movs	r0, #16
 8009d1c:	f7ff ffa2 	bl	8009c64 <malloc>
 8009d20:	4602      	mov	r2, r0
 8009d22:	6268      	str	r0, [r5, #36]	; 0x24
 8009d24:	b920      	cbnz	r0, 8009d30 <_Bfree+0x20>
 8009d26:	218a      	movs	r1, #138	; 0x8a
 8009d28:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <_Bfree+0x3c>)
 8009d2a:	4809      	ldr	r0, [pc, #36]	; (8009d50 <_Bfree+0x40>)
 8009d2c:	f000 fd8e 	bl	800a84c <__assert_func>
 8009d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d34:	6006      	str	r6, [r0, #0]
 8009d36:	60c6      	str	r6, [r0, #12]
 8009d38:	b13c      	cbz	r4, 8009d4a <_Bfree+0x3a>
 8009d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d3c:	6862      	ldr	r2, [r4, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d44:	6021      	str	r1, [r4, #0]
 8009d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	0800ba32 	.word	0x0800ba32
 8009d50:	0800bab5 	.word	0x0800bab5

08009d54 <__multadd>:
 8009d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d58:	4607      	mov	r7, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	461e      	mov	r6, r3
 8009d5e:	2000      	movs	r0, #0
 8009d60:	690d      	ldr	r5, [r1, #16]
 8009d62:	f101 0c14 	add.w	ip, r1, #20
 8009d66:	f8dc 3000 	ldr.w	r3, [ip]
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	b299      	uxth	r1, r3
 8009d6e:	fb02 6101 	mla	r1, r2, r1, r6
 8009d72:	0c1e      	lsrs	r6, r3, #16
 8009d74:	0c0b      	lsrs	r3, r1, #16
 8009d76:	fb02 3306 	mla	r3, r2, r6, r3
 8009d7a:	b289      	uxth	r1, r1
 8009d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d80:	4285      	cmp	r5, r0
 8009d82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d86:	f84c 1b04 	str.w	r1, [ip], #4
 8009d8a:	dcec      	bgt.n	8009d66 <__multadd+0x12>
 8009d8c:	b30e      	cbz	r6, 8009dd2 <__multadd+0x7e>
 8009d8e:	68a3      	ldr	r3, [r4, #8]
 8009d90:	42ab      	cmp	r3, r5
 8009d92:	dc19      	bgt.n	8009dc8 <__multadd+0x74>
 8009d94:	6861      	ldr	r1, [r4, #4]
 8009d96:	4638      	mov	r0, r7
 8009d98:	3101      	adds	r1, #1
 8009d9a:	f7ff ff79 	bl	8009c90 <_Balloc>
 8009d9e:	4680      	mov	r8, r0
 8009da0:	b928      	cbnz	r0, 8009dae <__multadd+0x5a>
 8009da2:	4602      	mov	r2, r0
 8009da4:	21b5      	movs	r1, #181	; 0xb5
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <__multadd+0x84>)
 8009da8:	480c      	ldr	r0, [pc, #48]	; (8009ddc <__multadd+0x88>)
 8009daa:	f000 fd4f 	bl	800a84c <__assert_func>
 8009dae:	6922      	ldr	r2, [r4, #16]
 8009db0:	f104 010c 	add.w	r1, r4, #12
 8009db4:	3202      	adds	r2, #2
 8009db6:	0092      	lsls	r2, r2, #2
 8009db8:	300c      	adds	r0, #12
 8009dba:	f7fe fba1 	bl	8008500 <memcpy>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ffa5 	bl	8009d10 <_Bfree>
 8009dc6:	4644      	mov	r4, r8
 8009dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dcc:	3501      	adds	r5, #1
 8009dce:	615e      	str	r6, [r3, #20]
 8009dd0:	6125      	str	r5, [r4, #16]
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd8:	0800baa4 	.word	0x0800baa4
 8009ddc:	0800bab5 	.word	0x0800bab5

08009de0 <__hi0bits>:
 8009de0:	0c02      	lsrs	r2, r0, #16
 8009de2:	0412      	lsls	r2, r2, #16
 8009de4:	4603      	mov	r3, r0
 8009de6:	b9ca      	cbnz	r2, 8009e1c <__hi0bits+0x3c>
 8009de8:	0403      	lsls	r3, r0, #16
 8009dea:	2010      	movs	r0, #16
 8009dec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009df0:	bf04      	itt	eq
 8009df2:	021b      	lsleq	r3, r3, #8
 8009df4:	3008      	addeq	r0, #8
 8009df6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009dfa:	bf04      	itt	eq
 8009dfc:	011b      	lsleq	r3, r3, #4
 8009dfe:	3004      	addeq	r0, #4
 8009e00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009e04:	bf04      	itt	eq
 8009e06:	009b      	lsleq	r3, r3, #2
 8009e08:	3002      	addeq	r0, #2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	db05      	blt.n	8009e1a <__hi0bits+0x3a>
 8009e0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009e12:	f100 0001 	add.w	r0, r0, #1
 8009e16:	bf08      	it	eq
 8009e18:	2020      	moveq	r0, #32
 8009e1a:	4770      	bx	lr
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7e5      	b.n	8009dec <__hi0bits+0xc>

08009e20 <__lo0bits>:
 8009e20:	6803      	ldr	r3, [r0, #0]
 8009e22:	4602      	mov	r2, r0
 8009e24:	f013 0007 	ands.w	r0, r3, #7
 8009e28:	d00b      	beq.n	8009e42 <__lo0bits+0x22>
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d421      	bmi.n	8009e72 <__lo0bits+0x52>
 8009e2e:	0798      	lsls	r0, r3, #30
 8009e30:	bf49      	itett	mi
 8009e32:	085b      	lsrmi	r3, r3, #1
 8009e34:	089b      	lsrpl	r3, r3, #2
 8009e36:	2001      	movmi	r0, #1
 8009e38:	6013      	strmi	r3, [r2, #0]
 8009e3a:	bf5c      	itt	pl
 8009e3c:	2002      	movpl	r0, #2
 8009e3e:	6013      	strpl	r3, [r2, #0]
 8009e40:	4770      	bx	lr
 8009e42:	b299      	uxth	r1, r3
 8009e44:	b909      	cbnz	r1, 8009e4a <__lo0bits+0x2a>
 8009e46:	2010      	movs	r0, #16
 8009e48:	0c1b      	lsrs	r3, r3, #16
 8009e4a:	b2d9      	uxtb	r1, r3
 8009e4c:	b909      	cbnz	r1, 8009e52 <__lo0bits+0x32>
 8009e4e:	3008      	adds	r0, #8
 8009e50:	0a1b      	lsrs	r3, r3, #8
 8009e52:	0719      	lsls	r1, r3, #28
 8009e54:	bf04      	itt	eq
 8009e56:	091b      	lsreq	r3, r3, #4
 8009e58:	3004      	addeq	r0, #4
 8009e5a:	0799      	lsls	r1, r3, #30
 8009e5c:	bf04      	itt	eq
 8009e5e:	089b      	lsreq	r3, r3, #2
 8009e60:	3002      	addeq	r0, #2
 8009e62:	07d9      	lsls	r1, r3, #31
 8009e64:	d403      	bmi.n	8009e6e <__lo0bits+0x4e>
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	f100 0001 	add.w	r0, r0, #1
 8009e6c:	d003      	beq.n	8009e76 <__lo0bits+0x56>
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	4770      	bx	lr
 8009e72:	2000      	movs	r0, #0
 8009e74:	4770      	bx	lr
 8009e76:	2020      	movs	r0, #32
 8009e78:	4770      	bx	lr
	...

08009e7c <__i2b>:
 8009e7c:	b510      	push	{r4, lr}
 8009e7e:	460c      	mov	r4, r1
 8009e80:	2101      	movs	r1, #1
 8009e82:	f7ff ff05 	bl	8009c90 <_Balloc>
 8009e86:	4602      	mov	r2, r0
 8009e88:	b928      	cbnz	r0, 8009e96 <__i2b+0x1a>
 8009e8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e8e:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <__i2b+0x24>)
 8009e90:	4804      	ldr	r0, [pc, #16]	; (8009ea4 <__i2b+0x28>)
 8009e92:	f000 fcdb 	bl	800a84c <__assert_func>
 8009e96:	2301      	movs	r3, #1
 8009e98:	6144      	str	r4, [r0, #20]
 8009e9a:	6103      	str	r3, [r0, #16]
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	bf00      	nop
 8009ea0:	0800baa4 	.word	0x0800baa4
 8009ea4:	0800bab5 	.word	0x0800bab5

08009ea8 <__multiply>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	4691      	mov	r9, r2
 8009eae:	690a      	ldr	r2, [r1, #16]
 8009eb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	bfbe      	ittt	lt
 8009eba:	460b      	movlt	r3, r1
 8009ebc:	464c      	movlt	r4, r9
 8009ebe:	4699      	movlt	r9, r3
 8009ec0:	6927      	ldr	r7, [r4, #16]
 8009ec2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ec6:	68a3      	ldr	r3, [r4, #8]
 8009ec8:	6861      	ldr	r1, [r4, #4]
 8009eca:	eb07 060a 	add.w	r6, r7, sl
 8009ece:	42b3      	cmp	r3, r6
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	bfb8      	it	lt
 8009ed4:	3101      	addlt	r1, #1
 8009ed6:	f7ff fedb 	bl	8009c90 <_Balloc>
 8009eda:	b930      	cbnz	r0, 8009eea <__multiply+0x42>
 8009edc:	4602      	mov	r2, r0
 8009ede:	f240 115d 	movw	r1, #349	; 0x15d
 8009ee2:	4b43      	ldr	r3, [pc, #268]	; (8009ff0 <__multiply+0x148>)
 8009ee4:	4843      	ldr	r0, [pc, #268]	; (8009ff4 <__multiply+0x14c>)
 8009ee6:	f000 fcb1 	bl	800a84c <__assert_func>
 8009eea:	f100 0514 	add.w	r5, r0, #20
 8009eee:	462b      	mov	r3, r5
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ef6:	4543      	cmp	r3, r8
 8009ef8:	d321      	bcc.n	8009f3e <__multiply+0x96>
 8009efa:	f104 0314 	add.w	r3, r4, #20
 8009efe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f02:	f109 0314 	add.w	r3, r9, #20
 8009f06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f0a:	9202      	str	r2, [sp, #8]
 8009f0c:	1b3a      	subs	r2, r7, r4
 8009f0e:	3a15      	subs	r2, #21
 8009f10:	f022 0203 	bic.w	r2, r2, #3
 8009f14:	3204      	adds	r2, #4
 8009f16:	f104 0115 	add.w	r1, r4, #21
 8009f1a:	428f      	cmp	r7, r1
 8009f1c:	bf38      	it	cc
 8009f1e:	2204      	movcc	r2, #4
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	9a02      	ldr	r2, [sp, #8]
 8009f24:	9303      	str	r3, [sp, #12]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d80c      	bhi.n	8009f44 <__multiply+0x9c>
 8009f2a:	2e00      	cmp	r6, #0
 8009f2c:	dd03      	ble.n	8009f36 <__multiply+0x8e>
 8009f2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d059      	beq.n	8009fea <__multiply+0x142>
 8009f36:	6106      	str	r6, [r0, #16]
 8009f38:	b005      	add	sp, #20
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	f843 2b04 	str.w	r2, [r3], #4
 8009f42:	e7d8      	b.n	8009ef6 <__multiply+0x4e>
 8009f44:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f48:	f1ba 0f00 	cmp.w	sl, #0
 8009f4c:	d023      	beq.n	8009f96 <__multiply+0xee>
 8009f4e:	46a9      	mov	r9, r5
 8009f50:	f04f 0c00 	mov.w	ip, #0
 8009f54:	f104 0e14 	add.w	lr, r4, #20
 8009f58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f5c:	f8d9 1000 	ldr.w	r1, [r9]
 8009f60:	fa1f fb82 	uxth.w	fp, r2
 8009f64:	b289      	uxth	r1, r1
 8009f66:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f6a:	4461      	add	r1, ip
 8009f6c:	f8d9 c000 	ldr.w	ip, [r9]
 8009f70:	0c12      	lsrs	r2, r2, #16
 8009f72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009f76:	fb0a c202 	mla	r2, sl, r2, ip
 8009f7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f7e:	b289      	uxth	r1, r1
 8009f80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f84:	4577      	cmp	r7, lr
 8009f86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f8a:	f849 1b04 	str.w	r1, [r9], #4
 8009f8e:	d8e3      	bhi.n	8009f58 <__multiply+0xb0>
 8009f90:	9a01      	ldr	r2, [sp, #4]
 8009f92:	f845 c002 	str.w	ip, [r5, r2]
 8009f96:	9a03      	ldr	r2, [sp, #12]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f9e:	f1b9 0f00 	cmp.w	r9, #0
 8009fa2:	d020      	beq.n	8009fe6 <__multiply+0x13e>
 8009fa4:	46ae      	mov	lr, r5
 8009fa6:	f04f 0a00 	mov.w	sl, #0
 8009faa:	6829      	ldr	r1, [r5, #0]
 8009fac:	f104 0c14 	add.w	ip, r4, #20
 8009fb0:	f8bc b000 	ldrh.w	fp, [ip]
 8009fb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fb8:	b289      	uxth	r1, r1
 8009fba:	fb09 220b 	mla	r2, r9, fp, r2
 8009fbe:	4492      	add	sl, r2
 8009fc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009fc4:	f84e 1b04 	str.w	r1, [lr], #4
 8009fc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009fcc:	f8be 1000 	ldrh.w	r1, [lr]
 8009fd0:	0c12      	lsrs	r2, r2, #16
 8009fd2:	fb09 1102 	mla	r1, r9, r2, r1
 8009fd6:	4567      	cmp	r7, ip
 8009fd8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009fdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fe0:	d8e6      	bhi.n	8009fb0 <__multiply+0x108>
 8009fe2:	9a01      	ldr	r2, [sp, #4]
 8009fe4:	50a9      	str	r1, [r5, r2]
 8009fe6:	3504      	adds	r5, #4
 8009fe8:	e79b      	b.n	8009f22 <__multiply+0x7a>
 8009fea:	3e01      	subs	r6, #1
 8009fec:	e79d      	b.n	8009f2a <__multiply+0x82>
 8009fee:	bf00      	nop
 8009ff0:	0800baa4 	.word	0x0800baa4
 8009ff4:	0800bab5 	.word	0x0800bab5

08009ff8 <__pow5mult>:
 8009ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	4615      	mov	r5, r2
 8009ffe:	f012 0203 	ands.w	r2, r2, #3
 800a002:	4606      	mov	r6, r0
 800a004:	460f      	mov	r7, r1
 800a006:	d007      	beq.n	800a018 <__pow5mult+0x20>
 800a008:	4c25      	ldr	r4, [pc, #148]	; (800a0a0 <__pow5mult+0xa8>)
 800a00a:	3a01      	subs	r2, #1
 800a00c:	2300      	movs	r3, #0
 800a00e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a012:	f7ff fe9f 	bl	8009d54 <__multadd>
 800a016:	4607      	mov	r7, r0
 800a018:	10ad      	asrs	r5, r5, #2
 800a01a:	d03d      	beq.n	800a098 <__pow5mult+0xa0>
 800a01c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a01e:	b97c      	cbnz	r4, 800a040 <__pow5mult+0x48>
 800a020:	2010      	movs	r0, #16
 800a022:	f7ff fe1f 	bl	8009c64 <malloc>
 800a026:	4602      	mov	r2, r0
 800a028:	6270      	str	r0, [r6, #36]	; 0x24
 800a02a:	b928      	cbnz	r0, 800a038 <__pow5mult+0x40>
 800a02c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a030:	4b1c      	ldr	r3, [pc, #112]	; (800a0a4 <__pow5mult+0xac>)
 800a032:	481d      	ldr	r0, [pc, #116]	; (800a0a8 <__pow5mult+0xb0>)
 800a034:	f000 fc0a 	bl	800a84c <__assert_func>
 800a038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a03c:	6004      	str	r4, [r0, #0]
 800a03e:	60c4      	str	r4, [r0, #12]
 800a040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a048:	b94c      	cbnz	r4, 800a05e <__pow5mult+0x66>
 800a04a:	f240 2171 	movw	r1, #625	; 0x271
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ff14 	bl	8009e7c <__i2b>
 800a054:	2300      	movs	r3, #0
 800a056:	4604      	mov	r4, r0
 800a058:	f8c8 0008 	str.w	r0, [r8, #8]
 800a05c:	6003      	str	r3, [r0, #0]
 800a05e:	f04f 0900 	mov.w	r9, #0
 800a062:	07eb      	lsls	r3, r5, #31
 800a064:	d50a      	bpl.n	800a07c <__pow5mult+0x84>
 800a066:	4639      	mov	r1, r7
 800a068:	4622      	mov	r2, r4
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7ff ff1c 	bl	8009ea8 <__multiply>
 800a070:	4680      	mov	r8, r0
 800a072:	4639      	mov	r1, r7
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff fe4b 	bl	8009d10 <_Bfree>
 800a07a:	4647      	mov	r7, r8
 800a07c:	106d      	asrs	r5, r5, #1
 800a07e:	d00b      	beq.n	800a098 <__pow5mult+0xa0>
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	b938      	cbnz	r0, 800a094 <__pow5mult+0x9c>
 800a084:	4622      	mov	r2, r4
 800a086:	4621      	mov	r1, r4
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff ff0d 	bl	8009ea8 <__multiply>
 800a08e:	6020      	str	r0, [r4, #0]
 800a090:	f8c0 9000 	str.w	r9, [r0]
 800a094:	4604      	mov	r4, r0
 800a096:	e7e4      	b.n	800a062 <__pow5mult+0x6a>
 800a098:	4638      	mov	r0, r7
 800a09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a09e:	bf00      	nop
 800a0a0:	0800bc08 	.word	0x0800bc08
 800a0a4:	0800ba32 	.word	0x0800ba32
 800a0a8:	0800bab5 	.word	0x0800bab5

0800a0ac <__lshift>:
 800a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	4607      	mov	r7, r0
 800a0b4:	4691      	mov	r9, r2
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	6849      	ldr	r1, [r1, #4]
 800a0ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0c4:	f108 0601 	add.w	r6, r8, #1
 800a0c8:	42b3      	cmp	r3, r6
 800a0ca:	db0b      	blt.n	800a0e4 <__lshift+0x38>
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	f7ff fddf 	bl	8009c90 <_Balloc>
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	b948      	cbnz	r0, 800a0ea <__lshift+0x3e>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0dc:	4b29      	ldr	r3, [pc, #164]	; (800a184 <__lshift+0xd8>)
 800a0de:	482a      	ldr	r0, [pc, #168]	; (800a188 <__lshift+0xdc>)
 800a0e0:	f000 fbb4 	bl	800a84c <__assert_func>
 800a0e4:	3101      	adds	r1, #1
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__lshift+0x1c>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f100 0114 	add.w	r1, r0, #20
 800a0f0:	f100 0210 	add.w	r2, r0, #16
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	4553      	cmp	r3, sl
 800a0f8:	db37      	blt.n	800a16a <__lshift+0xbe>
 800a0fa:	6920      	ldr	r0, [r4, #16]
 800a0fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a100:	f104 0314 	add.w	r3, r4, #20
 800a104:	f019 091f 	ands.w	r9, r9, #31
 800a108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a10c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a110:	d02f      	beq.n	800a172 <__lshift+0xc6>
 800a112:	468a      	mov	sl, r1
 800a114:	f04f 0c00 	mov.w	ip, #0
 800a118:	f1c9 0e20 	rsb	lr, r9, #32
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	fa02 f209 	lsl.w	r2, r2, r9
 800a122:	ea42 020c 	orr.w	r2, r2, ip
 800a126:	f84a 2b04 	str.w	r2, [sl], #4
 800a12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a12e:	4298      	cmp	r0, r3
 800a130:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a134:	d8f2      	bhi.n	800a11c <__lshift+0x70>
 800a136:	1b03      	subs	r3, r0, r4
 800a138:	3b15      	subs	r3, #21
 800a13a:	f023 0303 	bic.w	r3, r3, #3
 800a13e:	3304      	adds	r3, #4
 800a140:	f104 0215 	add.w	r2, r4, #21
 800a144:	4290      	cmp	r0, r2
 800a146:	bf38      	it	cc
 800a148:	2304      	movcc	r3, #4
 800a14a:	f841 c003 	str.w	ip, [r1, r3]
 800a14e:	f1bc 0f00 	cmp.w	ip, #0
 800a152:	d001      	beq.n	800a158 <__lshift+0xac>
 800a154:	f108 0602 	add.w	r6, r8, #2
 800a158:	3e01      	subs	r6, #1
 800a15a:	4638      	mov	r0, r7
 800a15c:	4621      	mov	r1, r4
 800a15e:	612e      	str	r6, [r5, #16]
 800a160:	f7ff fdd6 	bl	8009d10 <_Bfree>
 800a164:	4628      	mov	r0, r5
 800a166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a16e:	3301      	adds	r3, #1
 800a170:	e7c1      	b.n	800a0f6 <__lshift+0x4a>
 800a172:	3904      	subs	r1, #4
 800a174:	f853 2b04 	ldr.w	r2, [r3], #4
 800a178:	4298      	cmp	r0, r3
 800a17a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a17e:	d8f9      	bhi.n	800a174 <__lshift+0xc8>
 800a180:	e7ea      	b.n	800a158 <__lshift+0xac>
 800a182:	bf00      	nop
 800a184:	0800baa4 	.word	0x0800baa4
 800a188:	0800bab5 	.word	0x0800bab5

0800a18c <__mcmp>:
 800a18c:	4603      	mov	r3, r0
 800a18e:	690a      	ldr	r2, [r1, #16]
 800a190:	6900      	ldr	r0, [r0, #16]
 800a192:	b530      	push	{r4, r5, lr}
 800a194:	1a80      	subs	r0, r0, r2
 800a196:	d10d      	bne.n	800a1b4 <__mcmp+0x28>
 800a198:	3314      	adds	r3, #20
 800a19a:	3114      	adds	r1, #20
 800a19c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a1a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a1a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1ac:	4295      	cmp	r5, r2
 800a1ae:	d002      	beq.n	800a1b6 <__mcmp+0x2a>
 800a1b0:	d304      	bcc.n	800a1bc <__mcmp+0x30>
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	bd30      	pop	{r4, r5, pc}
 800a1b6:	42a3      	cmp	r3, r4
 800a1b8:	d3f4      	bcc.n	800a1a4 <__mcmp+0x18>
 800a1ba:	e7fb      	b.n	800a1b4 <__mcmp+0x28>
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c0:	e7f8      	b.n	800a1b4 <__mcmp+0x28>
	...

0800a1c4 <__mdiff>:
 800a1c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	f7ff ffdb 	bl	800a18c <__mcmp>
 800a1d6:	1e06      	subs	r6, r0, #0
 800a1d8:	d111      	bne.n	800a1fe <__mdiff+0x3a>
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7ff fd57 	bl	8009c90 <_Balloc>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	b928      	cbnz	r0, 800a1f2 <__mdiff+0x2e>
 800a1e6:	f240 2132 	movw	r1, #562	; 0x232
 800a1ea:	4b3a      	ldr	r3, [pc, #232]	; (800a2d4 <__mdiff+0x110>)
 800a1ec:	483a      	ldr	r0, [pc, #232]	; (800a2d8 <__mdiff+0x114>)
 800a1ee:	f000 fb2d 	bl	800a84c <__assert_func>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fe:	bfa4      	itt	ge
 800a200:	4623      	movge	r3, r4
 800a202:	462c      	movge	r4, r5
 800a204:	4638      	mov	r0, r7
 800a206:	6861      	ldr	r1, [r4, #4]
 800a208:	bfa6      	itte	ge
 800a20a:	461d      	movge	r5, r3
 800a20c:	2600      	movge	r6, #0
 800a20e:	2601      	movlt	r6, #1
 800a210:	f7ff fd3e 	bl	8009c90 <_Balloc>
 800a214:	4602      	mov	r2, r0
 800a216:	b918      	cbnz	r0, 800a220 <__mdiff+0x5c>
 800a218:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a21c:	4b2d      	ldr	r3, [pc, #180]	; (800a2d4 <__mdiff+0x110>)
 800a21e:	e7e5      	b.n	800a1ec <__mdiff+0x28>
 800a220:	f102 0814 	add.w	r8, r2, #20
 800a224:	46c2      	mov	sl, r8
 800a226:	f04f 0c00 	mov.w	ip, #0
 800a22a:	6927      	ldr	r7, [r4, #16]
 800a22c:	60c6      	str	r6, [r0, #12]
 800a22e:	692e      	ldr	r6, [r5, #16]
 800a230:	f104 0014 	add.w	r0, r4, #20
 800a234:	f105 0914 	add.w	r9, r5, #20
 800a238:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a23c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a240:	3410      	adds	r4, #16
 800a242:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a246:	f859 3b04 	ldr.w	r3, [r9], #4
 800a24a:	fa1f f18b 	uxth.w	r1, fp
 800a24e:	448c      	add	ip, r1
 800a250:	b299      	uxth	r1, r3
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	ebac 0101 	sub.w	r1, ip, r1
 800a258:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a25c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a260:	b289      	uxth	r1, r1
 800a262:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a266:	454e      	cmp	r6, r9
 800a268:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a26c:	f84a 3b04 	str.w	r3, [sl], #4
 800a270:	d8e7      	bhi.n	800a242 <__mdiff+0x7e>
 800a272:	1b73      	subs	r3, r6, r5
 800a274:	3b15      	subs	r3, #21
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	3515      	adds	r5, #21
 800a27c:	3304      	adds	r3, #4
 800a27e:	42ae      	cmp	r6, r5
 800a280:	bf38      	it	cc
 800a282:	2304      	movcc	r3, #4
 800a284:	4418      	add	r0, r3
 800a286:	4443      	add	r3, r8
 800a288:	461e      	mov	r6, r3
 800a28a:	4605      	mov	r5, r0
 800a28c:	4575      	cmp	r5, lr
 800a28e:	d30e      	bcc.n	800a2ae <__mdiff+0xea>
 800a290:	f10e 0103 	add.w	r1, lr, #3
 800a294:	1a09      	subs	r1, r1, r0
 800a296:	f021 0103 	bic.w	r1, r1, #3
 800a29a:	3803      	subs	r0, #3
 800a29c:	4586      	cmp	lr, r0
 800a29e:	bf38      	it	cc
 800a2a0:	2100      	movcc	r1, #0
 800a2a2:	4419      	add	r1, r3
 800a2a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a2a8:	b18b      	cbz	r3, 800a2ce <__mdiff+0x10a>
 800a2aa:	6117      	str	r7, [r2, #16]
 800a2ac:	e7a4      	b.n	800a1f8 <__mdiff+0x34>
 800a2ae:	f855 8b04 	ldr.w	r8, [r5], #4
 800a2b2:	fa1f f188 	uxth.w	r1, r8
 800a2b6:	4461      	add	r1, ip
 800a2b8:	140c      	asrs	r4, r1, #16
 800a2ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2be:	b289      	uxth	r1, r1
 800a2c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2c4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a2c8:	f846 1b04 	str.w	r1, [r6], #4
 800a2cc:	e7de      	b.n	800a28c <__mdiff+0xc8>
 800a2ce:	3f01      	subs	r7, #1
 800a2d0:	e7e8      	b.n	800a2a4 <__mdiff+0xe0>
 800a2d2:	bf00      	nop
 800a2d4:	0800baa4 	.word	0x0800baa4
 800a2d8:	0800bab5 	.word	0x0800bab5

0800a2dc <__d2b>:
 800a2dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a2e6:	4690      	mov	r8, r2
 800a2e8:	461d      	mov	r5, r3
 800a2ea:	f7ff fcd1 	bl	8009c90 <_Balloc>
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	b930      	cbnz	r0, 800a300 <__d2b+0x24>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	f240 310a 	movw	r1, #778	; 0x30a
 800a2f8:	4b24      	ldr	r3, [pc, #144]	; (800a38c <__d2b+0xb0>)
 800a2fa:	4825      	ldr	r0, [pc, #148]	; (800a390 <__d2b+0xb4>)
 800a2fc:	f000 faa6 	bl	800a84c <__assert_func>
 800a300:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a304:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a308:	bb2d      	cbnz	r5, 800a356 <__d2b+0x7a>
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	f1b8 0300 	subs.w	r3, r8, #0
 800a310:	d026      	beq.n	800a360 <__d2b+0x84>
 800a312:	4668      	mov	r0, sp
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	f7ff fd83 	bl	8009e20 <__lo0bits>
 800a31a:	9900      	ldr	r1, [sp, #0]
 800a31c:	b1f0      	cbz	r0, 800a35c <__d2b+0x80>
 800a31e:	9a01      	ldr	r2, [sp, #4]
 800a320:	f1c0 0320 	rsb	r3, r0, #32
 800a324:	fa02 f303 	lsl.w	r3, r2, r3
 800a328:	430b      	orrs	r3, r1
 800a32a:	40c2      	lsrs	r2, r0
 800a32c:	6163      	str	r3, [r4, #20]
 800a32e:	9201      	str	r2, [sp, #4]
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	bf14      	ite	ne
 800a336:	2102      	movne	r1, #2
 800a338:	2101      	moveq	r1, #1
 800a33a:	61a3      	str	r3, [r4, #24]
 800a33c:	6121      	str	r1, [r4, #16]
 800a33e:	b1c5      	cbz	r5, 800a372 <__d2b+0x96>
 800a340:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a344:	4405      	add	r5, r0
 800a346:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a34a:	603d      	str	r5, [r7, #0]
 800a34c:	6030      	str	r0, [r6, #0]
 800a34e:	4620      	mov	r0, r4
 800a350:	b002      	add	sp, #8
 800a352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a35a:	e7d6      	b.n	800a30a <__d2b+0x2e>
 800a35c:	6161      	str	r1, [r4, #20]
 800a35e:	e7e7      	b.n	800a330 <__d2b+0x54>
 800a360:	a801      	add	r0, sp, #4
 800a362:	f7ff fd5d 	bl	8009e20 <__lo0bits>
 800a366:	2101      	movs	r1, #1
 800a368:	9b01      	ldr	r3, [sp, #4]
 800a36a:	6121      	str	r1, [r4, #16]
 800a36c:	6163      	str	r3, [r4, #20]
 800a36e:	3020      	adds	r0, #32
 800a370:	e7e5      	b.n	800a33e <__d2b+0x62>
 800a372:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a376:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a37a:	6038      	str	r0, [r7, #0]
 800a37c:	6918      	ldr	r0, [r3, #16]
 800a37e:	f7ff fd2f 	bl	8009de0 <__hi0bits>
 800a382:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a386:	6031      	str	r1, [r6, #0]
 800a388:	e7e1      	b.n	800a34e <__d2b+0x72>
 800a38a:	bf00      	nop
 800a38c:	0800baa4 	.word	0x0800baa4
 800a390:	0800bab5 	.word	0x0800bab5

0800a394 <_calloc_r>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	fba1 5402 	umull	r5, r4, r1, r2
 800a39a:	b934      	cbnz	r4, 800a3aa <_calloc_r+0x16>
 800a39c:	4629      	mov	r1, r5
 800a39e:	f000 f875 	bl	800a48c <_malloc_r>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	b928      	cbnz	r0, 800a3b2 <_calloc_r+0x1e>
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	bd70      	pop	{r4, r5, r6, pc}
 800a3aa:	220c      	movs	r2, #12
 800a3ac:	2600      	movs	r6, #0
 800a3ae:	6002      	str	r2, [r0, #0]
 800a3b0:	e7f9      	b.n	800a3a6 <_calloc_r+0x12>
 800a3b2:	462a      	mov	r2, r5
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	f7fe f8b1 	bl	800851c <memset>
 800a3ba:	e7f4      	b.n	800a3a6 <_calloc_r+0x12>

0800a3bc <_free_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4605      	mov	r5, r0
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	d040      	beq.n	800a446 <_free_r+0x8a>
 800a3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c8:	1f0c      	subs	r4, r1, #4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bfb8      	it	lt
 800a3ce:	18e4      	addlt	r4, r4, r3
 800a3d0:	f000 fa98 	bl	800a904 <__malloc_lock>
 800a3d4:	4a1c      	ldr	r2, [pc, #112]	; (800a448 <_free_r+0x8c>)
 800a3d6:	6813      	ldr	r3, [r2, #0]
 800a3d8:	b933      	cbnz	r3, 800a3e8 <_free_r+0x2c>
 800a3da:	6063      	str	r3, [r4, #4]
 800a3dc:	6014      	str	r4, [r2, #0]
 800a3de:	4628      	mov	r0, r5
 800a3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3e4:	f000 ba94 	b.w	800a910 <__malloc_unlock>
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	d908      	bls.n	800a3fe <_free_r+0x42>
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	1821      	adds	r1, r4, r0
 800a3f0:	428b      	cmp	r3, r1
 800a3f2:	bf01      	itttt	eq
 800a3f4:	6819      	ldreq	r1, [r3, #0]
 800a3f6:	685b      	ldreq	r3, [r3, #4]
 800a3f8:	1809      	addeq	r1, r1, r0
 800a3fa:	6021      	streq	r1, [r4, #0]
 800a3fc:	e7ed      	b.n	800a3da <_free_r+0x1e>
 800a3fe:	461a      	mov	r2, r3
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	b10b      	cbz	r3, 800a408 <_free_r+0x4c>
 800a404:	42a3      	cmp	r3, r4
 800a406:	d9fa      	bls.n	800a3fe <_free_r+0x42>
 800a408:	6811      	ldr	r1, [r2, #0]
 800a40a:	1850      	adds	r0, r2, r1
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d10b      	bne.n	800a428 <_free_r+0x6c>
 800a410:	6820      	ldr	r0, [r4, #0]
 800a412:	4401      	add	r1, r0
 800a414:	1850      	adds	r0, r2, r1
 800a416:	4283      	cmp	r3, r0
 800a418:	6011      	str	r1, [r2, #0]
 800a41a:	d1e0      	bne.n	800a3de <_free_r+0x22>
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4401      	add	r1, r0
 800a422:	6011      	str	r1, [r2, #0]
 800a424:	6053      	str	r3, [r2, #4]
 800a426:	e7da      	b.n	800a3de <_free_r+0x22>
 800a428:	d902      	bls.n	800a430 <_free_r+0x74>
 800a42a:	230c      	movs	r3, #12
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	e7d6      	b.n	800a3de <_free_r+0x22>
 800a430:	6820      	ldr	r0, [r4, #0]
 800a432:	1821      	adds	r1, r4, r0
 800a434:	428b      	cmp	r3, r1
 800a436:	bf01      	itttt	eq
 800a438:	6819      	ldreq	r1, [r3, #0]
 800a43a:	685b      	ldreq	r3, [r3, #4]
 800a43c:	1809      	addeq	r1, r1, r0
 800a43e:	6021      	streq	r1, [r4, #0]
 800a440:	6063      	str	r3, [r4, #4]
 800a442:	6054      	str	r4, [r2, #4]
 800a444:	e7cb      	b.n	800a3de <_free_r+0x22>
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	200005f8 	.word	0x200005f8

0800a44c <sbrk_aligned>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	4e0e      	ldr	r6, [pc, #56]	; (800a488 <sbrk_aligned+0x3c>)
 800a450:	460c      	mov	r4, r1
 800a452:	6831      	ldr	r1, [r6, #0]
 800a454:	4605      	mov	r5, r0
 800a456:	b911      	cbnz	r1, 800a45e <sbrk_aligned+0x12>
 800a458:	f000 f9e8 	bl	800a82c <_sbrk_r>
 800a45c:	6030      	str	r0, [r6, #0]
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	f000 f9e3 	bl	800a82c <_sbrk_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d00a      	beq.n	800a480 <sbrk_aligned+0x34>
 800a46a:	1cc4      	adds	r4, r0, #3
 800a46c:	f024 0403 	bic.w	r4, r4, #3
 800a470:	42a0      	cmp	r0, r4
 800a472:	d007      	beq.n	800a484 <sbrk_aligned+0x38>
 800a474:	1a21      	subs	r1, r4, r0
 800a476:	4628      	mov	r0, r5
 800a478:	f000 f9d8 	bl	800a82c <_sbrk_r>
 800a47c:	3001      	adds	r0, #1
 800a47e:	d101      	bne.n	800a484 <sbrk_aligned+0x38>
 800a480:	f04f 34ff 	mov.w	r4, #4294967295
 800a484:	4620      	mov	r0, r4
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	200005fc 	.word	0x200005fc

0800a48c <_malloc_r>:
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	1ccd      	adds	r5, r1, #3
 800a492:	f025 0503 	bic.w	r5, r5, #3
 800a496:	3508      	adds	r5, #8
 800a498:	2d0c      	cmp	r5, #12
 800a49a:	bf38      	it	cc
 800a49c:	250c      	movcc	r5, #12
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	db01      	blt.n	800a4a8 <_malloc_r+0x1c>
 800a4a4:	42a9      	cmp	r1, r5
 800a4a6:	d905      	bls.n	800a4b4 <_malloc_r+0x28>
 800a4a8:	230c      	movs	r3, #12
 800a4aa:	2600      	movs	r6, #0
 800a4ac:	603b      	str	r3, [r7, #0]
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b4:	4e2e      	ldr	r6, [pc, #184]	; (800a570 <_malloc_r+0xe4>)
 800a4b6:	f000 fa25 	bl	800a904 <__malloc_lock>
 800a4ba:	6833      	ldr	r3, [r6, #0]
 800a4bc:	461c      	mov	r4, r3
 800a4be:	bb34      	cbnz	r4, 800a50e <_malloc_r+0x82>
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	f7ff ffc2 	bl	800a44c <sbrk_aligned>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	d14d      	bne.n	800a56a <_malloc_r+0xde>
 800a4ce:	6834      	ldr	r4, [r6, #0]
 800a4d0:	4626      	mov	r6, r4
 800a4d2:	2e00      	cmp	r6, #0
 800a4d4:	d140      	bne.n	800a558 <_malloc_r+0xcc>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4638      	mov	r0, r7
 800a4dc:	eb04 0803 	add.w	r8, r4, r3
 800a4e0:	f000 f9a4 	bl	800a82c <_sbrk_r>
 800a4e4:	4580      	cmp	r8, r0
 800a4e6:	d13a      	bne.n	800a55e <_malloc_r+0xd2>
 800a4e8:	6821      	ldr	r1, [r4, #0]
 800a4ea:	3503      	adds	r5, #3
 800a4ec:	1a6d      	subs	r5, r5, r1
 800a4ee:	f025 0503 	bic.w	r5, r5, #3
 800a4f2:	3508      	adds	r5, #8
 800a4f4:	2d0c      	cmp	r5, #12
 800a4f6:	bf38      	it	cc
 800a4f8:	250c      	movcc	r5, #12
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	f7ff ffa5 	bl	800a44c <sbrk_aligned>
 800a502:	3001      	adds	r0, #1
 800a504:	d02b      	beq.n	800a55e <_malloc_r+0xd2>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	442b      	add	r3, r5
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	e00e      	b.n	800a52c <_malloc_r+0xa0>
 800a50e:	6822      	ldr	r2, [r4, #0]
 800a510:	1b52      	subs	r2, r2, r5
 800a512:	d41e      	bmi.n	800a552 <_malloc_r+0xc6>
 800a514:	2a0b      	cmp	r2, #11
 800a516:	d916      	bls.n	800a546 <_malloc_r+0xba>
 800a518:	1961      	adds	r1, r4, r5
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	6025      	str	r5, [r4, #0]
 800a51e:	bf18      	it	ne
 800a520:	6059      	strne	r1, [r3, #4]
 800a522:	6863      	ldr	r3, [r4, #4]
 800a524:	bf08      	it	eq
 800a526:	6031      	streq	r1, [r6, #0]
 800a528:	5162      	str	r2, [r4, r5]
 800a52a:	604b      	str	r3, [r1, #4]
 800a52c:	4638      	mov	r0, r7
 800a52e:	f104 060b 	add.w	r6, r4, #11
 800a532:	f000 f9ed 	bl	800a910 <__malloc_unlock>
 800a536:	f026 0607 	bic.w	r6, r6, #7
 800a53a:	1d23      	adds	r3, r4, #4
 800a53c:	1af2      	subs	r2, r6, r3
 800a53e:	d0b6      	beq.n	800a4ae <_malloc_r+0x22>
 800a540:	1b9b      	subs	r3, r3, r6
 800a542:	50a3      	str	r3, [r4, r2]
 800a544:	e7b3      	b.n	800a4ae <_malloc_r+0x22>
 800a546:	6862      	ldr	r2, [r4, #4]
 800a548:	42a3      	cmp	r3, r4
 800a54a:	bf0c      	ite	eq
 800a54c:	6032      	streq	r2, [r6, #0]
 800a54e:	605a      	strne	r2, [r3, #4]
 800a550:	e7ec      	b.n	800a52c <_malloc_r+0xa0>
 800a552:	4623      	mov	r3, r4
 800a554:	6864      	ldr	r4, [r4, #4]
 800a556:	e7b2      	b.n	800a4be <_malloc_r+0x32>
 800a558:	4634      	mov	r4, r6
 800a55a:	6876      	ldr	r6, [r6, #4]
 800a55c:	e7b9      	b.n	800a4d2 <_malloc_r+0x46>
 800a55e:	230c      	movs	r3, #12
 800a560:	4638      	mov	r0, r7
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	f000 f9d4 	bl	800a910 <__malloc_unlock>
 800a568:	e7a1      	b.n	800a4ae <_malloc_r+0x22>
 800a56a:	6025      	str	r5, [r4, #0]
 800a56c:	e7de      	b.n	800a52c <_malloc_r+0xa0>
 800a56e:	bf00      	nop
 800a570:	200005f8 	.word	0x200005f8

0800a574 <__ssputs_r>:
 800a574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	688e      	ldr	r6, [r1, #8]
 800a57a:	4682      	mov	sl, r0
 800a57c:	429e      	cmp	r6, r3
 800a57e:	460c      	mov	r4, r1
 800a580:	4690      	mov	r8, r2
 800a582:	461f      	mov	r7, r3
 800a584:	d838      	bhi.n	800a5f8 <__ssputs_r+0x84>
 800a586:	898a      	ldrh	r2, [r1, #12]
 800a588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a58c:	d032      	beq.n	800a5f4 <__ssputs_r+0x80>
 800a58e:	6825      	ldr	r5, [r4, #0]
 800a590:	6909      	ldr	r1, [r1, #16]
 800a592:	3301      	adds	r3, #1
 800a594:	eba5 0901 	sub.w	r9, r5, r1
 800a598:	6965      	ldr	r5, [r4, #20]
 800a59a:	444b      	add	r3, r9
 800a59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5a4:	106d      	asrs	r5, r5, #1
 800a5a6:	429d      	cmp	r5, r3
 800a5a8:	bf38      	it	cc
 800a5aa:	461d      	movcc	r5, r3
 800a5ac:	0553      	lsls	r3, r2, #21
 800a5ae:	d531      	bpl.n	800a614 <__ssputs_r+0xa0>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7ff ff6b 	bl	800a48c <_malloc_r>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	b950      	cbnz	r0, 800a5d0 <__ssputs_r+0x5c>
 800a5ba:	230c      	movs	r3, #12
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	f8ca 3000 	str.w	r3, [sl]
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	464a      	mov	r2, r9
 800a5d2:	6921      	ldr	r1, [r4, #16]
 800a5d4:	f7fd ff94 	bl	8008500 <memcpy>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	6126      	str	r6, [r4, #16]
 800a5e6:	444e      	add	r6, r9
 800a5e8:	6026      	str	r6, [r4, #0]
 800a5ea:	463e      	mov	r6, r7
 800a5ec:	6165      	str	r5, [r4, #20]
 800a5ee:	eba5 0509 	sub.w	r5, r5, r9
 800a5f2:	60a5      	str	r5, [r4, #8]
 800a5f4:	42be      	cmp	r6, r7
 800a5f6:	d900      	bls.n	800a5fa <__ssputs_r+0x86>
 800a5f8:	463e      	mov	r6, r7
 800a5fa:	4632      	mov	r2, r6
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	6820      	ldr	r0, [r4, #0]
 800a600:	f000 f966 	bl	800a8d0 <memmove>
 800a604:	68a3      	ldr	r3, [r4, #8]
 800a606:	2000      	movs	r0, #0
 800a608:	1b9b      	subs	r3, r3, r6
 800a60a:	60a3      	str	r3, [r4, #8]
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	4433      	add	r3, r6
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	e7db      	b.n	800a5cc <__ssputs_r+0x58>
 800a614:	462a      	mov	r2, r5
 800a616:	f000 f981 	bl	800a91c <_realloc_r>
 800a61a:	4606      	mov	r6, r0
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d1e1      	bne.n	800a5e4 <__ssputs_r+0x70>
 800a620:	4650      	mov	r0, sl
 800a622:	6921      	ldr	r1, [r4, #16]
 800a624:	f7ff feca 	bl	800a3bc <_free_r>
 800a628:	e7c7      	b.n	800a5ba <__ssputs_r+0x46>
	...

0800a62c <_svfiprintf_r>:
 800a62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	4698      	mov	r8, r3
 800a632:	898b      	ldrh	r3, [r1, #12]
 800a634:	4607      	mov	r7, r0
 800a636:	061b      	lsls	r3, r3, #24
 800a638:	460d      	mov	r5, r1
 800a63a:	4614      	mov	r4, r2
 800a63c:	b09d      	sub	sp, #116	; 0x74
 800a63e:	d50e      	bpl.n	800a65e <_svfiprintf_r+0x32>
 800a640:	690b      	ldr	r3, [r1, #16]
 800a642:	b963      	cbnz	r3, 800a65e <_svfiprintf_r+0x32>
 800a644:	2140      	movs	r1, #64	; 0x40
 800a646:	f7ff ff21 	bl	800a48c <_malloc_r>
 800a64a:	6028      	str	r0, [r5, #0]
 800a64c:	6128      	str	r0, [r5, #16]
 800a64e:	b920      	cbnz	r0, 800a65a <_svfiprintf_r+0x2e>
 800a650:	230c      	movs	r3, #12
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	e0d1      	b.n	800a7fe <_svfiprintf_r+0x1d2>
 800a65a:	2340      	movs	r3, #64	; 0x40
 800a65c:	616b      	str	r3, [r5, #20]
 800a65e:	2300      	movs	r3, #0
 800a660:	9309      	str	r3, [sp, #36]	; 0x24
 800a662:	2320      	movs	r3, #32
 800a664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a668:	2330      	movs	r3, #48	; 0x30
 800a66a:	f04f 0901 	mov.w	r9, #1
 800a66e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a672:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a818 <_svfiprintf_r+0x1ec>
 800a676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a67a:	4623      	mov	r3, r4
 800a67c:	469a      	mov	sl, r3
 800a67e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a682:	b10a      	cbz	r2, 800a688 <_svfiprintf_r+0x5c>
 800a684:	2a25      	cmp	r2, #37	; 0x25
 800a686:	d1f9      	bne.n	800a67c <_svfiprintf_r+0x50>
 800a688:	ebba 0b04 	subs.w	fp, sl, r4
 800a68c:	d00b      	beq.n	800a6a6 <_svfiprintf_r+0x7a>
 800a68e:	465b      	mov	r3, fp
 800a690:	4622      	mov	r2, r4
 800a692:	4629      	mov	r1, r5
 800a694:	4638      	mov	r0, r7
 800a696:	f7ff ff6d 	bl	800a574 <__ssputs_r>
 800a69a:	3001      	adds	r0, #1
 800a69c:	f000 80aa 	beq.w	800a7f4 <_svfiprintf_r+0x1c8>
 800a6a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a2:	445a      	add	r2, fp
 800a6a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 80a2 	beq.w	800a7f4 <_svfiprintf_r+0x1c8>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ba:	f10a 0a01 	add.w	sl, sl, #1
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	9307      	str	r3, [sp, #28]
 800a6c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c6:	931a      	str	r3, [sp, #104]	; 0x68
 800a6c8:	4654      	mov	r4, sl
 800a6ca:	2205      	movs	r2, #5
 800a6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d0:	4851      	ldr	r0, [pc, #324]	; (800a818 <_svfiprintf_r+0x1ec>)
 800a6d2:	f7ff facf 	bl	8009c74 <memchr>
 800a6d6:	9a04      	ldr	r2, [sp, #16]
 800a6d8:	b9d8      	cbnz	r0, 800a712 <_svfiprintf_r+0xe6>
 800a6da:	06d0      	lsls	r0, r2, #27
 800a6dc:	bf44      	itt	mi
 800a6de:	2320      	movmi	r3, #32
 800a6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e4:	0711      	lsls	r1, r2, #28
 800a6e6:	bf44      	itt	mi
 800a6e8:	232b      	movmi	r3, #43	; 0x2b
 800a6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f4:	d015      	beq.n	800a722 <_svfiprintf_r+0xf6>
 800a6f6:	4654      	mov	r4, sl
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	f04f 0c0a 	mov.w	ip, #10
 800a6fe:	9a07      	ldr	r2, [sp, #28]
 800a700:	4621      	mov	r1, r4
 800a702:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a706:	3b30      	subs	r3, #48	; 0x30
 800a708:	2b09      	cmp	r3, #9
 800a70a:	d94e      	bls.n	800a7aa <_svfiprintf_r+0x17e>
 800a70c:	b1b0      	cbz	r0, 800a73c <_svfiprintf_r+0x110>
 800a70e:	9207      	str	r2, [sp, #28]
 800a710:	e014      	b.n	800a73c <_svfiprintf_r+0x110>
 800a712:	eba0 0308 	sub.w	r3, r0, r8
 800a716:	fa09 f303 	lsl.w	r3, r9, r3
 800a71a:	4313      	orrs	r3, r2
 800a71c:	46a2      	mov	sl, r4
 800a71e:	9304      	str	r3, [sp, #16]
 800a720:	e7d2      	b.n	800a6c8 <_svfiprintf_r+0x9c>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	1d19      	adds	r1, r3, #4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	9103      	str	r1, [sp, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bfbb      	ittet	lt
 800a72e:	425b      	neglt	r3, r3
 800a730:	f042 0202 	orrlt.w	r2, r2, #2
 800a734:	9307      	strge	r3, [sp, #28]
 800a736:	9307      	strlt	r3, [sp, #28]
 800a738:	bfb8      	it	lt
 800a73a:	9204      	strlt	r2, [sp, #16]
 800a73c:	7823      	ldrb	r3, [r4, #0]
 800a73e:	2b2e      	cmp	r3, #46	; 0x2e
 800a740:	d10c      	bne.n	800a75c <_svfiprintf_r+0x130>
 800a742:	7863      	ldrb	r3, [r4, #1]
 800a744:	2b2a      	cmp	r3, #42	; 0x2a
 800a746:	d135      	bne.n	800a7b4 <_svfiprintf_r+0x188>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	3402      	adds	r4, #2
 800a74c:	1d1a      	adds	r2, r3, #4
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	9203      	str	r2, [sp, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	bfb8      	it	lt
 800a756:	f04f 33ff 	movlt.w	r3, #4294967295
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a81c <_svfiprintf_r+0x1f0>
 800a760:	2203      	movs	r2, #3
 800a762:	4650      	mov	r0, sl
 800a764:	7821      	ldrb	r1, [r4, #0]
 800a766:	f7ff fa85 	bl	8009c74 <memchr>
 800a76a:	b140      	cbz	r0, 800a77e <_svfiprintf_r+0x152>
 800a76c:	2340      	movs	r3, #64	; 0x40
 800a76e:	eba0 000a 	sub.w	r0, r0, sl
 800a772:	fa03 f000 	lsl.w	r0, r3, r0
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	3401      	adds	r4, #1
 800a77a:	4303      	orrs	r3, r0
 800a77c:	9304      	str	r3, [sp, #16]
 800a77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a782:	2206      	movs	r2, #6
 800a784:	4826      	ldr	r0, [pc, #152]	; (800a820 <_svfiprintf_r+0x1f4>)
 800a786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a78a:	f7ff fa73 	bl	8009c74 <memchr>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d038      	beq.n	800a804 <_svfiprintf_r+0x1d8>
 800a792:	4b24      	ldr	r3, [pc, #144]	; (800a824 <_svfiprintf_r+0x1f8>)
 800a794:	bb1b      	cbnz	r3, 800a7de <_svfiprintf_r+0x1b2>
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	3307      	adds	r3, #7
 800a79a:	f023 0307 	bic.w	r3, r3, #7
 800a79e:	3308      	adds	r3, #8
 800a7a0:	9303      	str	r3, [sp, #12]
 800a7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a4:	4433      	add	r3, r6
 800a7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a8:	e767      	b.n	800a67a <_svfiprintf_r+0x4e>
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7b2:	e7a5      	b.n	800a700 <_svfiprintf_r+0xd4>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f04f 0c0a 	mov.w	ip, #10
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	3401      	adds	r4, #1
 800a7be:	9305      	str	r3, [sp, #20]
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c6:	3a30      	subs	r2, #48	; 0x30
 800a7c8:	2a09      	cmp	r2, #9
 800a7ca:	d903      	bls.n	800a7d4 <_svfiprintf_r+0x1a8>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d0c5      	beq.n	800a75c <_svfiprintf_r+0x130>
 800a7d0:	9105      	str	r1, [sp, #20]
 800a7d2:	e7c3      	b.n	800a75c <_svfiprintf_r+0x130>
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7dc:	e7f0      	b.n	800a7c0 <_svfiprintf_r+0x194>
 800a7de:	ab03      	add	r3, sp, #12
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	4b10      	ldr	r3, [pc, #64]	; (800a828 <_svfiprintf_r+0x1fc>)
 800a7e8:	a904      	add	r1, sp, #16
 800a7ea:	f7fd ff3d 	bl	8008668 <_printf_float>
 800a7ee:	1c42      	adds	r2, r0, #1
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	d1d6      	bne.n	800a7a2 <_svfiprintf_r+0x176>
 800a7f4:	89ab      	ldrh	r3, [r5, #12]
 800a7f6:	065b      	lsls	r3, r3, #25
 800a7f8:	f53f af2c 	bmi.w	800a654 <_svfiprintf_r+0x28>
 800a7fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7fe:	b01d      	add	sp, #116	; 0x74
 800a800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a804:	ab03      	add	r3, sp, #12
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	462a      	mov	r2, r5
 800a80a:	4638      	mov	r0, r7
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <_svfiprintf_r+0x1fc>)
 800a80e:	a904      	add	r1, sp, #16
 800a810:	f7fe f9c6 	bl	8008ba0 <_printf_i>
 800a814:	e7eb      	b.n	800a7ee <_svfiprintf_r+0x1c2>
 800a816:	bf00      	nop
 800a818:	0800bc14 	.word	0x0800bc14
 800a81c:	0800bc1a 	.word	0x0800bc1a
 800a820:	0800bc1e 	.word	0x0800bc1e
 800a824:	08008669 	.word	0x08008669
 800a828:	0800a575 	.word	0x0800a575

0800a82c <_sbrk_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	2300      	movs	r3, #0
 800a830:	4d05      	ldr	r5, [pc, #20]	; (800a848 <_sbrk_r+0x1c>)
 800a832:	4604      	mov	r4, r0
 800a834:	4608      	mov	r0, r1
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	f7f8 fa76 	bl	8002d28 <_sbrk>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_sbrk_r+0x1a>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_sbrk_r+0x1a>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	20000600 	.word	0x20000600

0800a84c <__assert_func>:
 800a84c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a84e:	4614      	mov	r4, r2
 800a850:	461a      	mov	r2, r3
 800a852:	4b09      	ldr	r3, [pc, #36]	; (800a878 <__assert_func+0x2c>)
 800a854:	4605      	mov	r5, r0
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68d8      	ldr	r0, [r3, #12]
 800a85a:	b14c      	cbz	r4, 800a870 <__assert_func+0x24>
 800a85c:	4b07      	ldr	r3, [pc, #28]	; (800a87c <__assert_func+0x30>)
 800a85e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a862:	9100      	str	r1, [sp, #0]
 800a864:	462b      	mov	r3, r5
 800a866:	4906      	ldr	r1, [pc, #24]	; (800a880 <__assert_func+0x34>)
 800a868:	f000 f80e 	bl	800a888 <fiprintf>
 800a86c:	f000 faaa 	bl	800adc4 <abort>
 800a870:	4b04      	ldr	r3, [pc, #16]	; (800a884 <__assert_func+0x38>)
 800a872:	461c      	mov	r4, r3
 800a874:	e7f3      	b.n	800a85e <__assert_func+0x12>
 800a876:	bf00      	nop
 800a878:	20000014 	.word	0x20000014
 800a87c:	0800bc25 	.word	0x0800bc25
 800a880:	0800bc32 	.word	0x0800bc32
 800a884:	0800bc60 	.word	0x0800bc60

0800a888 <fiprintf>:
 800a888:	b40e      	push	{r1, r2, r3}
 800a88a:	b503      	push	{r0, r1, lr}
 800a88c:	4601      	mov	r1, r0
 800a88e:	ab03      	add	r3, sp, #12
 800a890:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <fiprintf+0x20>)
 800a892:	f853 2b04 	ldr.w	r2, [r3], #4
 800a896:	6800      	ldr	r0, [r0, #0]
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	f000 f895 	bl	800a9c8 <_vfiprintf_r>
 800a89e:	b002      	add	sp, #8
 800a8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a4:	b003      	add	sp, #12
 800a8a6:	4770      	bx	lr
 800a8a8:	20000014 	.word	0x20000014

0800a8ac <__ascii_mbtowc>:
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	b901      	cbnz	r1, 800a8b2 <__ascii_mbtowc+0x6>
 800a8b0:	a901      	add	r1, sp, #4
 800a8b2:	b142      	cbz	r2, 800a8c6 <__ascii_mbtowc+0x1a>
 800a8b4:	b14b      	cbz	r3, 800a8ca <__ascii_mbtowc+0x1e>
 800a8b6:	7813      	ldrb	r3, [r2, #0]
 800a8b8:	600b      	str	r3, [r1, #0]
 800a8ba:	7812      	ldrb	r2, [r2, #0]
 800a8bc:	1e10      	subs	r0, r2, #0
 800a8be:	bf18      	it	ne
 800a8c0:	2001      	movne	r0, #1
 800a8c2:	b002      	add	sp, #8
 800a8c4:	4770      	bx	lr
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	e7fb      	b.n	800a8c2 <__ascii_mbtowc+0x16>
 800a8ca:	f06f 0001 	mvn.w	r0, #1
 800a8ce:	e7f8      	b.n	800a8c2 <__ascii_mbtowc+0x16>

0800a8d0 <memmove>:
 800a8d0:	4288      	cmp	r0, r1
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	eb01 0402 	add.w	r4, r1, r2
 800a8d8:	d902      	bls.n	800a8e0 <memmove+0x10>
 800a8da:	4284      	cmp	r4, r0
 800a8dc:	4623      	mov	r3, r4
 800a8de:	d807      	bhi.n	800a8f0 <memmove+0x20>
 800a8e0:	1e43      	subs	r3, r0, #1
 800a8e2:	42a1      	cmp	r1, r4
 800a8e4:	d008      	beq.n	800a8f8 <memmove+0x28>
 800a8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ee:	e7f8      	b.n	800a8e2 <memmove+0x12>
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	4402      	add	r2, r0
 800a8f4:	428a      	cmp	r2, r1
 800a8f6:	d100      	bne.n	800a8fa <memmove+0x2a>
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a902:	e7f7      	b.n	800a8f4 <memmove+0x24>

0800a904 <__malloc_lock>:
 800a904:	4801      	ldr	r0, [pc, #4]	; (800a90c <__malloc_lock+0x8>)
 800a906:	f000 bc19 	b.w	800b13c <__retarget_lock_acquire_recursive>
 800a90a:	bf00      	nop
 800a90c:	20000604 	.word	0x20000604

0800a910 <__malloc_unlock>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__malloc_unlock+0x8>)
 800a912:	f000 bc14 	b.w	800b13e <__retarget_lock_release_recursive>
 800a916:	bf00      	nop
 800a918:	20000604 	.word	0x20000604

0800a91c <_realloc_r>:
 800a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a920:	4680      	mov	r8, r0
 800a922:	4614      	mov	r4, r2
 800a924:	460e      	mov	r6, r1
 800a926:	b921      	cbnz	r1, 800a932 <_realloc_r+0x16>
 800a928:	4611      	mov	r1, r2
 800a92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a92e:	f7ff bdad 	b.w	800a48c <_malloc_r>
 800a932:	b92a      	cbnz	r2, 800a940 <_realloc_r+0x24>
 800a934:	f7ff fd42 	bl	800a3bc <_free_r>
 800a938:	4625      	mov	r5, r4
 800a93a:	4628      	mov	r0, r5
 800a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a940:	f000 fc64 	bl	800b20c <_malloc_usable_size_r>
 800a944:	4284      	cmp	r4, r0
 800a946:	4607      	mov	r7, r0
 800a948:	d802      	bhi.n	800a950 <_realloc_r+0x34>
 800a94a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a94e:	d812      	bhi.n	800a976 <_realloc_r+0x5a>
 800a950:	4621      	mov	r1, r4
 800a952:	4640      	mov	r0, r8
 800a954:	f7ff fd9a 	bl	800a48c <_malloc_r>
 800a958:	4605      	mov	r5, r0
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0ed      	beq.n	800a93a <_realloc_r+0x1e>
 800a95e:	42bc      	cmp	r4, r7
 800a960:	4622      	mov	r2, r4
 800a962:	4631      	mov	r1, r6
 800a964:	bf28      	it	cs
 800a966:	463a      	movcs	r2, r7
 800a968:	f7fd fdca 	bl	8008500 <memcpy>
 800a96c:	4631      	mov	r1, r6
 800a96e:	4640      	mov	r0, r8
 800a970:	f7ff fd24 	bl	800a3bc <_free_r>
 800a974:	e7e1      	b.n	800a93a <_realloc_r+0x1e>
 800a976:	4635      	mov	r5, r6
 800a978:	e7df      	b.n	800a93a <_realloc_r+0x1e>

0800a97a <__sfputc_r>:
 800a97a:	6893      	ldr	r3, [r2, #8]
 800a97c:	b410      	push	{r4}
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	6093      	str	r3, [r2, #8]
 800a984:	da07      	bge.n	800a996 <__sfputc_r+0x1c>
 800a986:	6994      	ldr	r4, [r2, #24]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	db01      	blt.n	800a990 <__sfputc_r+0x16>
 800a98c:	290a      	cmp	r1, #10
 800a98e:	d102      	bne.n	800a996 <__sfputc_r+0x1c>
 800a990:	bc10      	pop	{r4}
 800a992:	f000 b949 	b.w	800ac28 <__swbuf_r>
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	1c58      	adds	r0, r3, #1
 800a99a:	6010      	str	r0, [r2, #0]
 800a99c:	7019      	strb	r1, [r3, #0]
 800a99e:	4608      	mov	r0, r1
 800a9a0:	bc10      	pop	{r4}
 800a9a2:	4770      	bx	lr

0800a9a4 <__sfputs_r>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	4614      	mov	r4, r2
 800a9ac:	18d5      	adds	r5, r2, r3
 800a9ae:	42ac      	cmp	r4, r5
 800a9b0:	d101      	bne.n	800a9b6 <__sfputs_r+0x12>
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	e007      	b.n	800a9c6 <__sfputs_r+0x22>
 800a9b6:	463a      	mov	r2, r7
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9be:	f7ff ffdc 	bl	800a97a <__sfputc_r>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d1f3      	bne.n	800a9ae <__sfputs_r+0xa>
 800a9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9c8 <_vfiprintf_r>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	460d      	mov	r5, r1
 800a9ce:	4614      	mov	r4, r2
 800a9d0:	4698      	mov	r8, r3
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	b09d      	sub	sp, #116	; 0x74
 800a9d6:	b118      	cbz	r0, 800a9e0 <_vfiprintf_r+0x18>
 800a9d8:	6983      	ldr	r3, [r0, #24]
 800a9da:	b90b      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x18>
 800a9dc:	f000 fb10 	bl	800b000 <__sinit>
 800a9e0:	4b89      	ldr	r3, [pc, #548]	; (800ac08 <_vfiprintf_r+0x240>)
 800a9e2:	429d      	cmp	r5, r3
 800a9e4:	d11b      	bne.n	800aa1e <_vfiprintf_r+0x56>
 800a9e6:	6875      	ldr	r5, [r6, #4]
 800a9e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	d405      	bmi.n	800a9fa <_vfiprintf_r+0x32>
 800a9ee:	89ab      	ldrh	r3, [r5, #12]
 800a9f0:	059a      	lsls	r2, r3, #22
 800a9f2:	d402      	bmi.n	800a9fa <_vfiprintf_r+0x32>
 800a9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9f6:	f000 fba1 	bl	800b13c <__retarget_lock_acquire_recursive>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	071b      	lsls	r3, r3, #28
 800a9fe:	d501      	bpl.n	800aa04 <_vfiprintf_r+0x3c>
 800aa00:	692b      	ldr	r3, [r5, #16]
 800aa02:	b9eb      	cbnz	r3, 800aa40 <_vfiprintf_r+0x78>
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 f96e 	bl	800ace8 <__swsetup_r>
 800aa0c:	b1c0      	cbz	r0, 800aa40 <_vfiprintf_r+0x78>
 800aa0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa10:	07dc      	lsls	r4, r3, #31
 800aa12:	d50e      	bpl.n	800aa32 <_vfiprintf_r+0x6a>
 800aa14:	f04f 30ff 	mov.w	r0, #4294967295
 800aa18:	b01d      	add	sp, #116	; 0x74
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1e:	4b7b      	ldr	r3, [pc, #492]	; (800ac0c <_vfiprintf_r+0x244>)
 800aa20:	429d      	cmp	r5, r3
 800aa22:	d101      	bne.n	800aa28 <_vfiprintf_r+0x60>
 800aa24:	68b5      	ldr	r5, [r6, #8]
 800aa26:	e7df      	b.n	800a9e8 <_vfiprintf_r+0x20>
 800aa28:	4b79      	ldr	r3, [pc, #484]	; (800ac10 <_vfiprintf_r+0x248>)
 800aa2a:	429d      	cmp	r5, r3
 800aa2c:	bf08      	it	eq
 800aa2e:	68f5      	ldreq	r5, [r6, #12]
 800aa30:	e7da      	b.n	800a9e8 <_vfiprintf_r+0x20>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	0598      	lsls	r0, r3, #22
 800aa36:	d4ed      	bmi.n	800aa14 <_vfiprintf_r+0x4c>
 800aa38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa3a:	f000 fb80 	bl	800b13e <__retarget_lock_release_recursive>
 800aa3e:	e7e9      	b.n	800aa14 <_vfiprintf_r+0x4c>
 800aa40:	2300      	movs	r3, #0
 800aa42:	9309      	str	r3, [sp, #36]	; 0x24
 800aa44:	2320      	movs	r3, #32
 800aa46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa4a:	2330      	movs	r3, #48	; 0x30
 800aa4c:	f04f 0901 	mov.w	r9, #1
 800aa50:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ac14 <_vfiprintf_r+0x24c>
 800aa58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa5c:	4623      	mov	r3, r4
 800aa5e:	469a      	mov	sl, r3
 800aa60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa64:	b10a      	cbz	r2, 800aa6a <_vfiprintf_r+0xa2>
 800aa66:	2a25      	cmp	r2, #37	; 0x25
 800aa68:	d1f9      	bne.n	800aa5e <_vfiprintf_r+0x96>
 800aa6a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa6e:	d00b      	beq.n	800aa88 <_vfiprintf_r+0xc0>
 800aa70:	465b      	mov	r3, fp
 800aa72:	4622      	mov	r2, r4
 800aa74:	4629      	mov	r1, r5
 800aa76:	4630      	mov	r0, r6
 800aa78:	f7ff ff94 	bl	800a9a4 <__sfputs_r>
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	f000 80aa 	beq.w	800abd6 <_vfiprintf_r+0x20e>
 800aa82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa84:	445a      	add	r2, fp
 800aa86:	9209      	str	r2, [sp, #36]	; 0x24
 800aa88:	f89a 3000 	ldrb.w	r3, [sl]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 80a2 	beq.w	800abd6 <_vfiprintf_r+0x20e>
 800aa92:	2300      	movs	r3, #0
 800aa94:	f04f 32ff 	mov.w	r2, #4294967295
 800aa98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa9c:	f10a 0a01 	add.w	sl, sl, #1
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	9307      	str	r3, [sp, #28]
 800aaa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa8:	931a      	str	r3, [sp, #104]	; 0x68
 800aaaa:	4654      	mov	r4, sl
 800aaac:	2205      	movs	r2, #5
 800aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab2:	4858      	ldr	r0, [pc, #352]	; (800ac14 <_vfiprintf_r+0x24c>)
 800aab4:	f7ff f8de 	bl	8009c74 <memchr>
 800aab8:	9a04      	ldr	r2, [sp, #16]
 800aaba:	b9d8      	cbnz	r0, 800aaf4 <_vfiprintf_r+0x12c>
 800aabc:	06d1      	lsls	r1, r2, #27
 800aabe:	bf44      	itt	mi
 800aac0:	2320      	movmi	r3, #32
 800aac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac6:	0713      	lsls	r3, r2, #28
 800aac8:	bf44      	itt	mi
 800aaca:	232b      	movmi	r3, #43	; 0x2b
 800aacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad0:	f89a 3000 	ldrb.w	r3, [sl]
 800aad4:	2b2a      	cmp	r3, #42	; 0x2a
 800aad6:	d015      	beq.n	800ab04 <_vfiprintf_r+0x13c>
 800aad8:	4654      	mov	r4, sl
 800aada:	2000      	movs	r0, #0
 800aadc:	f04f 0c0a 	mov.w	ip, #10
 800aae0:	9a07      	ldr	r2, [sp, #28]
 800aae2:	4621      	mov	r1, r4
 800aae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae8:	3b30      	subs	r3, #48	; 0x30
 800aaea:	2b09      	cmp	r3, #9
 800aaec:	d94e      	bls.n	800ab8c <_vfiprintf_r+0x1c4>
 800aaee:	b1b0      	cbz	r0, 800ab1e <_vfiprintf_r+0x156>
 800aaf0:	9207      	str	r2, [sp, #28]
 800aaf2:	e014      	b.n	800ab1e <_vfiprintf_r+0x156>
 800aaf4:	eba0 0308 	sub.w	r3, r0, r8
 800aaf8:	fa09 f303 	lsl.w	r3, r9, r3
 800aafc:	4313      	orrs	r3, r2
 800aafe:	46a2      	mov	sl, r4
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	e7d2      	b.n	800aaaa <_vfiprintf_r+0xe2>
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	1d19      	adds	r1, r3, #4
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	9103      	str	r1, [sp, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	bfbb      	ittet	lt
 800ab10:	425b      	neglt	r3, r3
 800ab12:	f042 0202 	orrlt.w	r2, r2, #2
 800ab16:	9307      	strge	r3, [sp, #28]
 800ab18:	9307      	strlt	r3, [sp, #28]
 800ab1a:	bfb8      	it	lt
 800ab1c:	9204      	strlt	r2, [sp, #16]
 800ab1e:	7823      	ldrb	r3, [r4, #0]
 800ab20:	2b2e      	cmp	r3, #46	; 0x2e
 800ab22:	d10c      	bne.n	800ab3e <_vfiprintf_r+0x176>
 800ab24:	7863      	ldrb	r3, [r4, #1]
 800ab26:	2b2a      	cmp	r3, #42	; 0x2a
 800ab28:	d135      	bne.n	800ab96 <_vfiprintf_r+0x1ce>
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	3402      	adds	r4, #2
 800ab2e:	1d1a      	adds	r2, r3, #4
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	9203      	str	r2, [sp, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bfb8      	it	lt
 800ab38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab3c:	9305      	str	r3, [sp, #20]
 800ab3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ac18 <_vfiprintf_r+0x250>
 800ab42:	2203      	movs	r2, #3
 800ab44:	4650      	mov	r0, sl
 800ab46:	7821      	ldrb	r1, [r4, #0]
 800ab48:	f7ff f894 	bl	8009c74 <memchr>
 800ab4c:	b140      	cbz	r0, 800ab60 <_vfiprintf_r+0x198>
 800ab4e:	2340      	movs	r3, #64	; 0x40
 800ab50:	eba0 000a 	sub.w	r0, r0, sl
 800ab54:	fa03 f000 	lsl.w	r0, r3, r0
 800ab58:	9b04      	ldr	r3, [sp, #16]
 800ab5a:	3401      	adds	r4, #1
 800ab5c:	4303      	orrs	r3, r0
 800ab5e:	9304      	str	r3, [sp, #16]
 800ab60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab64:	2206      	movs	r2, #6
 800ab66:	482d      	ldr	r0, [pc, #180]	; (800ac1c <_vfiprintf_r+0x254>)
 800ab68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab6c:	f7ff f882 	bl	8009c74 <memchr>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d03f      	beq.n	800abf4 <_vfiprintf_r+0x22c>
 800ab74:	4b2a      	ldr	r3, [pc, #168]	; (800ac20 <_vfiprintf_r+0x258>)
 800ab76:	bb1b      	cbnz	r3, 800abc0 <_vfiprintf_r+0x1f8>
 800ab78:	9b03      	ldr	r3, [sp, #12]
 800ab7a:	3307      	adds	r3, #7
 800ab7c:	f023 0307 	bic.w	r3, r3, #7
 800ab80:	3308      	adds	r3, #8
 800ab82:	9303      	str	r3, [sp, #12]
 800ab84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab86:	443b      	add	r3, r7
 800ab88:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8a:	e767      	b.n	800aa5c <_vfiprintf_r+0x94>
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	2001      	movs	r0, #1
 800ab90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab94:	e7a5      	b.n	800aae2 <_vfiprintf_r+0x11a>
 800ab96:	2300      	movs	r3, #0
 800ab98:	f04f 0c0a 	mov.w	ip, #10
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	3401      	adds	r4, #1
 800aba0:	9305      	str	r3, [sp, #20]
 800aba2:	4620      	mov	r0, r4
 800aba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba8:	3a30      	subs	r2, #48	; 0x30
 800abaa:	2a09      	cmp	r2, #9
 800abac:	d903      	bls.n	800abb6 <_vfiprintf_r+0x1ee>
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0c5      	beq.n	800ab3e <_vfiprintf_r+0x176>
 800abb2:	9105      	str	r1, [sp, #20]
 800abb4:	e7c3      	b.n	800ab3e <_vfiprintf_r+0x176>
 800abb6:	4604      	mov	r4, r0
 800abb8:	2301      	movs	r3, #1
 800abba:	fb0c 2101 	mla	r1, ip, r1, r2
 800abbe:	e7f0      	b.n	800aba2 <_vfiprintf_r+0x1da>
 800abc0:	ab03      	add	r3, sp, #12
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	462a      	mov	r2, r5
 800abc6:	4630      	mov	r0, r6
 800abc8:	4b16      	ldr	r3, [pc, #88]	; (800ac24 <_vfiprintf_r+0x25c>)
 800abca:	a904      	add	r1, sp, #16
 800abcc:	f7fd fd4c 	bl	8008668 <_printf_float>
 800abd0:	4607      	mov	r7, r0
 800abd2:	1c78      	adds	r0, r7, #1
 800abd4:	d1d6      	bne.n	800ab84 <_vfiprintf_r+0x1bc>
 800abd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd8:	07d9      	lsls	r1, r3, #31
 800abda:	d405      	bmi.n	800abe8 <_vfiprintf_r+0x220>
 800abdc:	89ab      	ldrh	r3, [r5, #12]
 800abde:	059a      	lsls	r2, r3, #22
 800abe0:	d402      	bmi.n	800abe8 <_vfiprintf_r+0x220>
 800abe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abe4:	f000 faab 	bl	800b13e <__retarget_lock_release_recursive>
 800abe8:	89ab      	ldrh	r3, [r5, #12]
 800abea:	065b      	lsls	r3, r3, #25
 800abec:	f53f af12 	bmi.w	800aa14 <_vfiprintf_r+0x4c>
 800abf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abf2:	e711      	b.n	800aa18 <_vfiprintf_r+0x50>
 800abf4:	ab03      	add	r3, sp, #12
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	462a      	mov	r2, r5
 800abfa:	4630      	mov	r0, r6
 800abfc:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <_vfiprintf_r+0x25c>)
 800abfe:	a904      	add	r1, sp, #16
 800ac00:	f7fd ffce 	bl	8008ba0 <_printf_i>
 800ac04:	e7e4      	b.n	800abd0 <_vfiprintf_r+0x208>
 800ac06:	bf00      	nop
 800ac08:	0800bc8c 	.word	0x0800bc8c
 800ac0c:	0800bcac 	.word	0x0800bcac
 800ac10:	0800bc6c 	.word	0x0800bc6c
 800ac14:	0800bc14 	.word	0x0800bc14
 800ac18:	0800bc1a 	.word	0x0800bc1a
 800ac1c:	0800bc1e 	.word	0x0800bc1e
 800ac20:	08008669 	.word	0x08008669
 800ac24:	0800a9a5 	.word	0x0800a9a5

0800ac28 <__swbuf_r>:
 800ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2a:	460e      	mov	r6, r1
 800ac2c:	4614      	mov	r4, r2
 800ac2e:	4605      	mov	r5, r0
 800ac30:	b118      	cbz	r0, 800ac3a <__swbuf_r+0x12>
 800ac32:	6983      	ldr	r3, [r0, #24]
 800ac34:	b90b      	cbnz	r3, 800ac3a <__swbuf_r+0x12>
 800ac36:	f000 f9e3 	bl	800b000 <__sinit>
 800ac3a:	4b21      	ldr	r3, [pc, #132]	; (800acc0 <__swbuf_r+0x98>)
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	d12b      	bne.n	800ac98 <__swbuf_r+0x70>
 800ac40:	686c      	ldr	r4, [r5, #4]
 800ac42:	69a3      	ldr	r3, [r4, #24]
 800ac44:	60a3      	str	r3, [r4, #8]
 800ac46:	89a3      	ldrh	r3, [r4, #12]
 800ac48:	071a      	lsls	r2, r3, #28
 800ac4a:	d52f      	bpl.n	800acac <__swbuf_r+0x84>
 800ac4c:	6923      	ldr	r3, [r4, #16]
 800ac4e:	b36b      	cbz	r3, 800acac <__swbuf_r+0x84>
 800ac50:	6923      	ldr	r3, [r4, #16]
 800ac52:	6820      	ldr	r0, [r4, #0]
 800ac54:	b2f6      	uxtb	r6, r6
 800ac56:	1ac0      	subs	r0, r0, r3
 800ac58:	6963      	ldr	r3, [r4, #20]
 800ac5a:	4637      	mov	r7, r6
 800ac5c:	4283      	cmp	r3, r0
 800ac5e:	dc04      	bgt.n	800ac6a <__swbuf_r+0x42>
 800ac60:	4621      	mov	r1, r4
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 f938 	bl	800aed8 <_fflush_r>
 800ac68:	bb30      	cbnz	r0, 800acb8 <__swbuf_r+0x90>
 800ac6a:	68a3      	ldr	r3, [r4, #8]
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	60a3      	str	r3, [r4, #8]
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	6022      	str	r2, [r4, #0]
 800ac78:	701e      	strb	r6, [r3, #0]
 800ac7a:	6963      	ldr	r3, [r4, #20]
 800ac7c:	4283      	cmp	r3, r0
 800ac7e:	d004      	beq.n	800ac8a <__swbuf_r+0x62>
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	07db      	lsls	r3, r3, #31
 800ac84:	d506      	bpl.n	800ac94 <__swbuf_r+0x6c>
 800ac86:	2e0a      	cmp	r6, #10
 800ac88:	d104      	bne.n	800ac94 <__swbuf_r+0x6c>
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 f923 	bl	800aed8 <_fflush_r>
 800ac92:	b988      	cbnz	r0, 800acb8 <__swbuf_r+0x90>
 800ac94:	4638      	mov	r0, r7
 800ac96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac98:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <__swbuf_r+0x9c>)
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	d101      	bne.n	800aca2 <__swbuf_r+0x7a>
 800ac9e:	68ac      	ldr	r4, [r5, #8]
 800aca0:	e7cf      	b.n	800ac42 <__swbuf_r+0x1a>
 800aca2:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <__swbuf_r+0xa0>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	bf08      	it	eq
 800aca8:	68ec      	ldreq	r4, [r5, #12]
 800acaa:	e7ca      	b.n	800ac42 <__swbuf_r+0x1a>
 800acac:	4621      	mov	r1, r4
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 f81a 	bl	800ace8 <__swsetup_r>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d0cb      	beq.n	800ac50 <__swbuf_r+0x28>
 800acb8:	f04f 37ff 	mov.w	r7, #4294967295
 800acbc:	e7ea      	b.n	800ac94 <__swbuf_r+0x6c>
 800acbe:	bf00      	nop
 800acc0:	0800bc8c 	.word	0x0800bc8c
 800acc4:	0800bcac 	.word	0x0800bcac
 800acc8:	0800bc6c 	.word	0x0800bc6c

0800accc <__ascii_wctomb>:
 800accc:	4603      	mov	r3, r0
 800acce:	4608      	mov	r0, r1
 800acd0:	b141      	cbz	r1, 800ace4 <__ascii_wctomb+0x18>
 800acd2:	2aff      	cmp	r2, #255	; 0xff
 800acd4:	d904      	bls.n	800ace0 <__ascii_wctomb+0x14>
 800acd6:	228a      	movs	r2, #138	; 0x8a
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	4770      	bx	lr
 800ace0:	2001      	movs	r0, #1
 800ace2:	700a      	strb	r2, [r1, #0]
 800ace4:	4770      	bx	lr
	...

0800ace8 <__swsetup_r>:
 800ace8:	4b32      	ldr	r3, [pc, #200]	; (800adb4 <__swsetup_r+0xcc>)
 800acea:	b570      	push	{r4, r5, r6, lr}
 800acec:	681d      	ldr	r5, [r3, #0]
 800acee:	4606      	mov	r6, r0
 800acf0:	460c      	mov	r4, r1
 800acf2:	b125      	cbz	r5, 800acfe <__swsetup_r+0x16>
 800acf4:	69ab      	ldr	r3, [r5, #24]
 800acf6:	b913      	cbnz	r3, 800acfe <__swsetup_r+0x16>
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 f981 	bl	800b000 <__sinit>
 800acfe:	4b2e      	ldr	r3, [pc, #184]	; (800adb8 <__swsetup_r+0xd0>)
 800ad00:	429c      	cmp	r4, r3
 800ad02:	d10f      	bne.n	800ad24 <__swsetup_r+0x3c>
 800ad04:	686c      	ldr	r4, [r5, #4]
 800ad06:	89a3      	ldrh	r3, [r4, #12]
 800ad08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad0c:	0719      	lsls	r1, r3, #28
 800ad0e:	d42c      	bmi.n	800ad6a <__swsetup_r+0x82>
 800ad10:	06dd      	lsls	r5, r3, #27
 800ad12:	d411      	bmi.n	800ad38 <__swsetup_r+0x50>
 800ad14:	2309      	movs	r3, #9
 800ad16:	6033      	str	r3, [r6, #0]
 800ad18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	81a3      	strh	r3, [r4, #12]
 800ad22:	e03e      	b.n	800ada2 <__swsetup_r+0xba>
 800ad24:	4b25      	ldr	r3, [pc, #148]	; (800adbc <__swsetup_r+0xd4>)
 800ad26:	429c      	cmp	r4, r3
 800ad28:	d101      	bne.n	800ad2e <__swsetup_r+0x46>
 800ad2a:	68ac      	ldr	r4, [r5, #8]
 800ad2c:	e7eb      	b.n	800ad06 <__swsetup_r+0x1e>
 800ad2e:	4b24      	ldr	r3, [pc, #144]	; (800adc0 <__swsetup_r+0xd8>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	bf08      	it	eq
 800ad34:	68ec      	ldreq	r4, [r5, #12]
 800ad36:	e7e6      	b.n	800ad06 <__swsetup_r+0x1e>
 800ad38:	0758      	lsls	r0, r3, #29
 800ad3a:	d512      	bpl.n	800ad62 <__swsetup_r+0x7a>
 800ad3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad3e:	b141      	cbz	r1, 800ad52 <__swsetup_r+0x6a>
 800ad40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad44:	4299      	cmp	r1, r3
 800ad46:	d002      	beq.n	800ad4e <__swsetup_r+0x66>
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7ff fb37 	bl	800a3bc <_free_r>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6363      	str	r3, [r4, #52]	; 0x34
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad58:	81a3      	strh	r3, [r4, #12]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	6063      	str	r3, [r4, #4]
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f043 0308 	orr.w	r3, r3, #8
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	b94b      	cbnz	r3, 800ad82 <__swsetup_r+0x9a>
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad78:	d003      	beq.n	800ad82 <__swsetup_r+0x9a>
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	f000 fa05 	bl	800b18c <__smakebuf_r>
 800ad82:	89a0      	ldrh	r0, [r4, #12]
 800ad84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad88:	f010 0301 	ands.w	r3, r0, #1
 800ad8c:	d00a      	beq.n	800ada4 <__swsetup_r+0xbc>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60a3      	str	r3, [r4, #8]
 800ad92:	6963      	ldr	r3, [r4, #20]
 800ad94:	425b      	negs	r3, r3
 800ad96:	61a3      	str	r3, [r4, #24]
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	b943      	cbnz	r3, 800adae <__swsetup_r+0xc6>
 800ad9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ada0:	d1ba      	bne.n	800ad18 <__swsetup_r+0x30>
 800ada2:	bd70      	pop	{r4, r5, r6, pc}
 800ada4:	0781      	lsls	r1, r0, #30
 800ada6:	bf58      	it	pl
 800ada8:	6963      	ldrpl	r3, [r4, #20]
 800adaa:	60a3      	str	r3, [r4, #8]
 800adac:	e7f4      	b.n	800ad98 <__swsetup_r+0xb0>
 800adae:	2000      	movs	r0, #0
 800adb0:	e7f7      	b.n	800ada2 <__swsetup_r+0xba>
 800adb2:	bf00      	nop
 800adb4:	20000014 	.word	0x20000014
 800adb8:	0800bc8c 	.word	0x0800bc8c
 800adbc:	0800bcac 	.word	0x0800bcac
 800adc0:	0800bc6c 	.word	0x0800bc6c

0800adc4 <abort>:
 800adc4:	2006      	movs	r0, #6
 800adc6:	b508      	push	{r3, lr}
 800adc8:	f000 fa50 	bl	800b26c <raise>
 800adcc:	2001      	movs	r0, #1
 800adce:	f7f7 ff38 	bl	8002c42 <_exit>
	...

0800add4 <__sflush_r>:
 800add4:	898a      	ldrh	r2, [r1, #12]
 800add6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add8:	4605      	mov	r5, r0
 800adda:	0710      	lsls	r0, r2, #28
 800addc:	460c      	mov	r4, r1
 800adde:	d457      	bmi.n	800ae90 <__sflush_r+0xbc>
 800ade0:	684b      	ldr	r3, [r1, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	dc04      	bgt.n	800adf0 <__sflush_r+0x1c>
 800ade6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dc01      	bgt.n	800adf0 <__sflush_r+0x1c>
 800adec:	2000      	movs	r0, #0
 800adee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adf2:	2e00      	cmp	r6, #0
 800adf4:	d0fa      	beq.n	800adec <__sflush_r+0x18>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adfc:	682f      	ldr	r7, [r5, #0]
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	d032      	beq.n	800ae68 <__sflush_r+0x94>
 800ae02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	075a      	lsls	r2, r3, #29
 800ae08:	d505      	bpl.n	800ae16 <__sflush_r+0x42>
 800ae0a:	6863      	ldr	r3, [r4, #4]
 800ae0c:	1ac0      	subs	r0, r0, r3
 800ae0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae10:	b10b      	cbz	r3, 800ae16 <__sflush_r+0x42>
 800ae12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae14:	1ac0      	subs	r0, r0, r3
 800ae16:	2300      	movs	r3, #0
 800ae18:	4602      	mov	r2, r0
 800ae1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	6a21      	ldr	r1, [r4, #32]
 800ae20:	47b0      	blx	r6
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	d106      	bne.n	800ae36 <__sflush_r+0x62>
 800ae28:	6829      	ldr	r1, [r5, #0]
 800ae2a:	291d      	cmp	r1, #29
 800ae2c:	d82c      	bhi.n	800ae88 <__sflush_r+0xb4>
 800ae2e:	4a29      	ldr	r2, [pc, #164]	; (800aed4 <__sflush_r+0x100>)
 800ae30:	40ca      	lsrs	r2, r1
 800ae32:	07d6      	lsls	r6, r2, #31
 800ae34:	d528      	bpl.n	800ae88 <__sflush_r+0xb4>
 800ae36:	2200      	movs	r2, #0
 800ae38:	6062      	str	r2, [r4, #4]
 800ae3a:	6922      	ldr	r2, [r4, #16]
 800ae3c:	04d9      	lsls	r1, r3, #19
 800ae3e:	6022      	str	r2, [r4, #0]
 800ae40:	d504      	bpl.n	800ae4c <__sflush_r+0x78>
 800ae42:	1c42      	adds	r2, r0, #1
 800ae44:	d101      	bne.n	800ae4a <__sflush_r+0x76>
 800ae46:	682b      	ldr	r3, [r5, #0]
 800ae48:	b903      	cbnz	r3, 800ae4c <__sflush_r+0x78>
 800ae4a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae4e:	602f      	str	r7, [r5, #0]
 800ae50:	2900      	cmp	r1, #0
 800ae52:	d0cb      	beq.n	800adec <__sflush_r+0x18>
 800ae54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae58:	4299      	cmp	r1, r3
 800ae5a:	d002      	beq.n	800ae62 <__sflush_r+0x8e>
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f7ff faad 	bl	800a3bc <_free_r>
 800ae62:	2000      	movs	r0, #0
 800ae64:	6360      	str	r0, [r4, #52]	; 0x34
 800ae66:	e7c2      	b.n	800adee <__sflush_r+0x1a>
 800ae68:	6a21      	ldr	r1, [r4, #32]
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b0      	blx	r6
 800ae70:	1c41      	adds	r1, r0, #1
 800ae72:	d1c7      	bne.n	800ae04 <__sflush_r+0x30>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0c4      	beq.n	800ae04 <__sflush_r+0x30>
 800ae7a:	2b1d      	cmp	r3, #29
 800ae7c:	d001      	beq.n	800ae82 <__sflush_r+0xae>
 800ae7e:	2b16      	cmp	r3, #22
 800ae80:	d101      	bne.n	800ae86 <__sflush_r+0xb2>
 800ae82:	602f      	str	r7, [r5, #0]
 800ae84:	e7b2      	b.n	800adec <__sflush_r+0x18>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	e7ae      	b.n	800adee <__sflush_r+0x1a>
 800ae90:	690f      	ldr	r7, [r1, #16]
 800ae92:	2f00      	cmp	r7, #0
 800ae94:	d0aa      	beq.n	800adec <__sflush_r+0x18>
 800ae96:	0793      	lsls	r3, r2, #30
 800ae98:	bf18      	it	ne
 800ae9a:	2300      	movne	r3, #0
 800ae9c:	680e      	ldr	r6, [r1, #0]
 800ae9e:	bf08      	it	eq
 800aea0:	694b      	ldreq	r3, [r1, #20]
 800aea2:	1bf6      	subs	r6, r6, r7
 800aea4:	600f      	str	r7, [r1, #0]
 800aea6:	608b      	str	r3, [r1, #8]
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	dd9f      	ble.n	800adec <__sflush_r+0x18>
 800aeac:	4633      	mov	r3, r6
 800aeae:	463a      	mov	r2, r7
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	6a21      	ldr	r1, [r4, #32]
 800aeb4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aeb8:	47e0      	blx	ip
 800aeba:	2800      	cmp	r0, #0
 800aebc:	dc06      	bgt.n	800aecc <__sflush_r+0xf8>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295
 800aec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	e790      	b.n	800adee <__sflush_r+0x1a>
 800aecc:	4407      	add	r7, r0
 800aece:	1a36      	subs	r6, r6, r0
 800aed0:	e7ea      	b.n	800aea8 <__sflush_r+0xd4>
 800aed2:	bf00      	nop
 800aed4:	20400001 	.word	0x20400001

0800aed8 <_fflush_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	690b      	ldr	r3, [r1, #16]
 800aedc:	4605      	mov	r5, r0
 800aede:	460c      	mov	r4, r1
 800aee0:	b913      	cbnz	r3, 800aee8 <_fflush_r+0x10>
 800aee2:	2500      	movs	r5, #0
 800aee4:	4628      	mov	r0, r5
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	b118      	cbz	r0, 800aef2 <_fflush_r+0x1a>
 800aeea:	6983      	ldr	r3, [r0, #24]
 800aeec:	b90b      	cbnz	r3, 800aef2 <_fflush_r+0x1a>
 800aeee:	f000 f887 	bl	800b000 <__sinit>
 800aef2:	4b14      	ldr	r3, [pc, #80]	; (800af44 <_fflush_r+0x6c>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	d11b      	bne.n	800af30 <_fflush_r+0x58>
 800aef8:	686c      	ldr	r4, [r5, #4]
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0ef      	beq.n	800aee2 <_fflush_r+0xa>
 800af02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af04:	07d0      	lsls	r0, r2, #31
 800af06:	d404      	bmi.n	800af12 <_fflush_r+0x3a>
 800af08:	0599      	lsls	r1, r3, #22
 800af0a:	d402      	bmi.n	800af12 <_fflush_r+0x3a>
 800af0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af0e:	f000 f915 	bl	800b13c <__retarget_lock_acquire_recursive>
 800af12:	4628      	mov	r0, r5
 800af14:	4621      	mov	r1, r4
 800af16:	f7ff ff5d 	bl	800add4 <__sflush_r>
 800af1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af1c:	4605      	mov	r5, r0
 800af1e:	07da      	lsls	r2, r3, #31
 800af20:	d4e0      	bmi.n	800aee4 <_fflush_r+0xc>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	059b      	lsls	r3, r3, #22
 800af26:	d4dd      	bmi.n	800aee4 <_fflush_r+0xc>
 800af28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af2a:	f000 f908 	bl	800b13e <__retarget_lock_release_recursive>
 800af2e:	e7d9      	b.n	800aee4 <_fflush_r+0xc>
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <_fflush_r+0x70>)
 800af32:	429c      	cmp	r4, r3
 800af34:	d101      	bne.n	800af3a <_fflush_r+0x62>
 800af36:	68ac      	ldr	r4, [r5, #8]
 800af38:	e7df      	b.n	800aefa <_fflush_r+0x22>
 800af3a:	4b04      	ldr	r3, [pc, #16]	; (800af4c <_fflush_r+0x74>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	bf08      	it	eq
 800af40:	68ec      	ldreq	r4, [r5, #12]
 800af42:	e7da      	b.n	800aefa <_fflush_r+0x22>
 800af44:	0800bc8c 	.word	0x0800bc8c
 800af48:	0800bcac 	.word	0x0800bcac
 800af4c:	0800bc6c 	.word	0x0800bc6c

0800af50 <std>:
 800af50:	2300      	movs	r3, #0
 800af52:	b510      	push	{r4, lr}
 800af54:	4604      	mov	r4, r0
 800af56:	e9c0 3300 	strd	r3, r3, [r0]
 800af5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af5e:	6083      	str	r3, [r0, #8]
 800af60:	8181      	strh	r1, [r0, #12]
 800af62:	6643      	str	r3, [r0, #100]	; 0x64
 800af64:	81c2      	strh	r2, [r0, #14]
 800af66:	6183      	str	r3, [r0, #24]
 800af68:	4619      	mov	r1, r3
 800af6a:	2208      	movs	r2, #8
 800af6c:	305c      	adds	r0, #92	; 0x5c
 800af6e:	f7fd fad5 	bl	800851c <memset>
 800af72:	4b05      	ldr	r3, [pc, #20]	; (800af88 <std+0x38>)
 800af74:	6224      	str	r4, [r4, #32]
 800af76:	6263      	str	r3, [r4, #36]	; 0x24
 800af78:	4b04      	ldr	r3, [pc, #16]	; (800af8c <std+0x3c>)
 800af7a:	62a3      	str	r3, [r4, #40]	; 0x28
 800af7c:	4b04      	ldr	r3, [pc, #16]	; (800af90 <std+0x40>)
 800af7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af80:	4b04      	ldr	r3, [pc, #16]	; (800af94 <std+0x44>)
 800af82:	6323      	str	r3, [r4, #48]	; 0x30
 800af84:	bd10      	pop	{r4, pc}
 800af86:	bf00      	nop
 800af88:	0800b2a5 	.word	0x0800b2a5
 800af8c:	0800b2c7 	.word	0x0800b2c7
 800af90:	0800b2ff 	.word	0x0800b2ff
 800af94:	0800b323 	.word	0x0800b323

0800af98 <_cleanup_r>:
 800af98:	4901      	ldr	r1, [pc, #4]	; (800afa0 <_cleanup_r+0x8>)
 800af9a:	f000 b8af 	b.w	800b0fc <_fwalk_reent>
 800af9e:	bf00      	nop
 800afa0:	0800aed9 	.word	0x0800aed9

0800afa4 <__sfmoreglue>:
 800afa4:	2268      	movs	r2, #104	; 0x68
 800afa6:	b570      	push	{r4, r5, r6, lr}
 800afa8:	1e4d      	subs	r5, r1, #1
 800afaa:	4355      	muls	r5, r2
 800afac:	460e      	mov	r6, r1
 800afae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afb2:	f7ff fa6b 	bl	800a48c <_malloc_r>
 800afb6:	4604      	mov	r4, r0
 800afb8:	b140      	cbz	r0, 800afcc <__sfmoreglue+0x28>
 800afba:	2100      	movs	r1, #0
 800afbc:	e9c0 1600 	strd	r1, r6, [r0]
 800afc0:	300c      	adds	r0, #12
 800afc2:	60a0      	str	r0, [r4, #8]
 800afc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afc8:	f7fd faa8 	bl	800851c <memset>
 800afcc:	4620      	mov	r0, r4
 800afce:	bd70      	pop	{r4, r5, r6, pc}

0800afd0 <__sfp_lock_acquire>:
 800afd0:	4801      	ldr	r0, [pc, #4]	; (800afd8 <__sfp_lock_acquire+0x8>)
 800afd2:	f000 b8b3 	b.w	800b13c <__retarget_lock_acquire_recursive>
 800afd6:	bf00      	nop
 800afd8:	20000605 	.word	0x20000605

0800afdc <__sfp_lock_release>:
 800afdc:	4801      	ldr	r0, [pc, #4]	; (800afe4 <__sfp_lock_release+0x8>)
 800afde:	f000 b8ae 	b.w	800b13e <__retarget_lock_release_recursive>
 800afe2:	bf00      	nop
 800afe4:	20000605 	.word	0x20000605

0800afe8 <__sinit_lock_acquire>:
 800afe8:	4801      	ldr	r0, [pc, #4]	; (800aff0 <__sinit_lock_acquire+0x8>)
 800afea:	f000 b8a7 	b.w	800b13c <__retarget_lock_acquire_recursive>
 800afee:	bf00      	nop
 800aff0:	20000606 	.word	0x20000606

0800aff4 <__sinit_lock_release>:
 800aff4:	4801      	ldr	r0, [pc, #4]	; (800affc <__sinit_lock_release+0x8>)
 800aff6:	f000 b8a2 	b.w	800b13e <__retarget_lock_release_recursive>
 800affa:	bf00      	nop
 800affc:	20000606 	.word	0x20000606

0800b000 <__sinit>:
 800b000:	b510      	push	{r4, lr}
 800b002:	4604      	mov	r4, r0
 800b004:	f7ff fff0 	bl	800afe8 <__sinit_lock_acquire>
 800b008:	69a3      	ldr	r3, [r4, #24]
 800b00a:	b11b      	cbz	r3, 800b014 <__sinit+0x14>
 800b00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b010:	f7ff bff0 	b.w	800aff4 <__sinit_lock_release>
 800b014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b018:	6523      	str	r3, [r4, #80]	; 0x50
 800b01a:	4b13      	ldr	r3, [pc, #76]	; (800b068 <__sinit+0x68>)
 800b01c:	4a13      	ldr	r2, [pc, #76]	; (800b06c <__sinit+0x6c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	62a2      	str	r2, [r4, #40]	; 0x28
 800b022:	42a3      	cmp	r3, r4
 800b024:	bf08      	it	eq
 800b026:	2301      	moveq	r3, #1
 800b028:	4620      	mov	r0, r4
 800b02a:	bf08      	it	eq
 800b02c:	61a3      	streq	r3, [r4, #24]
 800b02e:	f000 f81f 	bl	800b070 <__sfp>
 800b032:	6060      	str	r0, [r4, #4]
 800b034:	4620      	mov	r0, r4
 800b036:	f000 f81b 	bl	800b070 <__sfp>
 800b03a:	60a0      	str	r0, [r4, #8]
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 f817 	bl	800b070 <__sfp>
 800b042:	2200      	movs	r2, #0
 800b044:	2104      	movs	r1, #4
 800b046:	60e0      	str	r0, [r4, #12]
 800b048:	6860      	ldr	r0, [r4, #4]
 800b04a:	f7ff ff81 	bl	800af50 <std>
 800b04e:	2201      	movs	r2, #1
 800b050:	2109      	movs	r1, #9
 800b052:	68a0      	ldr	r0, [r4, #8]
 800b054:	f7ff ff7c 	bl	800af50 <std>
 800b058:	2202      	movs	r2, #2
 800b05a:	2112      	movs	r1, #18
 800b05c:	68e0      	ldr	r0, [r4, #12]
 800b05e:	f7ff ff77 	bl	800af50 <std>
 800b062:	2301      	movs	r3, #1
 800b064:	61a3      	str	r3, [r4, #24]
 800b066:	e7d1      	b.n	800b00c <__sinit+0xc>
 800b068:	0800b8ec 	.word	0x0800b8ec
 800b06c:	0800af99 	.word	0x0800af99

0800b070 <__sfp>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	4607      	mov	r7, r0
 800b074:	f7ff ffac 	bl	800afd0 <__sfp_lock_acquire>
 800b078:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <__sfp+0x84>)
 800b07a:	681e      	ldr	r6, [r3, #0]
 800b07c:	69b3      	ldr	r3, [r6, #24]
 800b07e:	b913      	cbnz	r3, 800b086 <__sfp+0x16>
 800b080:	4630      	mov	r0, r6
 800b082:	f7ff ffbd 	bl	800b000 <__sinit>
 800b086:	3648      	adds	r6, #72	; 0x48
 800b088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	d503      	bpl.n	800b098 <__sfp+0x28>
 800b090:	6833      	ldr	r3, [r6, #0]
 800b092:	b30b      	cbz	r3, 800b0d8 <__sfp+0x68>
 800b094:	6836      	ldr	r6, [r6, #0]
 800b096:	e7f7      	b.n	800b088 <__sfp+0x18>
 800b098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b09c:	b9d5      	cbnz	r5, 800b0d4 <__sfp+0x64>
 800b09e:	4b16      	ldr	r3, [pc, #88]	; (800b0f8 <__sfp+0x88>)
 800b0a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0a4:	60e3      	str	r3, [r4, #12]
 800b0a6:	6665      	str	r5, [r4, #100]	; 0x64
 800b0a8:	f000 f847 	bl	800b13a <__retarget_lock_init_recursive>
 800b0ac:	f7ff ff96 	bl	800afdc <__sfp_lock_release>
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0bc:	6025      	str	r5, [r4, #0]
 800b0be:	61a5      	str	r5, [r4, #24]
 800b0c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0c4:	f7fd fa2a 	bl	800851c <memset>
 800b0c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d4:	3468      	adds	r4, #104	; 0x68
 800b0d6:	e7d9      	b.n	800b08c <__sfp+0x1c>
 800b0d8:	2104      	movs	r1, #4
 800b0da:	4638      	mov	r0, r7
 800b0dc:	f7ff ff62 	bl	800afa4 <__sfmoreglue>
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	6030      	str	r0, [r6, #0]
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d1d5      	bne.n	800b094 <__sfp+0x24>
 800b0e8:	f7ff ff78 	bl	800afdc <__sfp_lock_release>
 800b0ec:	230c      	movs	r3, #12
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	e7ee      	b.n	800b0d0 <__sfp+0x60>
 800b0f2:	bf00      	nop
 800b0f4:	0800b8ec 	.word	0x0800b8ec
 800b0f8:	ffff0001 	.word	0xffff0001

0800b0fc <_fwalk_reent>:
 800b0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b100:	4606      	mov	r6, r0
 800b102:	4688      	mov	r8, r1
 800b104:	2700      	movs	r7, #0
 800b106:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b10a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b10e:	f1b9 0901 	subs.w	r9, r9, #1
 800b112:	d505      	bpl.n	800b120 <_fwalk_reent+0x24>
 800b114:	6824      	ldr	r4, [r4, #0]
 800b116:	2c00      	cmp	r4, #0
 800b118:	d1f7      	bne.n	800b10a <_fwalk_reent+0xe>
 800b11a:	4638      	mov	r0, r7
 800b11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b120:	89ab      	ldrh	r3, [r5, #12]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d907      	bls.n	800b136 <_fwalk_reent+0x3a>
 800b126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b12a:	3301      	adds	r3, #1
 800b12c:	d003      	beq.n	800b136 <_fwalk_reent+0x3a>
 800b12e:	4629      	mov	r1, r5
 800b130:	4630      	mov	r0, r6
 800b132:	47c0      	blx	r8
 800b134:	4307      	orrs	r7, r0
 800b136:	3568      	adds	r5, #104	; 0x68
 800b138:	e7e9      	b.n	800b10e <_fwalk_reent+0x12>

0800b13a <__retarget_lock_init_recursive>:
 800b13a:	4770      	bx	lr

0800b13c <__retarget_lock_acquire_recursive>:
 800b13c:	4770      	bx	lr

0800b13e <__retarget_lock_release_recursive>:
 800b13e:	4770      	bx	lr

0800b140 <__swhatbuf_r>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	460e      	mov	r6, r1
 800b144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b148:	4614      	mov	r4, r2
 800b14a:	2900      	cmp	r1, #0
 800b14c:	461d      	mov	r5, r3
 800b14e:	b096      	sub	sp, #88	; 0x58
 800b150:	da08      	bge.n	800b164 <__swhatbuf_r+0x24>
 800b152:	2200      	movs	r2, #0
 800b154:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b158:	602a      	str	r2, [r5, #0]
 800b15a:	061a      	lsls	r2, r3, #24
 800b15c:	d410      	bmi.n	800b180 <__swhatbuf_r+0x40>
 800b15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b162:	e00e      	b.n	800b182 <__swhatbuf_r+0x42>
 800b164:	466a      	mov	r2, sp
 800b166:	f000 f903 	bl	800b370 <_fstat_r>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	dbf1      	blt.n	800b152 <__swhatbuf_r+0x12>
 800b16e:	9a01      	ldr	r2, [sp, #4]
 800b170:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b174:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b178:	425a      	negs	r2, r3
 800b17a:	415a      	adcs	r2, r3
 800b17c:	602a      	str	r2, [r5, #0]
 800b17e:	e7ee      	b.n	800b15e <__swhatbuf_r+0x1e>
 800b180:	2340      	movs	r3, #64	; 0x40
 800b182:	2000      	movs	r0, #0
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	b016      	add	sp, #88	; 0x58
 800b188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b18c <__smakebuf_r>:
 800b18c:	898b      	ldrh	r3, [r1, #12]
 800b18e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b190:	079d      	lsls	r5, r3, #30
 800b192:	4606      	mov	r6, r0
 800b194:	460c      	mov	r4, r1
 800b196:	d507      	bpl.n	800b1a8 <__smakebuf_r+0x1c>
 800b198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	6163      	str	r3, [r4, #20]
 800b1a4:	b002      	add	sp, #8
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	466a      	mov	r2, sp
 800b1aa:	ab01      	add	r3, sp, #4
 800b1ac:	f7ff ffc8 	bl	800b140 <__swhatbuf_r>
 800b1b0:	9900      	ldr	r1, [sp, #0]
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7ff f969 	bl	800a48c <_malloc_r>
 800b1ba:	b948      	cbnz	r0, 800b1d0 <__smakebuf_r+0x44>
 800b1bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1c0:	059a      	lsls	r2, r3, #22
 800b1c2:	d4ef      	bmi.n	800b1a4 <__smakebuf_r+0x18>
 800b1c4:	f023 0303 	bic.w	r3, r3, #3
 800b1c8:	f043 0302 	orr.w	r3, r3, #2
 800b1cc:	81a3      	strh	r3, [r4, #12]
 800b1ce:	e7e3      	b.n	800b198 <__smakebuf_r+0xc>
 800b1d0:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <__smakebuf_r+0x7c>)
 800b1d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	6020      	str	r0, [r4, #0]
 800b1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	9b00      	ldr	r3, [sp, #0]
 800b1e0:	6120      	str	r0, [r4, #16]
 800b1e2:	6163      	str	r3, [r4, #20]
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	b15b      	cbz	r3, 800b200 <__smakebuf_r+0x74>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ee:	f000 f8d1 	bl	800b394 <_isatty_r>
 800b1f2:	b128      	cbz	r0, 800b200 <__smakebuf_r+0x74>
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	f023 0303 	bic.w	r3, r3, #3
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	89a0      	ldrh	r0, [r4, #12]
 800b202:	4305      	orrs	r5, r0
 800b204:	81a5      	strh	r5, [r4, #12]
 800b206:	e7cd      	b.n	800b1a4 <__smakebuf_r+0x18>
 800b208:	0800af99 	.word	0x0800af99

0800b20c <_malloc_usable_size_r>:
 800b20c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b210:	1f18      	subs	r0, r3, #4
 800b212:	2b00      	cmp	r3, #0
 800b214:	bfbc      	itt	lt
 800b216:	580b      	ldrlt	r3, [r1, r0]
 800b218:	18c0      	addlt	r0, r0, r3
 800b21a:	4770      	bx	lr

0800b21c <_raise_r>:
 800b21c:	291f      	cmp	r1, #31
 800b21e:	b538      	push	{r3, r4, r5, lr}
 800b220:	4604      	mov	r4, r0
 800b222:	460d      	mov	r5, r1
 800b224:	d904      	bls.n	800b230 <_raise_r+0x14>
 800b226:	2316      	movs	r3, #22
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b232:	b112      	cbz	r2, 800b23a <_raise_r+0x1e>
 800b234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b238:	b94b      	cbnz	r3, 800b24e <_raise_r+0x32>
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 f830 	bl	800b2a0 <_getpid_r>
 800b240:	462a      	mov	r2, r5
 800b242:	4601      	mov	r1, r0
 800b244:	4620      	mov	r0, r4
 800b246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b24a:	f000 b817 	b.w	800b27c <_kill_r>
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d00a      	beq.n	800b268 <_raise_r+0x4c>
 800b252:	1c59      	adds	r1, r3, #1
 800b254:	d103      	bne.n	800b25e <_raise_r+0x42>
 800b256:	2316      	movs	r3, #22
 800b258:	6003      	str	r3, [r0, #0]
 800b25a:	2001      	movs	r0, #1
 800b25c:	e7e7      	b.n	800b22e <_raise_r+0x12>
 800b25e:	2400      	movs	r4, #0
 800b260:	4628      	mov	r0, r5
 800b262:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b266:	4798      	blx	r3
 800b268:	2000      	movs	r0, #0
 800b26a:	e7e0      	b.n	800b22e <_raise_r+0x12>

0800b26c <raise>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <raise+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f7ff bfd3 	b.w	800b21c <_raise_r>
 800b276:	bf00      	nop
 800b278:	20000014 	.word	0x20000014

0800b27c <_kill_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	2300      	movs	r3, #0
 800b280:	4d06      	ldr	r5, [pc, #24]	; (800b29c <_kill_r+0x20>)
 800b282:	4604      	mov	r4, r0
 800b284:	4608      	mov	r0, r1
 800b286:	4611      	mov	r1, r2
 800b288:	602b      	str	r3, [r5, #0]
 800b28a:	f7f7 fcca 	bl	8002c22 <_kill>
 800b28e:	1c43      	adds	r3, r0, #1
 800b290:	d102      	bne.n	800b298 <_kill_r+0x1c>
 800b292:	682b      	ldr	r3, [r5, #0]
 800b294:	b103      	cbz	r3, 800b298 <_kill_r+0x1c>
 800b296:	6023      	str	r3, [r4, #0]
 800b298:	bd38      	pop	{r3, r4, r5, pc}
 800b29a:	bf00      	nop
 800b29c:	20000600 	.word	0x20000600

0800b2a0 <_getpid_r>:
 800b2a0:	f7f7 bcb8 	b.w	8002c14 <_getpid>

0800b2a4 <__sread>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ac:	f000 f894 	bl	800b3d8 <_read_r>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	bfab      	itete	ge
 800b2b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b2b8:	181b      	addge	r3, r3, r0
 800b2ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2be:	bfac      	ite	ge
 800b2c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2c2:	81a3      	strhlt	r3, [r4, #12]
 800b2c4:	bd10      	pop	{r4, pc}

0800b2c6 <__swrite>:
 800b2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	461f      	mov	r7, r3
 800b2cc:	898b      	ldrh	r3, [r1, #12]
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	05db      	lsls	r3, r3, #23
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	4616      	mov	r6, r2
 800b2d6:	d505      	bpl.n	800b2e4 <__swrite+0x1e>
 800b2d8:	2302      	movs	r3, #2
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e0:	f000 f868 	bl	800b3b4 <_lseek_r>
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	4632      	mov	r2, r6
 800b2e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ec:	81a3      	strh	r3, [r4, #12]
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	463b      	mov	r3, r7
 800b2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fa:	f000 b817 	b.w	800b32c <_write_r>

0800b2fe <__sseek>:
 800b2fe:	b510      	push	{r4, lr}
 800b300:	460c      	mov	r4, r1
 800b302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b306:	f000 f855 	bl	800b3b4 <_lseek_r>
 800b30a:	1c43      	adds	r3, r0, #1
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	bf15      	itete	ne
 800b310:	6560      	strne	r0, [r4, #84]	; 0x54
 800b312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b31a:	81a3      	strheq	r3, [r4, #12]
 800b31c:	bf18      	it	ne
 800b31e:	81a3      	strhne	r3, [r4, #12]
 800b320:	bd10      	pop	{r4, pc}

0800b322 <__sclose>:
 800b322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b326:	f000 b813 	b.w	800b350 <_close_r>
	...

0800b32c <_write_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	4611      	mov	r1, r2
 800b334:	2200      	movs	r2, #0
 800b336:	4d05      	ldr	r5, [pc, #20]	; (800b34c <_write_r+0x20>)
 800b338:	602a      	str	r2, [r5, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	f7f7 fca8 	bl	8002c90 <_write>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_write_r+0x1e>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_write_r+0x1e>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	20000600 	.word	0x20000600

0800b350 <_close_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	2300      	movs	r3, #0
 800b354:	4d05      	ldr	r5, [pc, #20]	; (800b36c <_close_r+0x1c>)
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f7 fcb4 	bl	8002cc8 <_close>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_close_r+0x1a>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_close_r+0x1a>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	20000600 	.word	0x20000600

0800b370 <_fstat_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	2300      	movs	r3, #0
 800b374:	4d06      	ldr	r5, [pc, #24]	; (800b390 <_fstat_r+0x20>)
 800b376:	4604      	mov	r4, r0
 800b378:	4608      	mov	r0, r1
 800b37a:	4611      	mov	r1, r2
 800b37c:	602b      	str	r3, [r5, #0]
 800b37e:	f7f7 fcae 	bl	8002cde <_fstat>
 800b382:	1c43      	adds	r3, r0, #1
 800b384:	d102      	bne.n	800b38c <_fstat_r+0x1c>
 800b386:	682b      	ldr	r3, [r5, #0]
 800b388:	b103      	cbz	r3, 800b38c <_fstat_r+0x1c>
 800b38a:	6023      	str	r3, [r4, #0]
 800b38c:	bd38      	pop	{r3, r4, r5, pc}
 800b38e:	bf00      	nop
 800b390:	20000600 	.word	0x20000600

0800b394 <_isatty_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	2300      	movs	r3, #0
 800b398:	4d05      	ldr	r5, [pc, #20]	; (800b3b0 <_isatty_r+0x1c>)
 800b39a:	4604      	mov	r4, r0
 800b39c:	4608      	mov	r0, r1
 800b39e:	602b      	str	r3, [r5, #0]
 800b3a0:	f7f7 fcac 	bl	8002cfc <_isatty>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_isatty_r+0x1a>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_isatty_r+0x1a>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	20000600 	.word	0x20000600

0800b3b4 <_lseek_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4d05      	ldr	r5, [pc, #20]	; (800b3d4 <_lseek_r+0x20>)
 800b3c0:	602a      	str	r2, [r5, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f7f7 fca4 	bl	8002d10 <_lseek>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_lseek_r+0x1e>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_lseek_r+0x1e>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20000600 	.word	0x20000600

0800b3d8 <_read_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4d05      	ldr	r5, [pc, #20]	; (800b3f8 <_read_r+0x20>)
 800b3e4:	602a      	str	r2, [r5, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f7f7 fc35 	bl	8002c56 <_read>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_read_r+0x1e>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_read_r+0x1e>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20000600 	.word	0x20000600

0800b3fc <_init>:
 800b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fe:	bf00      	nop
 800b400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b402:	bc08      	pop	{r3}
 800b404:	469e      	mov	lr, r3
 800b406:	4770      	bx	lr

0800b408 <_fini>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	bf00      	nop
 800b40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40e:	bc08      	pop	{r3}
 800b410:	469e      	mov	lr, r3
 800b412:	4770      	bx	lr
