
MPU6050_F103RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b18c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800b378  0800b378  0001b378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc2c  0800bc2c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc2c  0800bc2c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc2c  0800bc2c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bc2c  0800bc2c  0001bc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc34  0800bc34  0001bc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bc38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001e8  0800be1c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800be1c  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158a6  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003351  00000000  00000000  00035ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00038e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f153  00000000  00000000  0003b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017226  00000000  00000000  0005a49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5f3f  00000000  00000000  000716c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000674c  00000000  00000000  00117650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b35c 	.word	0x0800b35c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800b35c 	.word	0x0800b35c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_fcmpun>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011b4:	d102      	bne.n	80011bc <__aeabi_fcmpun+0x14>
 80011b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011ba:	d108      	bne.n	80011ce <__aeabi_fcmpun+0x26>
 80011bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011c0:	d102      	bne.n	80011c8 <__aeabi_fcmpun+0x20>
 80011c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011c6:	d102      	bne.n	80011ce <__aeabi_fcmpun+0x26>
 80011c8:	f04f 0000 	mov.w	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0001 	mov.w	r0, #1
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_f2iz>:
 80011d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011dc:	d30f      	bcc.n	80011fe <__aeabi_f2iz+0x2a>
 80011de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011e6:	d90d      	bls.n	8001204 <__aeabi_f2iz+0x30>
 80011e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011f4:	fa23 f002 	lsr.w	r0, r3, r2
 80011f8:	bf18      	it	ne
 80011fa:	4240      	negne	r0, r0
 80011fc:	4770      	bx	lr
 80011fe:	f04f 0000 	mov.w	r0, #0
 8001202:	4770      	bx	lr
 8001204:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001208:	d101      	bne.n	800120e <__aeabi_f2iz+0x3a>
 800120a:	0242      	lsls	r2, r0, #9
 800120c:	d105      	bne.n	800121a <__aeabi_f2iz+0x46>
 800120e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001212:	bf08      	it	eq
 8001214:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001218:	4770      	bx	lr
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	4770      	bx	lr

08001220 <__aeabi_f2uiz>:
 8001220:	0042      	lsls	r2, r0, #1
 8001222:	d20e      	bcs.n	8001242 <__aeabi_f2uiz+0x22>
 8001224:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001228:	d30b      	bcc.n	8001242 <__aeabi_f2uiz+0x22>
 800122a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800122e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001232:	d409      	bmi.n	8001248 <__aeabi_f2uiz+0x28>
 8001234:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800123c:	fa23 f002 	lsr.w	r0, r3, r2
 8001240:	4770      	bx	lr
 8001242:	f04f 0000 	mov.w	r0, #0
 8001246:	4770      	bx	lr
 8001248:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800124c:	d101      	bne.n	8001252 <__aeabi_f2uiz+0x32>
 800124e:	0242      	lsls	r2, r0, #9
 8001250:	d102      	bne.n	8001258 <__aeabi_f2uiz+0x38>
 8001252:	f04f 30ff 	mov.w	r0, #4294967295
 8001256:	4770      	bx	lr
 8001258:	f04f 0000 	mov.w	r0, #0
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f006 f931 	bl	80074d4 <atan2f>
 8001272:	4603      	mov	r3, r0
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f006 f8b3 	bl	80073f0 <cosf>
 800128a:	4603      	mov	r3, r0
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f006 f8df 	bl	8007460 <sinf>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f006 f90f 	bl	80074d8 <sqrtf>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN6KalmanC1Ef>:
#include <Kalman_cpp.h>
#include "math.h"

float PI = 3.1416;

Kalman::Kalman(float z0)
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <_ZN6KalmanC1Ef+0x30>)
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <_ZN6KalmanC1Ef+0x34>)
 80012e0:	609a      	str	r2, [r3, #8]
{
	x = z0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	3e051eb8 	.word	0x3e051eb8
 80012f8:	447a0000 	.word	0x447a0000

080012fc <_ZN6Kalman6updateEf>:

float Kalman::update(float z)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	float D_ = D + Q;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f7ff fc7b 	bl	8000c0c <__addsf3>
 8001316:	4603      	mov	r3, r0
 8001318:	60fb      	str	r3, [r7, #12]
	float K = D_ / (D_ + R);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fc73 	bl	8000c0c <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	4619      	mov	r1, r3
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff fe2a 	bl	8000f84 <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	60bb      	str	r3, [r7, #8]
	x = x + K * (z - x);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68dc      	ldr	r4, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4619      	mov	r1, r3
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff fc62 	bl	8000c08 <__aeabi_fsub>
 8001344:	4603      	mov	r3, r0
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fd67 	bl	8000e1c <__aeabi_fmul>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff fc5a 	bl	8000c0c <__addsf3>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
	D = (1 - K) * D_;
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001366:	f7ff fc4f 	bl	8000c08 <__aeabi_fsub>
 800136a:	4603      	mov	r3, r0
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd54 	bl	8000e1c <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
	return x;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <_ZN10GradFilterC1Effi>:

GradFilter::GradFilter(float beta_1, float eps_1, int count_to_change_params)
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <_ZN10GradFilterC1Effi+0x40>)
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013a2:	609a      	str	r2, [r3, #8]
{
	beta1 = beta_1;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	605a      	str	r2, [r3, #4]
	eps1 = eps_1;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]
	cnt_thres = count_to_change_params;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	621a      	str	r2, [r3, #32]
	cnt = 0;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
}
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	41700000 	.word	0x41700000

080013cc <_ZN10GradFilter4initEf>:
{
	roll = atan2(gz, gx);
}

void GradFilter::init(float roll0)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	roll = roll0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	611a      	str	r2, [r3, #16]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
	...

080013e8 <_ZN10GradFilter6updateEffff>:

float GradFilter::update(float wz, float gx, float gy, float delT)
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
	if (cnt == cnt_thres)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d107      	bne.n	8001412 <_ZN10GradFilter6updateEffff+0x2a>
	{
        beta = beta1;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]
        eps = eps1;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	609a      	str	r2, [r3, #8]
	}
	float norm = sqrt(gx*gx + gy*gy);
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fd01 	bl	8000e1c <__aeabi_fmul>
 800141a:	4603      	mov	r3, r0
 800141c:	461c      	mov	r4, r3
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f7ff fcfb 	bl	8000e1c <__aeabi_fmul>
 8001426:	4603      	mov	r3, r0
 8001428:	4619      	mov	r1, r3
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff fbee 	bl	8000c0c <__addsf3>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff3a 	bl	80012ac <_ZSt4sqrtf>
 8001438:	61f8      	str	r0, [r7, #28]
	if(norm == 0)
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	69f8      	ldr	r0, [r7, #28]
 8001440:	f7ff fe80 	bl	8001144 <__aeabi_fcmpeq>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d03f      	beq.n	80014ca <_ZN10GradFilter6updateEffff+0xe2>
	{
		w_bias += eps*fDiv*delT;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	699c      	ldr	r4, [r3, #24]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f7ff fcdf 	bl	8000e1c <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcda 	bl	8000e1c <__aeabi_fmul>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fbcd 	bl	8000c0c <__addsf3>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	619a      	str	r2, [r3, #24]
		roll += (wz - w_bias - beta*fDiv)*delT;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	691c      	ldr	r4, [r3, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4619      	mov	r1, r3
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f7ff fbbf 	bl	8000c08 <__aeabi_fsub>
 800148a:	4603      	mov	r3, r0
 800148c:	461d      	mov	r5, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f7ff fcbf 	bl	8000e1c <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4628      	mov	r0, r5
 80014a4:	f7ff fbb0 	bl	8000c08 <__aeabi_fsub>
 80014a8:	4603      	mov	r3, r0
 80014aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fcb5 	bl	8000e1c <__aeabi_fmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fba8 	bl	8000c0c <__addsf3>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	611a      	str	r2, [r3, #16]
		return roll;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	e0b1      	b.n	800162e <_ZN10GradFilter6updateEffff+0x246>
	}
	float gxNorm = gx/norm;
 80014ca:	69f9      	ldr	r1, [r7, #28]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fd59 	bl	8000f84 <__aeabi_fdiv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	61bb      	str	r3, [r7, #24]
	float gyNorm = gy/norm;
 80014d6:	69f9      	ldr	r1, [r7, #28]
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff fd53 	bl	8000f84 <__aeabi_fdiv>
 80014de:	4603      	mov	r3, r0
 80014e0:	617b      	str	r3, [r7, #20]
	fDiv = sin(roll)*gyNorm - cos(roll)*gxNorm;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fed4 	bl	8001294 <_ZSt3sinf>
 80014ec:	4603      	mov	r3, r0
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc93 	bl	8000e1c <__aeabi_fmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461c      	mov	r4, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff febc 	bl	800127c <_ZSt3cosf>
 8001504:	4603      	mov	r3, r0
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc87 	bl	8000e1c <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	4619      	mov	r1, r3
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff fb78 	bl	8000c08 <__aeabi_fsub>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	615a      	str	r2, [r3, #20]
	w_bias += eps*fDiv*delT;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	699c      	ldr	r4, [r3, #24]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff fc74 	bl	8000e1c <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc6f 	bl	8000e1c <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fb62 	bl	8000c0c <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	619a      	str	r2, [r3, #24]
	float wCalib = wz - w_bias;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4619      	mov	r1, r3
 8001556:	68b8      	ldr	r0, [r7, #8]
 8001558:	f7ff fb56 	bl	8000c08 <__aeabi_fsub>
 800155c:	4603      	mov	r3, r0
 800155e:	613b      	str	r3, [r7, #16]
	roll += (wCalib - beta*fDiv)*delT;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	691c      	ldr	r4, [r3, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff fc54 	bl	8000e1c <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	4619      	mov	r1, r3
 8001578:	6938      	ldr	r0, [r7, #16]
 800157a:	f7ff fb45 	bl	8000c08 <__aeabi_fsub>
 800157e:	4603      	mov	r3, r0
 8001580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fc4a 	bl	8000e1c <__aeabi_fmul>
 8001588:	4603      	mov	r3, r0
 800158a:	4619      	mov	r1, r3
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff fb3d 	bl	8000c0c <__addsf3>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	611a      	str	r2, [r3, #16]
	if (roll >= 2*PI)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691c      	ldr	r4, [r3, #16]
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fb31 	bl	8000c0c <__addsf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fde6 	bl	8001180 <__aeabi_fcmpge>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d010      	beq.n	80015dc <_ZN10GradFilter6updateEffff+0x1f4>
	{
		roll -= 2*PI;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	691c      	ldr	r4, [r3, #16]
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb21 	bl	8000c0c <__addsf3>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fb1a 	bl	8000c08 <__aeabi_fsub>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	611a      	str	r2, [r3, #16]
	}
	if (roll <= -2*PI)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	691c      	ldr	r4, [r3, #16]
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc17 	bl	8000e1c <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fdba 	bl	800116c <__aeabi_fcmple>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <_ZN10GradFilter6updateEffff+0x238>
	{
		roll += 2*PI;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	691c      	ldr	r4, [r3, #16]
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <_ZN10GradFilter6updateEffff+0x250>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff faff 	bl	8000c0c <__addsf3>
 800160e:	4603      	mov	r3, r0
 8001610:	4619      	mov	r1, r3
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fafa 	bl	8000c0c <__addsf3>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	611a      	str	r2, [r3, #16]
	}
	cnt++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	61da      	str	r2, [r3, #28]
	return roll;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	691b      	ldr	r3, [r3, #16]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000

0800163c <MPU6050_Init>:
uint32_t countTest;

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd, MPU_ConfigTypeDef *mpuCon)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001646:	2254      	movs	r2, #84	; 0x54
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MPU6050_Init+0x24>)
 800164c:	f006 ff08 	bl	8008460 <memcpy>
	//MPU config handle to local library
	MpuConfig = mpuCon;
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <MPU6050_Init+0x28>)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6013      	str	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000204 	.word	0x20000204
 8001664:	20000258 	.word	0x20000258

08001668 <I2C_Read>:

//2- i2c Read
HAL_StatusTypeDef I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	71bb      	strb	r3, [r7, #6]
	uint8_t MPUADDR;
	uint8_t i2cBuf[2] = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	81bb      	strh	r3, [r7, #12]
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 800167c:	23d0      	movs	r3, #208	; 0xd0
 800167e:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 100)!= HAL_OK) return HAL_ERROR;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	b299      	uxth	r1, r3
 8001688:	f107 020c 	add.w	r2, r7, #12
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <I2C_Read+0x64>)
 8001694:	f003 fa1c 	bl	8004ad0 <HAL_I2C_Master_Transmit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <I2C_Read+0x3a>
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <I2C_Read+0x5a>
	if(HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100)!= HAL_OK) return HAL_ERROR;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	b299      	uxth	r1, r3
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2264      	movs	r2, #100	; 0x64
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <I2C_Read+0x64>)
 80016b2:	f003 fb0b 	bl	8004ccc <HAL_I2C_Master_Receive>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <I2C_Read+0x58>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <I2C_Read+0x5a>
	return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000204 	.word	0x20000204

080016d0 <I2C_Write8>:

//3- i2c Write
HAL_StatusTypeDef I2C_Write8(uint8_t ADDR, uint8_t data)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2] = {0};
 80016e0:	2300      	movs	r3, #0
 80016e2:	81bb      	strh	r3, [r7, #12]
	i2cData[0] = ADDR;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 80016ec:	23d0      	movs	r3, #208	; 0xd0
 80016ee:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,5)!= HAL_OK) return HAL_ERROR;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	b299      	uxth	r1, r3
 80016f4:	f107 020c 	add.w	r2, r7, #12
 80016f8:	2305      	movs	r3, #5
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2302      	movs	r3, #2
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <I2C_Write8+0x48>)
 8001700:	f003 f9e6 	bl	8004ad0 <HAL_I2C_Master_Transmit>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <I2C_Write8+0x3e>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <I2C_Write8+0x40>
	return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000204 	.word	0x20000204

0800171c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	uint8_t Buffer = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	71fb      	strb	r3, [r7, #7]
	float PI = 3.14159f;
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <MPU6050_Config+0x198>)
 8001728:	603b      	str	r3, [r7, #0]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	206b      	movs	r0, #107	; 0x6b
 800172e:	f7ff ffcf 	bl	80016d0 <I2C_Write8>
	HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	; 0x64
 8001734:	f001 fb6c 	bl	8002e10 <HAL_Delay>
	Buffer = MpuConfig ->ClockSource & 0x07; //change the 7th bits of register
 8001738:	4b5f      	ldr	r3, [pc, #380]	; (80018b8 <MPU6050_Config+0x19c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	71fb      	strb	r3, [r7, #7]
	Buffer |= (MpuConfig ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001744:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <MPU6050_Config+0x19c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	019b      	lsls	r3, r3, #6
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001752:	b25a      	sxtb	r2, r3
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4313      	orrs	r3, r2
 800175a:	b25b      	sxtb	r3, r3
 800175c:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4619      	mov	r1, r3
 8001762:	206b      	movs	r0, #107	; 0x6b
 8001764:	f7ff ffb4 	bl	80016d0 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001768:	2064      	movs	r0, #100	; 0x64
 800176a:	f001 fb51 	bl	8002e10 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
	Buffer = MpuConfig->CONFIG_DLPF & 0x07;
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <MPU6050_Config+0x19c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(CONFIG_REG, Buffer);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4619      	mov	r1, r3
 8001782:	201a      	movs	r0, #26
 8001784:	f7ff ffa4 	bl	80016d0 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Gyro_Full_Scale << 3) & 0x18;
 800178c:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <MPU6050_Config+0x19c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0318 	and.w	r3, r3, #24
 800179a:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4619      	mov	r1, r3
 80017a0:	201b      	movs	r0, #27
 80017a2:	f7ff ff95 	bl	80016d0 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 80017a6:	2300      	movs	r3, #0
 80017a8:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Accel_Full_Scale << 3) & 0x18;
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <MPU6050_Config+0x19c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0318 	and.w	r3, r3, #24
 80017b8:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4619      	mov	r1, r3
 80017be:	201c      	movs	r0, #28
 80017c0:	f7ff ff86 	bl	80016d0 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 80017c4:	2004      	movs	r0, #4
 80017c6:	f000 f887 	bl	80018d8 <MPU6050_Set_SMPRT_DIV>
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (MpuConfig->Accel_Full_Scale)
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <MPU6050_Config+0x19c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	789b      	ldrb	r3, [r3, #2]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d81f      	bhi.n	8001814 <MPU6050_Config+0xf8>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <MPU6050_Config+0xc0>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f7 	.word	0x080017f7
 80017e4:	08001801 	.word	0x08001801
 80017e8:	0800180b 	.word	0x0800180b
	{
		case AFS_SEL_2g:
			accelScalingFactor = 2.00f/32768.00f;
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <MPU6050_Config+0x1a0>)
 80017ee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80017f2:	601a      	str	r2, [r3, #0]
			break;
 80017f4:	e00f      	b.n	8001816 <MPU6050_Config+0xfa>
		
		case AFS_SEL_4g:
			accelScalingFactor = 4.00f/32768.00f;
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <MPU6050_Config+0x1a0>)
 80017f8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80017fc:	601a      	str	r2, [r3, #0]
				break;
 80017fe:	e00a      	b.n	8001816 <MPU6050_Config+0xfa>
		
		case AFS_SEL_8g:
			accelScalingFactor = 8.00f/32768.00f;
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <MPU6050_Config+0x1a0>)
 8001802:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001806:	601a      	str	r2, [r3, #0]
			break;
 8001808:	e005      	b.n	8001816 <MPU6050_Config+0xfa>
		
		case AFS_SEL_16g:
			accelScalingFactor = 16.00f/32768.00f;
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <MPU6050_Config+0x1a0>)
 800180c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001810:	601a      	str	r2, [r3, #0]
			break;
 8001812:	e000      	b.n	8001816 <MPU6050_Config+0xfa>
		
		default:
			break;
 8001814:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (MpuConfig->Gyro_Full_Scale)
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <MPU6050_Config+0x19c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d843      	bhi.n	80018a8 <MPU6050_Config+0x18c>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <MPU6050_Config+0x10c>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	08001855 	.word	0x08001855
 8001830:	08001871 	.word	0x08001871
 8001834:	0800188d 	.word	0x0800188d
	{
		case FS_SEL_250:
			gyroScalingFactor = (250.0f/32768.0f)*PI/180;
 8001838:	4921      	ldr	r1, [pc, #132]	; (80018c0 <MPU6050_Config+0x1a4>)
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f7ff faee 	bl	8000e1c <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	4920      	ldr	r1, [pc, #128]	; (80018c4 <MPU6050_Config+0x1a8>)
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb9d 	bl	8000f84 <__aeabi_fdiv>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MPU6050_Config+0x1ac>)
 8001850:	601a      	str	r2, [r3, #0]
			break;
 8001852:	e02a      	b.n	80018aa <MPU6050_Config+0x18e>
		
		case FS_SEL_500:
			gyroScalingFactor = (500.0f/32768.0f)*PI/180;
 8001854:	491d      	ldr	r1, [pc, #116]	; (80018cc <MPU6050_Config+0x1b0>)
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f7ff fae0 	bl	8000e1c <__aeabi_fmul>
 800185c:	4603      	mov	r3, r0
 800185e:	4919      	ldr	r1, [pc, #100]	; (80018c4 <MPU6050_Config+0x1a8>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fb8f 	bl	8000f84 <__aeabi_fdiv>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MPU6050_Config+0x1ac>)
 800186c:	601a      	str	r2, [r3, #0]
			break;
 800186e:	e01c      	b.n	80018aa <MPU6050_Config+0x18e>
		
		case FS_SEL_1000:
			gyroScalingFactor = (1000.0f/32768.0f)*PI/180;
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <MPU6050_Config+0x1b4>)
 8001872:	6838      	ldr	r0, [r7, #0]
 8001874:	f7ff fad2 	bl	8000e1c <__aeabi_fmul>
 8001878:	4603      	mov	r3, r0
 800187a:	4912      	ldr	r1, [pc, #72]	; (80018c4 <MPU6050_Config+0x1a8>)
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb81 	bl	8000f84 <__aeabi_fdiv>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MPU6050_Config+0x1ac>)
 8001888:	601a      	str	r2, [r3, #0]
			break;
 800188a:	e00e      	b.n	80018aa <MPU6050_Config+0x18e>
		
		case FS_SEL_2000:
			gyroScalingFactor = (2000.0f/32768.0f)*PI/180;
 800188c:	4911      	ldr	r1, [pc, #68]	; (80018d4 <MPU6050_Config+0x1b8>)
 800188e:	6838      	ldr	r0, [r7, #0]
 8001890:	f7ff fac4 	bl	8000e1c <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	490b      	ldr	r1, [pc, #44]	; (80018c4 <MPU6050_Config+0x1a8>)
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fb73 	bl	8000f84 <__aeabi_fdiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MPU6050_Config+0x1ac>)
 80018a4:	601a      	str	r2, [r3, #0]
			break;
 80018a6:	e000      	b.n	80018aa <MPU6050_Config+0x18e>
		
		default:
			break;
 80018a8:	bf00      	nop
	}
	
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40490fd0 	.word	0x40490fd0
 80018b8:	20000258 	.word	0x20000258
 80018bc:	2000025c 	.word	0x2000025c
 80018c0:	3bfa0000 	.word	0x3bfa0000
 80018c4:	43340000 	.word	0x43340000
 80018c8:	20000260 	.word	0x20000260
 80018cc:	3c7a0000 	.word	0x3c7a0000
 80018d0:	3cfa0000 	.word	0x3cfa0000
 80018d4:	3d7a0000 	.word	0x3d7a0000

080018d8 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4619      	mov	r1, r3
 80018e6:	2019      	movs	r0, #25
 80018e8:	f7ff fef2 	bl	80016d0 <I2C_Write8>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <ReadI2C_MPU>:
	I2C_Write8(CONFIG_REG, Buffer);	
}

//9- Get Accel Raw Data
HAL_StatusTypeDef ReadI2C_MPU(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
	uint8_t AcceArr[6];
	uint8_t GyroArr[6];
	if(I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6)== HAL_OK && I2C_Read(GYRO_XOUT_H_REG, GyroArr,6) == HAL_OK)
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	2206      	movs	r2, #6
 8001900:	4619      	mov	r1, r3
 8001902:	203b      	movs	r0, #59	; 0x3b
 8001904:	f7ff feb0 	bl	8001668 <I2C_Read>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d159      	bne.n	80019c2 <ReadI2C_MPU+0xce>
 800190e:	463b      	mov	r3, r7
 8001910:	2206      	movs	r2, #6
 8001912:	4619      	mov	r1, r3
 8001914:	2043      	movs	r0, #67	; 0x43
 8001916:	f7ff fea7 	bl	8001668 <I2C_Read>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d150      	bne.n	80019c2 <ReadI2C_MPU+0xce>
	{
		//Accel Raw Data
		Accel.x = (int16_t)((AcceArr[0]<<8) | AcceArr[1]);
 8001920:	7a3b      	ldrb	r3, [r7, #8]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	7a7b      	ldrb	r3, [r7, #9]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001930:	801a      	strh	r2, [r3, #0]
		Accel.y = (int16_t)((AcceArr[2]<<8) | AcceArr[3]);
 8001932:	7abb      	ldrb	r3, [r7, #10]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21a      	sxth	r2, r3
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	b21b      	sxth	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b21a      	sxth	r2, r3
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001942:	805a      	strh	r2, [r3, #2]
		Accel.z = (int16_t)((AcceArr[4]<<8) | AcceArr[5]);
 8001944:	7b3b      	ldrb	r3, [r7, #12]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	b21a      	sxth	r2, r3
 800194a:	7b7b      	ldrb	r3, [r7, #13]
 800194c:	b21b      	sxth	r3, r3
 800194e:	4313      	orrs	r3, r2
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001954:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		Gyro.x = (int16_t)((GyroArr[0]<<8) | GyroArr[1]);
 8001956:	783b      	ldrb	r3, [r7, #0]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <ReadI2C_MPU+0xf8>)
 8001966:	801a      	strh	r2, [r3, #0]
		Gyro.y = (int16_t)((GyroArr[2]<<8) | GyroArr[3]);
 8001968:	78bb      	ldrb	r3, [r7, #2]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21a      	sxth	r2, r3
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <ReadI2C_MPU+0xf8>)
 8001978:	805a      	strh	r2, [r3, #2]
		Gyro.z = (int16_t)((GyroArr[4]<<8) | GyroArr[5]);
 800197a:	793b      	ldrb	r3, [r7, #4]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	b21b      	sxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b21a      	sxth	r2, r3
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <ReadI2C_MPU+0xf8>)
 800198a:	809a      	strh	r2, [r3, #4]

		if (Accel.x == 0 && Accel.y == 0 && Accel.z == 0)
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <ReadI2C_MPU+0xf4>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d121      	bne.n	80019da <ReadI2C_MPU+0xe6>
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <ReadI2C_MPU+0xf4>)
 8001998:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d11c      	bne.n	80019da <ReadI2C_MPU+0xe6>
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <ReadI2C_MPU+0xf4>)
 80019a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d117      	bne.n	80019da <ReadI2C_MPU+0xe6>
		{
			HAL_I2C_Init(&i2cHandler);
 80019aa:	4811      	ldr	r0, [pc, #68]	; (80019f0 <ReadI2C_MPU+0xfc>)
 80019ac:	f002 ff4c 	bl	8004848 <HAL_I2C_Init>
			MPU6050_Config();
 80019b0:	f7ff feb4 	bl	800171c <MPU6050_Config>
			errtest++;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019bc:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00d      	b.n	80019de <ReadI2C_MPU+0xea>
		}
	}
	else
	{
		HAL_I2C_Init(&i2cHandler);
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <ReadI2C_MPU+0xfc>)
 80019c4:	f002 ff40 	bl	8004848 <HAL_I2C_Init>
		MPU6050_Config();
 80019c8:	f7ff fea8 	bl	800171c <MPU6050_Config>
		errtest++;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <ReadI2C_MPU+0x100>)
 80019d4:	6013      	str	r3, [r2, #0]
		return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e001      	b.n	80019de <ReadI2C_MPU+0xea>
		if (Accel.x == 0 && Accel.y == 0 && Accel.z == 0)
 80019da:	bf00      	nop
	}
	return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000264 	.word	0x20000264
 80019ec:	2000026c 	.word	0x2000026c
 80019f0:	20000204 	.word	0x20000204
 80019f4:	2000028c 	.word	0x2000028c

080019f8 <CalibrateMPU6050>:
	return HAL_OK;
}

//11- Calibrate MPU6050
HAL_StatusTypeDef CalibrateMPU6050(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b091      	sub	sp, #68	; 0x44
 80019fc:	af00      	add	r7, sp, #0
	float accelOffset[3] = {0}, gyroOffset[3] = {0};
 80019fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
	int32_t at[3] = {0}, wt[3] = {0};
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
	uint16_t count = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	countTest = 0;	
 8001a30:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <CalibrateMPU6050+0x168>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<20000; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a3a:	e035      	b.n	8001aa8 <CalibrateMPU6050+0xb0>
	{
		if(ReadI2C_MPU() == HAL_OK)
 8001a3c:	f7ff ff5a 	bl	80018f4 <ReadI2C_MPU>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12d      	bne.n	8001aa2 <CalibrateMPU6050+0xaa>
		{
			at[0] += Accel.x;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <CalibrateMPU6050+0x16c>)
 8001a4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a4e:	4413      	add	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
			at[1] += Accel.y;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <CalibrateMPU6050+0x16c>)
 8001a56:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
			at[2] += (Accel.z - 16384);
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <CalibrateMPU6050+0x16c>)
 8001a62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001a6a:	4413      	add	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
			wt[0] += Gyro.x;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a3d      	ldr	r2, [pc, #244]	; (8001b68 <CalibrateMPU6050+0x170>)
 8001a72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a76:	4413      	add	r3, r2
 8001a78:	607b      	str	r3, [r7, #4]
			wt[1] += Gyro.y;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <CalibrateMPU6050+0x170>)
 8001a7e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001a82:	4413      	add	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
			wt[2] += Gyro.z;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <CalibrateMPU6050+0x170>)
 8001a8a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
			count++;
 8001a92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001a94:	3301      	adds	r3, #1
 8001a96:	87fb      	strh	r3, [r7, #62]	; 0x3e
			countTest++;
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <CalibrateMPU6050+0x168>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <CalibrateMPU6050+0x168>)
 8001aa0:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<20000; i++)
 8001aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aaa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	ddc4      	ble.n	8001a3c <CalibrateMPU6050+0x44>
		}
	}
	if(count < 15000) return HAL_ERROR;
 8001ab2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ab4:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d801      	bhi.n	8001ac0 <CalibrateMPU6050+0xc8>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04b      	b.n	8001b58 <CalibrateMPU6050+0x160>

	for(int i = 0; i < 3; i++){
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac4:	e03c      	b.n	8001b40 <CalibrateMPU6050+0x148>
		// calculate Acc offset
		accelOffset[i] = -(at[i]*1.0000f)/count;
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	3340      	adds	r3, #64	; 0x40
 8001acc:	443b      	add	r3, r7
 8001ace:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f94e 	bl	8000d74 <__aeabi_i2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001ade:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f947 	bl	8000d74 <__aeabi_i2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fa4a 	bl	8000f84 <__aeabi_fdiv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	3340      	adds	r3, #64	; 0x40
 8001afa:	443b      	add	r3, r7
 8001afc:	f843 2c18 	str.w	r2, [r3, #-24]
		// calculate Gyr offset
		gyroOffset[i] = -(wt[i]*1.0000f)/count;
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	3340      	adds	r3, #64	; 0x40
 8001b06:	443b      	add	r3, r7
 8001b08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f931 	bl	8000d74 <__aeabi_i2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001b18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f92a 	bl	8000d74 <__aeabi_i2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4619      	mov	r1, r3
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff fa2d 	bl	8000f84 <__aeabi_fdiv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	3340      	adds	r3, #64	; 0x40
 8001b34:	443b      	add	r3, r7
 8001b36:	f843 2c24 	str.w	r2, [r3, #-36]
	for(int i = 0; i < 3; i++){
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	ddbf      	ble.n	8001ac6 <CalibrateMPU6050+0xce>
	}
	
	Soft_SetOffset(accelOffset, gyroOffset);
 8001b46:	f107 021c 	add.w	r2, r7, #28
 8001b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f80b 	bl	8001b6c <Soft_SetOffset>
	
	return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3744      	adds	r7, #68	; 0x44
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	20000290 	.word	0x20000290
 8001b64:	20000264 	.word	0x20000264
 8001b68:	2000026c 	.word	0x2000026c

08001b6c <Soft_SetOffset>:

//12 - Set offset Soft
void Soft_SetOffset(float accelOffset[3], float gyroOffset[3])
{
 8001b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b70:	b088      	sub	sp, #32
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError;
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbPages = 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = startAddressFlash;
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <Soft_SetOffset+0xbc>)
 8001b86:	617b      	str	r3, [r7, #20]

	HAL_FLASH_Unlock();
 8001b88:	f002 fb3a 	bl	8004200 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001b8c:	f107 0208 	add.w	r2, r7, #8
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fc1a 	bl	80043d0 <HAL_FLASHEx_Erase>
	for (int i = 0; i < 3; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	e038      	b.n	8001c14 <Soft_SetOffset+0xa8>
	{
		accel_reg_bias[i] = accelOffset[i];
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	491f      	ldr	r1, [pc, #124]	; (8001c2c <Soft_SetOffset+0xc0>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressFlash + 4*i, *((uint32_t*)&accel_reg_bias[i]));
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <Soft_SetOffset+0xc4>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <Soft_SetOffset+0xc0>)
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	461c      	mov	r4, r3
 8001bcc:	4615      	mov	r5, r2
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f002 faa4 	bl	8004120 <HAL_FLASH_Program>
		gyr_reg_bias[i] = gyroOffset[i];
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4914      	ldr	r1, [pc, #80]	; (8001c34 <Soft_SetOffset+0xc8>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressFlash + 4*i + 12, *((uint32_t*)&gyr_reg_bias[i]));
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <Soft_SetOffset+0xcc>)
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <Soft_SetOffset+0xc8>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4698      	mov	r8, r3
 8001c02:	4691      	mov	r9, r2
 8001c04:	4642      	mov	r2, r8
 8001c06:	464b      	mov	r3, r9
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f002 fa89 	bl	8004120 <HAL_FLASH_Program>
	for (int i = 0; i < 3; i++)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	ddc3      	ble.n	8001ba2 <Soft_SetOffset+0x36>
	}
	HAL_FLASH_Lock();
 8001c1a:	f002 fb17 	bl	800424c <HAL_FLASH_Lock>
}
 8001c1e:	bf00      	nop
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c28:	0801f820 	.word	0x0801f820
 8001c2c:	20000274 	.word	0x20000274
 8001c30:	02007e08 	.word	0x02007e08
 8001c34:	20000280 	.word	0x20000280
 8001c38:	02007e0b 	.word	0x02007e0b

08001c3c <Read_MPU_Calc>:
	return rs;
}

//15. Read MPU values calculated
HAL_StatusTypeDef Read_MPU_Calc(float* acc, float* gyr)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	if (ReadI2C_MPU() == HAL_OK)
 8001c46:	f7ff fe55 	bl	80018f4 <ReadI2C_MPU>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f040 8096 	bne.w	8001d7e <Read_MPU_Calc+0x142>
	{
		acc[0] = (Accel.x + accel_reg_bias[0]) * accelScalingFactor;
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <Read_MPU_Calc+0x14c>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f88b 	bl	8000d74 <__aeabi_i2f>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <Read_MPU_Calc+0x150>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe ffd0 	bl	8000c0c <__addsf3>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <Read_MPU_Calc+0x154>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f7ff f8d0 	bl	8000e1c <__aeabi_fmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	601a      	str	r2, [r3, #0]
		acc[1] = (Accel.y + accel_reg_bias[1]) * accelScalingFactor;
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <Read_MPU_Calc+0x14c>)
 8001c86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f872 	bl	8000d74 <__aeabi_i2f>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <Read_MPU_Calc+0x150>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7fe ffb7 	bl	8000c0c <__addsf3>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <Read_MPU_Calc+0x154>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	1d1c      	adds	r4, r3, #4
 8001caa:	4611      	mov	r1, r2
 8001cac:	f7ff f8b6 	bl	8000e1c <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	6023      	str	r3, [r4, #0]
		acc[2] = (Accel.z + accel_reg_bias[2]) * accelScalingFactor;
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <Read_MPU_Calc+0x14c>)
 8001cb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f85a 	bl	8000d74 <__aeabi_i2f>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <Read_MPU_Calc+0x150>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f7fe ff9f 	bl	8000c0c <__addsf3>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <Read_MPU_Calc+0x154>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 0408 	add.w	r4, r3, #8
 8001cdc:	4611      	mov	r1, r2
 8001cde:	f7ff f89d 	bl	8000e1c <__aeabi_fmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6023      	str	r3, [r4, #0]
		gyr[0] = (Gyro.x + gyr_reg_bias[0]) * gyroScalingFactor;
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <Read_MPU_Calc+0x158>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f841 	bl	8000d74 <__aeabi_i2f>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <Read_MPU_Calc+0x15c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7fe ff86 	bl	8000c0c <__addsf3>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <Read_MPU_Calc+0x160>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f886 	bl	8000e1c <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	601a      	str	r2, [r3, #0]
		gyr[1] = (Gyro.y + gyr_reg_bias[1]) * gyroScalingFactor;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <Read_MPU_Calc+0x158>)
 8001d1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f828 	bl	8000d74 <__aeabi_i2f>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <Read_MPU_Calc+0x15c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f7fe ff6d 	bl	8000c0c <__addsf3>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4618      	mov	r0, r3
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <Read_MPU_Calc+0x160>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	1d1c      	adds	r4, r3, #4
 8001d3e:	4611      	mov	r1, r2
 8001d40:	f7ff f86c 	bl	8000e1c <__aeabi_fmul>
 8001d44:	4603      	mov	r3, r0
 8001d46:	6023      	str	r3, [r4, #0]
		gyr[2] = (Gyro.z + gyr_reg_bias[2]) * gyroScalingFactor;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <Read_MPU_Calc+0x158>)
 8001d4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f810 	bl	8000d74 <__aeabi_i2f>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <Read_MPU_Calc+0x15c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7fe ff55 	bl	8000c0c <__addsf3>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <Read_MPU_Calc+0x160>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f103 0408 	add.w	r4, r3, #8
 8001d70:	4611      	mov	r1, r2
 8001d72:	f7ff f853 	bl	8000e1c <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	6023      	str	r3, [r4, #0]
		return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <Read_MPU_Calc+0x144>
	}
	return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000264 	.word	0x20000264
 8001d8c:	20000274 	.word	0x20000274
 8001d90:	2000025c 	.word	0x2000025c
 8001d94:	2000026c 	.word	0x2000026c
 8001d98:	20000280 	.word	0x20000280
 8001d9c:	20000260 	.word	0x20000260

08001da0 <Flash_Assign_Param>:
uint16_t *maxRFC;
uint16_t minRFC_default;
uint16_t maxRFC_default;

void Flash_Assign_Param(uint16_t *min_RFC, uint16_t *max_RFC, uint16_t min_RFC_default, uint16_t max_RFC_default)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	4613      	mov	r3, r2
 8001db4:	80bb      	strh	r3, [r7, #4]
	minRFC = min_RFC;
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <Flash_Assign_Param+0x38>)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6013      	str	r3, [r2, #0]
	maxRFC = max_RFC;
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <Flash_Assign_Param+0x3c>)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6013      	str	r3, [r2, #0]
	minRFC_default = min_RFC_default;
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <Flash_Assign_Param+0x40>)
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	8013      	strh	r3, [r2, #0]
	maxRFC_default = max_RFC_default;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <Flash_Assign_Param+0x44>)
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	8013      	strh	r3, [r2, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000294 	.word	0x20000294
 8001ddc:	20000298 	.word	0x20000298
 8001de0:	2000029c 	.word	0x2000029c
 8001de4:	2000029e 	.word	0x2000029e

08001de8 <Flash_Soft_SetOffset>:

void Flash_Soft_SetOffset(int RFC_min, int RFC_max)
{
 8001de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dec:	b088      	sub	sp, #32
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError;
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.PageAddress = startAddressRFC;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <Flash_Soft_SetOffset+0x90>)
 8001e02:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8001e04:	f002 f9fc 	bl	8004200 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fadc 	bl	80043d0 <HAL_FLASHEx_Erase>

	if (RFC_min >= 0)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db10      	blt.n	8001e40 <Flash_Soft_SetOffset+0x58>
	{
		*minRFC = RFC_min;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <Flash_Soft_SetOffset+0x94>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	b292      	uxth	r2, r2
 8001e26:	801a      	strh	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressRFC, *((uint32_t*)minRFC));
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <Flash_Soft_SetOffset+0x94>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4698      	mov	r8, r3
 8001e32:	4691      	mov	r9, r2
 8001e34:	4642      	mov	r2, r8
 8001e36:	464b      	mov	r3, r9
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <Flash_Soft_SetOffset+0x90>)
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f002 f970 	bl	8004120 <HAL_FLASH_Program>
	}

	if(RFC_max >= 0)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db10      	blt.n	8001e68 <Flash_Soft_SetOffset+0x80>
	{
		*maxRFC = RFC_max;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <Flash_Soft_SetOffset+0x98>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	801a      	strh	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressRFC + 4, *((uint32_t*)maxRFC));
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <Flash_Soft_SetOffset+0x98>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	461c      	mov	r4, r3
 8001e5a:	4615      	mov	r5, r2
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	462b      	mov	r3, r5
 8001e60:	4908      	ldr	r1, [pc, #32]	; (8001e84 <Flash_Soft_SetOffset+0x9c>)
 8001e62:	2002      	movs	r0, #2
 8001e64:	f002 f95c 	bl	8004120 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8001e68:	f002 f9f0 	bl	800424c <HAL_FLASH_Lock>
}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e76:	bf00      	nop
 8001e78:	0801f810 	.word	0x0801f810
 8001e7c:	20000294 	.word	0x20000294
 8001e80:	20000298 	.word	0x20000298
 8001e84:	0801f814 	.word	0x0801f814

08001e88 <Flash_Soft_GetOffset>:


void Flash_Soft_GetOffset(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
	uint16_t temp;
	temp = *((uint16_t*)((__IO uint32_t *)(startAddressRFC)));
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <Flash_Soft_GetOffset+0x54>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	80fb      	strh	r3, [r7, #6]
	if (temp>4095) *minRFC = minRFC_default;
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9a:	d305      	bcc.n	8001ea8 <Flash_Soft_GetOffset+0x20>
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <Flash_Soft_GetOffset+0x58>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <Flash_Soft_GetOffset+0x5c>)
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	e003      	b.n	8001eb0 <Flash_Soft_GetOffset+0x28>
	else *minRFC = temp;
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <Flash_Soft_GetOffset+0x58>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	801a      	strh	r2, [r3, #0]

	temp = *((uint16_t*)((__IO uint32_t *)(startAddressRFC + 4)));
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <Flash_Soft_GetOffset+0x60>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	80fb      	strh	r3, [r7, #6]
	if (temp>4095) *maxRFC = maxRFC_default;
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ebc:	d305      	bcc.n	8001eca <Flash_Soft_GetOffset+0x42>
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <Flash_Soft_GetOffset+0x64>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <Flash_Soft_GetOffset+0x68>)
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	801a      	strh	r2, [r3, #0]
	else *maxRFC = temp;
}
 8001ec8:	e003      	b.n	8001ed2 <Flash_Soft_GetOffset+0x4a>
	else *maxRFC = temp;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Flash_Soft_GetOffset+0x64>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	801a      	strh	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	0801f810 	.word	0x0801f810
 8001ee0:	20000294 	.word	0x20000294
 8001ee4:	2000029c 	.word	0x2000029c
 8001ee8:	0801f814 	.word	0x0801f814
 8001eec:	20000298 	.word	0x20000298
 8001ef0:	2000029e 	.word	0x2000029e

08001ef4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_UARTEx_RxEventCallback+0x40>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10f      	bne.n	8001f2a <HAL_UARTEx_RxEventCallback+0x36>
	{
		memset(PcData,0,BUFFER_SIZE);
 8001f0a:	2264      	movs	r2, #100	; 0x64
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	480a      	ldr	r0, [pc, #40]	; (8001f38 <HAL_UARTEx_RxEventCallback+0x44>)
 8001f10:	f006 fab4 	bl	800847c <memset>
		memcpy(PcData,buffUART,Size);
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4908      	ldr	r1, [pc, #32]	; (8001f3c <HAL_UARTEx_RxEventCallback+0x48>)
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <HAL_UARTEx_RxEventCallback+0x44>)
 8001f1c:	f006 faa0 	bl	8008460 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, buffUART, BUFFER_SIZE);
 8001f20:	2264      	movs	r2, #100	; 0x64
 8001f22:	4906      	ldr	r1, [pc, #24]	; (8001f3c <HAL_UARTEx_RxEventCallback+0x48>)
 8001f24:	4806      	ldr	r0, [pc, #24]	; (8001f40 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001f26:	f004 fcf4 	bl	8006912 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40004400 	.word	0x40004400
 8001f38:	20000304 	.word	0x20000304
 8001f3c:	200002a0 	.word	0x200002a0
 8001f40:	20000478 	.word	0x20000478

08001f44 <UARTRXInit>:

void UARTRXInit(void) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, buffUART, BUFFER_SIZE);
 8001f48:	2264      	movs	r2, #100	; 0x64
 8001f4a:	4907      	ldr	r1, [pc, #28]	; (8001f68 <UARTRXInit+0x24>)
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <UARTRXInit+0x28>)
 8001f4e:	f004 fce0 	bl	8006912 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <UARTRXInit+0x2c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <UARTRXInit+0x2c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0204 	bic.w	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200002a0 	.word	0x200002a0
 8001f6c:	20000478 	.word	0x20000478
 8001f70:	200004bc 	.word	0x200004bc

08001f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7a:	f000 fee7 	bl	8002d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f7e:	f000 f825 	bl	8001fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f82:	f000 f98b 	bl	800229c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f86:	f000 f963 	bl	8002250 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f8a:	f000 f87d 	bl	8002088 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f8e:	f000 f8b9 	bl	8002104 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f92:	f000 f8e5 	bl	8002160 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001f96:	f000 f931 	bl	80021fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTRXInit();
 8001f9a:	f7ff ffd3 	bl	8001f44 <UARTRXInit>
  //1. Initialise the MPU6050 module and I2C
  MPU6050_Init(&hi2c1, &myMpuConfig);
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <main+0x54>)
 8001fa4:	f7ff fb4a 	bl	800163c <MPU6050_Init>
  //2. Configure Accel and Gyro parameters
  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	70bb      	strb	r3, [r7, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 8001fac:	2300      	movs	r3, #0
 8001fae:	703b      	strb	r3, [r7, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	707b      	strb	r3, [r7, #1]
  myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8001fb8:	2300      	movs	r3, #0
 8001fba:	713b      	strb	r3, [r7, #4]
  MPU6050_Config();
 8001fbc:	f7ff fbae 	bl	800171c <MPU6050_Config>

  myMain();
 8001fc0:	f000 fa4a 	bl	8002458 <myMain>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <main+0x50>
 8001fc6:	bf00      	nop
 8001fc8:	200003dc 	.word	0x200003dc

08001fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b096      	sub	sp, #88	; 0x58
 8001fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd6:	2228      	movs	r2, #40	; 0x28
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f006 fa4e 	bl	800847c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002000:	2301      	movs	r3, #1
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800200e:	2301      	movs	r3, #1
 8002010:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002012:	2302      	movs	r3, #2
 8002014:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800201c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fbdc 	bl	80057e4 <HAL_RCC_OscConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002032:	f000 f961 	bl	80022f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002036:	230f      	movs	r3, #15
 8002038:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203a:	2302      	movs	r3, #2
 800203c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	2102      	movs	r1, #2
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fe48 	bl	8005ce8 <HAL_RCC_ClockConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800205e:	f000 f94b 	bl	80022f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002062:	2302      	movs	r3, #2
 8002064:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4618      	mov	r0, r3
 8002070:	f003 ffd2 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800207a:	f000 f93d 	bl	80022f8 <Error_Handler>
  }
}
 800207e:	bf00      	nop
 8002080:	3758      	adds	r7, #88	; 0x58
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MX_ADC1_Init+0x74>)
 800209a:	4a19      	ldr	r2, [pc, #100]	; (8002100 <MX_ADC1_Init+0x78>)
 800209c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <MX_ADC1_Init+0x74>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <MX_ADC1_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <MX_ADC1_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <MX_ADC1_Init+0x74>)
 80020b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <MX_ADC1_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MX_ADC1_Init+0x74>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_ADC1_Init+0x74>)
 80020c6:	f000 fec7 	bl	8002e58 <HAL_ADC_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80020d0:	f000 f912 	bl	80022f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020d8:	2301      	movs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <MX_ADC1_Init+0x74>)
 80020e6:	f001 f891 	bl	800320c <HAL_ADC_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80020f0:	f000 f902 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000368 	.word	0x20000368
 8002100:	40012400 	.word	0x40012400

08002104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_I2C1_Init+0x50>)
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <MX_I2C1_Init+0x54>)
 800210c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_I2C1_Init+0x50>)
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_I2C1_Init+0x58>)
 8002112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_I2C1_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_I2C1_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_I2C1_Init+0x50>)
 8002122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <MX_I2C1_Init+0x50>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_I2C1_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <MX_I2C1_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_I2C1_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_I2C1_Init+0x50>)
 8002142:	f002 fb81 	bl	8004848 <HAL_I2C_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800214c:	f000 f8d4 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200003dc 	.word	0x200003dc
 8002158:	40005400 	.word	0x40005400
 800215c:	00061a80 	.word	0x00061a80

08002160 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002166:	f107 0308 	add.w	r3, r7, #8
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	463b      	mov	r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <MX_TIM2_Init+0x98>)
 800217e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002182:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_TIM2_Init+0x98>)
 8002186:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800218a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_TIM2_Init+0x98>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <MX_TIM2_Init+0x98>)
 8002194:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002198:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_TIM2_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_TIM2_Init+0x98>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021a6:	4814      	ldr	r0, [pc, #80]	; (80021f8 <MX_TIM2_Init+0x98>)
 80021a8:	f003 ffec 	bl	8006184 <HAL_TIM_Base_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021b2:	f000 f8a1 	bl	80022f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	4619      	mov	r1, r3
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_TIM2_Init+0x98>)
 80021c4:	f004 f886 	bl	80062d4 <HAL_TIM_ConfigClockSource>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021ce:	f000 f893 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <MX_TIM2_Init+0x98>)
 80021e0:	f004 fa4c 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021ea:	f000 f885 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000430 	.word	0x20000430

080021fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <MX_USART1_UART_Init+0x50>)
 8002204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_USART1_UART_Init+0x4c>)
 8002234:	f004 fa8e 	bl	8006754 <HAL_UART_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800223e:	f000 f85b 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000478 	.word	0x20000478
 800224c:	40013800 	.word	0x40013800

08002250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <MX_DMA_Init+0x48>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <MX_DMA_Init+0x48>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6153      	str	r3, [r2, #20]
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <MX_DMA_Init+0x48>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	200b      	movs	r0, #11
 8002274:	f001 fa9b 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002278:	200b      	movs	r0, #11
 800227a:	f001 fab4 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	200f      	movs	r0, #15
 8002284:	f001 fa93 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002288:	200f      	movs	r0, #15
 800228a:	f001 faac 	bl	80037e6 <HAL_NVIC_EnableIRQ>

}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000

0800229c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6193      	str	r3, [r2, #24]
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6193      	str	r3, [r2, #24]
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <MX_GPIO_Init+0x58>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000

080022f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002300:	e7fe      	b.n	8002300 <Error_Handler+0x8>
	...

08002304 <HAL_ADC_ConvCpltCallback>:
uint16_t MaxRFC = 3650;
uint16_t RangeADC;
float RFCAngle = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
	RFCAdcValue = RFCKal.update(RFCAdcValue);
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_ADC_ConvCpltCallback+0x58>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fd2a 	bl	8000d6c <__aeabi_ui2f>
 8002318:	4603      	mov	r3, r0
 800231a:	4619      	mov	r1, r3
 800231c:	4810      	ldr	r0, [pc, #64]	; (8002360 <HAL_ADC_ConvCpltCallback+0x5c>)
 800231e:	f7fe ffed 	bl	80012fc <_ZN6Kalman6updateEf>
 8002322:	4603      	mov	r3, r0
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe ff7b 	bl	8001220 <__aeabi_f2uiz>
 800232a:	4603      	mov	r3, r0
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_ADC_ConvCpltCallback+0x58>)
 8002330:	801a      	strh	r2, [r3, #0]
	RFCAngle = RFCAdcValue*RFC_Factor;
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_ADC_ConvCpltCallback+0x58>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fd1b 	bl	8000d74 <__aeabi_i2f>
 800233e:	4602      	mov	r2, r0
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_ADC_ConvCpltCallback+0x60>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f7fe fd68 	bl	8000e1c <__aeabi_fmul>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_ADC_ConvCpltCallback+0x64>)
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	200005bc 	.word	0x200005bc
 8002360:	20000530 	.word	0x20000530
 8002364:	200005c0 	.word	0x200005c0
 8002368:	200005c8 	.word	0x200005c8

0800236c <_Z9RFC_Calibv>:

void RFC_Calib()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
	sprintf(tx2pcData,">.Bat dau hieu chinh RFC\r");
 8002372:	492d      	ldr	r1, [pc, #180]	; (8002428 <_Z9RFC_Calibv+0xbc>)
 8002374:	482d      	ldr	r0, [pc, #180]	; (800242c <_Z9RFC_Calibv+0xc0>)
 8002376:	f006 fce9 	bl	8008d4c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 800237a:	482c      	ldr	r0, [pc, #176]	; (800242c <_Z9RFC_Calibv+0xc0>)
 800237c:	f7fd ff54 	bl	8000228 <strlen>
 8002380:	4603      	mov	r3, r0
 8002382:	b29a      	uxth	r2, r3
 8002384:	2364      	movs	r3, #100	; 0x64
 8002386:	4929      	ldr	r1, [pc, #164]	; (800242c <_Z9RFC_Calibv+0xc0>)
 8002388:	4829      	ldr	r0, [pc, #164]	; (8002430 <_Z9RFC_Calibv+0xc4>)
 800238a:	f004 fa30 	bl	80067ee <HAL_UART_Transmit>
	while(1)
	{
		if(strstr((char*)PcData,"RFCCE"))
 800238e:	4929      	ldr	r1, [pc, #164]	; (8002434 <_Z9RFC_Calibv+0xc8>)
 8002390:	4829      	ldr	r0, [pc, #164]	; (8002438 <_Z9RFC_Calibv+0xcc>)
 8002392:	f006 fcfb 	bl	8008d8c <strstr>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d027      	beq.n	80023ec <_Z9RFC_Calibv+0x80>
 800239c:	4b26      	ldr	r3, [pc, #152]	; (8002438 <_Z9RFC_Calibv+0xcc>)
 800239e:	f8d3 3005 	ldr.w	r3, [r3, #5]
		{
			char str[5];
			memcpy(str,&PcData[5],4);
 80023a2:	603b      	str	r3, [r7, #0]
			MinRFC = atoi(str);
 80023a4:	463b      	mov	r3, r7
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 f82c 	bl	8008404 <atoi>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <_Z9RFC_Calibv+0xd0>)
 80023b2:	801a      	strh	r2, [r3, #0]
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <_Z9RFC_Calibv+0xcc>)
 80023b6:	f8d3 3009 	ldr.w	r3, [r3, #9]
			memcpy(str,&PcData[9],4);
 80023ba:	603b      	str	r3, [r7, #0]
			MaxRFC = atoi(str);
 80023bc:	463b      	mov	r3, r7
 80023be:	4618      	mov	r0, r3
 80023c0:	f006 f820 	bl	8008404 <atoi>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <_Z9RFC_Calibv+0xd4>)
 80023ca:	801a      	strh	r2, [r3, #0]
			break;
 80023cc:	bf00      	nop
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
		sprintf(tx2pcData,">%d\r",RFCAdcValue);
		HAL_UART_Transmit(&huart1, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
		HAL_Delay(3);
	}
	sprintf(tx2pcData,">.Hieu chinh RFC xong\r");
 80023ce:	491d      	ldr	r1, [pc, #116]	; (8002444 <_Z9RFC_Calibv+0xd8>)
 80023d0:	4816      	ldr	r0, [pc, #88]	; (800242c <_Z9RFC_Calibv+0xc0>)
 80023d2:	f006 fcbb 	bl	8008d4c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 80023d6:	4815      	ldr	r0, [pc, #84]	; (800242c <_Z9RFC_Calibv+0xc0>)
 80023d8:	f7fd ff26 	bl	8000228 <strlen>
 80023dc:	4603      	mov	r3, r0
 80023de:	b29a      	uxth	r2, r3
 80023e0:	2364      	movs	r3, #100	; 0x64
 80023e2:	4912      	ldr	r1, [pc, #72]	; (800242c <_Z9RFC_Calibv+0xc0>)
 80023e4:	4812      	ldr	r0, [pc, #72]	; (8002430 <_Z9RFC_Calibv+0xc4>)
 80023e6:	f004 fa02 	bl	80067ee <HAL_UART_Transmit>
}
 80023ea:	e01a      	b.n	8002422 <_Z9RFC_Calibv+0xb6>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 80023ec:	2201      	movs	r2, #1
 80023ee:	4916      	ldr	r1, [pc, #88]	; (8002448 <_Z9RFC_Calibv+0xdc>)
 80023f0:	4816      	ldr	r0, [pc, #88]	; (800244c <_Z9RFC_Calibv+0xe0>)
 80023f2:	f000 fe1b 	bl	800302c <HAL_ADC_Start_DMA>
		sprintf(tx2pcData,">%d\r",RFCAdcValue);
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <_Z9RFC_Calibv+0xdc>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	4914      	ldr	r1, [pc, #80]	; (8002450 <_Z9RFC_Calibv+0xe4>)
 8002400:	480a      	ldr	r0, [pc, #40]	; (800242c <_Z9RFC_Calibv+0xc0>)
 8002402:	f006 fca3 	bl	8008d4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 8002406:	4809      	ldr	r0, [pc, #36]	; (800242c <_Z9RFC_Calibv+0xc0>)
 8002408:	f7fd ff0e 	bl	8000228 <strlen>
 800240c:	4603      	mov	r3, r0
 800240e:	b29a      	uxth	r2, r3
 8002410:	2364      	movs	r3, #100	; 0x64
 8002412:	4906      	ldr	r1, [pc, #24]	; (800242c <_Z9RFC_Calibv+0xc0>)
 8002414:	4806      	ldr	r0, [pc, #24]	; (8002430 <_Z9RFC_Calibv+0xc4>)
 8002416:	f004 f9ea 	bl	80067ee <HAL_UART_Transmit>
		HAL_Delay(3);
 800241a:	2003      	movs	r0, #3
 800241c:	f000 fcf8 	bl	8002e10 <HAL_Delay>
	}
 8002420:	e7b5      	b.n	800238e <_Z9RFC_Calibv+0x22>
}
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	0800b378 	.word	0x0800b378
 800242c:	20000540 	.word	0x20000540
 8002430:	20000478 	.word	0x20000478
 8002434:	0800b394 	.word	0x0800b394
 8002438:	20000304 	.word	0x20000304
 800243c:	20000004 	.word	0x20000004
 8002440:	20000006 	.word	0x20000006
 8002444:	0800b39c 	.word	0x0800b39c
 8002448:	200005bc 	.word	0x200005bc
 800244c:	20000368 	.word	0x20000368
 8002450:	0800b3b4 	.word	0x0800b3b4
 8002454:	00000000 	.word	0x00000000

08002458 <myMain>:

int myMain(void)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b092      	sub	sp, #72	; 0x48
 800245e:	af08      	add	r7, sp, #32
	Flash_Assign_Param(&MinRFC, &MaxRFC, MinRFC, MaxRFC);
 8002460:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <myMain+0x1a0>)
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	4b65      	ldr	r3, [pc, #404]	; (80025fc <myMain+0x1a4>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	4964      	ldr	r1, [pc, #400]	; (80025fc <myMain+0x1a4>)
 800246a:	4863      	ldr	r0, [pc, #396]	; (80025f8 <myMain+0x1a0>)
 800246c:	f7ff fc98 	bl	8001da0 <Flash_Assign_Param>
	// Init values
	Flash_Soft_GetOffset();
 8002470:	f7ff fd0a 	bl	8001e88 <Flash_Soft_GetOffset>
	RangeADC = MaxRFC - MinRFC;
 8002474:	4b61      	ldr	r3, [pc, #388]	; (80025fc <myMain+0x1a4>)
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <myMain+0x1a0>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b5f      	ldr	r3, [pc, #380]	; (8002600 <myMain+0x1a8>)
 8002482:	801a      	strh	r2, [r3, #0]
	RFC_Factor = 360.0f/RangeADC;
 8002484:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <myMain+0x1a8>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc73 	bl	8000d74 <__aeabi_i2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4619      	mov	r1, r3
 8002492:	485c      	ldr	r0, [pc, #368]	; (8002604 <myMain+0x1ac>)
 8002494:	f7fe fd76 	bl	8000f84 <__aeabi_fdiv>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <myMain+0x1b0>)
 800249e:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 80024a0:	2201      	movs	r2, #1
 80024a2:	495a      	ldr	r1, [pc, #360]	; (800260c <myMain+0x1b4>)
 80024a4:	485a      	ldr	r0, [pc, #360]	; (8002610 <myMain+0x1b8>)
 80024a6:	f000 fdc1 	bl	800302c <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim2);
 80024aa:	485a      	ldr	r0, [pc, #360]	; (8002614 <myMain+0x1bc>)
 80024ac:	f003 feba 	bl	8006224 <HAL_TIM_Base_Start>
	uint32_t t_old = __HAL_TIM_GetCounter(&htim2);
 80024b0:	4b58      	ldr	r3, [pc, #352]	; (8002614 <myMain+0x1bc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t init_loops = 50;
 80024b8:	2332      	movs	r3, #50	; 0x32
 80024ba:	83fb      	strh	r3, [r7, #30]
	uint16_t num_loop = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	847b      	strh	r3, [r7, #34]	; 0x22
	Roll_IMU = 0;
 80024c0:	4b55      	ldr	r3, [pc, #340]	; (8002618 <myMain+0x1c0>)
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
	uint8_t cnt_trans = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while (1)
	{
		cnt_trans++;
 80024ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80024d2:	3301      	adds	r3, #1
 80024d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (strstr((char*) PcData, "IMUCS"))
 80024d8:	4950      	ldr	r1, [pc, #320]	; (800261c <myMain+0x1c4>)
 80024da:	4851      	ldr	r0, [pc, #324]	; (8002620 <myMain+0x1c8>)
 80024dc:	f006 fc56 	bl	8008d8c <strstr>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d022      	beq.n	800252c <myMain+0xd4>
		{
			sprintf(tx2pcData, ">Bat dau hieu chinh MPU6050\r");
 80024e6:	494f      	ldr	r1, [pc, #316]	; (8002624 <myMain+0x1cc>)
 80024e8:	484f      	ldr	r0, [pc, #316]	; (8002628 <myMain+0x1d0>)
 80024ea:	f006 fc2f 	bl	8008d4c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 80024ee:	484e      	ldr	r0, [pc, #312]	; (8002628 <myMain+0x1d0>)
 80024f0:	f7fd fe9a 	bl	8000228 <strlen>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	2364      	movs	r3, #100	; 0x64
 80024fa:	494b      	ldr	r1, [pc, #300]	; (8002628 <myMain+0x1d0>)
 80024fc:	484b      	ldr	r0, [pc, #300]	; (800262c <myMain+0x1d4>)
 80024fe:	f004 f976 	bl	80067ee <HAL_UART_Transmit>
			CalibrateMPU6050();
 8002502:	f7ff fa79 	bl	80019f8 <CalibrateMPU6050>
			memset(PcData, 0, BUFFER_SIZE);
 8002506:	2264      	movs	r2, #100	; 0x64
 8002508:	2100      	movs	r1, #0
 800250a:	4845      	ldr	r0, [pc, #276]	; (8002620 <myMain+0x1c8>)
 800250c:	f005 ffb6 	bl	800847c <memset>
			sprintf(tx2pcData, ">Hieu chinh xong\r");
 8002510:	4947      	ldr	r1, [pc, #284]	; (8002630 <myMain+0x1d8>)
 8002512:	4845      	ldr	r0, [pc, #276]	; (8002628 <myMain+0x1d0>)
 8002514:	f006 fc1a 	bl	8008d4c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 8002518:	4843      	ldr	r0, [pc, #268]	; (8002628 <myMain+0x1d0>)
 800251a:	f7fd fe85 	bl	8000228 <strlen>
 800251e:	4603      	mov	r3, r0
 8002520:	b29a      	uxth	r2, r3
 8002522:	2364      	movs	r3, #100	; 0x64
 8002524:	4940      	ldr	r1, [pc, #256]	; (8002628 <myMain+0x1d0>)
 8002526:	4841      	ldr	r0, [pc, #260]	; (800262c <myMain+0x1d4>)
 8002528:	f004 f961 	bl	80067ee <HAL_UART_Transmit>
		}
		if (strstr((char*) PcData, "RFCCS"))
 800252c:	4941      	ldr	r1, [pc, #260]	; (8002634 <myMain+0x1dc>)
 800252e:	483c      	ldr	r0, [pc, #240]	; (8002620 <myMain+0x1c8>)
 8002530:	f006 fc2c 	bl	8008d8c <strstr>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d025      	beq.n	8002586 <myMain+0x12e>
		{
			RFC_Calib();
 800253a:	f7ff ff17 	bl	800236c <_Z9RFC_Calibv>
			memset(PcData, 0, BUFFER_SIZE);
 800253e:	2264      	movs	r2, #100	; 0x64
 8002540:	2100      	movs	r1, #0
 8002542:	4837      	ldr	r0, [pc, #220]	; (8002620 <myMain+0x1c8>)
 8002544:	f005 ff9a 	bl	800847c <memset>
			Flash_Soft_SetOffset(MinRFC, MaxRFC);
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <myMain+0x1a0>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <myMain+0x1a4>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7ff fc47 	bl	8001de8 <Flash_Soft_SetOffset>
			RangeADC = MaxRFC - MinRFC;
 800255a:	4b28      	ldr	r3, [pc, #160]	; (80025fc <myMain+0x1a4>)
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <myMain+0x1a0>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b26      	ldr	r3, [pc, #152]	; (8002600 <myMain+0x1a8>)
 8002568:	801a      	strh	r2, [r3, #0]
			RFC_Factor = 360.0f / RangeADC;
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <myMain+0x1a8>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fc00 	bl	8000d74 <__aeabi_i2f>
 8002574:	4603      	mov	r3, r0
 8002576:	4619      	mov	r1, r3
 8002578:	4822      	ldr	r0, [pc, #136]	; (8002604 <myMain+0x1ac>)
 800257a:	f7fe fd03 	bl	8000f84 <__aeabi_fdiv>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <myMain+0x1b0>)
 8002584:	601a      	str	r2, [r3, #0]
		}

		if (Read_MPU_Calc(acc, gyr) != HAL_OK)
 8002586:	492c      	ldr	r1, [pc, #176]	; (8002638 <myMain+0x1e0>)
 8002588:	482c      	ldr	r0, [pc, #176]	; (800263c <myMain+0x1e4>)
 800258a:	f7ff fb57 	bl	8001c3c <Read_MPU_Calc>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 80ea 	bne.w	8002774 <myMain+0x31c>
			continue;

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 80025a0:	2201      	movs	r2, #1
 80025a2:	491a      	ldr	r1, [pc, #104]	; (800260c <myMain+0x1b4>)
 80025a4:	481a      	ldr	r0, [pc, #104]	; (8002610 <myMain+0x1b8>)
 80025a6:	f000 fd41 	bl	800302c <HAL_ADC_Start_DMA>

		float wz = gyr[2];
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <myMain+0x1e0>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
		float gx = acc[1];
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <myMain+0x1e4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	617b      	str	r3, [r7, #20]
		float gy = -acc[0];
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <myMain+0x1e4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025be:	613b      	str	r3, [r7, #16]
		if (num_loop < init_loops)
 80025c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80025c2:	8bfb      	ldrh	r3, [r7, #30]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d23b      	bcs.n	8002640 <myMain+0x1e8>
		{
			Roll_IMU += atan2(gy, gx);
 80025c8:	6979      	ldr	r1, [r7, #20]
 80025ca:	6938      	ldr	r0, [r7, #16]
 80025cc:	f7fe fe48 	bl	8001260 <_ZSt5atan2ff>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <myMain+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7fe fb17 	bl	8000c0c <__addsf3>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <myMain+0x1c0>)
 80025e4:	601a      	str	r2, [r3, #0]
			t_old = __HAL_TIM_GetCounter(&htim2);
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <myMain+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
			num_loop++;
 80025ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025f0:	3301      	adds	r3, #1
 80025f2:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 80025f4:	e0bf      	b.n	8002776 <myMain+0x31e>
 80025f6:	bf00      	nop
 80025f8:	20000004 	.word	0x20000004
 80025fc:	20000006 	.word	0x20000006
 8002600:	200005c4 	.word	0x200005c4
 8002604:	43b40000 	.word	0x43b40000
 8002608:	200005c0 	.word	0x200005c0
 800260c:	200005bc 	.word	0x200005bc
 8002610:	20000368 	.word	0x20000368
 8002614:	20000430 	.word	0x20000430
 8002618:	20000504 	.word	0x20000504
 800261c:	0800b3bc 	.word	0x0800b3bc
 8002620:	20000304 	.word	0x20000304
 8002624:	0800b3c4 	.word	0x0800b3c4
 8002628:	20000540 	.word	0x20000540
 800262c:	20000478 	.word	0x20000478
 8002630:	0800b3e4 	.word	0x0800b3e4
 8002634:	0800b3f8 	.word	0x0800b3f8
 8002638:	200005b0 	.word	0x200005b0
 800263c:	200005a4 	.word	0x200005a4
		}
		else if (num_loop == init_loops)
 8002640:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002642:	8bfb      	ldrh	r3, [r7, #30]
 8002644:	429a      	cmp	r2, r3
 8002646:	d117      	bne.n	8002678 <myMain+0x220>
		{
			Roll_IMU /= init_loops;
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <myMain+0x328>)
 800264a:	681c      	ldr	r4, [r3, #0]
 800264c:	8bfb      	ldrh	r3, [r7, #30]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb90 	bl	8000d74 <__aeabi_i2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4619      	mov	r1, r3
 8002658:	4620      	mov	r0, r4
 800265a:	f7fe fc93 	bl	8000f84 <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <myMain+0x328>)
 8002664:	601a      	str	r2, [r3, #0]
			Filter.init(Roll_IMU);
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <myMain+0x328>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4619      	mov	r1, r3
 800266c:	4845      	ldr	r0, [pc, #276]	; (8002784 <myMain+0x32c>)
 800266e:	f7fe fead 	bl	80013cc <_ZN10GradFilter4initEf>
			num_loop++;
 8002672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002674:	3301      	adds	r3, #1
 8002676:	847b      	strh	r3, [r7, #34]	; 0x22
		}

		uint32_t t_cur = __HAL_TIM_GetCounter(&htim2);
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <myMain+0x330>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	60fb      	str	r3, [r7, #12]
		T = (t_cur - t_old) * 0.000001;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ff18 	bl	80004bc <__aeabi_ui2d>
 800268c:	a33a      	add	r3, pc, #232	; (adr r3, 8002778 <myMain+0x320>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd ff8d 	bl	80005b0 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f7fe fa5f 	bl	8000b60 <__aeabi_d2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a39      	ldr	r2, [pc, #228]	; (800278c <myMain+0x334>)
 80026a6:	6013      	str	r3, [r2, #0]
		t_old = t_cur;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24

		Roll_IMU = Filter.update(wz, gx, gy, T);
 80026ac:	4b37      	ldr	r3, [pc, #220]	; (800278c <myMain+0x334>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	4832      	ldr	r0, [pc, #200]	; (8002784 <myMain+0x32c>)
 80026ba:	f7fe fe95 	bl	80013e8 <_ZN10GradFilter6updateEffff>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <myMain+0x328>)
 80026c2:	6013      	str	r3, [r2, #0]
		Roll_T = Roll_IMU*(180 / PI) - RFCAngle;
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <myMain+0x338>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4832      	ldr	r0, [pc, #200]	; (8002794 <myMain+0x33c>)
 80026cc:	f7fe fc5a 	bl	8000f84 <__aeabi_fdiv>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <myMain+0x328>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f7fe fb9e 	bl	8000e1c <__aeabi_fmul>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <myMain+0x340>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7fe fa8c 	bl	8000c08 <__aeabi_fsub>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b29      	ldr	r3, [pc, #164]	; (800279c <myMain+0x344>)
 80026f6:	601a      	str	r2, [r3, #0]
		if(cnt_trans >= 1)
 80026f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f43f aee6 	beq.w	80024ce <myMain+0x76>
		{
			cnt_trans = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			sprintf(tx2pcData, ">%.4f|%.4f|%.4f|%.4f|%.4f\r\n", Roll_T, wz, gx, gy, T);
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <myMain+0x344>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fef7 	bl	8000500 <__aeabi_f2d>
 8002712:	e9c7 0100 	strd	r0, r1, [r7]
 8002716:	69b8      	ldr	r0, [r7, #24]
 8002718:	f7fd fef2 	bl	8000500 <__aeabi_f2d>
 800271c:	4604      	mov	r4, r0
 800271e:	460d      	mov	r5, r1
 8002720:	6978      	ldr	r0, [r7, #20]
 8002722:	f7fd feed 	bl	8000500 <__aeabi_f2d>
 8002726:	4680      	mov	r8, r0
 8002728:	4689      	mov	r9, r1
 800272a:	6938      	ldr	r0, [r7, #16]
 800272c:	f7fd fee8 	bl	8000500 <__aeabi_f2d>
 8002730:	4682      	mov	sl, r0
 8002732:	468b      	mov	fp, r1
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <myMain+0x334>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd fee1 	bl	8000500 <__aeabi_f2d>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002746:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800274a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800274e:	e9cd 4500 	strd	r4, r5, [sp]
 8002752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002756:	4912      	ldr	r1, [pc, #72]	; (80027a0 <myMain+0x348>)
 8002758:	4812      	ldr	r0, [pc, #72]	; (80027a4 <myMain+0x34c>)
 800275a:	f006 faf7 	bl	8008d4c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 800275e:	4811      	ldr	r0, [pc, #68]	; (80027a4 <myMain+0x34c>)
 8002760:	f7fd fd62 	bl	8000228 <strlen>
 8002764:	4603      	mov	r3, r0
 8002766:	b29a      	uxth	r2, r3
 8002768:	2364      	movs	r3, #100	; 0x64
 800276a:	490e      	ldr	r1, [pc, #56]	; (80027a4 <myMain+0x34c>)
 800276c:	480e      	ldr	r0, [pc, #56]	; (80027a8 <myMain+0x350>)
 800276e:	f004 f83e 	bl	80067ee <HAL_UART_Transmit>
 8002772:	e6ac      	b.n	80024ce <myMain+0x76>
			continue;
 8002774:	bf00      	nop
		}
	}
 8002776:	e6aa      	b.n	80024ce <myMain+0x76>
 8002778:	a0b5ed8d 	.word	0xa0b5ed8d
 800277c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002780:	20000504 	.word	0x20000504
 8002784:	2000050c 	.word	0x2000050c
 8002788:	20000430 	.word	0x20000430
 800278c:	20000500 	.word	0x20000500
 8002790:	20000000 	.word	0x20000000
 8002794:	43340000 	.word	0x43340000
 8002798:	200005c8 	.word	0x200005c8
 800279c:	20000508 	.word	0x20000508
 80027a0:	0800b400 	.word	0x0800b400
 80027a4:	20000540 	.word	0x20000540
 80027a8:	20000478 	.word	0x20000478

080027ac <_Z41__static_initialization_and_destruction_0ii>:
}
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d111      	bne.n	80027e0 <_Z41__static_initialization_and_destruction_0ii+0x34>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10c      	bne.n	80027e0 <_Z41__static_initialization_and_destruction_0ii+0x34>
GradFilter Filter(15,1,-1);
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027ce:	4906      	ldr	r1, [pc, #24]	; (80027e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80027d0:	4806      	ldr	r0, [pc, #24]	; (80027ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80027d2:	f7fe fdd9 	bl	8001388 <_ZN10GradFilterC1Effi>
Kalman RFCKal(0);
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80027dc:	f7fe fd72 	bl	80012c4 <_ZN6KalmanC1Ef>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	41700000 	.word	0x41700000
 80027ec:	2000050c 	.word	0x2000050c
 80027f0:	20000530 	.word	0x20000530

080027f4 <_GLOBAL__sub_I_T>:
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff ffd5 	bl	80027ac <_Z41__static_initialization_and_destruction_0ii>
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_MspInit+0x5c>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_MspInit+0x5c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6193      	str	r3, [r2, #24]
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_MspInit+0x5c>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_MspInit+0x5c>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_MspInit+0x5c>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_MspInit+0x5c>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_MspInit+0x60>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_MspInit+0x60>)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40021000 	.word	0x40021000
 8002864:	40010000 	.word	0x40010000

08002868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a28      	ldr	r2, [pc, #160]	; (8002924 <HAL_ADC_MspInit+0xbc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d149      	bne.n	800291c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_ADC_MspInit+0xc0>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a26      	ldr	r2, [pc, #152]	; (8002928 <HAL_ADC_MspInit+0xc0>)
 800288e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_ADC_MspInit+0xc0>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_ADC_MspInit+0xc0>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_ADC_MspInit+0xc0>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_ADC_MspInit+0xc0>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028b8:	2302      	movs	r3, #2
 80028ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028bc:	2303      	movs	r3, #3
 80028be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4619      	mov	r1, r3
 80028c6:	4819      	ldr	r0, [pc, #100]	; (800292c <HAL_ADC_MspInit+0xc4>)
 80028c8:	f001 fe2a 	bl	8004520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_ADC_MspInit+0xcc>)
 80028d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028f6:	2220      	movs	r2, #32
 80028f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002900:	480b      	ldr	r0, [pc, #44]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 8002902:	f000 ff8b 	bl	800381c <HAL_DMA_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800290c:	f7ff fcf4 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a07      	ldr	r2, [pc, #28]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 8002914:	621a      	str	r2, [r3, #32]
 8002916:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_ADC_MspInit+0xc8>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40012400 	.word	0x40012400
 8002928:	40021000 	.word	0x40021000
 800292c:	40010800 	.word	0x40010800
 8002930:	20000398 	.word	0x20000398
 8002934:	40020008 	.word	0x40020008

08002938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_I2C_MspInit+0x70>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d123      	bne.n	80029a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_I2C_MspInit+0x74>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <HAL_I2C_MspInit+0x74>)
 800295e:	f043 0308 	orr.w	r3, r3, #8
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_I2C_MspInit+0x74>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002970:	23c0      	movs	r3, #192	; 0xc0
 8002972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002974:	2312      	movs	r3, #18
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	4619      	mov	r1, r3
 8002982:	480b      	ldr	r0, [pc, #44]	; (80029b0 <HAL_I2C_MspInit+0x78>)
 8002984:	f001 fdcc 	bl	8004520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_I2C_MspInit+0x74>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <HAL_I2C_MspInit+0x74>)
 800298e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002992:	61d3      	str	r3, [r2, #28]
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_I2C_MspInit+0x74>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40005400 	.word	0x40005400
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010c00 	.word	0x40010c00

080029b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d10b      	bne.n	80029de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_TIM_Base_MspInit+0x34>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <HAL_TIM_Base_MspInit+0x34>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	61d3      	str	r3, [r2, #28]
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_TIM_Base_MspInit+0x34>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a33      	ldr	r2, [pc, #204]	; (8002ad4 <HAL_UART_MspInit+0xe8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d15f      	bne.n	8002acc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0c:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_UART_MspInit+0xec>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	4a31      	ldr	r2, [pc, #196]	; (8002ad8 <HAL_UART_MspInit+0xec>)
 8002a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a16:	6193      	str	r3, [r2, #24]
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_UART_MspInit+0xec>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_UART_MspInit+0xec>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <HAL_UART_MspInit+0xec>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_UART_MspInit+0xec>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4822      	ldr	r0, [pc, #136]	; (8002adc <HAL_UART_MspInit+0xf0>)
 8002a52:	f001 fd65 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4619      	mov	r1, r3
 8002a6a:	481c      	ldr	r0, [pc, #112]	; (8002adc <HAL_UART_MspInit+0xf0>)
 8002a6c:	f001 fd58 	bl	8004520 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_UART_MspInit+0xf8>)
 8002a74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002aa0:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002aa2:	f000 febb 	bl	800381c <HAL_DMA_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002aac:	f7ff fc24 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_UART_MspInit+0xf4>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2025      	movs	r0, #37	; 0x25
 8002ac2:	f000 fe74 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ac6:	2025      	movs	r0, #37	; 0x25
 8002ac8:	f000 fe8d 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002acc:	bf00      	nop
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40010800 	.word	0x40010800
 8002ae0:	200004bc 	.word	0x200004bc
 8002ae4:	40020058 	.word	0x40020058

08002ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <NMI_Handler+0x4>

08002aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <HardFault_Handler+0x4>

08002af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <MemManage_Handler+0x4>

08002afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <BusFault_Handler+0x4>

08002b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <UsageFault_Handler+0x4>

08002b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2e:	f000 f953 	bl	8002dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <DMA1_Channel1_IRQHandler+0x10>)
 8002b3e:	f001 f885 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000398 	.word	0x20000398

08002b4c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <DMA1_Channel5_IRQHandler+0x10>)
 8002b52:	f001 f87b 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200004bc 	.word	0x200004bc

08002b60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <USART1_IRQHandler+0x10>)
 8002b66:	f003 ff23 	bl	80069b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000478 	.word	0x20000478

08002b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
	return 1;
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <_kill>:

int _kill(int pid, int sig)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b8c:	f005 fc3e 	bl	800840c <__errno>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2216      	movs	r2, #22
 8002b94:	601a      	str	r2, [r3, #0]
	return -1;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_exit>:

void _exit (int status)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002baa:	f04f 31ff 	mov.w	r1, #4294967295
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffe7 	bl	8002b82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bb4:	e7fe      	b.n	8002bb4 <_exit+0x12>

08002bb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e00a      	b.n	8002bde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bc8:	f3af 8000 	nop.w
 8002bcc:	4601      	mov	r1, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	60ba      	str	r2, [r7, #8]
 8002bd4:	b2ca      	uxtb	r2, r1
 8002bd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dbf0      	blt.n	8002bc8 <_read+0x12>
	}

return len;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e009      	b.n	8002c16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	60ba      	str	r2, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbf1      	blt.n	8002c02 <_write+0x12>
	}
	return len;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_close>:

int _close(int file)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	return -1;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <_isatty>:

int _isatty(int file)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	return 1;
 8002c64:	2301      	movs	r3, #1
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <_sbrk+0x5c>)
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <_sbrk+0x60>)
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <_sbrk+0x64>)
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <_sbrk+0x68>)
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d207      	bcs.n	8002cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb8:	f005 fba8 	bl	800840c <__errno>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	e009      	b.n	8002cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4a05      	ldr	r2, [pc, #20]	; (8002cec <_sbrk+0x64>)
 8002cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cda:	68fb      	ldr	r3, [r7, #12]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000c000 	.word	0x2000c000
 8002ce8:	00000400 	.word	0x00000400
 8002cec:	200005cc 	.word	0x200005cc
 8002cf0:	20000608 	.word	0x20000608

08002cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d00:	480c      	ldr	r0, [pc, #48]	; (8002d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d02:	490d      	ldr	r1, [pc, #52]	; (8002d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d18:	4c0a      	ldr	r4, [pc, #40]	; (8002d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d26:	f7ff ffe5 	bl	8002cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f005 fb75 	bl	8008418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d2e:	f7ff f921 	bl	8001f74 <main>
  bx lr
 8002d32:	4770      	bx	lr
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d38:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d3c:	0800bc38 	.word	0x0800bc38
  ldr r2, =_sbss
 8002d40:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d44:	20000608 	.word	0x20000608

08002d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC1_2_IRQHandler>
	...

08002d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_Init+0x28>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_Init+0x28>)
 8002d56:	f043 0310 	orr.w	r3, r3, #16
 8002d5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d5c:	2003      	movs	r0, #3
 8002d5e:	f000 fd1b 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d62:	200f      	movs	r0, #15
 8002d64:	f000 f808 	bl	8002d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d68:	f7ff fd4c 	bl	8002804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40022000 	.word	0x40022000

08002d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_InitTick+0x54>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_InitTick+0x58>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fd33 	bl	8003802 <HAL_SYSTICK_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00e      	b.n	8002dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b0f      	cmp	r3, #15
 8002daa:	d80a      	bhi.n	8002dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dac:	2200      	movs	r2, #0
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f000 fcfb 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db8:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <HAL_InitTick+0x5c>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000008 	.word	0x20000008
 8002dd0:	20000010 	.word	0x20000010
 8002dd4:	2000000c 	.word	0x2000000c

08002dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_IncTick+0x1c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_IncTick+0x20>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	4a03      	ldr	r2, [pc, #12]	; (8002df8 <HAL_IncTick+0x20>)
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	20000010 	.word	0x20000010
 8002df8:	200005d0 	.word	0x200005d0

08002dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002e00:	4b02      	ldr	r3, [pc, #8]	; (8002e0c <HAL_GetTick+0x10>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	200005d0 	.word	0x200005d0

08002e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff fff0 	bl	8002dfc <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d005      	beq.n	8002e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_Delay+0x44>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e36:	bf00      	nop
 8002e38:	f7ff ffe0 	bl	8002dfc <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d8f7      	bhi.n	8002e38 <HAL_Delay+0x28>
  {
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000010 	.word	0x20000010

08002e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0ce      	b.n	8003018 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fce6 	bl	8002868 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fb07 	bl	80034b0 <ADC_ConversionStop_Disable>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 80a9 	bne.w	8003006 <HAL_ADC_Init+0x1ae>
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80a5 	bne.w	8003006 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec4:	f023 0302 	bic.w	r3, r3, #2
 8002ec8:	f043 0202 	orr.w	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4951      	ldr	r1, [pc, #324]	; (8003020 <HAL_ADC_Init+0x1c8>)
 8002eda:	428b      	cmp	r3, r1
 8002edc:	d10a      	bne.n	8002ef4 <HAL_ADC_Init+0x9c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ee6:	d002      	beq.n	8002eee <HAL_ADC_Init+0x96>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	e004      	b.n	8002ef8 <HAL_ADC_Init+0xa0>
 8002eee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ef2:	e001      	b.n	8002ef8 <HAL_ADC_Init+0xa0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ef8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7b1b      	ldrb	r3, [r3, #12]
 8002efe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d003      	beq.n	8002f1a <HAL_ADC_Init+0xc2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_ADC_Init+0xc8>
 8002f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f1e:	e000      	b.n	8002f22 <HAL_ADC_Init+0xca>
 8002f20:	2300      	movs	r3, #0
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7d1b      	ldrb	r3, [r3, #20]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d119      	bne.n	8002f64 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7b1b      	ldrb	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	035a      	lsls	r2, r3, #13
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e00b      	b.n	8002f64 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_ADC_Init+0x1cc>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d003      	beq.n	8002f9e <HAL_ADC_Init+0x146>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d104      	bne.n	8002fa8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	051b      	lsls	r3, r3, #20
 8002fa6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_ADC_Init+0x1d0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fe2:	e018      	b.n	8003016 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	f023 0312 	bic.w	r3, r3, #18
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003004:	e007      	b.n	8003016 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f043 0210 	orr.w	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40013c00 	.word	0x40013c00
 8003024:	ffe1f7fd 	.word	0xffe1f7fd
 8003028:	ff1f0efe 	.word	0xff1f0efe

0800302c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a64      	ldr	r2, [pc, #400]	; (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_ADC_Start_DMA+0x24>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_ADC_Start_DMA+0x1ac>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d106      	bne.n	800305e <HAL_ADC_Start_DMA+0x32>
 8003050:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 80b3 	bne.w	80031c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_ADC_Start_DMA+0x40>
 8003068:	2302      	movs	r3, #2
 800306a:	e0ae      	b.n	80031ca <HAL_ADC_Start_DMA+0x19e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f9c1 	bl	80033fc <ADC_Enable>
 800307a:	4603      	mov	r3, r0
 800307c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 809a 	bne.w	80031ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4e      	ldr	r2, [pc, #312]	; (80031d8 <HAL_ADC_Start_DMA+0x1ac>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_Start_DMA+0x84>
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d115      	bne.n	80030dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d026      	beq.n	8003118 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030da:	e01d      	b.n	8003118 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a39      	ldr	r2, [pc, #228]	; (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_ADC_Start_DMA+0xd0>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_ADC_Start_DMA+0x1ac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10d      	bne.n	8003118 <HAL_ADC_Start_DMA+0xec>
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003110:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f023 0206 	bic.w	r2, r3, #6
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003130:	e002      	b.n	8003138 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4a25      	ldr	r2, [pc, #148]	; (80031dc <HAL_ADC_Start_DMA+0x1b0>)
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <HAL_ADC_Start_DMA+0x1b4>)
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_ADC_Start_DMA+0x1b8>)
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0202 	mvn.w	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003170:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a18      	ldr	r0, [r3, #32]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	334c      	adds	r3, #76	; 0x4c
 800317c:	4619      	mov	r1, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f000 fbc1 	bl	8003908 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003190:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003194:	d108      	bne.n	80031a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80031a6:	e00f      	b.n	80031c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80031b8:	e006      	b.n	80031c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80031c2:	e001      	b.n	80031c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40012400 	.word	0x40012400
 80031d8:	40012800 	.word	0x40012800
 80031dc:	08003533 	.word	0x08003533
 80031e0:	080035af 	.word	0x080035af
 80031e4:	080035cb 	.word	0x080035cb

080031e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x20>
 8003228:	2302      	movs	r3, #2
 800322a:	e0dc      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x1da>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b06      	cmp	r3, #6
 800323a:	d81c      	bhi.n	8003276 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b05      	subs	r3, #5
 800324e:	221f      	movs	r2, #31
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4019      	ands	r1, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b05      	subs	r3, #5
 8003268:	fa00 f203 	lsl.w	r2, r0, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	635a      	str	r2, [r3, #52]	; 0x34
 8003274:	e03c      	b.n	80032f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d81c      	bhi.n	80032b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	3b23      	subs	r3, #35	; 0x23
 8003290:	221f      	movs	r2, #31
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	4019      	ands	r1, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	3b23      	subs	r3, #35	; 0x23
 80032aa:	fa00 f203 	lsl.w	r2, r0, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
 80032b6:	e01b      	b.n	80032f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	3b41      	subs	r3, #65	; 0x41
 80032ca:	221f      	movs	r2, #31
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	4019      	ands	r1, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3b41      	subs	r3, #65	; 0x41
 80032e4:	fa00 f203 	lsl.w	r2, r0, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	d91c      	bls.n	8003332 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68d9      	ldr	r1, [r3, #12]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	3b1e      	subs	r3, #30
 800330a:	2207      	movs	r2, #7
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	4019      	ands	r1, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6898      	ldr	r0, [r3, #8]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	3b1e      	subs	r3, #30
 8003324:	fa00 f203 	lsl.w	r2, r0, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	e019      	b.n	8003366 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	2207      	movs	r2, #7
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	4019      	ands	r1, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6898      	ldr	r0, [r3, #8]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	fa00 f203 	lsl.w	r2, r0, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b10      	cmp	r3, #16
 800336c:	d003      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003372:	2b11      	cmp	r3, #17
 8003374:	d132      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d125      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d126      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800339c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d11a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	0c9a      	lsrs	r2, r3, #18
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033bc:	e002      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f9      	bne.n	80033be <HAL_ADC_ConfigChannel+0x1b2>
 80033ca:	e007      	b.n	80033dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012400 	.word	0x40012400
 80033f4:	20000008 	.word	0x20000008
 80033f8:	431bde83 	.word	0x431bde83

080033fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d040      	beq.n	800349c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800342a:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <ADC_Enable+0xac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <ADC_Enable+0xb0>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	0c9b      	lsrs	r3, r3, #18
 8003436:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003438:	e002      	b.n	8003440 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3b01      	subs	r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f9      	bne.n	800343a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003446:	f7ff fcd9 	bl	8002dfc <HAL_GetTick>
 800344a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800344c:	e01f      	b.n	800348e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800344e:	f7ff fcd5 	bl	8002dfc <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d918      	bls.n	800348e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d011      	beq.n	800348e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	f043 0210 	orr.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e007      	b.n	800349e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d1d8      	bne.n	800344e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000008 	.word	0x20000008
 80034ac:	431bde83 	.word	0x431bde83

080034b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d12e      	bne.n	8003528 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034da:	f7ff fc8f 	bl	8002dfc <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034e0:	e01b      	b.n	800351a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034e2:	f7ff fc8b 	bl	8002dfc <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d914      	bls.n	800351a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10d      	bne.n	800351a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e007      	b.n	800352a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d0dc      	beq.n	80034e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003548:	2b00      	cmp	r3, #0
 800354a:	d127      	bne.n	800359c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003562:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003566:	d115      	bne.n	8003594 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800356c:	2b00      	cmp	r3, #0
 800356e:	d111      	bne.n	8003594 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7fe feb5 	bl	8002304 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800359a:	e004      	b.n	80035a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fe13 	bl	80031e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	f043 0204 	orr.w	r2, r3, #4
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fe02 	bl	80031fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	60d3      	str	r3, [r2, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	db0b      	blt.n	800368e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	4906      	ldr	r1, [pc, #24]	; (8003698 <__NVIC_EnableIRQ+0x34>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2001      	movs	r0, #1
 8003686:	fa00 f202 	lsl.w	r2, r0, r2
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100

0800369c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db0a      	blt.n	80036c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	490c      	ldr	r1, [pc, #48]	; (80036e8 <__NVIC_SetPriority+0x4c>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	440b      	add	r3, r1
 80036c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c4:	e00a      	b.n	80036dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4908      	ldr	r1, [pc, #32]	; (80036ec <__NVIC_SetPriority+0x50>)
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3b04      	subs	r3, #4
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	440b      	add	r3, r1
 80036da:	761a      	strb	r2, [r3, #24]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e100 	.word	0xe000e100
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f1c3 0307 	rsb	r3, r3, #7
 800370a:	2b04      	cmp	r3, #4
 800370c:	bf28      	it	cs
 800370e:	2304      	movcs	r3, #4
 8003710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3304      	adds	r3, #4
 8003716:	2b06      	cmp	r3, #6
 8003718:	d902      	bls.n	8003720 <NVIC_EncodePriority+0x30>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3b03      	subs	r3, #3
 800371e:	e000      	b.n	8003722 <NVIC_EncodePriority+0x32>
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	401a      	ands	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43d9      	mvns	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	4313      	orrs	r3, r2
         );
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f7ff ff90 	bl	800369c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff2d 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff42 	bl	8003648 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff90 	bl	80036f0 <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5f 	bl	800369c <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff35 	bl	8003664 <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa2 	bl	8003754 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e059      	b.n	80038e6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_DMA_Init+0xd4>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d80f      	bhi.n	800385e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <HAL_DMA_Init+0xd8>)
 8003846:	4413      	add	r3, r2
 8003848:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <HAL_DMA_Init+0xdc>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <HAL_DMA_Init+0xe0>)
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c
 800385c:	e00e      	b.n	800387c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_DMA_Init+0xe4>)
 8003866:	4413      	add	r3, r2
 8003868:	4a23      	ldr	r2, [pc, #140]	; (80038f8 <HAL_DMA_Init+0xdc>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	009a      	lsls	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <HAL_DMA_Init+0xe8>)
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003892:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	40020407 	.word	0x40020407
 80038f4:	bffdfff8 	.word	0xbffdfff8
 80038f8:	cccccccd 	.word	0xcccccccd
 80038fc:	40020000 	.word	0x40020000
 8003900:	bffdfbf8 	.word	0xbffdfbf8
 8003904:	40020400 	.word	0x40020400

08003908 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_DMA_Start_IT+0x20>
 8003924:	2302      	movs	r3, #2
 8003926:	e04a      	b.n	80039be <HAL_DMA_Start_IT+0xb6>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003936:	2b01      	cmp	r3, #1
 8003938:	d13a      	bne.n	80039b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fbb0 	bl	80040c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 020e 	orr.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e00f      	b.n	800399e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0204 	bic.w	r2, r2, #4
 800398c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 020a 	orr.w	r2, r2, #10
 800399c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e005      	b.n	80039bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
 80039ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b085      	sub	sp, #20
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d008      	beq.n	80039ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2204      	movs	r2, #4
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e020      	b.n	8003a30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 020e 	bic.w	r2, r2, #14
 80039fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2101      	movs	r1, #1
 8003a18:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d005      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2204      	movs	r2, #4
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e0d6      	b.n	8003c0c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 020e 	bic.w	r2, r2, #14
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_DMA_Abort_IT+0x1dc>)
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d958      	bls.n	8003b3c <HAL_DMA_Abort_IT+0x100>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a63      	ldr	r2, [pc, #396]	; (8003c1c <HAL_DMA_Abort_IT+0x1e0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d04f      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xf8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a61      	ldr	r2, [pc, #388]	; (8003c20 <HAL_DMA_Abort_IT+0x1e4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d048      	beq.n	8003b30 <HAL_DMA_Abort_IT+0xf4>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a60      	ldr	r2, [pc, #384]	; (8003c24 <HAL_DMA_Abort_IT+0x1e8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d040      	beq.n	8003b2a <HAL_DMA_Abort_IT+0xee>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5e      	ldr	r2, [pc, #376]	; (8003c28 <HAL_DMA_Abort_IT+0x1ec>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d038      	beq.n	8003b24 <HAL_DMA_Abort_IT+0xe8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5d      	ldr	r2, [pc, #372]	; (8003c2c <HAL_DMA_Abort_IT+0x1f0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d030      	beq.n	8003b1e <HAL_DMA_Abort_IT+0xe2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5b      	ldr	r2, [pc, #364]	; (8003c30 <HAL_DMA_Abort_IT+0x1f4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d028      	beq.n	8003b18 <HAL_DMA_Abort_IT+0xdc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a53      	ldr	r2, [pc, #332]	; (8003c18 <HAL_DMA_Abort_IT+0x1dc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d020      	beq.n	8003b12 <HAL_DMA_Abort_IT+0xd6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_DMA_Abort_IT+0x1f8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d019      	beq.n	8003b0e <HAL_DMA_Abort_IT+0xd2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_DMA_Abort_IT+0x1fc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d012      	beq.n	8003b0a <HAL_DMA_Abort_IT+0xce>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a54      	ldr	r2, [pc, #336]	; (8003c3c <HAL_DMA_Abort_IT+0x200>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00a      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a53      	ldr	r2, [pc, #332]	; (8003c40 <HAL_DMA_Abort_IT+0x204>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <HAL_DMA_Abort_IT+0xc2>
 8003af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afc:	e01b      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b02:	e018      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b08:	e015      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	e013      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e011      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b16:	e00e      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b1c:	e00b      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b22:	e008      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b28:	e005      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2e:	e002      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b30:	2310      	movs	r3, #16
 8003b32:	e000      	b.n	8003b36 <HAL_DMA_Abort_IT+0xfa>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4a43      	ldr	r2, [pc, #268]	; (8003c44 <HAL_DMA_Abort_IT+0x208>)
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	e057      	b.n	8003bec <HAL_DMA_Abort_IT+0x1b0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a36      	ldr	r2, [pc, #216]	; (8003c1c <HAL_DMA_Abort_IT+0x1e0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04f      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x1aa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a35      	ldr	r2, [pc, #212]	; (8003c20 <HAL_DMA_Abort_IT+0x1e4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d048      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x1a6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a33      	ldr	r2, [pc, #204]	; (8003c24 <HAL_DMA_Abort_IT+0x1e8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d040      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x1a0>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <HAL_DMA_Abort_IT+0x1ec>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d038      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x19a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a30      	ldr	r2, [pc, #192]	; (8003c2c <HAL_DMA_Abort_IT+0x1f0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d030      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x194>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <HAL_DMA_Abort_IT+0x1f4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d028      	beq.n	8003bca <HAL_DMA_Abort_IT+0x18e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <HAL_DMA_Abort_IT+0x1dc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d020      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0x188>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <HAL_DMA_Abort_IT+0x1f8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d019      	beq.n	8003bc0 <HAL_DMA_Abort_IT+0x184>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <HAL_DMA_Abort_IT+0x1fc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d012      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x180>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a28      	ldr	r2, [pc, #160]	; (8003c3c <HAL_DMA_Abort_IT+0x200>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_DMA_Abort_IT+0x17a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <HAL_DMA_Abort_IT+0x204>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Abort_IT+0x174>
 8003baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bae:	e01b      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb4:	e018      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bba:	e015      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	e013      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e011      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc8:	e00e      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bce:	e00b      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd4:	e008      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bda:	e005      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be0:	e002      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003be2:	2310      	movs	r3, #16
 8003be4:	e000      	b.n	8003be8 <HAL_DMA_Abort_IT+0x1ac>
 8003be6:	2301      	movs	r3, #1
 8003be8:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <HAL_DMA_Abort_IT+0x20c>)
 8003bea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
    } 
  }
  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40020080 	.word	0x40020080
 8003c1c:	40020008 	.word	0x40020008
 8003c20:	4002001c 	.word	0x4002001c
 8003c24:	40020030 	.word	0x40020030
 8003c28:	40020044 	.word	0x40020044
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	4002006c 	.word	0x4002006c
 8003c34:	40020408 	.word	0x40020408
 8003c38:	4002041c 	.word	0x4002041c
 8003c3c:	40020430 	.word	0x40020430
 8003c40:	40020444 	.word	0x40020444
 8003c44:	40020400 	.word	0x40020400
 8003c48:	40020000 	.word	0x40020000

08003c4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2204      	movs	r2, #4
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80f1 	beq.w	8003e58 <HAL_DMA_IRQHandler+0x20c>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80eb 	beq.w	8003e58 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <HAL_DMA_IRQHandler+0x1d8>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d958      	bls.n	8003d5e <HAL_DMA_IRQHandler+0x112>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_DMA_IRQHandler+0x1dc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d04f      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x10a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5c      	ldr	r2, [pc, #368]	; (8003e2c <HAL_DMA_IRQHandler+0x1e0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d048      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x106>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	; (8003e30 <HAL_DMA_IRQHandler+0x1e4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d040      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x100>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a59      	ldr	r2, [pc, #356]	; (8003e34 <HAL_DMA_IRQHandler+0x1e8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d038      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xfa>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a57      	ldr	r2, [pc, #348]	; (8003e38 <HAL_DMA_IRQHandler+0x1ec>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d030      	beq.n	8003d40 <HAL_DMA_IRQHandler+0xf4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a56      	ldr	r2, [pc, #344]	; (8003e3c <HAL_DMA_IRQHandler+0x1f0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d028      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xee>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4d      	ldr	r2, [pc, #308]	; (8003e24 <HAL_DMA_IRQHandler+0x1d8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d020      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xe8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a52      	ldr	r2, [pc, #328]	; (8003e40 <HAL_DMA_IRQHandler+0x1f4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d019      	beq.n	8003d30 <HAL_DMA_IRQHandler+0xe4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a50      	ldr	r2, [pc, #320]	; (8003e44 <HAL_DMA_IRQHandler+0x1f8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d012      	beq.n	8003d2c <HAL_DMA_IRQHandler+0xe0>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4f      	ldr	r2, [pc, #316]	; (8003e48 <HAL_DMA_IRQHandler+0x1fc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00a      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xda>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <HAL_DMA_IRQHandler+0x200>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d102      	bne.n	8003d20 <HAL_DMA_IRQHandler+0xd4>
 8003d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d1e:	e01b      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d24:	e018      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2a:	e015      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d2c:	2340      	movs	r3, #64	; 0x40
 8003d2e:	e013      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d30:	2304      	movs	r3, #4
 8003d32:	e011      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d38:	e00e      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d3e:	e00b      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d44:	e008      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d4a:	e005      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d50:	e002      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d52:	2340      	movs	r3, #64	; 0x40
 8003d54:	e000      	b.n	8003d58 <HAL_DMA_IRQHandler+0x10c>
 8003d56:	2304      	movs	r3, #4
 8003d58:	4a3d      	ldr	r2, [pc, #244]	; (8003e50 <HAL_DMA_IRQHandler+0x204>)
 8003d5a:	6053      	str	r3, [r2, #4]
 8003d5c:	e057      	b.n	8003e0e <HAL_DMA_IRQHandler+0x1c2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a31      	ldr	r2, [pc, #196]	; (8003e28 <HAL_DMA_IRQHandler+0x1dc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d04f      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x1bc>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <HAL_DMA_IRQHandler+0x1e0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d048      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x1b8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2e      	ldr	r2, [pc, #184]	; (8003e30 <HAL_DMA_IRQHandler+0x1e4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d040      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x1b2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <HAL_DMA_IRQHandler+0x1e8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d038      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x1ac>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <HAL_DMA_IRQHandler+0x1ec>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d030      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x1a6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <HAL_DMA_IRQHandler+0x1f0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d028      	beq.n	8003dec <HAL_DMA_IRQHandler+0x1a0>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <HAL_DMA_IRQHandler+0x1d8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d020      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x19a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <HAL_DMA_IRQHandler+0x1f4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d019      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x196>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a24      	ldr	r2, [pc, #144]	; (8003e44 <HAL_DMA_IRQHandler+0x1f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d012      	beq.n	8003dde <HAL_DMA_IRQHandler+0x192>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <HAL_DMA_IRQHandler+0x1fc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x18c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_DMA_IRQHandler+0x200>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d102      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x186>
 8003dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dd0:	e01b      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003dd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dd6:	e018      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ddc:	e015      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003dde:	2340      	movs	r3, #64	; 0x40
 8003de0:	e013      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003de2:	2304      	movs	r3, #4
 8003de4:	e011      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003de6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dea:	e00e      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003dec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003df0:	e00b      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003df2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003df6:	e008      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003df8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dfc:	e005      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e02:	e002      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003e04:	2340      	movs	r3, #64	; 0x40
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_IRQHandler+0x1be>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <HAL_DMA_IRQHandler+0x208>)
 8003e0c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8136 	beq.w	8004084 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	e130      	b.n	8004084 <HAL_DMA_IRQHandler+0x438>
 8003e22:	bf00      	nop
 8003e24:	40020080 	.word	0x40020080
 8003e28:	40020008 	.word	0x40020008
 8003e2c:	4002001c 	.word	0x4002001c
 8003e30:	40020030 	.word	0x40020030
 8003e34:	40020044 	.word	0x40020044
 8003e38:	40020058 	.word	0x40020058
 8003e3c:	4002006c 	.word	0x4002006c
 8003e40:	40020408 	.word	0x40020408
 8003e44:	4002041c 	.word	0x4002041c
 8003e48:	40020430 	.word	0x40020430
 8003e4c:	40020444 	.word	0x40020444
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80dd 	beq.w	8004024 <HAL_DMA_IRQHandler+0x3d8>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80d7 	beq.w	8004024 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 020a 	bic.w	r2, r2, #10
 8003e92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b7b      	ldr	r3, [pc, #492]	; (8004090 <HAL_DMA_IRQHandler+0x444>)
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d958      	bls.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a79      	ldr	r2, [pc, #484]	; (8004094 <HAL_DMA_IRQHandler+0x448>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04f      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x306>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a78      	ldr	r2, [pc, #480]	; (8004098 <HAL_DMA_IRQHandler+0x44c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d048      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x302>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a76      	ldr	r2, [pc, #472]	; (800409c <HAL_DMA_IRQHandler+0x450>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d040      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x2fc>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a75      	ldr	r2, [pc, #468]	; (80040a0 <HAL_DMA_IRQHandler+0x454>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d038      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x2f6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a73      	ldr	r2, [pc, #460]	; (80040a4 <HAL_DMA_IRQHandler+0x458>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d030      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x2f0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <HAL_DMA_IRQHandler+0x45c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d028      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ea>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a69      	ldr	r2, [pc, #420]	; (8004090 <HAL_DMA_IRQHandler+0x444>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d020      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x2e4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a6e      	ldr	r2, [pc, #440]	; (80040ac <HAL_DMA_IRQHandler+0x460>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d019      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x2e0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <HAL_DMA_IRQHandler+0x464>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d012      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x2dc>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <HAL_DMA_IRQHandler+0x468>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00a      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2d6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <HAL_DMA_IRQHandler+0x46c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d102      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x2d0>
 8003f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f1a:	e01b      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f20:	e018      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f26:	e015      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e013      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e011      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f34:	e00e      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f3a:	e00b      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f40:	e008      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f46:	e005      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f4c:	e002      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e000      	b.n	8003f54 <HAL_DMA_IRQHandler+0x308>
 8003f52:	2302      	movs	r3, #2
 8003f54:	4a59      	ldr	r2, [pc, #356]	; (80040bc <HAL_DMA_IRQHandler+0x470>)
 8003f56:	6053      	str	r3, [r2, #4]
 8003f58:	e057      	b.n	800400a <HAL_DMA_IRQHandler+0x3be>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a4d      	ldr	r2, [pc, #308]	; (8004094 <HAL_DMA_IRQHandler+0x448>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d04f      	beq.n	8004004 <HAL_DMA_IRQHandler+0x3b8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a4b      	ldr	r2, [pc, #300]	; (8004098 <HAL_DMA_IRQHandler+0x44c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d048      	beq.n	8004000 <HAL_DMA_IRQHandler+0x3b4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4a      	ldr	r2, [pc, #296]	; (800409c <HAL_DMA_IRQHandler+0x450>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d040      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x3ae>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <HAL_DMA_IRQHandler+0x454>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d038      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x3a8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_DMA_IRQHandler+0x458>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d030      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3a2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a45      	ldr	r2, [pc, #276]	; (80040a8 <HAL_DMA_IRQHandler+0x45c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d028      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x39c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3d      	ldr	r2, [pc, #244]	; (8004090 <HAL_DMA_IRQHandler+0x444>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d020      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x396>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a41      	ldr	r2, [pc, #260]	; (80040ac <HAL_DMA_IRQHandler+0x460>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d019      	beq.n	8003fde <HAL_DMA_IRQHandler+0x392>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a40      	ldr	r2, [pc, #256]	; (80040b0 <HAL_DMA_IRQHandler+0x464>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d012      	beq.n	8003fda <HAL_DMA_IRQHandler+0x38e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a3e      	ldr	r2, [pc, #248]	; (80040b4 <HAL_DMA_IRQHandler+0x468>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x388>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3d      	ldr	r2, [pc, #244]	; (80040b8 <HAL_DMA_IRQHandler+0x46c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d102      	bne.n	8003fce <HAL_DMA_IRQHandler+0x382>
 8003fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fcc:	e01b      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd2:	e018      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fd8:	e015      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003fda:	2320      	movs	r3, #32
 8003fdc:	e013      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e011      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fe6:	e00e      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003fe8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fec:	e00b      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ff2:	e008      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ff8:	e005      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8003ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ffe:	e002      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8004000:	2320      	movs	r3, #32
 8004002:	e000      	b.n	8004006 <HAL_DMA_IRQHandler+0x3ba>
 8004004:	2302      	movs	r3, #2
 8004006:	4a2e      	ldr	r2, [pc, #184]	; (80040c0 <HAL_DMA_IRQHandler+0x474>)
 8004008:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d034      	beq.n	8004084 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004022:	e02f      	b.n	8004084 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	2208      	movs	r2, #8
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d028      	beq.n	8004086 <HAL_DMA_IRQHandler+0x43a>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 020e 	bic.w	r2, r2, #14
 800404c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	2101      	movs	r1, #1
 8004058:	fa01 f202 	lsl.w	r2, r1, r2
 800405c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
    }
  }
  return;
 8004084:	bf00      	nop
 8004086:	bf00      	nop
}
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40020080 	.word	0x40020080
 8004094:	40020008 	.word	0x40020008
 8004098:	4002001c 	.word	0x4002001c
 800409c:	40020030 	.word	0x40020030
 80040a0:	40020044 	.word	0x40020044
 80040a4:	40020058 	.word	0x40020058
 80040a8:	4002006c 	.word	0x4002006c
 80040ac:	40020408 	.word	0x40020408
 80040b0:	4002041c 	.word	0x4002041c
 80040b4:	40020430 	.word	0x40020430
 80040b8:	40020444 	.word	0x40020444
 80040bc:	40020400 	.word	0x40020400
 80040c0:	40020000 	.word	0x40020000

080040c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f202 	lsl.w	r2, r1, r2
 80040e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d108      	bne.n	8004104 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004102:	e007      	b.n	8004114 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
	...

08004120 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <HAL_FLASH_Program+0xd8>)
 800413c:	7e1b      	ldrb	r3, [r3, #24]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_FLASH_Program+0x26>
 8004142:	2302      	movs	r3, #2
 8004144:	e054      	b.n	80041f0 <HAL_FLASH_Program+0xd0>
 8004146:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <HAL_FLASH_Program+0xd8>)
 8004148:	2201      	movs	r2, #1
 800414a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800414c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004150:	f000 f8a8 	bl	80042a4 <FLASH_WaitForLastOperation>
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d144      	bne.n	80041e8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d102      	bne.n	800416a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004164:	2301      	movs	r3, #1
 8004166:	757b      	strb	r3, [r7, #21]
 8004168:	e007      	b.n	800417a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d102      	bne.n	8004176 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004170:	2302      	movs	r3, #2
 8004172:	757b      	strb	r3, [r7, #21]
 8004174:	e001      	b.n	800417a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004176:	2304      	movs	r3, #4
 8004178:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800417a:	2300      	movs	r3, #0
 800417c:	75bb      	strb	r3, [r7, #22]
 800417e:	e02d      	b.n	80041dc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004180:	7dbb      	ldrb	r3, [r7, #22]
 8004182:	005a      	lsls	r2, r3, #1
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	eb02 0c03 	add.w	ip, r2, r3
 800418a:	7dbb      	ldrb	r3, [r7, #22]
 800418c:	0119      	lsls	r1, r3, #4
 800418e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004192:	f1c1 0620 	rsb	r6, r1, #32
 8004196:	f1a1 0020 	sub.w	r0, r1, #32
 800419a:	fa22 f401 	lsr.w	r4, r2, r1
 800419e:	fa03 f606 	lsl.w	r6, r3, r6
 80041a2:	4334      	orrs	r4, r6
 80041a4:	fa23 f000 	lsr.w	r0, r3, r0
 80041a8:	4304      	orrs	r4, r0
 80041aa:	fa23 f501 	lsr.w	r5, r3, r1
 80041ae:	b2a3      	uxth	r3, r4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4660      	mov	r0, ip
 80041b4:	f000 f85a 	bl	800426c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041bc:	f000 f872 	bl	80042a4 <FLASH_WaitForLastOperation>
 80041c0:	4603      	mov	r3, r0
 80041c2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_FLASH_Program+0xdc>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <HAL_FLASH_Program+0xdc>)
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d107      	bne.n	80041e6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80041d6:	7dbb      	ldrb	r3, [r7, #22]
 80041d8:	3301      	adds	r3, #1
 80041da:	75bb      	strb	r3, [r7, #22]
 80041dc:	7dba      	ldrb	r2, [r7, #22]
 80041de:	7d7b      	ldrb	r3, [r7, #21]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3cd      	bcc.n	8004180 <HAL_FLASH_Program+0x60>
 80041e4:	e000      	b.n	80041e8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80041e6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_FLASH_Program+0xd8>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	761a      	strb	r2, [r3, #24]

  return status;
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f8:	200005d8 	.word	0x200005d8
 80041fc:	40022000 	.word	0x40022000

08004200 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_FLASH_Unlock+0x40>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_FLASH_Unlock+0x40>)
 8004218:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <HAL_FLASH_Unlock+0x44>)
 800421a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_FLASH_Unlock+0x40>)
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <HAL_FLASH_Unlock+0x48>)
 8004220:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <HAL_FLASH_Unlock+0x40>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004232:	79fb      	ldrb	r3, [r7, #7]
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40022000 	.word	0x40022000
 8004244:	45670123 	.word	0x45670123
 8004248:	cdef89ab 	.word	0xcdef89ab

0800424c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_FLASH_Lock+0x1c>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_FLASH_Lock+0x1c>)
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40022000 	.word	0x40022000

0800426c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <FLASH_Program_HalfWord+0x30>)
 800427a:	2200      	movs	r2, #0
 800427c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <FLASH_Program_HalfWord+0x34>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <FLASH_Program_HalfWord+0x34>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	887a      	ldrh	r2, [r7, #2]
 800428e:	801a      	strh	r2, [r3, #0]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	200005d8 	.word	0x200005d8
 80042a0:	40022000 	.word	0x40022000

080042a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80042ac:	f7fe fda6 	bl	8002dfc <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042b2:	e010      	b.n	80042d6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d00c      	beq.n	80042d6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <FLASH_WaitForLastOperation+0x2e>
 80042c2:	f7fe fd9b 	bl	8002dfc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d201      	bcs.n	80042d6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e025      	b.n	8004322 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <FLASH_WaitForLastOperation+0x88>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e8      	bne.n	80042b4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <FLASH_WaitForLastOperation+0x88>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <FLASH_WaitForLastOperation+0x88>)
 80042f0:	2220      	movs	r2, #32
 80042f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <FLASH_WaitForLastOperation+0x88>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <FLASH_WaitForLastOperation+0x88>)
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800430c:	4b07      	ldr	r3, [pc, #28]	; (800432c <FLASH_WaitForLastOperation+0x88>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004318:	f000 f80a 	bl	8004330 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40022000 	.word	0x40022000

08004330 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800433a:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004346:	4b21      	ldr	r3, [pc, #132]	; (80043cc <FLASH_SetErrorCode+0x9c>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f043 0302 	orr.w	r3, r3, #2
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <FLASH_SetErrorCode+0x9c>)
 8004350:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f043 0310 	orr.w	r3, r3, #16
 8004358:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004366:	4b19      	ldr	r3, [pc, #100]	; (80043cc <FLASH_SetErrorCode+0x9c>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <FLASH_SetErrorCode+0x9c>)
 8004370:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <FLASH_SetErrorCode+0x9c>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f043 0304 	orr.w	r3, r3, #4
 800438e:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <FLASH_SetErrorCode+0x9c>)
 8004390:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f240 1201 	movw	r2, #257	; 0x101
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d106      	bne.n	80043b6 <FLASH_SetErrorCode+0x86>
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	61d3      	str	r3, [r2, #28]
}  
 80043b4:	e002      	b.n	80043bc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80043b6:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <FLASH_SetErrorCode+0x98>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60d3      	str	r3, [r2, #12]
}  
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40022000 	.word	0x40022000
 80043cc:	200005d8 	.word	0x200005d8

080043d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043e2:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <HAL_FLASHEx_Erase+0xd0>)
 80043e4:	7e1b      	ldrb	r3, [r3, #24]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_FLASHEx_Erase+0x1e>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e053      	b.n	8004496 <HAL_FLASHEx_Erase+0xc6>
 80043ee:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <HAL_FLASHEx_Erase+0xd0>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d116      	bne.n	800442a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004400:	f7ff ff50 	bl	80042a4 <FLASH_WaitForLastOperation>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d141      	bne.n	800448e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800440a:	2001      	movs	r0, #1
 800440c:	f000 f84c 	bl	80044a8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004410:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004414:	f7ff ff46 	bl	80042a4 <FLASH_WaitForLastOperation>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800441c:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_FLASHEx_Erase+0xd4>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <HAL_FLASHEx_Erase+0xd4>)
 8004422:	f023 0304 	bic.w	r3, r3, #4
 8004426:	6113      	str	r3, [r2, #16]
 8004428:	e031      	b.n	800448e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800442a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800442e:	f7ff ff39 	bl	80042a4 <FLASH_WaitForLastOperation>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d12a      	bne.n	800448e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	e019      	b.n	800447c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004448:	68b8      	ldr	r0, [r7, #8]
 800444a:	f000 f849 	bl	80044e0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800444e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004452:	f7ff ff27 	bl	80042a4 <FLASH_WaitForLastOperation>
 8004456:	4603      	mov	r3, r0
 8004458:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_FLASHEx_Erase+0xd4>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <HAL_FLASHEx_Erase+0xd4>)
 8004460:	f023 0302 	bic.w	r3, r3, #2
 8004464:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	601a      	str	r2, [r3, #0]
            break;
 8004472:	e00c      	b.n	800448e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	02da      	lsls	r2, r3, #11
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d3dc      	bcc.n	8004448 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <HAL_FLASHEx_Erase+0xd0>)
 8004490:	2200      	movs	r2, #0
 8004492:	761a      	strb	r2, [r3, #24]

  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	200005d8 	.word	0x200005d8
 80044a4:	40022000 	.word	0x40022000

080044a8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044b0:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <FLASH_MassErase+0x30>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <FLASH_MassErase+0x34>)
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	4a08      	ldr	r2, [pc, #32]	; (80044dc <FLASH_MassErase+0x34>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <FLASH_MassErase+0x34>)
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <FLASH_MassErase+0x34>)
 80044c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044cc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	200005d8 	.word	0x200005d8
 80044dc:	40022000 	.word	0x40022000

080044e0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <FLASH_PageErase+0x38>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <FLASH_PageErase+0x3c>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <FLASH_PageErase+0x3c>)
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <FLASH_PageErase+0x3c>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <FLASH_PageErase+0x3c>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	4a05      	ldr	r2, [pc, #20]	; (800451c <FLASH_PageErase+0x3c>)
 8004506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	200005d8 	.word	0x200005d8
 800451c:	40022000 	.word	0x40022000

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b08b      	sub	sp, #44	; 0x2c
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004532:	e179      	b.n	8004828 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004534:	2201      	movs	r2, #1
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	429a      	cmp	r2, r3
 800454e:	f040 8168 	bne.w	8004822 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a96      	ldr	r2, [pc, #600]	; (80047b0 <HAL_GPIO_Init+0x290>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d05e      	beq.n	800461a <HAL_GPIO_Init+0xfa>
 800455c:	4a94      	ldr	r2, [pc, #592]	; (80047b0 <HAL_GPIO_Init+0x290>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d875      	bhi.n	800464e <HAL_GPIO_Init+0x12e>
 8004562:	4a94      	ldr	r2, [pc, #592]	; (80047b4 <HAL_GPIO_Init+0x294>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d058      	beq.n	800461a <HAL_GPIO_Init+0xfa>
 8004568:	4a92      	ldr	r2, [pc, #584]	; (80047b4 <HAL_GPIO_Init+0x294>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d86f      	bhi.n	800464e <HAL_GPIO_Init+0x12e>
 800456e:	4a92      	ldr	r2, [pc, #584]	; (80047b8 <HAL_GPIO_Init+0x298>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d052      	beq.n	800461a <HAL_GPIO_Init+0xfa>
 8004574:	4a90      	ldr	r2, [pc, #576]	; (80047b8 <HAL_GPIO_Init+0x298>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d869      	bhi.n	800464e <HAL_GPIO_Init+0x12e>
 800457a:	4a90      	ldr	r2, [pc, #576]	; (80047bc <HAL_GPIO_Init+0x29c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d04c      	beq.n	800461a <HAL_GPIO_Init+0xfa>
 8004580:	4a8e      	ldr	r2, [pc, #568]	; (80047bc <HAL_GPIO_Init+0x29c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d863      	bhi.n	800464e <HAL_GPIO_Init+0x12e>
 8004586:	4a8e      	ldr	r2, [pc, #568]	; (80047c0 <HAL_GPIO_Init+0x2a0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d046      	beq.n	800461a <HAL_GPIO_Init+0xfa>
 800458c:	4a8c      	ldr	r2, [pc, #560]	; (80047c0 <HAL_GPIO_Init+0x2a0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d85d      	bhi.n	800464e <HAL_GPIO_Init+0x12e>
 8004592:	2b12      	cmp	r3, #18
 8004594:	d82a      	bhi.n	80045ec <HAL_GPIO_Init+0xcc>
 8004596:	2b12      	cmp	r3, #18
 8004598:	d859      	bhi.n	800464e <HAL_GPIO_Init+0x12e>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <HAL_GPIO_Init+0x80>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	0800461b 	.word	0x0800461b
 80045a4:	080045f5 	.word	0x080045f5
 80045a8:	08004607 	.word	0x08004607
 80045ac:	08004649 	.word	0x08004649
 80045b0:	0800464f 	.word	0x0800464f
 80045b4:	0800464f 	.word	0x0800464f
 80045b8:	0800464f 	.word	0x0800464f
 80045bc:	0800464f 	.word	0x0800464f
 80045c0:	0800464f 	.word	0x0800464f
 80045c4:	0800464f 	.word	0x0800464f
 80045c8:	0800464f 	.word	0x0800464f
 80045cc:	0800464f 	.word	0x0800464f
 80045d0:	0800464f 	.word	0x0800464f
 80045d4:	0800464f 	.word	0x0800464f
 80045d8:	0800464f 	.word	0x0800464f
 80045dc:	0800464f 	.word	0x0800464f
 80045e0:	0800464f 	.word	0x0800464f
 80045e4:	080045fd 	.word	0x080045fd
 80045e8:	08004611 	.word	0x08004611
 80045ec:	4a75      	ldr	r2, [pc, #468]	; (80047c4 <HAL_GPIO_Init+0x2a4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045f2:	e02c      	b.n	800464e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	623b      	str	r3, [r7, #32]
          break;
 80045fa:	e029      	b.n	8004650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	3304      	adds	r3, #4
 8004602:	623b      	str	r3, [r7, #32]
          break;
 8004604:	e024      	b.n	8004650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	3308      	adds	r3, #8
 800460c:	623b      	str	r3, [r7, #32]
          break;
 800460e:	e01f      	b.n	8004650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	330c      	adds	r3, #12
 8004616:	623b      	str	r3, [r7, #32]
          break;
 8004618:	e01a      	b.n	8004650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d102      	bne.n	8004628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004622:	2304      	movs	r3, #4
 8004624:	623b      	str	r3, [r7, #32]
          break;
 8004626:	e013      	b.n	8004650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004630:	2308      	movs	r3, #8
 8004632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	611a      	str	r2, [r3, #16]
          break;
 800463a:	e009      	b.n	8004650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800463c:	2308      	movs	r3, #8
 800463e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	615a      	str	r2, [r3, #20]
          break;
 8004646:	e003      	b.n	8004650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004648:	2300      	movs	r3, #0
 800464a:	623b      	str	r3, [r7, #32]
          break;
 800464c:	e000      	b.n	8004650 <HAL_GPIO_Init+0x130>
          break;
 800464e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2bff      	cmp	r3, #255	; 0xff
 8004654:	d801      	bhi.n	800465a <HAL_GPIO_Init+0x13a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	e001      	b.n	800465e <HAL_GPIO_Init+0x13e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2bff      	cmp	r3, #255	; 0xff
 8004664:	d802      	bhi.n	800466c <HAL_GPIO_Init+0x14c>
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	e002      	b.n	8004672 <HAL_GPIO_Init+0x152>
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	3b08      	subs	r3, #8
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	210f      	movs	r1, #15
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	6a39      	ldr	r1, [r7, #32]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	431a      	orrs	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80c1 	beq.w	8004822 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046a0:	4b49      	ldr	r3, [pc, #292]	; (80047c8 <HAL_GPIO_Init+0x2a8>)
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	4a48      	ldr	r2, [pc, #288]	; (80047c8 <HAL_GPIO_Init+0x2a8>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6193      	str	r3, [r2, #24]
 80046ac:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <HAL_GPIO_Init+0x2a8>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046b8:	4a44      	ldr	r2, [pc, #272]	; (80047cc <HAL_GPIO_Init+0x2ac>)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	3302      	adds	r3, #2
 80046c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	220f      	movs	r2, #15
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4013      	ands	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3c      	ldr	r2, [pc, #240]	; (80047d0 <HAL_GPIO_Init+0x2b0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01f      	beq.n	8004724 <HAL_GPIO_Init+0x204>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3b      	ldr	r2, [pc, #236]	; (80047d4 <HAL_GPIO_Init+0x2b4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d019      	beq.n	8004720 <HAL_GPIO_Init+0x200>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3a      	ldr	r2, [pc, #232]	; (80047d8 <HAL_GPIO_Init+0x2b8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_GPIO_Init+0x1fc>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a39      	ldr	r2, [pc, #228]	; (80047dc <HAL_GPIO_Init+0x2bc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00d      	beq.n	8004718 <HAL_GPIO_Init+0x1f8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a38      	ldr	r2, [pc, #224]	; (80047e0 <HAL_GPIO_Init+0x2c0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <HAL_GPIO_Init+0x1f4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a37      	ldr	r2, [pc, #220]	; (80047e4 <HAL_GPIO_Init+0x2c4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <HAL_GPIO_Init+0x1f0>
 800470c:	2305      	movs	r3, #5
 800470e:	e00a      	b.n	8004726 <HAL_GPIO_Init+0x206>
 8004710:	2306      	movs	r3, #6
 8004712:	e008      	b.n	8004726 <HAL_GPIO_Init+0x206>
 8004714:	2304      	movs	r3, #4
 8004716:	e006      	b.n	8004726 <HAL_GPIO_Init+0x206>
 8004718:	2303      	movs	r3, #3
 800471a:	e004      	b.n	8004726 <HAL_GPIO_Init+0x206>
 800471c:	2302      	movs	r3, #2
 800471e:	e002      	b.n	8004726 <HAL_GPIO_Init+0x206>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_GPIO_Init+0x206>
 8004724:	2300      	movs	r3, #0
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	f002 0203 	and.w	r2, r2, #3
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	4093      	lsls	r3, r2
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004736:	4925      	ldr	r1, [pc, #148]	; (80047cc <HAL_GPIO_Init+0x2ac>)
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	3302      	adds	r3, #2
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004750:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4924      	ldr	r1, [pc, #144]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	e006      	b.n	800476c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	43db      	mvns	r3, r3
 8004766:	4920      	ldr	r1, [pc, #128]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 8004768:	4013      	ands	r3, r2
 800476a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	491a      	ldr	r1, [pc, #104]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	e006      	b.n	8004794 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	43db      	mvns	r3, r3
 800478e:	4916      	ldr	r1, [pc, #88]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 8004790:	4013      	ands	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d025      	beq.n	80047ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047a0:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	4910      	ldr	r1, [pc, #64]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]
 80047ac:	e025      	b.n	80047fa <HAL_GPIO_Init+0x2da>
 80047ae:	bf00      	nop
 80047b0:	10320000 	.word	0x10320000
 80047b4:	10310000 	.word	0x10310000
 80047b8:	10220000 	.word	0x10220000
 80047bc:	10210000 	.word	0x10210000
 80047c0:	10120000 	.word	0x10120000
 80047c4:	10110000 	.word	0x10110000
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010800 	.word	0x40010800
 80047d4:	40010c00 	.word	0x40010c00
 80047d8:	40011000 	.word	0x40011000
 80047dc:	40011400 	.word	0x40011400
 80047e0:	40011800 	.word	0x40011800
 80047e4:	40011c00 	.word	0x40011c00
 80047e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_GPIO_Init+0x324>)
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	43db      	mvns	r3, r3
 80047f4:	4913      	ldr	r1, [pc, #76]	; (8004844 <HAL_GPIO_Init+0x324>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_GPIO_Init+0x324>)
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	490e      	ldr	r1, [pc, #56]	; (8004844 <HAL_GPIO_Init+0x324>)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	60cb      	str	r3, [r1, #12]
 8004812:	e006      	b.n	8004822 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_GPIO_Init+0x324>)
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	43db      	mvns	r3, r3
 800481c:	4909      	ldr	r1, [pc, #36]	; (8004844 <HAL_GPIO_Init+0x324>)
 800481e:	4013      	ands	r3, r2
 8004820:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	f47f ae7e 	bne.w	8004534 <HAL_GPIO_Init+0x14>
  }
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	372c      	adds	r7, #44	; 0x2c
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	40010400 	.word	0x40010400

08004848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e12b      	b.n	8004ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fe f862 	bl	8002938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	; 0x24
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800489a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048ac:	f001 fb6e 	bl	8005f8c <HAL_RCC_GetPCLK1Freq>
 80048b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4a81      	ldr	r2, [pc, #516]	; (8004abc <HAL_I2C_Init+0x274>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d807      	bhi.n	80048cc <HAL_I2C_Init+0x84>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a80      	ldr	r2, [pc, #512]	; (8004ac0 <HAL_I2C_Init+0x278>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf94      	ite	ls
 80048c4:	2301      	movls	r3, #1
 80048c6:	2300      	movhi	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e006      	b.n	80048da <HAL_I2C_Init+0x92>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a7d      	ldr	r2, [pc, #500]	; (8004ac4 <HAL_I2C_Init+0x27c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	bf94      	ite	ls
 80048d4:	2301      	movls	r3, #1
 80048d6:	2300      	movhi	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0e7      	b.n	8004ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a78      	ldr	r2, [pc, #480]	; (8004ac8 <HAL_I2C_Init+0x280>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	0c9b      	lsrs	r3, r3, #18
 80048ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4a6a      	ldr	r2, [pc, #424]	; (8004abc <HAL_I2C_Init+0x274>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d802      	bhi.n	800491c <HAL_I2C_Init+0xd4>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3301      	adds	r3, #1
 800491a:	e009      	b.n	8004930 <HAL_I2C_Init+0xe8>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	4a69      	ldr	r2, [pc, #420]	; (8004acc <HAL_I2C_Init+0x284>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	3301      	adds	r3, #1
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	430b      	orrs	r3, r1
 8004936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004942:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	495c      	ldr	r1, [pc, #368]	; (8004abc <HAL_I2C_Init+0x274>)
 800494c:	428b      	cmp	r3, r1
 800494e:	d819      	bhi.n	8004984 <HAL_I2C_Init+0x13c>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1e59      	subs	r1, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fbb1 f3f3 	udiv	r3, r1, r3
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004964:	400b      	ands	r3, r1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_I2C_Init+0x138>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e59      	subs	r1, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fbb1 f3f3 	udiv	r3, r1, r3
 8004978:	3301      	adds	r3, #1
 800497a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497e:	e051      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 8004980:	2304      	movs	r3, #4
 8004982:	e04f      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d111      	bne.n	80049b0 <HAL_I2C_Init+0x168>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1e58      	subs	r0, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	440b      	add	r3, r1
 800499a:	fbb0 f3f3 	udiv	r3, r0, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e012      	b.n	80049d6 <HAL_I2C_Init+0x18e>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_I2C_Init+0x196>
 80049da:	2301      	movs	r3, #1
 80049dc:	e022      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10e      	bne.n	8004a04 <HAL_I2C_Init+0x1bc>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1e58      	subs	r0, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	440b      	add	r3, r1
 80049f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f8:	3301      	adds	r3, #1
 80049fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	e00f      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e58      	subs	r0, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	0099      	lsls	r1, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	6809      	ldr	r1, [r1, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6911      	ldr	r1, [r2, #16]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	000186a0 	.word	0x000186a0
 8004ac0:	001e847f 	.word	0x001e847f
 8004ac4:	003d08ff 	.word	0x003d08ff
 8004ac8:	431bde83 	.word	0x431bde83
 8004acc:	10624dd3 	.word	0x10624dd3

08004ad0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	461a      	mov	r2, r3
 8004adc:	460b      	mov	r3, r1
 8004ade:	817b      	strh	r3, [r7, #10]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7fe f98a 	bl	8002dfc <HAL_GetTick>
 8004ae8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	f040 80e0 	bne.w	8004cb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2319      	movs	r3, #25
 8004afe:	2201      	movs	r2, #1
 8004b00:	4970      	ldr	r1, [pc, #448]	; (8004cc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fc92 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0d3      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2C_Master_Transmit+0x50>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e0cc      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1ea>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d007      	beq.n	8004b46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2221      	movs	r2, #33	; 0x21
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2210      	movs	r2, #16
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4a50      	ldr	r2, [pc, #320]	; (8004cc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b88:	8979      	ldrh	r1, [r7, #10]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	6a3a      	ldr	r2, [r7, #32]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fafc 	bl	800518c <I2C_MasterRequestWrite>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e08d      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bb4:	e066      	b.n	8004c84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	6a39      	ldr	r1, [r7, #32]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fd0c 	bl	80055d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d107      	bne.n	8004bde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06b      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	781a      	ldrb	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d11b      	bne.n	8004c58 <HAL_I2C_Master_Transmit+0x188>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d017      	beq.n	8004c58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	781a      	ldrb	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	6a39      	ldr	r1, [r7, #32]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fcfc 	bl	800565a <I2C_WaitOnBTFFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00d      	beq.n	8004c84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d107      	bne.n	8004c80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e01a      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d194      	bne.n	8004bb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	00100002 	.word	0x00100002
 8004cc8:	ffff0000 	.word	0xffff0000

08004ccc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	; 0x30
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	460b      	mov	r3, r1
 8004cda:	817b      	strh	r3, [r7, #10]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ce4:	f7fe f88a 	bl	8002dfc <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	f040 823f 	bne.w	8005176 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2319      	movs	r3, #25
 8004cfe:	2201      	movs	r2, #1
 8004d00:	497f      	ldr	r1, [pc, #508]	; (8004f00 <HAL_I2C_Master_Receive+0x234>)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fb92 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e232      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_I2C_Master_Receive+0x54>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e22b      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d007      	beq.n	8004d46 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2222      	movs	r2, #34	; 0x22
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2210      	movs	r2, #16
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	893a      	ldrh	r2, [r7, #8]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a5f      	ldr	r2, [pc, #380]	; (8004f04 <HAL_I2C_Master_Receive+0x238>)
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d88:	8979      	ldrh	r1, [r7, #10]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fa7e 	bl	8005290 <I2C_MasterRequestRead>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e1ec      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d113      	bne.n	8004dce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e1c0      	b.n	8005150 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d11e      	bne.n	8004e14 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004de6:	b672      	cpsid	i
}
 8004de8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e10:	b662      	cpsie	i
}
 8004e12:	e035      	b.n	8004e80 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d11e      	bne.n	8004e5a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e2c:	b672      	cpsid	i
}
 8004e2e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e56:	b662      	cpsie	i
}
 8004e58:	e012      	b.n	8004e80 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e80:	e166      	b.n	8005150 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	f200 811f 	bhi.w	80050ca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d123      	bne.n	8004edc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fc1f 	bl	80056dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e167      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eda:	e139      	b.n	8005150 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d152      	bne.n	8004f8a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	2200      	movs	r2, #0
 8004eec:	4906      	ldr	r1, [pc, #24]	; (8004f08 <HAL_I2C_Master_Receive+0x23c>)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fa9c 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e13c      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
 8004efe:	bf00      	nop
 8004f00:	00100002 	.word	0x00100002
 8004f04:	ffff0000 	.word	0xffff0000
 8004f08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004f0c:	b672      	cpsid	i
}
 8004f0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f52:	b662      	cpsie	i
}
 8004f54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f88:	e0e2      	b.n	8005150 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	2200      	movs	r2, #0
 8004f92:	497b      	ldr	r1, [pc, #492]	; (8005180 <HAL_I2C_Master_Receive+0x4b4>)
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fa49 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0e9      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fb4:	b672      	cpsid	i
}
 8004fb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fea:	4b66      	ldr	r3, [pc, #408]	; (8005184 <HAL_I2C_Master_Receive+0x4b8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	08db      	lsrs	r3, r3, #3
 8004ff0:	4a65      	ldr	r2, [pc, #404]	; (8005188 <HAL_I2C_Master_Receive+0x4bc>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	0a1a      	lsrs	r2, r3, #8
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00da      	lsls	r2, r3, #3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	3b01      	subs	r3, #1
 8005008:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d118      	bne.n	8005042 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005032:	b662      	cpsie	i
}
 8005034:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e09a      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d1d9      	bne.n	8005004 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005092:	b662      	cpsie	i
}
 8005094:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050c8:	e042      	b.n	8005150 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fb04 	bl	80056dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e04c      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b04      	cmp	r3, #4
 800511c:	d118      	bne.n	8005150 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	2b00      	cmp	r3, #0
 8005156:	f47f ae94 	bne.w	8004e82 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	00010004 	.word	0x00010004
 8005184:	20000008 	.word	0x20000008
 8005188:	14f8b589 	.word	0x14f8b589

0800518c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	460b      	mov	r3, r1
 800519a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d006      	beq.n	80051b6 <I2C_MasterRequestWrite+0x2a>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d003      	beq.n	80051b6 <I2C_MasterRequestWrite+0x2a>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b4:	d108      	bne.n	80051c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e00b      	b.n	80051e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	2b12      	cmp	r3, #18
 80051ce:	d107      	bne.n	80051e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f91d 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	d103      	bne.n	8005210 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e035      	b.n	8005280 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800521c:	d108      	bne.n	8005230 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800522c:	611a      	str	r2, [r3, #16]
 800522e:	e01b      	b.n	8005268 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005230:	897b      	ldrh	r3, [r7, #10]
 8005232:	11db      	asrs	r3, r3, #7
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 0306 	and.w	r3, r3, #6
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f063 030f 	orn	r3, r3, #15
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	490e      	ldr	r1, [pc, #56]	; (8005288 <I2C_MasterRequestWrite+0xfc>)
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f943 	bl	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e010      	b.n	8005280 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800525e:	897b      	ldrh	r3, [r7, #10]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4907      	ldr	r1, [pc, #28]	; (800528c <I2C_MasterRequestWrite+0x100>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f933 	bl	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	00010008 	.word	0x00010008
 800528c:	00010002 	.word	0x00010002

08005290 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	460b      	mov	r3, r1
 800529e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d006      	beq.n	80052ca <I2C_MasterRequestRead+0x3a>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d003      	beq.n	80052ca <I2C_MasterRequestRead+0x3a>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052c8:	d108      	bne.n	80052dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e00b      	b.n	80052f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	2b11      	cmp	r3, #17
 80052e2:	d107      	bne.n	80052f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f893 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00d      	beq.n	8005328 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531a:	d103      	bne.n	8005324 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005322:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e079      	b.n	800541c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005330:	d108      	bne.n	8005344 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	611a      	str	r2, [r3, #16]
 8005342:	e05f      	b.n	8005404 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005344:	897b      	ldrh	r3, [r7, #10]
 8005346:	11db      	asrs	r3, r3, #7
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0306 	and.w	r3, r3, #6
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f063 030f 	orn	r3, r3, #15
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4930      	ldr	r1, [pc, #192]	; (8005424 <I2C_MasterRequestRead+0x194>)
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f8b9 	bl	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e054      	b.n	800541c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005372:	897b      	ldrh	r3, [r7, #10]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	4929      	ldr	r1, [pc, #164]	; (8005428 <I2C_MasterRequestRead+0x198>)
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f8a9 	bl	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e044      	b.n	800541c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f831 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00d      	beq.n	80053ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053de:	d103      	bne.n	80053e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e017      	b.n	800541c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80053ec:	897b      	ldrh	r3, [r7, #10]
 80053ee:	11db      	asrs	r3, r3, #7
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 0306 	and.w	r3, r3, #6
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f063 030e 	orn	r3, r3, #14
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4907      	ldr	r1, [pc, #28]	; (8005428 <I2C_MasterRequestRead+0x198>)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f865 	bl	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	00010008 	.word	0x00010008
 8005428:	00010002 	.word	0x00010002

0800542c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800543c:	e025      	b.n	800548a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d021      	beq.n	800548a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fd fcd9 	bl	8002dfc <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d116      	bne.n	800548a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f043 0220 	orr.w	r2, r3, #32
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e023      	b.n	80054d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d10d      	bne.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	43da      	mvns	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	e00c      	b.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	43da      	mvns	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bf0c      	ite	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	2300      	movne	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d0b6      	beq.n	800543e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054e8:	e051      	b.n	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f8:	d123      	bne.n	8005542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e046      	b.n	80055d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d021      	beq.n	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554a:	f7fd fc57 	bl	8002dfc <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d116      	bne.n	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f043 0220 	orr.w	r2, r3, #32
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e020      	b.n	80055d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	0c1b      	lsrs	r3, r3, #16
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d10c      	bne.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	43da      	mvns	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4013      	ands	r3, r2
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	e00b      	b.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	43da      	mvns	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d18d      	bne.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e4:	e02d      	b.n	8005642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f8ce 	bl	8005788 <I2C_IsAcknowledgeFailed>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e02d      	b.n	8005652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d021      	beq.n	8005642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fd fbfd 	bl	8002dfc <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d116      	bne.n	8005642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e007      	b.n	8005652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d1ca      	bne.n	80055e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005666:	e02d      	b.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f88d 	bl	8005788 <I2C_IsAcknowledgeFailed>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e02d      	b.n	80056d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d021      	beq.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005680:	f7fd fbbc 	bl	8002dfc <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e007      	b.n	80056d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d1ca      	bne.n	8005668 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056e8:	e042      	b.n	8005770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d119      	bne.n	800572c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0210 	mvn.w	r2, #16
 8005700:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e029      	b.n	8005780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572c:	f7fd fb66 	bl	8002dfc <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d302      	bcc.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d116      	bne.n	8005770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e007      	b.n	8005780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	d1b5      	bne.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579e:	d11b      	bne.n	80057d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	f043 0204 	orr.w	r2, r3, #4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e272      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8087 	beq.w	8005912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005804:	4b92      	ldr	r3, [pc, #584]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b04      	cmp	r3, #4
 800580e:	d00c      	beq.n	800582a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005810:	4b8f      	ldr	r3, [pc, #572]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b08      	cmp	r3, #8
 800581a:	d112      	bne.n	8005842 <HAL_RCC_OscConfig+0x5e>
 800581c:	4b8c      	ldr	r3, [pc, #560]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005828:	d10b      	bne.n	8005842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582a:	4b89      	ldr	r3, [pc, #548]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d06c      	beq.n	8005910 <HAL_RCC_OscConfig+0x12c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d168      	bne.n	8005910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e24c      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584a:	d106      	bne.n	800585a <HAL_RCC_OscConfig+0x76>
 800584c:	4b80      	ldr	r3, [pc, #512]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a7f      	ldr	r2, [pc, #508]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	e02e      	b.n	80058b8 <HAL_RCC_OscConfig+0xd4>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10c      	bne.n	800587c <HAL_RCC_OscConfig+0x98>
 8005862:	4b7b      	ldr	r3, [pc, #492]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a7a      	ldr	r2, [pc, #488]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	4b78      	ldr	r3, [pc, #480]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a77      	ldr	r2, [pc, #476]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e01d      	b.n	80058b8 <HAL_RCC_OscConfig+0xd4>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005884:	d10c      	bne.n	80058a0 <HAL_RCC_OscConfig+0xbc>
 8005886:	4b72      	ldr	r3, [pc, #456]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a71      	ldr	r2, [pc, #452]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800588c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b6f      	ldr	r3, [pc, #444]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a6e      	ldr	r2, [pc, #440]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e00b      	b.n	80058b8 <HAL_RCC_OscConfig+0xd4>
 80058a0:	4b6b      	ldr	r3, [pc, #428]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a6a      	ldr	r2, [pc, #424]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	4b68      	ldr	r3, [pc, #416]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a67      	ldr	r2, [pc, #412]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80058b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d013      	beq.n	80058e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c0:	f7fd fa9c 	bl	8002dfc <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fd fa98 	bl	8002dfc <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e200      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	4b5d      	ldr	r3, [pc, #372]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0xe4>
 80058e6:	e014      	b.n	8005912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fd fa88 	bl	8002dfc <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f0:	f7fd fa84 	bl	8002dfc <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e1ec      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005902:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x10c>
 800590e:	e000      	b.n	8005912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d063      	beq.n	80059e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800591e:	4b4c      	ldr	r3, [pc, #304]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800592a:	4b49      	ldr	r3, [pc, #292]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b08      	cmp	r3, #8
 8005934:	d11c      	bne.n	8005970 <HAL_RCC_OscConfig+0x18c>
 8005936:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d116      	bne.n	8005970 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005942:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <HAL_RCC_OscConfig+0x176>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d001      	beq.n	800595a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e1c0      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595a:	4b3d      	ldr	r3, [pc, #244]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4939      	ldr	r1, [pc, #228]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800596e:	e03a      	b.n	80059e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d020      	beq.n	80059ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005978:	4b36      	ldr	r3, [pc, #216]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800597a:	2201      	movs	r2, #1
 800597c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597e:	f7fd fa3d 	bl	8002dfc <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005986:	f7fd fa39 	bl	8002dfc <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e1a1      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005998:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a4:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4927      	ldr	r1, [pc, #156]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]
 80059b8:	e015      	b.n	80059e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ba:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fd fa1c 	bl	8002dfc <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059c8:	f7fd fa18 	bl	8002dfc <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e180      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d03a      	beq.n	8005a68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d019      	beq.n	8005a2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fa:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <HAL_RCC_OscConfig+0x274>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a00:	f7fd f9fc 	bl	8002dfc <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a08:	f7fd f9f8 	bl	8002dfc <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e160      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <HAL_RCC_OscConfig+0x26c>)
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f000 fad8 	bl	8005fdc <RCC_Delay>
 8005a2c:	e01c      	b.n	8005a68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <HAL_RCC_OscConfig+0x274>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a34:	f7fd f9e2 	bl	8002dfc <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a3a:	e00f      	b.n	8005a5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3c:	f7fd f9de 	bl	8002dfc <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d908      	bls.n	8005a5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e146      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
 8005a54:	42420000 	.word	0x42420000
 8005a58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	4b92      	ldr	r3, [pc, #584]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e9      	bne.n	8005a3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a6 	beq.w	8005bc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a76:	2300      	movs	r3, #0
 8005a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7a:	4b8b      	ldr	r3, [pc, #556]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a86:	4b88      	ldr	r3, [pc, #544]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	4a87      	ldr	r2, [pc, #540]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a90:	61d3      	str	r3, [r2, #28]
 8005a92:	4b85      	ldr	r3, [pc, #532]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa2:	4b82      	ldr	r3, [pc, #520]	; (8005cac <HAL_RCC_OscConfig+0x4c8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d118      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aae:	4b7f      	ldr	r3, [pc, #508]	; (8005cac <HAL_RCC_OscConfig+0x4c8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a7e      	ldr	r2, [pc, #504]	; (8005cac <HAL_RCC_OscConfig+0x4c8>)
 8005ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aba:	f7fd f99f 	bl	8002dfc <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac2:	f7fd f99b 	bl	8002dfc <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b64      	cmp	r3, #100	; 0x64
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e103      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad4:	4b75      	ldr	r3, [pc, #468]	; (8005cac <HAL_RCC_OscConfig+0x4c8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d106      	bne.n	8005af6 <HAL_RCC_OscConfig+0x312>
 8005ae8:	4b6f      	ldr	r3, [pc, #444]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	4a6e      	ldr	r2, [pc, #440]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	6213      	str	r3, [r2, #32]
 8005af4:	e02d      	b.n	8005b52 <HAL_RCC_OscConfig+0x36e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCC_OscConfig+0x334>
 8005afe:	4b6a      	ldr	r3, [pc, #424]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	4a69      	ldr	r2, [pc, #420]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	6213      	str	r3, [r2, #32]
 8005b0a:	4b67      	ldr	r3, [pc, #412]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	4a66      	ldr	r2, [pc, #408]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b10:	f023 0304 	bic.w	r3, r3, #4
 8005b14:	6213      	str	r3, [r2, #32]
 8005b16:	e01c      	b.n	8005b52 <HAL_RCC_OscConfig+0x36e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d10c      	bne.n	8005b3a <HAL_RCC_OscConfig+0x356>
 8005b20:	4b61      	ldr	r3, [pc, #388]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	4a60      	ldr	r2, [pc, #384]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b26:	f043 0304 	orr.w	r3, r3, #4
 8005b2a:	6213      	str	r3, [r2, #32]
 8005b2c:	4b5e      	ldr	r3, [pc, #376]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	4a5d      	ldr	r2, [pc, #372]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b32:	f043 0301 	orr.w	r3, r3, #1
 8005b36:	6213      	str	r3, [r2, #32]
 8005b38:	e00b      	b.n	8005b52 <HAL_RCC_OscConfig+0x36e>
 8005b3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	4a5a      	ldr	r2, [pc, #360]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	6213      	str	r3, [r2, #32]
 8005b46:	4b58      	ldr	r3, [pc, #352]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	4a57      	ldr	r2, [pc, #348]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b4c:	f023 0304 	bic.w	r3, r3, #4
 8005b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d015      	beq.n	8005b86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b5a:	f7fd f94f 	bl	8002dfc <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b60:	e00a      	b.n	8005b78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b62:	f7fd f94b 	bl	8002dfc <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e0b1      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b78:	4b4b      	ldr	r3, [pc, #300]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0ee      	beq.n	8005b62 <HAL_RCC_OscConfig+0x37e>
 8005b84:	e014      	b.n	8005bb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b86:	f7fd f939 	bl	8002dfc <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b8c:	e00a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8e:	f7fd f935 	bl	8002dfc <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e09b      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba4:	4b40      	ldr	r3, [pc, #256]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ee      	bne.n	8005b8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d105      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb6:	4b3c      	ldr	r3, [pc, #240]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	4a3b      	ldr	r2, [pc, #236]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8087 	beq.w	8005cda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bcc:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 030c 	and.w	r3, r3, #12
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d061      	beq.n	8005c9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d146      	bne.n	8005c6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be0:	4b33      	ldr	r3, [pc, #204]	; (8005cb0 <HAL_RCC_OscConfig+0x4cc>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be6:	f7fd f909 	bl	8002dfc <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bee:	f7fd f905 	bl	8002dfc <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e06d      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c00:	4b29      	ldr	r3, [pc, #164]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c14:	d108      	bne.n	8005c28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c16:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	4921      	ldr	r1, [pc, #132]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c28:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a19      	ldr	r1, [r3, #32]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	491b      	ldr	r1, [pc, #108]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c40:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_RCC_OscConfig+0x4cc>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7fd f8d9 	bl	8002dfc <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fd f8d5 	bl	8002dfc <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e03d      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x46a>
 8005c6c:	e035      	b.n	8005cda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_RCC_OscConfig+0x4cc>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c74:	f7fd f8c2 	bl	8002dfc <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fd f8be 	bl	8002dfc <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e026      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_RCC_OscConfig+0x4c4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x498>
 8005c9a:	e01e      	b.n	8005cda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e019      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40007000 	.word	0x40007000
 8005cb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_OscConfig+0x500>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d106      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40021000 	.word	0x40021000

08005ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0d0      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cfc:	4b6a      	ldr	r3, [pc, #424]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d910      	bls.n	8005d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0a:	4b67      	ldr	r3, [pc, #412]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 0207 	bic.w	r2, r3, #7
 8005d12:	4965      	ldr	r1, [pc, #404]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0b8      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d44:	4b59      	ldr	r3, [pc, #356]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a58      	ldr	r2, [pc, #352]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005d4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d5c:	4b53      	ldr	r3, [pc, #332]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a52      	ldr	r2, [pc, #328]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b50      	ldr	r3, [pc, #320]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	494d      	ldr	r1, [pc, #308]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d040      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	4b47      	ldr	r3, [pc, #284]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d115      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e07f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d107      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da6:	4b41      	ldr	r3, [pc, #260]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e073      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db6:	4b3d      	ldr	r3, [pc, #244]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06b      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dc6:	4b39      	ldr	r3, [pc, #228]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f023 0203 	bic.w	r2, r3, #3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	4936      	ldr	r1, [pc, #216]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dd8:	f7fd f810 	bl	8002dfc <HAL_GetTick>
 8005ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dde:	e00a      	b.n	8005df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de0:	f7fd f80c 	bl	8002dfc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e053      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df6:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f003 020c 	and.w	r2, r3, #12
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d1eb      	bne.n	8005de0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e08:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d210      	bcs.n	8005e38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 0207 	bic.w	r2, r3, #7
 8005e1e:	4922      	ldr	r1, [pc, #136]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e032      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e44:	4b19      	ldr	r3, [pc, #100]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4916      	ldr	r1, [pc, #88]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	490e      	ldr	r1, [pc, #56]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e76:	f000 f821 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	490a      	ldr	r1, [pc, #40]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e88:	5ccb      	ldrb	r3, [r1, r3]
 8005e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8005e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fc ff6e 	bl	8002d78 <HAL_InitTick>

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40022000 	.word	0x40022000
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	0800b42c 	.word	0x0800b42c
 8005eb4:	20000008 	.word	0x20000008
 8005eb8:	2000000c 	.word	0x2000000c

08005ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ebc:	b490      	push	{r4, r7}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ec2:	4b29      	ldr	r3, [pc, #164]	; (8005f68 <HAL_RCC_GetSysClockFreq+0xac>)
 8005ec4:	1d3c      	adds	r4, r7, #4
 8005ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ecc:	f240 2301 	movw	r3, #513	; 0x201
 8005ed0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d002      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x40>
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d003      	beq.n	8005f02 <HAL_RCC_GetSysClockFreq+0x46>
 8005efa:	e02b      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005efc:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005efe:	623b      	str	r3, [r7, #32]
      break;
 8005f00:	e02b      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	0c9b      	lsrs	r3, r3, #18
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	3328      	adds	r3, #40	; 0x28
 8005f0c:	443b      	add	r3, r7
 8005f0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d012      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	0c5b      	lsrs	r3, r3, #17
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	3328      	adds	r3, #40	; 0x28
 8005f2a:	443b      	add	r3, r7
 8005f2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4a0e      	ldr	r2, [pc, #56]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f36:	fb03 f202 	mul.w	r2, r3, r2
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	e004      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	623b      	str	r3, [r7, #32]
      break;
 8005f52:	e002      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f56:	623b      	str	r3, [r7, #32]
      break;
 8005f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	; 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc90      	pop	{r4, r7}
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	0800b41c 	.word	0x0800b41c
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	007a1200 	.word	0x007a1200
 8005f74:	003d0900 	.word	0x003d0900

08005f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	20000008 	.word	0x20000008

08005f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f90:	f7ff fff2 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005f94:	4602      	mov	r2, r0
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	0a1b      	lsrs	r3, r3, #8
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	4903      	ldr	r1, [pc, #12]	; (8005fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa2:	5ccb      	ldrb	r3, [r1, r3]
 8005fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	0800b43c 	.word	0x0800b43c

08005fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fb8:	f7ff ffde 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	0adb      	lsrs	r3, r3, #11
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4903      	ldr	r1, [pc, #12]	; (8005fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	0800b43c 	.word	0x0800b43c

08005fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <RCC_Delay+0x34>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <RCC_Delay+0x38>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	0a5b      	lsrs	r3, r3, #9
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ff8:	bf00      	nop
  }
  while (Delay --);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	60fa      	str	r2, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f9      	bne.n	8005ff8 <RCC_Delay+0x1c>
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr
 8006010:	20000008 	.word	0x20000008
 8006014:	10624dd3 	.word	0x10624dd3

08006018 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d07d      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006038:	4b4f      	ldr	r3, [pc, #316]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10d      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006044:	4b4c      	ldr	r3, [pc, #304]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	4a4b      	ldr	r2, [pc, #300]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604e:	61d3      	str	r3, [r2, #28]
 8006050:	4b49      	ldr	r3, [pc, #292]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006060:	4b46      	ldr	r3, [pc, #280]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d118      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606c:	4b43      	ldr	r3, [pc, #268]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a42      	ldr	r2, [pc, #264]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006078:	f7fc fec0 	bl	8002dfc <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607e:	e008      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006080:	f7fc febc 	bl	8002dfc <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e06d      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006092:	4b3a      	ldr	r3, [pc, #232]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800609e:	4b36      	ldr	r3, [pc, #216]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02e      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d027      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060bc:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060cc:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060d2:	4a29      	ldr	r2, [pc, #164]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d014      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e2:	f7fc fe8b 	bl	8002dfc <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	e00a      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fc fe87 	bl	8002dfc <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e036      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006100:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0ee      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4917      	ldr	r1, [pc, #92]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611a:	4313      	orrs	r3, r2
 800611c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800613c:	4b0e      	ldr	r3, [pc, #56]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	490b      	ldr	r1, [pc, #44]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614a:	4313      	orrs	r3, r2
 800614c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	4904      	ldr	r1, [pc, #16]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006168:	4313      	orrs	r3, r2
 800616a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40021000 	.word	0x40021000
 800617c:	40007000 	.word	0x40007000
 8006180:	42420440 	.word	0x42420440

08006184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e041      	b.n	800621a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fc02 	bl	80029b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f000 f94a 	bl	800645c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e03c      	b.n	80062b6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_TIM_Base_Start+0x9c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIM_Base_Start+0x5c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_TIM_Base_Start+0xa0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIM_Base_Start+0x5c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006260:	d00e      	beq.n	8006280 <HAL_TIM_Base_Start+0x5c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_TIM_Base_Start+0xa4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIM_Base_Start+0x5c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a16      	ldr	r2, [pc, #88]	; (80062cc <HAL_TIM_Base_Start+0xa8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_Base_Start+0x5c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_TIM_Base_Start+0xac>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d111      	bne.n	80062a4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b06      	cmp	r3, #6
 8006290:	d010      	beq.n	80062b4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0201 	orr.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a2:	e007      	b.n	80062b4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00

080062d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_TIM_ConfigClockSource+0x18>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e0b3      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x180>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800630a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006312:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006324:	d03e      	beq.n	80063a4 <HAL_TIM_ConfigClockSource+0xd0>
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632a:	f200 8087 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x168>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006332:	f000 8085 	beq.w	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d87f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x168>
 800633c:	2b70      	cmp	r3, #112	; 0x70
 800633e:	d01a      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0xa2>
 8006340:	2b70      	cmp	r3, #112	; 0x70
 8006342:	d87b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x168>
 8006344:	2b60      	cmp	r3, #96	; 0x60
 8006346:	d050      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x116>
 8006348:	2b60      	cmp	r3, #96	; 0x60
 800634a:	d877      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x168>
 800634c:	2b50      	cmp	r3, #80	; 0x50
 800634e:	d03c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0xf6>
 8006350:	2b50      	cmp	r3, #80	; 0x50
 8006352:	d873      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x168>
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d058      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x136>
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d86f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x168>
 800635c:	2b30      	cmp	r3, #48	; 0x30
 800635e:	d064      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x156>
 8006360:	2b30      	cmp	r3, #48	; 0x30
 8006362:	d86b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x168>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d060      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x156>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d867      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x168>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d05c      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x156>
 8006370:	2b10      	cmp	r3, #16
 8006372:	d05a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006374:	e062      	b.n	800643c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6899      	ldr	r1, [r3, #8]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f000 f95a 	bl	800663e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006398:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	609a      	str	r2, [r3, #8]
      break;
 80063a2:	e04e      	b.n	8006442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6899      	ldr	r1, [r3, #8]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f000 f943 	bl	800663e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063c6:	609a      	str	r2, [r3, #8]
      break;
 80063c8:	e03b      	b.n	8006442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 f8ba 	bl	8006550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2150      	movs	r1, #80	; 0x50
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f911 	bl	800660a <TIM_ITRx_SetConfig>
      break;
 80063e8:	e02b      	b.n	8006442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 f8d8 	bl	80065ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2160      	movs	r1, #96	; 0x60
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f901 	bl	800660a <TIM_ITRx_SetConfig>
      break;
 8006408:	e01b      	b.n	8006442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	461a      	mov	r2, r3
 8006418:	f000 f89a 	bl	8006550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f8f1 	bl	800660a <TIM_ITRx_SetConfig>
      break;
 8006428:	e00b      	b.n	8006442 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f000 f8e8 	bl	800660a <TIM_ITRx_SetConfig>
        break;
 800643a:	e002      	b.n	8006442 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006440:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a33      	ldr	r2, [pc, #204]	; (800653c <TIM_Base_SetConfig+0xe0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d013      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a32      	ldr	r2, [pc, #200]	; (8006540 <TIM_Base_SetConfig+0xe4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00f      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006482:	d00b      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <TIM_Base_SetConfig+0xe8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d007      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a2e      	ldr	r2, [pc, #184]	; (8006548 <TIM_Base_SetConfig+0xec>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a2d      	ldr	r2, [pc, #180]	; (800654c <TIM_Base_SetConfig+0xf0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a22      	ldr	r2, [pc, #136]	; (800653c <TIM_Base_SetConfig+0xe0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <TIM_Base_SetConfig+0x82>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a21      	ldr	r2, [pc, #132]	; (8006540 <TIM_Base_SetConfig+0xe4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00f      	beq.n	80064de <TIM_Base_SetConfig+0x82>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d00b      	beq.n	80064de <TIM_Base_SetConfig+0x82>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <TIM_Base_SetConfig+0xe8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d007      	beq.n	80064de <TIM_Base_SetConfig+0x82>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a1d      	ldr	r2, [pc, #116]	; (8006548 <TIM_Base_SetConfig+0xec>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_Base_SetConfig+0x82>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1c      	ldr	r2, [pc, #112]	; (800654c <TIM_Base_SetConfig+0xf0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d108      	bne.n	80064f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <TIM_Base_SetConfig+0xe0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0xc8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a08      	ldr	r2, [pc, #32]	; (8006540 <TIM_Base_SetConfig+0xe4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d103      	bne.n	800652c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	615a      	str	r2, [r3, #20]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00

08006550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f023 0201 	bic.w	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800657a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 030a 	bic.w	r3, r3, #10
 800658c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f023 0210 	bic.w	r2, r3, #16
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	031b      	lsls	r3, r3, #12
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	f043 0307 	orr.w	r3, r3, #7
 800662c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	609a      	str	r2, [r3, #8]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr

0800663e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006658:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	021a      	lsls	r2, r3, #8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	431a      	orrs	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4313      	orrs	r3, r2
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	609a      	str	r2, [r3, #8]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006690:	2302      	movs	r3, #2
 8006692:	e050      	b.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a19      	ldr	r2, [pc, #100]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ea:	d00e      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a15      	ldr	r2, [pc, #84]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a14      	ldr	r2, [pc, #80]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a12      	ldr	r2, [pc, #72]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d10c      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	4313      	orrs	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40000400 	.word	0x40000400
 800674c:	40000800 	.word	0x40000800
 8006750:	40000c00 	.word	0x40000c00

08006754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e03f      	b.n	80067e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fc f936 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fd9b 	bl	80072d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695a      	ldr	r2, [r3, #20]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b08a      	sub	sp, #40	; 0x28
 80067f2:	af02      	add	r7, sp, #8
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	603b      	str	r3, [r7, #0]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b20      	cmp	r3, #32
 800680c:	d17c      	bne.n	8006908 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_UART_Transmit+0x2c>
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e075      	b.n	800690a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_UART_Transmit+0x3e>
 8006828:	2302      	movs	r3, #2
 800682a:	e06e      	b.n	800690a <HAL_UART_Transmit+0x11c>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2221      	movs	r2, #33	; 0x21
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006842:	f7fc fadb 	bl	8002dfc <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685c:	d108      	bne.n	8006870 <HAL_UART_Transmit+0x82>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	e003      	b.n	8006878 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006874:	2300      	movs	r3, #0
 8006876:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006880:	e02a      	b.n	80068d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2200      	movs	r2, #0
 800688a:	2180      	movs	r1, #128	; 0x80
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fb0d 	bl	8006eac <UART_WaitOnFlagUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e036      	b.n	800690a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	3302      	adds	r3, #2
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	e007      	b.n	80068ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	3301      	adds	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1cf      	bne.n	8006882 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2200      	movs	r2, #0
 80068ea:	2140      	movs	r1, #64	; 0x40
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 fadd 	bl	8006eac <UART_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e006      	b.n	800690a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006908:	2302      	movs	r3, #2
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	4613      	mov	r3, r2
 800691e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b20      	cmp	r3, #32
 800692a:	d13c      	bne.n	80069a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e035      	b.n	80069a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006946:	2302      	movs	r3, #2
 8006948:	e02e      	b.n	80069a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	461a      	mov	r2, r3
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 faee 	bl	8006f40 <UART_Start_Receive_DMA>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d119      	bne.n	80069a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	2b01      	cmp	r3, #1
 8006974:	d113      	bne.n	800699e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0210 	orr.w	r2, r2, #16
 800699a:	60da      	str	r2, [r3, #12]
 800699c:	e001      	b.n	80069a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
 80069a4:	e000      	b.n	80069a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80069a6:	2302      	movs	r3, #2
  }
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_UART_IRQHandler+0x52>
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fbc0 	bl	8007180 <UART_Receive_IT>
      return;
 8006a00:	e17b      	b.n	8006cfa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80b1 	beq.w	8006b6c <HAL_UART_IRQHandler+0x1bc>
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_UART_IRQHandler+0x70>
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80a6 	beq.w	8006b6c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_UART_IRQHandler+0x90>
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <HAL_UART_IRQHandler+0xb0>
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	f043 0202 	orr.w	r2, r3, #2
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_UART_IRQHandler+0xd0>
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f043 0204 	orr.w	r2, r3, #4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00f      	beq.n	8006aaa <HAL_UART_IRQHandler+0xfa>
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <HAL_UART_IRQHandler+0xee>
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f043 0208 	orr.w	r2, r3, #8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 811e 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_UART_IRQHandler+0x11e>
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fb59 	bl	8007180 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	bf14      	ite	ne
 8006adc:	2301      	movne	r3, #1
 8006ade:	2300      	moveq	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <HAL_UART_IRQHandler+0x146>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d031      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa9b 	bl	8007032 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d023      	beq.n	8006b52 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695a      	ldr	r2, [r3, #20]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d013      	beq.n	8006b4a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	4a76      	ldr	r2, [pc, #472]	; (8006d00 <HAL_UART_IRQHandler+0x350>)
 8006b28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fc ff84 	bl	8003a3c <HAL_DMA_Abort_IT>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d016      	beq.n	8006b68 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	e00e      	b.n	8006b68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f8f5 	bl	8006d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	e00a      	b.n	8006b68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f8f1 	bl	8006d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b58:	e006      	b.n	8006b68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f8ed 	bl	8006d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b66:	e0c3      	b.n	8006cf0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b68:	bf00      	nop
    return;
 8006b6a:	e0c1      	b.n	8006cf0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	f040 80a1 	bne.w	8006cb8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 809b 	beq.w	8006cb8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8095 	beq.w	8006cb8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d04e      	beq.n	8006c50 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006bbc:	8a3b      	ldrh	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8098 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bc8:	8a3a      	ldrh	r2, [r7, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	f080 8092 	bcs.w	8006cf4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8a3a      	ldrh	r2, [r7, #16]
 8006bd4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d02b      	beq.n	8006c38 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695a      	ldr	r2, [r3, #20]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0201 	bic.w	r2, r2, #1
 8006bfe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695a      	ldr	r2, [r3, #20]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0210 	bic.w	r2, r2, #16
 8006c2c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fc fec7 	bl	80039c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7fb f953 	bl	8001ef4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c4e:	e051      	b.n	8006cf4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d047      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006c68:	8a7b      	ldrh	r3, [r7, #18]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d044      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c7c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0201 	bic.w	r2, r2, #1
 8006c8c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0210 	bic.w	r2, r2, #16
 8006caa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cac:	8a7b      	ldrh	r3, [r7, #18]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7fb f91f 	bl	8001ef4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006cb6:	e01f      	b.n	8006cf8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x324>
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f9f0 	bl	80070b2 <UART_Transmit_IT>
    return;
 8006cd2:	e012      	b.n	8006cfa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <HAL_UART_IRQHandler+0x34a>
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fa31 	bl	8007150 <UART_EndTransmit_IT>
    return;
 8006cee:	e004      	b.n	8006cfa <HAL_UART_IRQHandler+0x34a>
    return;
 8006cf0:	bf00      	nop
 8006cf2:	e002      	b.n	8006cfa <HAL_UART_IRQHandler+0x34a>
      return;
 8006cf4:	bf00      	nop
 8006cf6:	e000      	b.n	8006cfa <HAL_UART_IRQHandler+0x34a>
      return;
 8006cf8:	bf00      	nop
  }
}
 8006cfa:	3728      	adds	r7, #40	; 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	0800708b 	.word	0x0800708b

08006d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr

08006d28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr

08006d3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr

08006d4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d12a      	bne.n	8006dbe <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d7c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695a      	ldr	r2, [r3, #20]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d9c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d107      	bne.n	8006dbe <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0210 	bic.w	r2, r2, #16
 8006dbc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d106      	bne.n	8006dd4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dca:	4619      	mov	r1, r3
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7fb f891 	bl	8001ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dd2:	e002      	b.n	8006dda <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff ff9e 	bl	8006d16 <HAL_UART_RxCpltCallback>
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d108      	bne.n	8006e0a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7fb f876 	bl	8001ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e08:	e002      	b.n	8006e10 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff ff8c 	bl	8006d28 <HAL_UART_RxHalfCpltCallback>
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf14      	ite	ne
 8006e38:	2301      	movne	r3, #1
 8006e3a:	2300      	moveq	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b21      	cmp	r3, #33	; 0x21
 8006e4a:	d108      	bne.n	8006e5e <UART_DMAError+0x46>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e58:	68b8      	ldr	r0, [r7, #8]
 8006e5a:	f000 f8d5 	bl	8007008 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bf14      	ite	ne
 8006e6c:	2301      	movne	r3, #1
 8006e6e:	2300      	moveq	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b22      	cmp	r3, #34	; 0x22
 8006e7e:	d108      	bne.n	8006e92 <UART_DMAError+0x7a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e8c:	68b8      	ldr	r0, [r7, #8]
 8006e8e:	f000 f8d0 	bl	8007032 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f043 0210 	orr.w	r2, r3, #16
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f7ff ff4b 	bl	8006d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ebc:	e02c      	b.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d028      	beq.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d007      	beq.n	8006edc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ecc:	f7fb ff96 	bl	8002dfc <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d21d      	bcs.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006eea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695a      	ldr	r2, [r3, #20]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e00f      	b.n	8006f38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4013      	ands	r3, r2
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	bf0c      	ite	eq
 8006f28:	2301      	moveq	r3, #1
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d0c3      	beq.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2222      	movs	r2, #34	; 0x22
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	4a23      	ldr	r2, [pc, #140]	; (8006ffc <UART_Start_Receive_DMA+0xbc>)
 8006f6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	4a22      	ldr	r2, [pc, #136]	; (8007000 <UART_Start_Receive_DMA+0xc0>)
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	4a21      	ldr	r2, [pc, #132]	; (8007004 <UART_Start_Receive_DMA+0xc4>)
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	2200      	movs	r2, #0
 8006f86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f88:	f107 0308 	add.w	r3, r7, #8
 8006f8c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	f7fc fcb2 	bl	8003908 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695a      	ldr	r2, [r3, #20]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	08006d4d 	.word	0x08006d4d
 8007000:	08006de3 	.word	0x08006de3
 8007004:	08006e19 	.word	0x08006e19

08007008 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800701e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007048:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	2b01      	cmp	r3, #1
 8007060:	d107      	bne.n	8007072 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0210 	bic.w	r2, r2, #16
 8007070:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr

0800708a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff fe48 	bl	8006d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b21      	cmp	r3, #33	; 0x21
 80070c4:	d13e      	bne.n	8007144 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ce:	d114      	bne.n	80070fa <UART_Transmit_IT+0x48>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d110      	bne.n	80070fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	1c9a      	adds	r2, r3, #2
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	621a      	str	r2, [r3, #32]
 80070f8:	e008      	b.n	800710c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	1c59      	adds	r1, r3, #1
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6211      	str	r1, [r2, #32]
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29b      	uxth	r3, r3
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4619      	mov	r1, r3
 800711a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10f      	bne.n	8007140 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800712e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800713e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007166:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fdc7 	bl	8006d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b22      	cmp	r3, #34	; 0x22
 8007192:	f040 8099 	bne.w	80072c8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719e:	d117      	bne.n	80071d0 <UART_Receive_IT+0x50>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d113      	bne.n	80071d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	b29a      	uxth	r2, r3
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	1c9a      	adds	r2, r3, #2
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
 80071ce:	e026      	b.n	800721e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e2:	d007      	beq.n	80071f4 <UART_Receive_IT+0x74>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <UART_Receive_IT+0x82>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	e008      	b.n	8007214 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720e:	b2da      	uxtb	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007222:	b29b      	uxth	r3, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	b29b      	uxth	r3, r3
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4619      	mov	r1, r3
 800722c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800722e:	2b00      	cmp	r3, #0
 8007230:	d148      	bne.n	80072c4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0220 	bic.w	r2, r2, #32
 8007240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007250:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695a      	ldr	r2, [r3, #20]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0201 	bic.w	r2, r2, #1
 8007260:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	2b01      	cmp	r3, #1
 8007270:	d123      	bne.n	80072ba <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0210 	bic.w	r2, r2, #16
 8007286:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b10      	cmp	r3, #16
 8007294:	d10a      	bne.n	80072ac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fa fe1e 	bl	8001ef4 <HAL_UARTEx_RxEventCallback>
 80072b8:	e002      	b.n	80072c0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fd2b 	bl	8006d16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e002      	b.n	80072ca <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e000      	b.n	80072ca <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80072c8:	2302      	movs	r3, #2
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800730e:	f023 030c 	bic.w	r3, r3, #12
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	430b      	orrs	r3, r1
 800731a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a2c      	ldr	r2, [pc, #176]	; (80073e8 <UART_SetConfig+0x114>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d103      	bne.n	8007344 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800733c:	f7fe fe3a 	bl	8005fb4 <HAL_RCC_GetPCLK2Freq>
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	e002      	b.n	800734a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007344:	f7fe fe22 	bl	8005f8c <HAL_RCC_GetPCLK1Freq>
 8007348:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009a      	lsls	r2, r3, #2
 8007354:	441a      	add	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007360:	4a22      	ldr	r2, [pc, #136]	; (80073ec <UART_SetConfig+0x118>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	0119      	lsls	r1, r3, #4
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009a      	lsls	r2, r3, #2
 8007374:	441a      	add	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007380:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <UART_SetConfig+0x118>)
 8007382:	fba3 0302 	umull	r0, r3, r3, r2
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	2064      	movs	r0, #100	; 0x64
 800738a:	fb00 f303 	mul.w	r3, r0, r3
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	3332      	adds	r3, #50	; 0x32
 8007394:	4a15      	ldr	r2, [pc, #84]	; (80073ec <UART_SetConfig+0x118>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073a0:	4419      	add	r1, r3
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009a      	lsls	r2, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <UART_SetConfig+0x118>)
 80073ba:	fba3 0302 	umull	r0, r3, r3, r2
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	2064      	movs	r0, #100	; 0x64
 80073c2:	fb00 f303 	mul.w	r3, r0, r3
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	3332      	adds	r3, #50	; 0x32
 80073cc:	4a07      	ldr	r2, [pc, #28]	; (80073ec <UART_SetConfig+0x118>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	f003 020f 	and.w	r2, r3, #15
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	440a      	add	r2, r1
 80073de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40013800 	.word	0x40013800
 80073ec:	51eb851f 	.word	0x51eb851f

080073f0 <cosf>:
 80073f0:	b507      	push	{r0, r1, r2, lr}
 80073f2:	4a1a      	ldr	r2, [pc, #104]	; (800745c <cosf+0x6c>)
 80073f4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80073f8:	4293      	cmp	r3, r2
 80073fa:	4601      	mov	r1, r0
 80073fc:	dc05      	bgt.n	800740a <cosf+0x1a>
 80073fe:	2100      	movs	r1, #0
 8007400:	b003      	add	sp, #12
 8007402:	f85d eb04 	ldr.w	lr, [sp], #4
 8007406:	f000 bab7 	b.w	8007978 <__kernel_cosf>
 800740a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800740e:	db04      	blt.n	800741a <cosf+0x2a>
 8007410:	f7f9 fbfa 	bl	8000c08 <__aeabi_fsub>
 8007414:	b003      	add	sp, #12
 8007416:	f85d fb04 	ldr.w	pc, [sp], #4
 800741a:	4669      	mov	r1, sp
 800741c:	f000 f8fc 	bl	8007618 <__ieee754_rem_pio2f>
 8007420:	f000 0203 	and.w	r2, r0, #3
 8007424:	2a01      	cmp	r2, #1
 8007426:	d007      	beq.n	8007438 <cosf+0x48>
 8007428:	2a02      	cmp	r2, #2
 800742a:	d00c      	beq.n	8007446 <cosf+0x56>
 800742c:	b982      	cbnz	r2, 8007450 <cosf+0x60>
 800742e:	9901      	ldr	r1, [sp, #4]
 8007430:	9800      	ldr	r0, [sp, #0]
 8007432:	f000 faa1 	bl	8007978 <__kernel_cosf>
 8007436:	e7ed      	b.n	8007414 <cosf+0x24>
 8007438:	9901      	ldr	r1, [sp, #4]
 800743a:	9800      	ldr	r0, [sp, #0]
 800743c:	f000 fdce 	bl	8007fdc <__kernel_sinf>
 8007440:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007444:	e7e6      	b.n	8007414 <cosf+0x24>
 8007446:	9901      	ldr	r1, [sp, #4]
 8007448:	9800      	ldr	r0, [sp, #0]
 800744a:	f000 fa95 	bl	8007978 <__kernel_cosf>
 800744e:	e7f7      	b.n	8007440 <cosf+0x50>
 8007450:	2201      	movs	r2, #1
 8007452:	9901      	ldr	r1, [sp, #4]
 8007454:	9800      	ldr	r0, [sp, #0]
 8007456:	f000 fdc1 	bl	8007fdc <__kernel_sinf>
 800745a:	e7db      	b.n	8007414 <cosf+0x24>
 800745c:	3f490fd8 	.word	0x3f490fd8

08007460 <sinf>:
 8007460:	b507      	push	{r0, r1, r2, lr}
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <sinf+0x70>)
 8007464:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007468:	4293      	cmp	r3, r2
 800746a:	4601      	mov	r1, r0
 800746c:	dc06      	bgt.n	800747c <sinf+0x1c>
 800746e:	2200      	movs	r2, #0
 8007470:	2100      	movs	r1, #0
 8007472:	b003      	add	sp, #12
 8007474:	f85d eb04 	ldr.w	lr, [sp], #4
 8007478:	f000 bdb0 	b.w	8007fdc <__kernel_sinf>
 800747c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007480:	db04      	blt.n	800748c <sinf+0x2c>
 8007482:	f7f9 fbc1 	bl	8000c08 <__aeabi_fsub>
 8007486:	b003      	add	sp, #12
 8007488:	f85d fb04 	ldr.w	pc, [sp], #4
 800748c:	4669      	mov	r1, sp
 800748e:	f000 f8c3 	bl	8007618 <__ieee754_rem_pio2f>
 8007492:	f000 0003 	and.w	r0, r0, #3
 8007496:	2801      	cmp	r0, #1
 8007498:	d008      	beq.n	80074ac <sinf+0x4c>
 800749a:	2802      	cmp	r0, #2
 800749c:	d00b      	beq.n	80074b6 <sinf+0x56>
 800749e:	b990      	cbnz	r0, 80074c6 <sinf+0x66>
 80074a0:	2201      	movs	r2, #1
 80074a2:	9901      	ldr	r1, [sp, #4]
 80074a4:	9800      	ldr	r0, [sp, #0]
 80074a6:	f000 fd99 	bl	8007fdc <__kernel_sinf>
 80074aa:	e7ec      	b.n	8007486 <sinf+0x26>
 80074ac:	9901      	ldr	r1, [sp, #4]
 80074ae:	9800      	ldr	r0, [sp, #0]
 80074b0:	f000 fa62 	bl	8007978 <__kernel_cosf>
 80074b4:	e7e7      	b.n	8007486 <sinf+0x26>
 80074b6:	2201      	movs	r2, #1
 80074b8:	9901      	ldr	r1, [sp, #4]
 80074ba:	9800      	ldr	r0, [sp, #0]
 80074bc:	f000 fd8e 	bl	8007fdc <__kernel_sinf>
 80074c0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80074c4:	e7df      	b.n	8007486 <sinf+0x26>
 80074c6:	9901      	ldr	r1, [sp, #4]
 80074c8:	9800      	ldr	r0, [sp, #0]
 80074ca:	f000 fa55 	bl	8007978 <__kernel_cosf>
 80074ce:	e7f7      	b.n	80074c0 <sinf+0x60>
 80074d0:	3f490fd8 	.word	0x3f490fd8

080074d4 <atan2f>:
 80074d4:	f000 b81a 	b.w	800750c <__ieee754_atan2f>

080074d8 <sqrtf>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4605      	mov	r5, r0
 80074dc:	f000 f9fa 	bl	80078d4 <__ieee754_sqrtf>
 80074e0:	4629      	mov	r1, r5
 80074e2:	4604      	mov	r4, r0
 80074e4:	4628      	mov	r0, r5
 80074e6:	f7f9 fe5f 	bl	80011a8 <__aeabi_fcmpun>
 80074ea:	b968      	cbnz	r0, 8007508 <sqrtf+0x30>
 80074ec:	2100      	movs	r1, #0
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7f9 fe32 	bl	8001158 <__aeabi_fcmplt>
 80074f4:	b140      	cbz	r0, 8007508 <sqrtf+0x30>
 80074f6:	f000 ff89 	bl	800840c <__errno>
 80074fa:	2321      	movs	r3, #33	; 0x21
 80074fc:	2100      	movs	r1, #0
 80074fe:	6003      	str	r3, [r0, #0]
 8007500:	4608      	mov	r0, r1
 8007502:	f7f9 fd3f 	bl	8000f84 <__aeabi_fdiv>
 8007506:	4604      	mov	r4, r0
 8007508:	4620      	mov	r0, r4
 800750a:	bd38      	pop	{r3, r4, r5, pc}

0800750c <__ieee754_atan2f>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007512:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007516:	4603      	mov	r3, r0
 8007518:	dc05      	bgt.n	8007526 <__ieee754_atan2f+0x1a>
 800751a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800751e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007522:	4607      	mov	r7, r0
 8007524:	dd04      	ble.n	8007530 <__ieee754_atan2f+0x24>
 8007526:	4618      	mov	r0, r3
 8007528:	f7f9 fb70 	bl	8000c0c <__addsf3>
 800752c:	4603      	mov	r3, r0
 800752e:	e011      	b.n	8007554 <__ieee754_atan2f+0x48>
 8007530:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007534:	d103      	bne.n	800753e <__ieee754_atan2f+0x32>
 8007536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800753a:	f000 bdc5 	b.w	80080c8 <atanf>
 800753e:	178c      	asrs	r4, r1, #30
 8007540:	f004 0402 	and.w	r4, r4, #2
 8007544:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007548:	b932      	cbnz	r2, 8007558 <__ieee754_atan2f+0x4c>
 800754a:	2c02      	cmp	r4, #2
 800754c:	d04c      	beq.n	80075e8 <__ieee754_atan2f+0xdc>
 800754e:	2c03      	cmp	r4, #3
 8007550:	d100      	bne.n	8007554 <__ieee754_atan2f+0x48>
 8007552:	4b29      	ldr	r3, [pc, #164]	; (80075f8 <__ieee754_atan2f+0xec>)
 8007554:	4618      	mov	r0, r3
 8007556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007558:	b91e      	cbnz	r6, 8007562 <__ieee754_atan2f+0x56>
 800755a:	2f00      	cmp	r7, #0
 800755c:	da4a      	bge.n	80075f4 <__ieee754_atan2f+0xe8>
 800755e:	4b27      	ldr	r3, [pc, #156]	; (80075fc <__ieee754_atan2f+0xf0>)
 8007560:	e7f8      	b.n	8007554 <__ieee754_atan2f+0x48>
 8007562:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007566:	d10e      	bne.n	8007586 <__ieee754_atan2f+0x7a>
 8007568:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800756c:	f104 34ff 	add.w	r4, r4, #4294967295
 8007570:	d105      	bne.n	800757e <__ieee754_atan2f+0x72>
 8007572:	2c02      	cmp	r4, #2
 8007574:	d83a      	bhi.n	80075ec <__ieee754_atan2f+0xe0>
 8007576:	4b22      	ldr	r3, [pc, #136]	; (8007600 <__ieee754_atan2f+0xf4>)
 8007578:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800757c:	e7ea      	b.n	8007554 <__ieee754_atan2f+0x48>
 800757e:	2c02      	cmp	r4, #2
 8007580:	d836      	bhi.n	80075f0 <__ieee754_atan2f+0xe4>
 8007582:	4b20      	ldr	r3, [pc, #128]	; (8007604 <__ieee754_atan2f+0xf8>)
 8007584:	e7f8      	b.n	8007578 <__ieee754_atan2f+0x6c>
 8007586:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800758a:	d0e6      	beq.n	800755a <__ieee754_atan2f+0x4e>
 800758c:	1b92      	subs	r2, r2, r6
 800758e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8007592:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8007596:	da17      	bge.n	80075c8 <__ieee754_atan2f+0xbc>
 8007598:	2900      	cmp	r1, #0
 800759a:	da01      	bge.n	80075a0 <__ieee754_atan2f+0x94>
 800759c:	303c      	adds	r0, #60	; 0x3c
 800759e:	db15      	blt.n	80075cc <__ieee754_atan2f+0xc0>
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7f9 fcef 	bl	8000f84 <__aeabi_fdiv>
 80075a6:	f000 fe9b 	bl	80082e0 <fabsf>
 80075aa:	f000 fd8d 	bl	80080c8 <atanf>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2c01      	cmp	r4, #1
 80075b2:	d00d      	beq.n	80075d0 <__ieee754_atan2f+0xc4>
 80075b4:	2c02      	cmp	r4, #2
 80075b6:	d00e      	beq.n	80075d6 <__ieee754_atan2f+0xca>
 80075b8:	2c00      	cmp	r4, #0
 80075ba:	d0cb      	beq.n	8007554 <__ieee754_atan2f+0x48>
 80075bc:	4912      	ldr	r1, [pc, #72]	; (8007608 <__ieee754_atan2f+0xfc>)
 80075be:	4618      	mov	r0, r3
 80075c0:	f7f9 fb24 	bl	8000c0c <__addsf3>
 80075c4:	4911      	ldr	r1, [pc, #68]	; (800760c <__ieee754_atan2f+0x100>)
 80075c6:	e00c      	b.n	80075e2 <__ieee754_atan2f+0xd6>
 80075c8:	4b11      	ldr	r3, [pc, #68]	; (8007610 <__ieee754_atan2f+0x104>)
 80075ca:	e7f1      	b.n	80075b0 <__ieee754_atan2f+0xa4>
 80075cc:	2300      	movs	r3, #0
 80075ce:	e7ef      	b.n	80075b0 <__ieee754_atan2f+0xa4>
 80075d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075d4:	e7be      	b.n	8007554 <__ieee754_atan2f+0x48>
 80075d6:	490c      	ldr	r1, [pc, #48]	; (8007608 <__ieee754_atan2f+0xfc>)
 80075d8:	4618      	mov	r0, r3
 80075da:	f7f9 fb17 	bl	8000c0c <__addsf3>
 80075de:	4601      	mov	r1, r0
 80075e0:	480a      	ldr	r0, [pc, #40]	; (800760c <__ieee754_atan2f+0x100>)
 80075e2:	f7f9 fb11 	bl	8000c08 <__aeabi_fsub>
 80075e6:	e7a1      	b.n	800752c <__ieee754_atan2f+0x20>
 80075e8:	4b08      	ldr	r3, [pc, #32]	; (800760c <__ieee754_atan2f+0x100>)
 80075ea:	e7b3      	b.n	8007554 <__ieee754_atan2f+0x48>
 80075ec:	4b09      	ldr	r3, [pc, #36]	; (8007614 <__ieee754_atan2f+0x108>)
 80075ee:	e7b1      	b.n	8007554 <__ieee754_atan2f+0x48>
 80075f0:	2300      	movs	r3, #0
 80075f2:	e7af      	b.n	8007554 <__ieee754_atan2f+0x48>
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <__ieee754_atan2f+0x104>)
 80075f6:	e7ad      	b.n	8007554 <__ieee754_atan2f+0x48>
 80075f8:	c0490fdb 	.word	0xc0490fdb
 80075fc:	bfc90fdb 	.word	0xbfc90fdb
 8007600:	0800b444 	.word	0x0800b444
 8007604:	0800b450 	.word	0x0800b450
 8007608:	33bbbd2e 	.word	0x33bbbd2e
 800760c:	40490fdb 	.word	0x40490fdb
 8007610:	3fc90fdb 	.word	0x3fc90fdb
 8007614:	3f490fdb 	.word	0x3f490fdb

08007618 <__ieee754_rem_pio2f>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	4aa0      	ldr	r2, [pc, #640]	; (80078a0 <__ieee754_rem_pio2f+0x288>)
 800761e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007622:	4296      	cmp	r6, r2
 8007624:	460c      	mov	r4, r1
 8007626:	4682      	mov	sl, r0
 8007628:	b087      	sub	sp, #28
 800762a:	dc04      	bgt.n	8007636 <__ieee754_rem_pio2f+0x1e>
 800762c:	2300      	movs	r3, #0
 800762e:	6008      	str	r0, [r1, #0]
 8007630:	604b      	str	r3, [r1, #4]
 8007632:	2500      	movs	r5, #0
 8007634:	e01a      	b.n	800766c <__ieee754_rem_pio2f+0x54>
 8007636:	4a9b      	ldr	r2, [pc, #620]	; (80078a4 <__ieee754_rem_pio2f+0x28c>)
 8007638:	4296      	cmp	r6, r2
 800763a:	dc4b      	bgt.n	80076d4 <__ieee754_rem_pio2f+0xbc>
 800763c:	2800      	cmp	r0, #0
 800763e:	499a      	ldr	r1, [pc, #616]	; (80078a8 <__ieee754_rem_pio2f+0x290>)
 8007640:	4f9a      	ldr	r7, [pc, #616]	; (80078ac <__ieee754_rem_pio2f+0x294>)
 8007642:	f026 060f 	bic.w	r6, r6, #15
 8007646:	dd23      	ble.n	8007690 <__ieee754_rem_pio2f+0x78>
 8007648:	f7f9 fade 	bl	8000c08 <__aeabi_fsub>
 800764c:	42be      	cmp	r6, r7
 800764e:	4605      	mov	r5, r0
 8007650:	d010      	beq.n	8007674 <__ieee754_rem_pio2f+0x5c>
 8007652:	4997      	ldr	r1, [pc, #604]	; (80078b0 <__ieee754_rem_pio2f+0x298>)
 8007654:	f7f9 fad8 	bl	8000c08 <__aeabi_fsub>
 8007658:	4601      	mov	r1, r0
 800765a:	6020      	str	r0, [r4, #0]
 800765c:	4628      	mov	r0, r5
 800765e:	f7f9 fad3 	bl	8000c08 <__aeabi_fsub>
 8007662:	4993      	ldr	r1, [pc, #588]	; (80078b0 <__ieee754_rem_pio2f+0x298>)
 8007664:	f7f9 fad0 	bl	8000c08 <__aeabi_fsub>
 8007668:	2501      	movs	r5, #1
 800766a:	6060      	str	r0, [r4, #4]
 800766c:	4628      	mov	r0, r5
 800766e:	b007      	add	sp, #28
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	498f      	ldr	r1, [pc, #572]	; (80078b4 <__ieee754_rem_pio2f+0x29c>)
 8007676:	f7f9 fac7 	bl	8000c08 <__aeabi_fsub>
 800767a:	498f      	ldr	r1, [pc, #572]	; (80078b8 <__ieee754_rem_pio2f+0x2a0>)
 800767c:	4605      	mov	r5, r0
 800767e:	f7f9 fac3 	bl	8000c08 <__aeabi_fsub>
 8007682:	4601      	mov	r1, r0
 8007684:	6020      	str	r0, [r4, #0]
 8007686:	4628      	mov	r0, r5
 8007688:	f7f9 fabe 	bl	8000c08 <__aeabi_fsub>
 800768c:	498a      	ldr	r1, [pc, #552]	; (80078b8 <__ieee754_rem_pio2f+0x2a0>)
 800768e:	e7e9      	b.n	8007664 <__ieee754_rem_pio2f+0x4c>
 8007690:	f7f9 fabc 	bl	8000c0c <__addsf3>
 8007694:	42be      	cmp	r6, r7
 8007696:	4605      	mov	r5, r0
 8007698:	d00e      	beq.n	80076b8 <__ieee754_rem_pio2f+0xa0>
 800769a:	4985      	ldr	r1, [pc, #532]	; (80078b0 <__ieee754_rem_pio2f+0x298>)
 800769c:	f7f9 fab6 	bl	8000c0c <__addsf3>
 80076a0:	4601      	mov	r1, r0
 80076a2:	6020      	str	r0, [r4, #0]
 80076a4:	4628      	mov	r0, r5
 80076a6:	f7f9 faaf 	bl	8000c08 <__aeabi_fsub>
 80076aa:	4981      	ldr	r1, [pc, #516]	; (80078b0 <__ieee754_rem_pio2f+0x298>)
 80076ac:	f7f9 faae 	bl	8000c0c <__addsf3>
 80076b0:	f04f 35ff 	mov.w	r5, #4294967295
 80076b4:	6060      	str	r0, [r4, #4]
 80076b6:	e7d9      	b.n	800766c <__ieee754_rem_pio2f+0x54>
 80076b8:	497e      	ldr	r1, [pc, #504]	; (80078b4 <__ieee754_rem_pio2f+0x29c>)
 80076ba:	f7f9 faa7 	bl	8000c0c <__addsf3>
 80076be:	497e      	ldr	r1, [pc, #504]	; (80078b8 <__ieee754_rem_pio2f+0x2a0>)
 80076c0:	4605      	mov	r5, r0
 80076c2:	f7f9 faa3 	bl	8000c0c <__addsf3>
 80076c6:	4601      	mov	r1, r0
 80076c8:	6020      	str	r0, [r4, #0]
 80076ca:	4628      	mov	r0, r5
 80076cc:	f7f9 fa9c 	bl	8000c08 <__aeabi_fsub>
 80076d0:	4979      	ldr	r1, [pc, #484]	; (80078b8 <__ieee754_rem_pio2f+0x2a0>)
 80076d2:	e7eb      	b.n	80076ac <__ieee754_rem_pio2f+0x94>
 80076d4:	4a79      	ldr	r2, [pc, #484]	; (80078bc <__ieee754_rem_pio2f+0x2a4>)
 80076d6:	4296      	cmp	r6, r2
 80076d8:	f300 8091 	bgt.w	80077fe <__ieee754_rem_pio2f+0x1e6>
 80076dc:	f000 fe00 	bl	80082e0 <fabsf>
 80076e0:	4977      	ldr	r1, [pc, #476]	; (80078c0 <__ieee754_rem_pio2f+0x2a8>)
 80076e2:	4607      	mov	r7, r0
 80076e4:	f7f9 fb9a 	bl	8000e1c <__aeabi_fmul>
 80076e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80076ec:	f7f9 fa8e 	bl	8000c0c <__addsf3>
 80076f0:	f7f9 fd70 	bl	80011d4 <__aeabi_f2iz>
 80076f4:	4605      	mov	r5, r0
 80076f6:	f7f9 fb3d 	bl	8000d74 <__aeabi_i2f>
 80076fa:	496b      	ldr	r1, [pc, #428]	; (80078a8 <__ieee754_rem_pio2f+0x290>)
 80076fc:	4681      	mov	r9, r0
 80076fe:	f7f9 fb8d 	bl	8000e1c <__aeabi_fmul>
 8007702:	4601      	mov	r1, r0
 8007704:	4638      	mov	r0, r7
 8007706:	f7f9 fa7f 	bl	8000c08 <__aeabi_fsub>
 800770a:	4969      	ldr	r1, [pc, #420]	; (80078b0 <__ieee754_rem_pio2f+0x298>)
 800770c:	4680      	mov	r8, r0
 800770e:	4648      	mov	r0, r9
 8007710:	f7f9 fb84 	bl	8000e1c <__aeabi_fmul>
 8007714:	2d1f      	cmp	r5, #31
 8007716:	4607      	mov	r7, r0
 8007718:	dc0c      	bgt.n	8007734 <__ieee754_rem_pio2f+0x11c>
 800771a:	4a6a      	ldr	r2, [pc, #424]	; (80078c4 <__ieee754_rem_pio2f+0x2ac>)
 800771c:	1e69      	subs	r1, r5, #1
 800771e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007722:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <__ieee754_rem_pio2f+0x11c>
 800772a:	4639      	mov	r1, r7
 800772c:	4640      	mov	r0, r8
 800772e:	f7f9 fa6b 	bl	8000c08 <__aeabi_fsub>
 8007732:	e00b      	b.n	800774c <__ieee754_rem_pio2f+0x134>
 8007734:	4639      	mov	r1, r7
 8007736:	4640      	mov	r0, r8
 8007738:	f7f9 fa66 	bl	8000c08 <__aeabi_fsub>
 800773c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007740:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8007744:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8007748:	2e08      	cmp	r6, #8
 800774a:	dc01      	bgt.n	8007750 <__ieee754_rem_pio2f+0x138>
 800774c:	6020      	str	r0, [r4, #0]
 800774e:	e026      	b.n	800779e <__ieee754_rem_pio2f+0x186>
 8007750:	4958      	ldr	r1, [pc, #352]	; (80078b4 <__ieee754_rem_pio2f+0x29c>)
 8007752:	4648      	mov	r0, r9
 8007754:	f7f9 fb62 	bl	8000e1c <__aeabi_fmul>
 8007758:	4607      	mov	r7, r0
 800775a:	4601      	mov	r1, r0
 800775c:	4640      	mov	r0, r8
 800775e:	f7f9 fa53 	bl	8000c08 <__aeabi_fsub>
 8007762:	4601      	mov	r1, r0
 8007764:	4606      	mov	r6, r0
 8007766:	4640      	mov	r0, r8
 8007768:	f7f9 fa4e 	bl	8000c08 <__aeabi_fsub>
 800776c:	4639      	mov	r1, r7
 800776e:	f7f9 fa4b 	bl	8000c08 <__aeabi_fsub>
 8007772:	4607      	mov	r7, r0
 8007774:	4950      	ldr	r1, [pc, #320]	; (80078b8 <__ieee754_rem_pio2f+0x2a0>)
 8007776:	4648      	mov	r0, r9
 8007778:	f7f9 fb50 	bl	8000e1c <__aeabi_fmul>
 800777c:	4639      	mov	r1, r7
 800777e:	f7f9 fa43 	bl	8000c08 <__aeabi_fsub>
 8007782:	4601      	mov	r1, r0
 8007784:	4607      	mov	r7, r0
 8007786:	4630      	mov	r0, r6
 8007788:	f7f9 fa3e 	bl	8000c08 <__aeabi_fsub>
 800778c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007790:	ebab 0b03 	sub.w	fp, fp, r3
 8007794:	f1bb 0f19 	cmp.w	fp, #25
 8007798:	dc16      	bgt.n	80077c8 <__ieee754_rem_pio2f+0x1b0>
 800779a:	46b0      	mov	r8, r6
 800779c:	6020      	str	r0, [r4, #0]
 800779e:	6826      	ldr	r6, [r4, #0]
 80077a0:	4640      	mov	r0, r8
 80077a2:	4631      	mov	r1, r6
 80077a4:	f7f9 fa30 	bl	8000c08 <__aeabi_fsub>
 80077a8:	4639      	mov	r1, r7
 80077aa:	f7f9 fa2d 	bl	8000c08 <__aeabi_fsub>
 80077ae:	f1ba 0f00 	cmp.w	sl, #0
 80077b2:	6060      	str	r0, [r4, #4]
 80077b4:	f6bf af5a 	bge.w	800766c <__ieee754_rem_pio2f+0x54>
 80077b8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80077bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80077c0:	6026      	str	r6, [r4, #0]
 80077c2:	6060      	str	r0, [r4, #4]
 80077c4:	426d      	negs	r5, r5
 80077c6:	e751      	b.n	800766c <__ieee754_rem_pio2f+0x54>
 80077c8:	493f      	ldr	r1, [pc, #252]	; (80078c8 <__ieee754_rem_pio2f+0x2b0>)
 80077ca:	4648      	mov	r0, r9
 80077cc:	f7f9 fb26 	bl	8000e1c <__aeabi_fmul>
 80077d0:	4607      	mov	r7, r0
 80077d2:	4601      	mov	r1, r0
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7f9 fa17 	bl	8000c08 <__aeabi_fsub>
 80077da:	4601      	mov	r1, r0
 80077dc:	4680      	mov	r8, r0
 80077de:	4630      	mov	r0, r6
 80077e0:	f7f9 fa12 	bl	8000c08 <__aeabi_fsub>
 80077e4:	4639      	mov	r1, r7
 80077e6:	f7f9 fa0f 	bl	8000c08 <__aeabi_fsub>
 80077ea:	4606      	mov	r6, r0
 80077ec:	4937      	ldr	r1, [pc, #220]	; (80078cc <__ieee754_rem_pio2f+0x2b4>)
 80077ee:	4648      	mov	r0, r9
 80077f0:	f7f9 fb14 	bl	8000e1c <__aeabi_fmul>
 80077f4:	4631      	mov	r1, r6
 80077f6:	f7f9 fa07 	bl	8000c08 <__aeabi_fsub>
 80077fa:	4607      	mov	r7, r0
 80077fc:	e795      	b.n	800772a <__ieee754_rem_pio2f+0x112>
 80077fe:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007802:	db05      	blt.n	8007810 <__ieee754_rem_pio2f+0x1f8>
 8007804:	4601      	mov	r1, r0
 8007806:	f7f9 f9ff 	bl	8000c08 <__aeabi_fsub>
 800780a:	6060      	str	r0, [r4, #4]
 800780c:	6020      	str	r0, [r4, #0]
 800780e:	e710      	b.n	8007632 <__ieee754_rem_pio2f+0x1a>
 8007810:	15f7      	asrs	r7, r6, #23
 8007812:	3f86      	subs	r7, #134	; 0x86
 8007814:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8007818:	4630      	mov	r0, r6
 800781a:	f7f9 fcdb 	bl	80011d4 <__aeabi_f2iz>
 800781e:	f7f9 faa9 	bl	8000d74 <__aeabi_i2f>
 8007822:	4601      	mov	r1, r0
 8007824:	9003      	str	r0, [sp, #12]
 8007826:	4630      	mov	r0, r6
 8007828:	f7f9 f9ee 	bl	8000c08 <__aeabi_fsub>
 800782c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007830:	f7f9 faf4 	bl	8000e1c <__aeabi_fmul>
 8007834:	4606      	mov	r6, r0
 8007836:	f7f9 fccd 	bl	80011d4 <__aeabi_f2iz>
 800783a:	f7f9 fa9b 	bl	8000d74 <__aeabi_i2f>
 800783e:	4601      	mov	r1, r0
 8007840:	9004      	str	r0, [sp, #16]
 8007842:	4605      	mov	r5, r0
 8007844:	4630      	mov	r0, r6
 8007846:	f7f9 f9df 	bl	8000c08 <__aeabi_fsub>
 800784a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800784e:	f7f9 fae5 	bl	8000e1c <__aeabi_fmul>
 8007852:	2100      	movs	r1, #0
 8007854:	9005      	str	r0, [sp, #20]
 8007856:	f7f9 fc75 	bl	8001144 <__aeabi_fcmpeq>
 800785a:	b1f0      	cbz	r0, 800789a <__ieee754_rem_pio2f+0x282>
 800785c:	2100      	movs	r1, #0
 800785e:	4628      	mov	r0, r5
 8007860:	f7f9 fc70 	bl	8001144 <__aeabi_fcmpeq>
 8007864:	2800      	cmp	r0, #0
 8007866:	bf14      	ite	ne
 8007868:	2301      	movne	r3, #1
 800786a:	2302      	moveq	r3, #2
 800786c:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <__ieee754_rem_pio2f+0x2b8>)
 800786e:	4621      	mov	r1, r4
 8007870:	9201      	str	r2, [sp, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	a803      	add	r0, sp, #12
 8007876:	9200      	str	r2, [sp, #0]
 8007878:	463a      	mov	r2, r7
 800787a:	f000 f8fd 	bl	8007a78 <__kernel_rem_pio2f>
 800787e:	f1ba 0f00 	cmp.w	sl, #0
 8007882:	4605      	mov	r5, r0
 8007884:	f6bf aef2 	bge.w	800766c <__ieee754_rem_pio2f+0x54>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007896:	6063      	str	r3, [r4, #4]
 8007898:	e794      	b.n	80077c4 <__ieee754_rem_pio2f+0x1ac>
 800789a:	2303      	movs	r3, #3
 800789c:	e7e6      	b.n	800786c <__ieee754_rem_pio2f+0x254>
 800789e:	bf00      	nop
 80078a0:	3f490fd8 	.word	0x3f490fd8
 80078a4:	4016cbe3 	.word	0x4016cbe3
 80078a8:	3fc90f80 	.word	0x3fc90f80
 80078ac:	3fc90fd0 	.word	0x3fc90fd0
 80078b0:	37354443 	.word	0x37354443
 80078b4:	37354400 	.word	0x37354400
 80078b8:	2e85a308 	.word	0x2e85a308
 80078bc:	43490f80 	.word	0x43490f80
 80078c0:	3f22f984 	.word	0x3f22f984
 80078c4:	0800b45c 	.word	0x0800b45c
 80078c8:	2e85a300 	.word	0x2e85a300
 80078cc:	248d3132 	.word	0x248d3132
 80078d0:	0800b4dc 	.word	0x0800b4dc

080078d4 <__ieee754_sqrtf>:
 80078d4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80078d8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4603      	mov	r3, r0
 80078e0:	4604      	mov	r4, r0
 80078e2:	d309      	bcc.n	80078f8 <__ieee754_sqrtf+0x24>
 80078e4:	4601      	mov	r1, r0
 80078e6:	f7f9 fa99 	bl	8000e1c <__aeabi_fmul>
 80078ea:	4601      	mov	r1, r0
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7f9 f98d 	bl	8000c0c <__addsf3>
 80078f2:	4604      	mov	r4, r0
 80078f4:	4620      	mov	r0, r4
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	d0fb      	beq.n	80078f4 <__ieee754_sqrtf+0x20>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	da06      	bge.n	800790e <__ieee754_sqrtf+0x3a>
 8007900:	4601      	mov	r1, r0
 8007902:	f7f9 f981 	bl	8000c08 <__aeabi_fsub>
 8007906:	4601      	mov	r1, r0
 8007908:	f7f9 fb3c 	bl	8000f84 <__aeabi_fdiv>
 800790c:	e7f1      	b.n	80078f2 <__ieee754_sqrtf+0x1e>
 800790e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8007912:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8007916:	d029      	beq.n	800796c <__ieee754_sqrtf+0x98>
 8007918:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800791c:	07cb      	lsls	r3, r1, #31
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8007926:	f04f 0419 	mov.w	r4, #25
 800792a:	461e      	mov	r6, r3
 800792c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8007930:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007934:	bf58      	it	pl
 8007936:	0052      	lslpl	r2, r2, #1
 8007938:	1040      	asrs	r0, r0, #1
 800793a:	0052      	lsls	r2, r2, #1
 800793c:	1875      	adds	r5, r6, r1
 800793e:	4295      	cmp	r5, r2
 8007940:	bfde      	ittt	le
 8007942:	186e      	addle	r6, r5, r1
 8007944:	1b52      	suble	r2, r2, r5
 8007946:	185b      	addle	r3, r3, r1
 8007948:	3c01      	subs	r4, #1
 800794a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800794e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007952:	d1f3      	bne.n	800793c <__ieee754_sqrtf+0x68>
 8007954:	b112      	cbz	r2, 800795c <__ieee754_sqrtf+0x88>
 8007956:	3301      	adds	r3, #1
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	105c      	asrs	r4, r3, #1
 800795e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8007962:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8007966:	e7c5      	b.n	80078f4 <__ieee754_sqrtf+0x20>
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	3201      	adds	r2, #1
 800796c:	0218      	lsls	r0, r3, #8
 800796e:	d5fb      	bpl.n	8007968 <__ieee754_sqrtf+0x94>
 8007970:	3a01      	subs	r2, #1
 8007972:	1a89      	subs	r1, r1, r2
 8007974:	e7d0      	b.n	8007918 <__ieee754_sqrtf+0x44>
	...

08007978 <__kernel_cosf>:
 8007978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8007980:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007984:	4606      	mov	r6, r0
 8007986:	4688      	mov	r8, r1
 8007988:	da03      	bge.n	8007992 <__kernel_cosf+0x1a>
 800798a:	f7f9 fc23 	bl	80011d4 <__aeabi_f2iz>
 800798e:	2800      	cmp	r0, #0
 8007990:	d05c      	beq.n	8007a4c <__kernel_cosf+0xd4>
 8007992:	4631      	mov	r1, r6
 8007994:	4630      	mov	r0, r6
 8007996:	f7f9 fa41 	bl	8000e1c <__aeabi_fmul>
 800799a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800799e:	4605      	mov	r5, r0
 80079a0:	f7f9 fa3c 	bl	8000e1c <__aeabi_fmul>
 80079a4:	492b      	ldr	r1, [pc, #172]	; (8007a54 <__kernel_cosf+0xdc>)
 80079a6:	4607      	mov	r7, r0
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7f9 fa37 	bl	8000e1c <__aeabi_fmul>
 80079ae:	492a      	ldr	r1, [pc, #168]	; (8007a58 <__kernel_cosf+0xe0>)
 80079b0:	f7f9 f92c 	bl	8000c0c <__addsf3>
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7f9 fa31 	bl	8000e1c <__aeabi_fmul>
 80079ba:	4928      	ldr	r1, [pc, #160]	; (8007a5c <__kernel_cosf+0xe4>)
 80079bc:	f7f9 f924 	bl	8000c08 <__aeabi_fsub>
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f9 fa2b 	bl	8000e1c <__aeabi_fmul>
 80079c6:	4926      	ldr	r1, [pc, #152]	; (8007a60 <__kernel_cosf+0xe8>)
 80079c8:	f7f9 f920 	bl	8000c0c <__addsf3>
 80079cc:	4629      	mov	r1, r5
 80079ce:	f7f9 fa25 	bl	8000e1c <__aeabi_fmul>
 80079d2:	4924      	ldr	r1, [pc, #144]	; (8007a64 <__kernel_cosf+0xec>)
 80079d4:	f7f9 f918 	bl	8000c08 <__aeabi_fsub>
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f9 fa1f 	bl	8000e1c <__aeabi_fmul>
 80079de:	4922      	ldr	r1, [pc, #136]	; (8007a68 <__kernel_cosf+0xf0>)
 80079e0:	f7f9 f914 	bl	8000c0c <__addsf3>
 80079e4:	4629      	mov	r1, r5
 80079e6:	f7f9 fa19 	bl	8000e1c <__aeabi_fmul>
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f9 fa16 	bl	8000e1c <__aeabi_fmul>
 80079f0:	4641      	mov	r1, r8
 80079f2:	4605      	mov	r5, r0
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7f9 fa11 	bl	8000e1c <__aeabi_fmul>
 80079fa:	4601      	mov	r1, r0
 80079fc:	4628      	mov	r0, r5
 80079fe:	f7f9 f903 	bl	8000c08 <__aeabi_fsub>
 8007a02:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <__kernel_cosf+0xf4>)
 8007a04:	4605      	mov	r5, r0
 8007a06:	429c      	cmp	r4, r3
 8007a08:	dc0a      	bgt.n	8007a20 <__kernel_cosf+0xa8>
 8007a0a:	4601      	mov	r1, r0
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7f9 f8fb 	bl	8000c08 <__aeabi_fsub>
 8007a12:	4601      	mov	r1, r0
 8007a14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a18:	f7f9 f8f6 	bl	8000c08 <__aeabi_fsub>
 8007a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a20:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <__kernel_cosf+0xf8>)
 8007a22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a26:	429c      	cmp	r4, r3
 8007a28:	bfcc      	ite	gt
 8007a2a:	4c12      	ldrgt	r4, [pc, #72]	; (8007a74 <__kernel_cosf+0xfc>)
 8007a2c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8007a30:	4621      	mov	r1, r4
 8007a32:	f7f9 f8e9 	bl	8000c08 <__aeabi_fsub>
 8007a36:	4621      	mov	r1, r4
 8007a38:	4606      	mov	r6, r0
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	f7f9 f8e4 	bl	8000c08 <__aeabi_fsub>
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f9 f8e1 	bl	8000c08 <__aeabi_fsub>
 8007a46:	4601      	mov	r1, r0
 8007a48:	4630      	mov	r0, r6
 8007a4a:	e7e5      	b.n	8007a18 <__kernel_cosf+0xa0>
 8007a4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a50:	e7e4      	b.n	8007a1c <__kernel_cosf+0xa4>
 8007a52:	bf00      	nop
 8007a54:	ad47d74e 	.word	0xad47d74e
 8007a58:	310f74f6 	.word	0x310f74f6
 8007a5c:	3493f27c 	.word	0x3493f27c
 8007a60:	37d00d01 	.word	0x37d00d01
 8007a64:	3ab60b61 	.word	0x3ab60b61
 8007a68:	3d2aaaab 	.word	0x3d2aaaab
 8007a6c:	3e999999 	.word	0x3e999999
 8007a70:	3f480000 	.word	0x3f480000
 8007a74:	3e900000 	.word	0x3e900000

08007a78 <__kernel_rem_pio2f>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	b0db      	sub	sp, #364	; 0x16c
 8007a7e:	9202      	str	r2, [sp, #8]
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007a84:	4bb2      	ldr	r3, [pc, #712]	; (8007d50 <__kernel_rem_pio2f+0x2d8>)
 8007a86:	9005      	str	r0, [sp, #20]
 8007a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8c:	9100      	str	r1, [sp, #0]
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	9b04      	ldr	r3, [sp, #16]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	9b02      	ldr	r3, [sp, #8]
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	f2c0 809b 	blt.w	8007bd4 <__kernel_rem_pio2f+0x15c>
 8007a9e:	1edc      	subs	r4, r3, #3
 8007aa0:	bf48      	it	mi
 8007aa2:	1d1c      	addmi	r4, r3, #4
 8007aa4:	10e4      	asrs	r4, r4, #3
 8007aa6:	2500      	movs	r5, #0
 8007aa8:	f04f 0b00 	mov.w	fp, #0
 8007aac:	1c67      	adds	r7, r4, #1
 8007aae:	00fb      	lsls	r3, r7, #3
 8007ab0:	9306      	str	r3, [sp, #24]
 8007ab2:	9b02      	ldr	r3, [sp, #8]
 8007ab4:	9a03      	ldr	r2, [sp, #12]
 8007ab6:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8007aba:	9b01      	ldr	r3, [sp, #4]
 8007abc:	eba4 0802 	sub.w	r8, r4, r2
 8007ac0:	eb03 0902 	add.w	r9, r3, r2
 8007ac4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007ac6:	ae1e      	add	r6, sp, #120	; 0x78
 8007ac8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8007acc:	454d      	cmp	r5, r9
 8007ace:	f340 8083 	ble.w	8007bd8 <__kernel_rem_pio2f+0x160>
 8007ad2:	9a04      	ldr	r2, [sp, #16]
 8007ad4:	ab1e      	add	r3, sp, #120	; 0x78
 8007ad6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8007ada:	f04f 0900 	mov.w	r9, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8007ae4:	9a01      	ldr	r2, [sp, #4]
 8007ae6:	4591      	cmp	r9, r2
 8007ae8:	f340 809e 	ble.w	8007c28 <__kernel_rem_pio2f+0x1b0>
 8007aec:	4613      	mov	r3, r2
 8007aee:	aa0a      	add	r2, sp, #40	; 0x28
 8007af0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007af4:	9308      	str	r3, [sp, #32]
 8007af6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007af8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007afc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b00:	9307      	str	r3, [sp, #28]
 8007b02:	ac0a      	add	r4, sp, #40	; 0x28
 8007b04:	4626      	mov	r6, r4
 8007b06:	46c3      	mov	fp, r8
 8007b08:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8007b0c:	ab5a      	add	r3, sp, #360	; 0x168
 8007b0e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007b12:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8007b16:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8007b1a:	f1bb 0f00 	cmp.w	fp, #0
 8007b1e:	f300 8088 	bgt.w	8007c32 <__kernel_rem_pio2f+0x1ba>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 fc21 	bl	800836c <scalbnf>
 8007b2a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8007b2e:	4605      	mov	r5, r0
 8007b30:	f7f9 f974 	bl	8000e1c <__aeabi_fmul>
 8007b34:	f000 fbd8 	bl	80082e8 <floorf>
 8007b38:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8007b3c:	f7f9 f96e 	bl	8000e1c <__aeabi_fmul>
 8007b40:	4601      	mov	r1, r0
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7f9 f860 	bl	8000c08 <__aeabi_fsub>
 8007b48:	4605      	mov	r5, r0
 8007b4a:	f7f9 fb43 	bl	80011d4 <__aeabi_f2iz>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	f7f9 f910 	bl	8000d74 <__aeabi_i2f>
 8007b54:	4601      	mov	r1, r0
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7f9 f856 	bl	8000c08 <__aeabi_fsub>
 8007b5c:	2f00      	cmp	r7, #0
 8007b5e:	4681      	mov	r9, r0
 8007b60:	f340 8086 	ble.w	8007c70 <__kernel_rem_pio2f+0x1f8>
 8007b64:	f108 32ff 	add.w	r2, r8, #4294967295
 8007b68:	ab0a      	add	r3, sp, #40	; 0x28
 8007b6a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007b6e:	f1c7 0108 	rsb	r1, r7, #8
 8007b72:	fa45 f301 	asr.w	r3, r5, r1
 8007b76:	441e      	add	r6, r3
 8007b78:	408b      	lsls	r3, r1
 8007b7a:	1aed      	subs	r5, r5, r3
 8007b7c:	f1c7 0007 	rsb	r0, r7, #7
 8007b80:	ab0a      	add	r3, sp, #40	; 0x28
 8007b82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007b86:	4105      	asrs	r5, r0
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	dd7f      	ble.n	8007c8c <__kernel_rem_pio2f+0x214>
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4692      	mov	sl, r2
 8007b90:	3601      	adds	r6, #1
 8007b92:	4590      	cmp	r8, r2
 8007b94:	f300 80b0 	bgt.w	8007cf8 <__kernel_rem_pio2f+0x280>
 8007b98:	2f00      	cmp	r7, #0
 8007b9a:	dd05      	ble.n	8007ba8 <__kernel_rem_pio2f+0x130>
 8007b9c:	2f01      	cmp	r7, #1
 8007b9e:	f000 80bd 	beq.w	8007d1c <__kernel_rem_pio2f+0x2a4>
 8007ba2:	2f02      	cmp	r7, #2
 8007ba4:	f000 80c5 	beq.w	8007d32 <__kernel_rem_pio2f+0x2ba>
 8007ba8:	2d02      	cmp	r5, #2
 8007baa:	d16f      	bne.n	8007c8c <__kernel_rem_pio2f+0x214>
 8007bac:	4649      	mov	r1, r9
 8007bae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007bb2:	f7f9 f829 	bl	8000c08 <__aeabi_fsub>
 8007bb6:	4681      	mov	r9, r0
 8007bb8:	f1ba 0f00 	cmp.w	sl, #0
 8007bbc:	d066      	beq.n	8007c8c <__kernel_rem_pio2f+0x214>
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007bc4:	f000 fbd2 	bl	800836c <scalbnf>
 8007bc8:	4601      	mov	r1, r0
 8007bca:	4648      	mov	r0, r9
 8007bcc:	f7f9 f81c 	bl	8000c08 <__aeabi_fsub>
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	e05b      	b.n	8007c8c <__kernel_rem_pio2f+0x214>
 8007bd4:	2400      	movs	r4, #0
 8007bd6:	e766      	b.n	8007aa6 <__kernel_rem_pio2f+0x2e>
 8007bd8:	eb18 0f05 	cmn.w	r8, r5
 8007bdc:	d407      	bmi.n	8007bee <__kernel_rem_pio2f+0x176>
 8007bde:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8007be2:	f7f9 f8c7 	bl	8000d74 <__aeabi_i2f>
 8007be6:	f846 0b04 	str.w	r0, [r6], #4
 8007bea:	3501      	adds	r5, #1
 8007bec:	e76e      	b.n	8007acc <__kernel_rem_pio2f+0x54>
 8007bee:	4658      	mov	r0, fp
 8007bf0:	e7f9      	b.n	8007be6 <__kernel_rem_pio2f+0x16e>
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	9b05      	ldr	r3, [sp, #20]
 8007bf6:	f8da 1000 	ldr.w	r1, [sl]
 8007bfa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007bfe:	f7f9 f90d 	bl	8000e1c <__aeabi_fmul>
 8007c02:	4601      	mov	r1, r0
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7f9 f801 	bl	8000c0c <__addsf3>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	f108 0801 	add.w	r8, r8, #1
 8007c12:	9a03      	ldr	r2, [sp, #12]
 8007c14:	f1aa 0a04 	sub.w	sl, sl, #4
 8007c18:	4590      	cmp	r8, r2
 8007c1a:	ddea      	ble.n	8007bf2 <__kernel_rem_pio2f+0x17a>
 8007c1c:	f84b 6b04 	str.w	r6, [fp], #4
 8007c20:	f109 0901 	add.w	r9, r9, #1
 8007c24:	3504      	adds	r5, #4
 8007c26:	e75d      	b.n	8007ae4 <__kernel_rem_pio2f+0x6c>
 8007c28:	46aa      	mov	sl, r5
 8007c2a:	461e      	mov	r6, r3
 8007c2c:	f04f 0800 	mov.w	r8, #0
 8007c30:	e7ef      	b.n	8007c12 <__kernel_rem_pio2f+0x19a>
 8007c32:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7f9 f8f0 	bl	8000e1c <__aeabi_fmul>
 8007c3c:	f7f9 faca 	bl	80011d4 <__aeabi_f2iz>
 8007c40:	f7f9 f898 	bl	8000d74 <__aeabi_i2f>
 8007c44:	4649      	mov	r1, r9
 8007c46:	9009      	str	r0, [sp, #36]	; 0x24
 8007c48:	f7f9 f8e8 	bl	8000e1c <__aeabi_fmul>
 8007c4c:	4601      	mov	r1, r0
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f7f8 ffda 	bl	8000c08 <__aeabi_fsub>
 8007c54:	f7f9 fabe 	bl	80011d4 <__aeabi_f2iz>
 8007c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c5e:	f846 0b04 	str.w	r0, [r6], #4
 8007c62:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7f8 ffd0 	bl	8000c0c <__addsf3>
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	e754      	b.n	8007b1a <__kernel_rem_pio2f+0xa2>
 8007c70:	d106      	bne.n	8007c80 <__kernel_rem_pio2f+0x208>
 8007c72:	f108 33ff 	add.w	r3, r8, #4294967295
 8007c76:	aa0a      	add	r2, sp, #40	; 0x28
 8007c78:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8007c7c:	11ed      	asrs	r5, r5, #7
 8007c7e:	e783      	b.n	8007b88 <__kernel_rem_pio2f+0x110>
 8007c80:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007c84:	f7f9 fa7c 	bl	8001180 <__aeabi_fcmpge>
 8007c88:	4605      	mov	r5, r0
 8007c8a:	bb98      	cbnz	r0, 8007cf4 <__kernel_rem_pio2f+0x27c>
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4648      	mov	r0, r9
 8007c90:	f7f9 fa58 	bl	8001144 <__aeabi_fcmpeq>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f000 8098 	beq.w	8007dca <__kernel_rem_pio2f+0x352>
 8007c9a:	f108 34ff 	add.w	r4, r8, #4294967295
 8007c9e:	4623      	mov	r3, r4
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	9901      	ldr	r1, [sp, #4]
 8007ca4:	428b      	cmp	r3, r1
 8007ca6:	da4c      	bge.n	8007d42 <__kernel_rem_pio2f+0x2ca>
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	d07a      	beq.n	8007da2 <__kernel_rem_pio2f+0x32a>
 8007cac:	ab0a      	add	r3, sp, #40	; 0x28
 8007cae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007cb2:	3f08      	subs	r7, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 8086 	beq.w	8007dc6 <__kernel_rem_pio2f+0x34e>
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007cc0:	f000 fb54 	bl	800836c <scalbnf>
 8007cc4:	46a2      	mov	sl, r4
 8007cc6:	4681      	mov	r9, r0
 8007cc8:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8007ccc:	af46      	add	r7, sp, #280	; 0x118
 8007cce:	f1ba 0f00 	cmp.w	sl, #0
 8007cd2:	f280 80af 	bge.w	8007e34 <__kernel_rem_pio2f+0x3bc>
 8007cd6:	4627      	mov	r7, r4
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2f00      	cmp	r7, #0
 8007cdc:	f2c0 80d9 	blt.w	8007e92 <__kernel_rem_pio2f+0x41a>
 8007ce0:	a946      	add	r1, sp, #280	; 0x118
 8007ce2:	4690      	mov	r8, r2
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <__kernel_rem_pio2f+0x2dc>)
 8007cea:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8007cee:	eba4 0907 	sub.w	r9, r4, r7
 8007cf2:	e0c2      	b.n	8007e7a <__kernel_rem_pio2f+0x402>
 8007cf4:	2502      	movs	r5, #2
 8007cf6:	e749      	b.n	8007b8c <__kernel_rem_pio2f+0x114>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	f1ba 0f00 	cmp.w	sl, #0
 8007cfe:	d108      	bne.n	8007d12 <__kernel_rem_pio2f+0x29a>
 8007d00:	b11b      	cbz	r3, 8007d0a <__kernel_rem_pio2f+0x292>
 8007d02:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	469a      	mov	sl, r3
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	3404      	adds	r4, #4
 8007d10:	e73f      	b.n	8007b92 <__kernel_rem_pio2f+0x11a>
 8007d12:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	4653      	mov	r3, sl
 8007d1a:	e7f6      	b.n	8007d0a <__kernel_rem_pio2f+0x292>
 8007d1c:	f108 32ff 	add.w	r2, r8, #4294967295
 8007d20:	ab0a      	add	r3, sp, #40	; 0x28
 8007d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	a90a      	add	r1, sp, #40	; 0x28
 8007d2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007d30:	e73a      	b.n	8007ba8 <__kernel_rem_pio2f+0x130>
 8007d32:	f108 32ff 	add.w	r2, r8, #4294967295
 8007d36:	ab0a      	add	r3, sp, #40	; 0x28
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d40:	e7f3      	b.n	8007d2a <__kernel_rem_pio2f+0x2b2>
 8007d42:	a90a      	add	r1, sp, #40	; 0x28
 8007d44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	e7a9      	b.n	8007ca2 <__kernel_rem_pio2f+0x22a>
 8007d4e:	bf00      	nop
 8007d50:	0800b820 	.word	0x0800b820
 8007d54:	0800b7f4 	.word	0x0800b7f4
 8007d58:	3301      	adds	r3, #1
 8007d5a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	d0fa      	beq.n	8007d58 <__kernel_rem_pio2f+0x2e0>
 8007d62:	9a04      	ldr	r2, [sp, #16]
 8007d64:	f108 0501 	add.w	r5, r8, #1
 8007d68:	eb08 0402 	add.w	r4, r8, r2
 8007d6c:	aa1e      	add	r2, sp, #120	; 0x78
 8007d6e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d72:	4498      	add	r8, r3
 8007d74:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8007d78:	45a8      	cmp	r8, r5
 8007d7a:	f6ff aec2 	blt.w	8007b02 <__kernel_rem_pio2f+0x8a>
 8007d7e:	9b07      	ldr	r3, [sp, #28]
 8007d80:	46a3      	mov	fp, r4
 8007d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d86:	f7f8 fff5 	bl	8000d74 <__aeabi_i2f>
 8007d8a:	f04f 0a00 	mov.w	sl, #0
 8007d8e:	2600      	movs	r6, #0
 8007d90:	6020      	str	r0, [r4, #0]
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	459a      	cmp	sl, r3
 8007d96:	dd07      	ble.n	8007da8 <__kernel_rem_pio2f+0x330>
 8007d98:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8007d9c:	3404      	adds	r4, #4
 8007d9e:	3501      	adds	r5, #1
 8007da0:	e7ea      	b.n	8007d78 <__kernel_rem_pio2f+0x300>
 8007da2:	2301      	movs	r3, #1
 8007da4:	9a08      	ldr	r2, [sp, #32]
 8007da6:	e7d8      	b.n	8007d5a <__kernel_rem_pio2f+0x2e2>
 8007da8:	9b05      	ldr	r3, [sp, #20]
 8007daa:	f85b 0904 	ldr.w	r0, [fp], #-4
 8007dae:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8007db2:	f7f9 f833 	bl	8000e1c <__aeabi_fmul>
 8007db6:	4601      	mov	r1, r0
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7f8 ff27 	bl	8000c0c <__addsf3>
 8007dbe:	f10a 0a01 	add.w	sl, sl, #1
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	e7e5      	b.n	8007d92 <__kernel_rem_pio2f+0x31a>
 8007dc6:	3c01      	subs	r4, #1
 8007dc8:	e770      	b.n	8007cac <__kernel_rem_pio2f+0x234>
 8007dca:	9b06      	ldr	r3, [sp, #24]
 8007dcc:	9a02      	ldr	r2, [sp, #8]
 8007dce:	4648      	mov	r0, r9
 8007dd0:	1a99      	subs	r1, r3, r2
 8007dd2:	f000 facb 	bl	800836c <scalbnf>
 8007dd6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007dda:	4604      	mov	r4, r0
 8007ddc:	f7f9 f9d0 	bl	8001180 <__aeabi_fcmpge>
 8007de0:	b300      	cbz	r0, 8007e24 <__kernel_rem_pio2f+0x3ac>
 8007de2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7f9 f818 	bl	8000e1c <__aeabi_fmul>
 8007dec:	f7f9 f9f2 	bl	80011d4 <__aeabi_f2iz>
 8007df0:	f7f8 ffc0 	bl	8000d74 <__aeabi_i2f>
 8007df4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007df8:	4681      	mov	r9, r0
 8007dfa:	f7f9 f80f 	bl	8000e1c <__aeabi_fmul>
 8007dfe:	4601      	mov	r1, r0
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7f8 ff01 	bl	8000c08 <__aeabi_fsub>
 8007e06:	f7f9 f9e5 	bl	80011d4 <__aeabi_f2iz>
 8007e0a:	ab0a      	add	r3, sp, #40	; 0x28
 8007e0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007e10:	4648      	mov	r0, r9
 8007e12:	f7f9 f9df 	bl	80011d4 <__aeabi_f2iz>
 8007e16:	f108 0401 	add.w	r4, r8, #1
 8007e1a:	ab0a      	add	r3, sp, #40	; 0x28
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007e22:	e74a      	b.n	8007cba <__kernel_rem_pio2f+0x242>
 8007e24:	4620      	mov	r0, r4
 8007e26:	f7f9 f9d5 	bl	80011d4 <__aeabi_f2iz>
 8007e2a:	ab0a      	add	r3, sp, #40	; 0x28
 8007e2c:	4644      	mov	r4, r8
 8007e2e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007e32:	e742      	b.n	8007cba <__kernel_rem_pio2f+0x242>
 8007e34:	ab0a      	add	r3, sp, #40	; 0x28
 8007e36:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007e3a:	f7f8 ff9b 	bl	8000d74 <__aeabi_i2f>
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f7f8 ffec 	bl	8000e1c <__aeabi_fmul>
 8007e44:	4641      	mov	r1, r8
 8007e46:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8007e4a:	4648      	mov	r0, r9
 8007e4c:	f7f8 ffe6 	bl	8000e1c <__aeabi_fmul>
 8007e50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e54:	4681      	mov	r9, r0
 8007e56:	e73a      	b.n	8007cce <__kernel_rem_pio2f+0x256>
 8007e58:	f853 0b04 	ldr.w	r0, [r3], #4
 8007e5c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8007e60:	9203      	str	r2, [sp, #12]
 8007e62:	9302      	str	r3, [sp, #8]
 8007e64:	f7f8 ffda 	bl	8000e1c <__aeabi_fmul>
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7f8 fece 	bl	8000c0c <__addsf3>
 8007e70:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e74:	4680      	mov	r8, r0
 8007e76:	f10a 0a01 	add.w	sl, sl, #1
 8007e7a:	9901      	ldr	r1, [sp, #4]
 8007e7c:	458a      	cmp	sl, r1
 8007e7e:	dc01      	bgt.n	8007e84 <__kernel_rem_pio2f+0x40c>
 8007e80:	45ca      	cmp	sl, r9
 8007e82:	dde9      	ble.n	8007e58 <__kernel_rem_pio2f+0x3e0>
 8007e84:	ab5a      	add	r3, sp, #360	; 0x168
 8007e86:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8007e8a:	f849 8ca0 	str.w	r8, [r9, #-160]
 8007e8e:	3f01      	subs	r7, #1
 8007e90:	e723      	b.n	8007cda <__kernel_rem_pio2f+0x262>
 8007e92:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	dc07      	bgt.n	8007ea8 <__kernel_rem_pio2f+0x430>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dc4d      	bgt.n	8007f38 <__kernel_rem_pio2f+0x4c0>
 8007e9c:	d02e      	beq.n	8007efc <__kernel_rem_pio2f+0x484>
 8007e9e:	f006 0007 	and.w	r0, r6, #7
 8007ea2:	b05b      	add	sp, #364	; 0x16c
 8007ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d1f7      	bne.n	8007e9e <__kernel_rem_pio2f+0x426>
 8007eae:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8007eb2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8007eb6:	46b8      	mov	r8, r7
 8007eb8:	46a2      	mov	sl, r4
 8007eba:	f1ba 0f00 	cmp.w	sl, #0
 8007ebe:	dc48      	bgt.n	8007f52 <__kernel_rem_pio2f+0x4da>
 8007ec0:	46a1      	mov	r9, r4
 8007ec2:	f1b9 0f01 	cmp.w	r9, #1
 8007ec6:	dc5f      	bgt.n	8007f88 <__kernel_rem_pio2f+0x510>
 8007ec8:	2000      	movs	r0, #0
 8007eca:	2c01      	cmp	r4, #1
 8007ecc:	dc75      	bgt.n	8007fba <__kernel_rem_pio2f+0x542>
 8007ece:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007ed0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8007ed2:	2d00      	cmp	r5, #0
 8007ed4:	d177      	bne.n	8007fc6 <__kernel_rem_pio2f+0x54e>
 8007ed6:	9900      	ldr	r1, [sp, #0]
 8007ed8:	600a      	str	r2, [r1, #0]
 8007eda:	460a      	mov	r2, r1
 8007edc:	604b      	str	r3, [r1, #4]
 8007ede:	6090      	str	r0, [r2, #8]
 8007ee0:	e7dd      	b.n	8007e9e <__kernel_rem_pio2f+0x426>
 8007ee2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007ee6:	f7f8 fe91 	bl	8000c0c <__addsf3>
 8007eea:	3c01      	subs	r4, #1
 8007eec:	2c00      	cmp	r4, #0
 8007eee:	daf8      	bge.n	8007ee2 <__kernel_rem_pio2f+0x46a>
 8007ef0:	b10d      	cbz	r5, 8007ef6 <__kernel_rem_pio2f+0x47e>
 8007ef2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	6018      	str	r0, [r3, #0]
 8007efa:	e7d0      	b.n	8007e9e <__kernel_rem_pio2f+0x426>
 8007efc:	2000      	movs	r0, #0
 8007efe:	af32      	add	r7, sp, #200	; 0xc8
 8007f00:	e7f4      	b.n	8007eec <__kernel_rem_pio2f+0x474>
 8007f02:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8007f06:	f7f8 fe81 	bl	8000c0c <__addsf3>
 8007f0a:	3f01      	subs	r7, #1
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	daf8      	bge.n	8007f02 <__kernel_rem_pio2f+0x48a>
 8007f10:	b1bd      	cbz	r5, 8007f42 <__kernel_rem_pio2f+0x4ca>
 8007f12:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8007f16:	9a00      	ldr	r2, [sp, #0]
 8007f18:	4601      	mov	r1, r0
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8007f1e:	f7f8 fe73 	bl	8000c08 <__aeabi_fsub>
 8007f22:	2701      	movs	r7, #1
 8007f24:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8007f28:	42bc      	cmp	r4, r7
 8007f2a:	da0c      	bge.n	8007f46 <__kernel_rem_pio2f+0x4ce>
 8007f2c:	b10d      	cbz	r5, 8007f32 <__kernel_rem_pio2f+0x4ba>
 8007f2e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007f32:	9b00      	ldr	r3, [sp, #0]
 8007f34:	6058      	str	r0, [r3, #4]
 8007f36:	e7b2      	b.n	8007e9e <__kernel_rem_pio2f+0x426>
 8007f38:	4627      	mov	r7, r4
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8007f40:	e7e4      	b.n	8007f0c <__kernel_rem_pio2f+0x494>
 8007f42:	4603      	mov	r3, r0
 8007f44:	e7e7      	b.n	8007f16 <__kernel_rem_pio2f+0x49e>
 8007f46:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8007f4a:	f7f8 fe5f 	bl	8000c0c <__addsf3>
 8007f4e:	3701      	adds	r7, #1
 8007f50:	e7ea      	b.n	8007f28 <__kernel_rem_pio2f+0x4b0>
 8007f52:	f8d8 3000 	ldr.w	r3, [r8]
 8007f56:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	9302      	str	r3, [sp, #8]
 8007f60:	9201      	str	r2, [sp, #4]
 8007f62:	f7f8 fe53 	bl	8000c0c <__addsf3>
 8007f66:	9a01      	ldr	r2, [sp, #4]
 8007f68:	4601      	mov	r1, r0
 8007f6a:	4681      	mov	r9, r0
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	f7f8 fe4b 	bl	8000c08 <__aeabi_fsub>
 8007f72:	9b02      	ldr	r3, [sp, #8]
 8007f74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7f8 fe47 	bl	8000c0c <__addsf3>
 8007f7e:	f848 0904 	str.w	r0, [r8], #-4
 8007f82:	f8c8 9000 	str.w	r9, [r8]
 8007f86:	e798      	b.n	8007eba <__kernel_rem_pio2f+0x442>
 8007f88:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8007f8c:	f8d7 a000 	ldr.w	sl, [r7]
 8007f90:	4618      	mov	r0, r3
 8007f92:	4651      	mov	r1, sl
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	f7f8 fe39 	bl	8000c0c <__addsf3>
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7f8 fe31 	bl	8000c08 <__aeabi_fsub>
 8007fa6:	4651      	mov	r1, sl
 8007fa8:	f7f8 fe30 	bl	8000c0c <__addsf3>
 8007fac:	f847 0904 	str.w	r0, [r7], #-4
 8007fb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8007fb4:	f8c7 8000 	str.w	r8, [r7]
 8007fb8:	e783      	b.n	8007ec2 <__kernel_rem_pio2f+0x44a>
 8007fba:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8007fbe:	f7f8 fe25 	bl	8000c0c <__addsf3>
 8007fc2:	3c01      	subs	r4, #1
 8007fc4:	e781      	b.n	8007eca <__kernel_rem_pio2f+0x452>
 8007fc6:	9900      	ldr	r1, [sp, #0]
 8007fc8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8007fcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007fd0:	600a      	str	r2, [r1, #0]
 8007fd2:	604b      	str	r3, [r1, #4]
 8007fd4:	460a      	mov	r2, r1
 8007fd6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007fda:	e780      	b.n	8007ede <__kernel_rem_pio2f+0x466>

08007fdc <__kernel_sinf>:
 8007fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007fe4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	4691      	mov	r9, r2
 8007fee:	da03      	bge.n	8007ff8 <__kernel_sinf+0x1c>
 8007ff0:	f7f9 f8f0 	bl	80011d4 <__aeabi_f2iz>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d035      	beq.n	8008064 <__kernel_sinf+0x88>
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f7f8 ff0e 	bl	8000e1c <__aeabi_fmul>
 8008000:	4605      	mov	r5, r0
 8008002:	4601      	mov	r1, r0
 8008004:	4620      	mov	r0, r4
 8008006:	f7f8 ff09 	bl	8000e1c <__aeabi_fmul>
 800800a:	4929      	ldr	r1, [pc, #164]	; (80080b0 <__kernel_sinf+0xd4>)
 800800c:	4606      	mov	r6, r0
 800800e:	4628      	mov	r0, r5
 8008010:	f7f8 ff04 	bl	8000e1c <__aeabi_fmul>
 8008014:	4927      	ldr	r1, [pc, #156]	; (80080b4 <__kernel_sinf+0xd8>)
 8008016:	f7f8 fdf7 	bl	8000c08 <__aeabi_fsub>
 800801a:	4629      	mov	r1, r5
 800801c:	f7f8 fefe 	bl	8000e1c <__aeabi_fmul>
 8008020:	4925      	ldr	r1, [pc, #148]	; (80080b8 <__kernel_sinf+0xdc>)
 8008022:	f7f8 fdf3 	bl	8000c0c <__addsf3>
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 fef8 	bl	8000e1c <__aeabi_fmul>
 800802c:	4923      	ldr	r1, [pc, #140]	; (80080bc <__kernel_sinf+0xe0>)
 800802e:	f7f8 fdeb 	bl	8000c08 <__aeabi_fsub>
 8008032:	4629      	mov	r1, r5
 8008034:	f7f8 fef2 	bl	8000e1c <__aeabi_fmul>
 8008038:	4921      	ldr	r1, [pc, #132]	; (80080c0 <__kernel_sinf+0xe4>)
 800803a:	f7f8 fde7 	bl	8000c0c <__addsf3>
 800803e:	4680      	mov	r8, r0
 8008040:	f1b9 0f00 	cmp.w	r9, #0
 8008044:	d111      	bne.n	800806a <__kernel_sinf+0x8e>
 8008046:	4601      	mov	r1, r0
 8008048:	4628      	mov	r0, r5
 800804a:	f7f8 fee7 	bl	8000e1c <__aeabi_fmul>
 800804e:	491d      	ldr	r1, [pc, #116]	; (80080c4 <__kernel_sinf+0xe8>)
 8008050:	f7f8 fdda 	bl	8000c08 <__aeabi_fsub>
 8008054:	4631      	mov	r1, r6
 8008056:	f7f8 fee1 	bl	8000e1c <__aeabi_fmul>
 800805a:	4601      	mov	r1, r0
 800805c:	4620      	mov	r0, r4
 800805e:	f7f8 fdd5 	bl	8000c0c <__addsf3>
 8008062:	4604      	mov	r4, r0
 8008064:	4620      	mov	r0, r4
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800806e:	4638      	mov	r0, r7
 8008070:	f7f8 fed4 	bl	8000e1c <__aeabi_fmul>
 8008074:	4641      	mov	r1, r8
 8008076:	4681      	mov	r9, r0
 8008078:	4630      	mov	r0, r6
 800807a:	f7f8 fecf 	bl	8000e1c <__aeabi_fmul>
 800807e:	4601      	mov	r1, r0
 8008080:	4648      	mov	r0, r9
 8008082:	f7f8 fdc1 	bl	8000c08 <__aeabi_fsub>
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 fec8 	bl	8000e1c <__aeabi_fmul>
 800808c:	4639      	mov	r1, r7
 800808e:	f7f8 fdbb 	bl	8000c08 <__aeabi_fsub>
 8008092:	490c      	ldr	r1, [pc, #48]	; (80080c4 <__kernel_sinf+0xe8>)
 8008094:	4605      	mov	r5, r0
 8008096:	4630      	mov	r0, r6
 8008098:	f7f8 fec0 	bl	8000e1c <__aeabi_fmul>
 800809c:	4601      	mov	r1, r0
 800809e:	4628      	mov	r0, r5
 80080a0:	f7f8 fdb4 	bl	8000c0c <__addsf3>
 80080a4:	4601      	mov	r1, r0
 80080a6:	4620      	mov	r0, r4
 80080a8:	f7f8 fdae 	bl	8000c08 <__aeabi_fsub>
 80080ac:	e7d9      	b.n	8008062 <__kernel_sinf+0x86>
 80080ae:	bf00      	nop
 80080b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80080b4:	32d72f34 	.word	0x32d72f34
 80080b8:	3638ef1b 	.word	0x3638ef1b
 80080bc:	39500d01 	.word	0x39500d01
 80080c0:	3c088889 	.word	0x3c088889
 80080c4:	3e2aaaab 	.word	0x3e2aaaab

080080c8 <atanf>:
 80080c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080cc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80080d0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80080d4:	4604      	mov	r4, r0
 80080d6:	4680      	mov	r8, r0
 80080d8:	db0e      	blt.n	80080f8 <atanf+0x30>
 80080da:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80080de:	dd04      	ble.n	80080ea <atanf+0x22>
 80080e0:	4601      	mov	r1, r0
 80080e2:	f7f8 fd93 	bl	8000c0c <__addsf3>
 80080e6:	4604      	mov	r4, r0
 80080e8:	e003      	b.n	80080f2 <atanf+0x2a>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	f300 80ce 	bgt.w	800828c <atanf+0x1c4>
 80080f0:	4c67      	ldr	r4, [pc, #412]	; (8008290 <atanf+0x1c8>)
 80080f2:	4620      	mov	r0, r4
 80080f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f8:	4b66      	ldr	r3, [pc, #408]	; (8008294 <atanf+0x1cc>)
 80080fa:	429d      	cmp	r5, r3
 80080fc:	dc0e      	bgt.n	800811c <atanf+0x54>
 80080fe:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008102:	da08      	bge.n	8008116 <atanf+0x4e>
 8008104:	4964      	ldr	r1, [pc, #400]	; (8008298 <atanf+0x1d0>)
 8008106:	f7f8 fd81 	bl	8000c0c <__addsf3>
 800810a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800810e:	f7f9 f841 	bl	8001194 <__aeabi_fcmpgt>
 8008112:	2800      	cmp	r0, #0
 8008114:	d1ed      	bne.n	80080f2 <atanf+0x2a>
 8008116:	f04f 36ff 	mov.w	r6, #4294967295
 800811a:	e01c      	b.n	8008156 <atanf+0x8e>
 800811c:	f000 f8e0 	bl	80082e0 <fabsf>
 8008120:	4b5e      	ldr	r3, [pc, #376]	; (800829c <atanf+0x1d4>)
 8008122:	4604      	mov	r4, r0
 8008124:	429d      	cmp	r5, r3
 8008126:	dc7c      	bgt.n	8008222 <atanf+0x15a>
 8008128:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800812c:	429d      	cmp	r5, r3
 800812e:	dc67      	bgt.n	8008200 <atanf+0x138>
 8008130:	4601      	mov	r1, r0
 8008132:	f7f8 fd6b 	bl	8000c0c <__addsf3>
 8008136:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800813a:	f7f8 fd65 	bl	8000c08 <__aeabi_fsub>
 800813e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008142:	4605      	mov	r5, r0
 8008144:	4620      	mov	r0, r4
 8008146:	f7f8 fd61 	bl	8000c0c <__addsf3>
 800814a:	4601      	mov	r1, r0
 800814c:	4628      	mov	r0, r5
 800814e:	f7f8 ff19 	bl	8000f84 <__aeabi_fdiv>
 8008152:	2600      	movs	r6, #0
 8008154:	4604      	mov	r4, r0
 8008156:	4621      	mov	r1, r4
 8008158:	4620      	mov	r0, r4
 800815a:	f7f8 fe5f 	bl	8000e1c <__aeabi_fmul>
 800815e:	4601      	mov	r1, r0
 8008160:	4607      	mov	r7, r0
 8008162:	f7f8 fe5b 	bl	8000e1c <__aeabi_fmul>
 8008166:	4605      	mov	r5, r0
 8008168:	494d      	ldr	r1, [pc, #308]	; (80082a0 <atanf+0x1d8>)
 800816a:	f7f8 fe57 	bl	8000e1c <__aeabi_fmul>
 800816e:	494d      	ldr	r1, [pc, #308]	; (80082a4 <atanf+0x1dc>)
 8008170:	f7f8 fd4c 	bl	8000c0c <__addsf3>
 8008174:	4629      	mov	r1, r5
 8008176:	f7f8 fe51 	bl	8000e1c <__aeabi_fmul>
 800817a:	494b      	ldr	r1, [pc, #300]	; (80082a8 <atanf+0x1e0>)
 800817c:	f7f8 fd46 	bl	8000c0c <__addsf3>
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 fe4b 	bl	8000e1c <__aeabi_fmul>
 8008186:	4949      	ldr	r1, [pc, #292]	; (80082ac <atanf+0x1e4>)
 8008188:	f7f8 fd40 	bl	8000c0c <__addsf3>
 800818c:	4629      	mov	r1, r5
 800818e:	f7f8 fe45 	bl	8000e1c <__aeabi_fmul>
 8008192:	4947      	ldr	r1, [pc, #284]	; (80082b0 <atanf+0x1e8>)
 8008194:	f7f8 fd3a 	bl	8000c0c <__addsf3>
 8008198:	4629      	mov	r1, r5
 800819a:	f7f8 fe3f 	bl	8000e1c <__aeabi_fmul>
 800819e:	4945      	ldr	r1, [pc, #276]	; (80082b4 <atanf+0x1ec>)
 80081a0:	f7f8 fd34 	bl	8000c0c <__addsf3>
 80081a4:	4639      	mov	r1, r7
 80081a6:	f7f8 fe39 	bl	8000e1c <__aeabi_fmul>
 80081aa:	4943      	ldr	r1, [pc, #268]	; (80082b8 <atanf+0x1f0>)
 80081ac:	4607      	mov	r7, r0
 80081ae:	4628      	mov	r0, r5
 80081b0:	f7f8 fe34 	bl	8000e1c <__aeabi_fmul>
 80081b4:	4941      	ldr	r1, [pc, #260]	; (80082bc <atanf+0x1f4>)
 80081b6:	f7f8 fd27 	bl	8000c08 <__aeabi_fsub>
 80081ba:	4629      	mov	r1, r5
 80081bc:	f7f8 fe2e 	bl	8000e1c <__aeabi_fmul>
 80081c0:	493f      	ldr	r1, [pc, #252]	; (80082c0 <atanf+0x1f8>)
 80081c2:	f7f8 fd21 	bl	8000c08 <__aeabi_fsub>
 80081c6:	4629      	mov	r1, r5
 80081c8:	f7f8 fe28 	bl	8000e1c <__aeabi_fmul>
 80081cc:	493d      	ldr	r1, [pc, #244]	; (80082c4 <atanf+0x1fc>)
 80081ce:	f7f8 fd1b 	bl	8000c08 <__aeabi_fsub>
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7f8 fe22 	bl	8000e1c <__aeabi_fmul>
 80081d8:	493b      	ldr	r1, [pc, #236]	; (80082c8 <atanf+0x200>)
 80081da:	f7f8 fd15 	bl	8000c08 <__aeabi_fsub>
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 fe1c 	bl	8000e1c <__aeabi_fmul>
 80081e4:	4601      	mov	r1, r0
 80081e6:	4638      	mov	r0, r7
 80081e8:	f7f8 fd10 	bl	8000c0c <__addsf3>
 80081ec:	4621      	mov	r1, r4
 80081ee:	f7f8 fe15 	bl	8000e1c <__aeabi_fmul>
 80081f2:	1c73      	adds	r3, r6, #1
 80081f4:	4601      	mov	r1, r0
 80081f6:	d133      	bne.n	8008260 <atanf+0x198>
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7f8 fd05 	bl	8000c08 <__aeabi_fsub>
 80081fe:	e772      	b.n	80080e6 <atanf+0x1e>
 8008200:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008204:	f7f8 fd00 	bl	8000c08 <__aeabi_fsub>
 8008208:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800820c:	4605      	mov	r5, r0
 800820e:	4620      	mov	r0, r4
 8008210:	f7f8 fcfc 	bl	8000c0c <__addsf3>
 8008214:	4601      	mov	r1, r0
 8008216:	4628      	mov	r0, r5
 8008218:	f7f8 feb4 	bl	8000f84 <__aeabi_fdiv>
 800821c:	2601      	movs	r6, #1
 800821e:	4604      	mov	r4, r0
 8008220:	e799      	b.n	8008156 <atanf+0x8e>
 8008222:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <atanf+0x204>)
 8008224:	429d      	cmp	r5, r3
 8008226:	dc14      	bgt.n	8008252 <atanf+0x18a>
 8008228:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800822c:	f7f8 fcec 	bl	8000c08 <__aeabi_fsub>
 8008230:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008234:	4605      	mov	r5, r0
 8008236:	4620      	mov	r0, r4
 8008238:	f7f8 fdf0 	bl	8000e1c <__aeabi_fmul>
 800823c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008240:	f7f8 fce4 	bl	8000c0c <__addsf3>
 8008244:	4601      	mov	r1, r0
 8008246:	4628      	mov	r0, r5
 8008248:	f7f8 fe9c 	bl	8000f84 <__aeabi_fdiv>
 800824c:	2602      	movs	r6, #2
 800824e:	4604      	mov	r4, r0
 8008250:	e781      	b.n	8008156 <atanf+0x8e>
 8008252:	4601      	mov	r1, r0
 8008254:	481e      	ldr	r0, [pc, #120]	; (80082d0 <atanf+0x208>)
 8008256:	f7f8 fe95 	bl	8000f84 <__aeabi_fdiv>
 800825a:	2603      	movs	r6, #3
 800825c:	4604      	mov	r4, r0
 800825e:	e77a      	b.n	8008156 <atanf+0x8e>
 8008260:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <atanf+0x20c>)
 8008262:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008266:	f7f8 fccf 	bl	8000c08 <__aeabi_fsub>
 800826a:	4621      	mov	r1, r4
 800826c:	f7f8 fccc 	bl	8000c08 <__aeabi_fsub>
 8008270:	4b19      	ldr	r3, [pc, #100]	; (80082d8 <atanf+0x210>)
 8008272:	4601      	mov	r1, r0
 8008274:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008278:	f7f8 fcc6 	bl	8000c08 <__aeabi_fsub>
 800827c:	f1b8 0f00 	cmp.w	r8, #0
 8008280:	4604      	mov	r4, r0
 8008282:	f6bf af36 	bge.w	80080f2 <atanf+0x2a>
 8008286:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800828a:	e72c      	b.n	80080e6 <atanf+0x1e>
 800828c:	4c13      	ldr	r4, [pc, #76]	; (80082dc <atanf+0x214>)
 800828e:	e730      	b.n	80080f2 <atanf+0x2a>
 8008290:	bfc90fdb 	.word	0xbfc90fdb
 8008294:	3edfffff 	.word	0x3edfffff
 8008298:	7149f2ca 	.word	0x7149f2ca
 800829c:	3f97ffff 	.word	0x3f97ffff
 80082a0:	3c8569d7 	.word	0x3c8569d7
 80082a4:	3d4bda59 	.word	0x3d4bda59
 80082a8:	3d886b35 	.word	0x3d886b35
 80082ac:	3dba2e6e 	.word	0x3dba2e6e
 80082b0:	3e124925 	.word	0x3e124925
 80082b4:	3eaaaaab 	.word	0x3eaaaaab
 80082b8:	bd15a221 	.word	0xbd15a221
 80082bc:	3d6ef16b 	.word	0x3d6ef16b
 80082c0:	3d9d8795 	.word	0x3d9d8795
 80082c4:	3de38e38 	.word	0x3de38e38
 80082c8:	3e4ccccd 	.word	0x3e4ccccd
 80082cc:	401bffff 	.word	0x401bffff
 80082d0:	bf800000 	.word	0xbf800000
 80082d4:	0800b83c 	.word	0x0800b83c
 80082d8:	0800b82c 	.word	0x0800b82c
 80082dc:	3fc90fdb 	.word	0x3fc90fdb

080082e0 <fabsf>:
 80082e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80082e4:	4770      	bx	lr
	...

080082e8 <floorf>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80082ee:	3d7f      	subs	r5, #127	; 0x7f
 80082f0:	2d16      	cmp	r5, #22
 80082f2:	4601      	mov	r1, r0
 80082f4:	4604      	mov	r4, r0
 80082f6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80082fa:	dc26      	bgt.n	800834a <floorf+0x62>
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	da0e      	bge.n	800831e <floorf+0x36>
 8008300:	4917      	ldr	r1, [pc, #92]	; (8008360 <floorf+0x78>)
 8008302:	f7f8 fc83 	bl	8000c0c <__addsf3>
 8008306:	2100      	movs	r1, #0
 8008308:	f7f8 ff44 	bl	8001194 <__aeabi_fcmpgt>
 800830c:	b128      	cbz	r0, 800831a <floorf+0x32>
 800830e:	2c00      	cmp	r4, #0
 8008310:	da23      	bge.n	800835a <floorf+0x72>
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <floorf+0x7c>)
 8008314:	2e00      	cmp	r6, #0
 8008316:	bf18      	it	ne
 8008318:	461c      	movne	r4, r3
 800831a:	4621      	mov	r1, r4
 800831c:	e01b      	b.n	8008356 <floorf+0x6e>
 800831e:	4e12      	ldr	r6, [pc, #72]	; (8008368 <floorf+0x80>)
 8008320:	412e      	asrs	r6, r5
 8008322:	4230      	tst	r0, r6
 8008324:	d017      	beq.n	8008356 <floorf+0x6e>
 8008326:	490e      	ldr	r1, [pc, #56]	; (8008360 <floorf+0x78>)
 8008328:	f7f8 fc70 	bl	8000c0c <__addsf3>
 800832c:	2100      	movs	r1, #0
 800832e:	f7f8 ff31 	bl	8001194 <__aeabi_fcmpgt>
 8008332:	2800      	cmp	r0, #0
 8008334:	d0f1      	beq.n	800831a <floorf+0x32>
 8008336:	2c00      	cmp	r4, #0
 8008338:	bfbe      	ittt	lt
 800833a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800833e:	fa43 f505 	asrlt.w	r5, r3, r5
 8008342:	1964      	addlt	r4, r4, r5
 8008344:	ea24 0406 	bic.w	r4, r4, r6
 8008348:	e7e7      	b.n	800831a <floorf+0x32>
 800834a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800834e:	d302      	bcc.n	8008356 <floorf+0x6e>
 8008350:	f7f8 fc5c 	bl	8000c0c <__addsf3>
 8008354:	4601      	mov	r1, r0
 8008356:	4608      	mov	r0, r1
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	2400      	movs	r4, #0
 800835c:	e7dd      	b.n	800831a <floorf+0x32>
 800835e:	bf00      	nop
 8008360:	7149f2ca 	.word	0x7149f2ca
 8008364:	bf800000 	.word	0xbf800000
 8008368:	007fffff 	.word	0x007fffff

0800836c <scalbnf>:
 800836c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4603      	mov	r3, r0
 8008374:	460d      	mov	r5, r1
 8008376:	4604      	mov	r4, r0
 8008378:	d02a      	beq.n	80083d0 <scalbnf+0x64>
 800837a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800837e:	d304      	bcc.n	800838a <scalbnf+0x1e>
 8008380:	4601      	mov	r1, r0
 8008382:	f7f8 fc43 	bl	8000c0c <__addsf3>
 8008386:	4603      	mov	r3, r0
 8008388:	e022      	b.n	80083d0 <scalbnf+0x64>
 800838a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800838e:	d117      	bne.n	80083c0 <scalbnf+0x54>
 8008390:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008394:	f7f8 fd42 	bl	8000e1c <__aeabi_fmul>
 8008398:	4a17      	ldr	r2, [pc, #92]	; (80083f8 <scalbnf+0x8c>)
 800839a:	4603      	mov	r3, r0
 800839c:	4295      	cmp	r5, r2
 800839e:	db0b      	blt.n	80083b8 <scalbnf+0x4c>
 80083a0:	4604      	mov	r4, r0
 80083a2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80083a6:	3a19      	subs	r2, #25
 80083a8:	442a      	add	r2, r5
 80083aa:	2afe      	cmp	r2, #254	; 0xfe
 80083ac:	dd0a      	ble.n	80083c4 <scalbnf+0x58>
 80083ae:	4913      	ldr	r1, [pc, #76]	; (80083fc <scalbnf+0x90>)
 80083b0:	4618      	mov	r0, r3
 80083b2:	f361 001e 	bfi	r0, r1, #0, #31
 80083b6:	e000      	b.n	80083ba <scalbnf+0x4e>
 80083b8:	4911      	ldr	r1, [pc, #68]	; (8008400 <scalbnf+0x94>)
 80083ba:	f7f8 fd2f 	bl	8000e1c <__aeabi_fmul>
 80083be:	e7e2      	b.n	8008386 <scalbnf+0x1a>
 80083c0:	0dd2      	lsrs	r2, r2, #23
 80083c2:	e7f1      	b.n	80083a8 <scalbnf+0x3c>
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	dd05      	ble.n	80083d4 <scalbnf+0x68>
 80083c8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80083cc:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 80083d0:	4618      	mov	r0, r3
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	f112 0f16 	cmn.w	r2, #22
 80083d8:	da05      	bge.n	80083e6 <scalbnf+0x7a>
 80083da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80083de:	4295      	cmp	r5, r2
 80083e0:	dce5      	bgt.n	80083ae <scalbnf+0x42>
 80083e2:	4907      	ldr	r1, [pc, #28]	; (8008400 <scalbnf+0x94>)
 80083e4:	e7e4      	b.n	80083b0 <scalbnf+0x44>
 80083e6:	3219      	adds	r2, #25
 80083e8:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80083ec:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80083f0:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80083f4:	e7e1      	b.n	80083ba <scalbnf+0x4e>
 80083f6:	bf00      	nop
 80083f8:	ffff3cb0 	.word	0xffff3cb0
 80083fc:	7149f2ca 	.word	0x7149f2ca
 8008400:	0da24260 	.word	0x0da24260

08008404 <atoi>:
 8008404:	220a      	movs	r2, #10
 8008406:	2100      	movs	r1, #0
 8008408:	f000 bd52 	b.w	8008eb0 <strtol>

0800840c <__errno>:
 800840c:	4b01      	ldr	r3, [pc, #4]	; (8008414 <__errno+0x8>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20000014 	.word	0x20000014

08008418 <__libc_init_array>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	2600      	movs	r6, #0
 800841c:	4d0c      	ldr	r5, [pc, #48]	; (8008450 <__libc_init_array+0x38>)
 800841e:	4c0d      	ldr	r4, [pc, #52]	; (8008454 <__libc_init_array+0x3c>)
 8008420:	1b64      	subs	r4, r4, r5
 8008422:	10a4      	asrs	r4, r4, #2
 8008424:	42a6      	cmp	r6, r4
 8008426:	d109      	bne.n	800843c <__libc_init_array+0x24>
 8008428:	f002 ff98 	bl	800b35c <_init>
 800842c:	2600      	movs	r6, #0
 800842e:	4d0a      	ldr	r5, [pc, #40]	; (8008458 <__libc_init_array+0x40>)
 8008430:	4c0a      	ldr	r4, [pc, #40]	; (800845c <__libc_init_array+0x44>)
 8008432:	1b64      	subs	r4, r4, r5
 8008434:	10a4      	asrs	r4, r4, #2
 8008436:	42a6      	cmp	r6, r4
 8008438:	d105      	bne.n	8008446 <__libc_init_array+0x2e>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008440:	4798      	blx	r3
 8008442:	3601      	adds	r6, #1
 8008444:	e7ee      	b.n	8008424 <__libc_init_array+0xc>
 8008446:	f855 3b04 	ldr.w	r3, [r5], #4
 800844a:	4798      	blx	r3
 800844c:	3601      	adds	r6, #1
 800844e:	e7f2      	b.n	8008436 <__libc_init_array+0x1e>
 8008450:	0800bc2c 	.word	0x0800bc2c
 8008454:	0800bc2c 	.word	0x0800bc2c
 8008458:	0800bc2c 	.word	0x0800bc2c
 800845c:	0800bc34 	.word	0x0800bc34

08008460 <memcpy>:
 8008460:	440a      	add	r2, r1
 8008462:	4291      	cmp	r1, r2
 8008464:	f100 33ff 	add.w	r3, r0, #4294967295
 8008468:	d100      	bne.n	800846c <memcpy+0xc>
 800846a:	4770      	bx	lr
 800846c:	b510      	push	{r4, lr}
 800846e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008472:	4291      	cmp	r1, r2
 8008474:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008478:	d1f9      	bne.n	800846e <memcpy+0xe>
 800847a:	bd10      	pop	{r4, pc}

0800847c <memset>:
 800847c:	4603      	mov	r3, r0
 800847e:	4402      	add	r2, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	d100      	bne.n	8008486 <memset+0xa>
 8008484:	4770      	bx	lr
 8008486:	f803 1b01 	strb.w	r1, [r3], #1
 800848a:	e7f9      	b.n	8008480 <memset+0x4>

0800848c <__cvt>:
 800848c:	2b00      	cmp	r3, #0
 800848e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008492:	461f      	mov	r7, r3
 8008494:	bfbb      	ittet	lt
 8008496:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800849a:	461f      	movlt	r7, r3
 800849c:	2300      	movge	r3, #0
 800849e:	232d      	movlt	r3, #45	; 0x2d
 80084a0:	b088      	sub	sp, #32
 80084a2:	4614      	mov	r4, r2
 80084a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80084a8:	7013      	strb	r3, [r2, #0]
 80084aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80084b0:	f023 0820 	bic.w	r8, r3, #32
 80084b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084b8:	d005      	beq.n	80084c6 <__cvt+0x3a>
 80084ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084be:	d100      	bne.n	80084c2 <__cvt+0x36>
 80084c0:	3501      	adds	r5, #1
 80084c2:	2302      	movs	r3, #2
 80084c4:	e000      	b.n	80084c8 <__cvt+0x3c>
 80084c6:	2303      	movs	r3, #3
 80084c8:	aa07      	add	r2, sp, #28
 80084ca:	9204      	str	r2, [sp, #16]
 80084cc:	aa06      	add	r2, sp, #24
 80084ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80084d2:	e9cd 3500 	strd	r3, r5, [sp]
 80084d6:	4622      	mov	r2, r4
 80084d8:	463b      	mov	r3, r7
 80084da:	f000 fd81 	bl	8008fe0 <_dtoa_r>
 80084de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084e2:	4606      	mov	r6, r0
 80084e4:	d102      	bne.n	80084ec <__cvt+0x60>
 80084e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d522      	bpl.n	8008532 <__cvt+0xa6>
 80084ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084f0:	eb06 0905 	add.w	r9, r6, r5
 80084f4:	d110      	bne.n	8008518 <__cvt+0x8c>
 80084f6:	7833      	ldrb	r3, [r6, #0]
 80084f8:	2b30      	cmp	r3, #48	; 0x30
 80084fa:	d10a      	bne.n	8008512 <__cvt+0x86>
 80084fc:	2200      	movs	r2, #0
 80084fe:	2300      	movs	r3, #0
 8008500:	4620      	mov	r0, r4
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 fabc 	bl	8000a80 <__aeabi_dcmpeq>
 8008508:	b918      	cbnz	r0, 8008512 <__cvt+0x86>
 800850a:	f1c5 0501 	rsb	r5, r5, #1
 800850e:	f8ca 5000 	str.w	r5, [sl]
 8008512:	f8da 3000 	ldr.w	r3, [sl]
 8008516:	4499      	add	r9, r3
 8008518:	2200      	movs	r2, #0
 800851a:	2300      	movs	r3, #0
 800851c:	4620      	mov	r0, r4
 800851e:	4639      	mov	r1, r7
 8008520:	f7f8 faae 	bl	8000a80 <__aeabi_dcmpeq>
 8008524:	b108      	cbz	r0, 800852a <__cvt+0x9e>
 8008526:	f8cd 901c 	str.w	r9, [sp, #28]
 800852a:	2230      	movs	r2, #48	; 0x30
 800852c:	9b07      	ldr	r3, [sp, #28]
 800852e:	454b      	cmp	r3, r9
 8008530:	d307      	bcc.n	8008542 <__cvt+0xb6>
 8008532:	4630      	mov	r0, r6
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008538:	1b9b      	subs	r3, r3, r6
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	b008      	add	sp, #32
 800853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008542:	1c59      	adds	r1, r3, #1
 8008544:	9107      	str	r1, [sp, #28]
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	e7f0      	b.n	800852c <__cvt+0xa0>

0800854a <__exponent>:
 800854a:	4603      	mov	r3, r0
 800854c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800854e:	2900      	cmp	r1, #0
 8008550:	f803 2b02 	strb.w	r2, [r3], #2
 8008554:	bfb6      	itet	lt
 8008556:	222d      	movlt	r2, #45	; 0x2d
 8008558:	222b      	movge	r2, #43	; 0x2b
 800855a:	4249      	neglt	r1, r1
 800855c:	2909      	cmp	r1, #9
 800855e:	7042      	strb	r2, [r0, #1]
 8008560:	dd2b      	ble.n	80085ba <__exponent+0x70>
 8008562:	f10d 0407 	add.w	r4, sp, #7
 8008566:	46a4      	mov	ip, r4
 8008568:	270a      	movs	r7, #10
 800856a:	fb91 f6f7 	sdiv	r6, r1, r7
 800856e:	460a      	mov	r2, r1
 8008570:	46a6      	mov	lr, r4
 8008572:	fb07 1516 	mls	r5, r7, r6, r1
 8008576:	2a63      	cmp	r2, #99	; 0x63
 8008578:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800857c:	4631      	mov	r1, r6
 800857e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008582:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008586:	dcf0      	bgt.n	800856a <__exponent+0x20>
 8008588:	3130      	adds	r1, #48	; 0x30
 800858a:	f1ae 0502 	sub.w	r5, lr, #2
 800858e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008592:	4629      	mov	r1, r5
 8008594:	1c44      	adds	r4, r0, #1
 8008596:	4561      	cmp	r1, ip
 8008598:	d30a      	bcc.n	80085b0 <__exponent+0x66>
 800859a:	f10d 0209 	add.w	r2, sp, #9
 800859e:	eba2 020e 	sub.w	r2, r2, lr
 80085a2:	4565      	cmp	r5, ip
 80085a4:	bf88      	it	hi
 80085a6:	2200      	movhi	r2, #0
 80085a8:	4413      	add	r3, r2
 80085aa:	1a18      	subs	r0, r3, r0
 80085ac:	b003      	add	sp, #12
 80085ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80085b8:	e7ed      	b.n	8008596 <__exponent+0x4c>
 80085ba:	2330      	movs	r3, #48	; 0x30
 80085bc:	3130      	adds	r1, #48	; 0x30
 80085be:	7083      	strb	r3, [r0, #2]
 80085c0:	70c1      	strb	r1, [r0, #3]
 80085c2:	1d03      	adds	r3, r0, #4
 80085c4:	e7f1      	b.n	80085aa <__exponent+0x60>
	...

080085c8 <_printf_float>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	b091      	sub	sp, #68	; 0x44
 80085ce:	460c      	mov	r4, r1
 80085d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80085d4:	4616      	mov	r6, r2
 80085d6:	461f      	mov	r7, r3
 80085d8:	4605      	mov	r5, r0
 80085da:	f001 faef 	bl	8009bbc <_localeconv_r>
 80085de:	6803      	ldr	r3, [r0, #0]
 80085e0:	4618      	mov	r0, r3
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	f7f7 fe20 	bl	8000228 <strlen>
 80085e8:	2300      	movs	r3, #0
 80085ea:	930e      	str	r3, [sp, #56]	; 0x38
 80085ec:	f8d8 3000 	ldr.w	r3, [r8]
 80085f0:	900a      	str	r0, [sp, #40]	; 0x28
 80085f2:	3307      	adds	r3, #7
 80085f4:	f023 0307 	bic.w	r3, r3, #7
 80085f8:	f103 0208 	add.w	r2, r3, #8
 80085fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008600:	f8d4 b000 	ldr.w	fp, [r4]
 8008604:	f8c8 2000 	str.w	r2, [r8]
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008610:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008614:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008618:	930b      	str	r3, [sp, #44]	; 0x2c
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	4640      	mov	r0, r8
 8008620:	4b9c      	ldr	r3, [pc, #624]	; (8008894 <_printf_float+0x2cc>)
 8008622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008624:	f7f8 fa5e 	bl	8000ae4 <__aeabi_dcmpun>
 8008628:	bb70      	cbnz	r0, 8008688 <_printf_float+0xc0>
 800862a:	f04f 32ff 	mov.w	r2, #4294967295
 800862e:	4640      	mov	r0, r8
 8008630:	4b98      	ldr	r3, [pc, #608]	; (8008894 <_printf_float+0x2cc>)
 8008632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008634:	f7f8 fa38 	bl	8000aa8 <__aeabi_dcmple>
 8008638:	bb30      	cbnz	r0, 8008688 <_printf_float+0xc0>
 800863a:	2200      	movs	r2, #0
 800863c:	2300      	movs	r3, #0
 800863e:	4640      	mov	r0, r8
 8008640:	4651      	mov	r1, sl
 8008642:	f7f8 fa27 	bl	8000a94 <__aeabi_dcmplt>
 8008646:	b110      	cbz	r0, 800864e <_printf_float+0x86>
 8008648:	232d      	movs	r3, #45	; 0x2d
 800864a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864e:	4b92      	ldr	r3, [pc, #584]	; (8008898 <_printf_float+0x2d0>)
 8008650:	4892      	ldr	r0, [pc, #584]	; (800889c <_printf_float+0x2d4>)
 8008652:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008656:	bf94      	ite	ls
 8008658:	4698      	movls	r8, r3
 800865a:	4680      	movhi	r8, r0
 800865c:	2303      	movs	r3, #3
 800865e:	f04f 0a00 	mov.w	sl, #0
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	f02b 0304 	bic.w	r3, fp, #4
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	4633      	mov	r3, r6
 800866c:	4621      	mov	r1, r4
 800866e:	4628      	mov	r0, r5
 8008670:	9700      	str	r7, [sp, #0]
 8008672:	aa0f      	add	r2, sp, #60	; 0x3c
 8008674:	f000 f9d4 	bl	8008a20 <_printf_common>
 8008678:	3001      	adds	r0, #1
 800867a:	f040 8090 	bne.w	800879e <_printf_float+0x1d6>
 800867e:	f04f 30ff 	mov.w	r0, #4294967295
 8008682:	b011      	add	sp, #68	; 0x44
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008688:	4642      	mov	r2, r8
 800868a:	4653      	mov	r3, sl
 800868c:	4640      	mov	r0, r8
 800868e:	4651      	mov	r1, sl
 8008690:	f7f8 fa28 	bl	8000ae4 <__aeabi_dcmpun>
 8008694:	b148      	cbz	r0, 80086aa <_printf_float+0xe2>
 8008696:	f1ba 0f00 	cmp.w	sl, #0
 800869a:	bfb8      	it	lt
 800869c:	232d      	movlt	r3, #45	; 0x2d
 800869e:	4880      	ldr	r0, [pc, #512]	; (80088a0 <_printf_float+0x2d8>)
 80086a0:	bfb8      	it	lt
 80086a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086a6:	4b7f      	ldr	r3, [pc, #508]	; (80088a4 <_printf_float+0x2dc>)
 80086a8:	e7d3      	b.n	8008652 <_printf_float+0x8a>
 80086aa:	6863      	ldr	r3, [r4, #4]
 80086ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	d142      	bne.n	800873a <_printf_float+0x172>
 80086b4:	2306      	movs	r3, #6
 80086b6:	6063      	str	r3, [r4, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	9206      	str	r2, [sp, #24]
 80086bc:	aa0e      	add	r2, sp, #56	; 0x38
 80086be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80086c2:	aa0d      	add	r2, sp, #52	; 0x34
 80086c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80086c8:	9203      	str	r2, [sp, #12]
 80086ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80086ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	4642      	mov	r2, r8
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	4628      	mov	r0, r5
 80086dc:	4653      	mov	r3, sl
 80086de:	910b      	str	r1, [sp, #44]	; 0x2c
 80086e0:	f7ff fed4 	bl	800848c <__cvt>
 80086e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086e6:	4680      	mov	r8, r0
 80086e8:	2947      	cmp	r1, #71	; 0x47
 80086ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086ec:	d108      	bne.n	8008700 <_printf_float+0x138>
 80086ee:	1cc8      	adds	r0, r1, #3
 80086f0:	db02      	blt.n	80086f8 <_printf_float+0x130>
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	4299      	cmp	r1, r3
 80086f6:	dd40      	ble.n	800877a <_printf_float+0x1b2>
 80086f8:	f1a9 0902 	sub.w	r9, r9, #2
 80086fc:	fa5f f989 	uxtb.w	r9, r9
 8008700:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008704:	d81f      	bhi.n	8008746 <_printf_float+0x17e>
 8008706:	464a      	mov	r2, r9
 8008708:	3901      	subs	r1, #1
 800870a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800870e:	910d      	str	r1, [sp, #52]	; 0x34
 8008710:	f7ff ff1b 	bl	800854a <__exponent>
 8008714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008716:	4682      	mov	sl, r0
 8008718:	1813      	adds	r3, r2, r0
 800871a:	2a01      	cmp	r2, #1
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	dc02      	bgt.n	8008726 <_printf_float+0x15e>
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	07d2      	lsls	r2, r2, #31
 8008724:	d501      	bpl.n	800872a <_printf_float+0x162>
 8008726:	3301      	adds	r3, #1
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800872e:	2b00      	cmp	r3, #0
 8008730:	d09b      	beq.n	800866a <_printf_float+0xa2>
 8008732:	232d      	movs	r3, #45	; 0x2d
 8008734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008738:	e797      	b.n	800866a <_printf_float+0xa2>
 800873a:	2947      	cmp	r1, #71	; 0x47
 800873c:	d1bc      	bne.n	80086b8 <_printf_float+0xf0>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1ba      	bne.n	80086b8 <_printf_float+0xf0>
 8008742:	2301      	movs	r3, #1
 8008744:	e7b7      	b.n	80086b6 <_printf_float+0xee>
 8008746:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800874a:	d118      	bne.n	800877e <_printf_float+0x1b6>
 800874c:	2900      	cmp	r1, #0
 800874e:	6863      	ldr	r3, [r4, #4]
 8008750:	dd0b      	ble.n	800876a <_printf_float+0x1a2>
 8008752:	6121      	str	r1, [r4, #16]
 8008754:	b913      	cbnz	r3, 800875c <_printf_float+0x194>
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	07d0      	lsls	r0, r2, #31
 800875a:	d502      	bpl.n	8008762 <_printf_float+0x19a>
 800875c:	3301      	adds	r3, #1
 800875e:	440b      	add	r3, r1
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	f04f 0a00 	mov.w	sl, #0
 8008766:	65a1      	str	r1, [r4, #88]	; 0x58
 8008768:	e7df      	b.n	800872a <_printf_float+0x162>
 800876a:	b913      	cbnz	r3, 8008772 <_printf_float+0x1aa>
 800876c:	6822      	ldr	r2, [r4, #0]
 800876e:	07d2      	lsls	r2, r2, #31
 8008770:	d501      	bpl.n	8008776 <_printf_float+0x1ae>
 8008772:	3302      	adds	r3, #2
 8008774:	e7f4      	b.n	8008760 <_printf_float+0x198>
 8008776:	2301      	movs	r3, #1
 8008778:	e7f2      	b.n	8008760 <_printf_float+0x198>
 800877a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800877e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008780:	4299      	cmp	r1, r3
 8008782:	db05      	blt.n	8008790 <_printf_float+0x1c8>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	6121      	str	r1, [r4, #16]
 8008788:	07d8      	lsls	r0, r3, #31
 800878a:	d5ea      	bpl.n	8008762 <_printf_float+0x19a>
 800878c:	1c4b      	adds	r3, r1, #1
 800878e:	e7e7      	b.n	8008760 <_printf_float+0x198>
 8008790:	2900      	cmp	r1, #0
 8008792:	bfcc      	ite	gt
 8008794:	2201      	movgt	r2, #1
 8008796:	f1c1 0202 	rsble	r2, r1, #2
 800879a:	4413      	add	r3, r2
 800879c:	e7e0      	b.n	8008760 <_printf_float+0x198>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	055a      	lsls	r2, r3, #21
 80087a2:	d407      	bmi.n	80087b4 <_printf_float+0x1ec>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	4642      	mov	r2, r8
 80087a8:	4631      	mov	r1, r6
 80087aa:	4628      	mov	r0, r5
 80087ac:	47b8      	blx	r7
 80087ae:	3001      	adds	r0, #1
 80087b0:	d12b      	bne.n	800880a <_printf_float+0x242>
 80087b2:	e764      	b.n	800867e <_printf_float+0xb6>
 80087b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087b8:	f240 80dd 	bls.w	8008976 <_printf_float+0x3ae>
 80087bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087c0:	2200      	movs	r2, #0
 80087c2:	2300      	movs	r3, #0
 80087c4:	f7f8 f95c 	bl	8000a80 <__aeabi_dcmpeq>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d033      	beq.n	8008834 <_printf_float+0x26c>
 80087cc:	2301      	movs	r3, #1
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	4a35      	ldr	r2, [pc, #212]	; (80088a8 <_printf_float+0x2e0>)
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af51 	beq.w	800867e <_printf_float+0xb6>
 80087dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087e0:	429a      	cmp	r2, r3
 80087e2:	db02      	blt.n	80087ea <_printf_float+0x222>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	07d8      	lsls	r0, r3, #31
 80087e8:	d50f      	bpl.n	800880a <_printf_float+0x242>
 80087ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	f43f af42 	beq.w	800867e <_printf_float+0xb6>
 80087fa:	f04f 0800 	mov.w	r8, #0
 80087fe:	f104 091a 	add.w	r9, r4, #26
 8008802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008804:	3b01      	subs	r3, #1
 8008806:	4543      	cmp	r3, r8
 8008808:	dc09      	bgt.n	800881e <_printf_float+0x256>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	079b      	lsls	r3, r3, #30
 800880e:	f100 8102 	bmi.w	8008a16 <_printf_float+0x44e>
 8008812:	68e0      	ldr	r0, [r4, #12]
 8008814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008816:	4298      	cmp	r0, r3
 8008818:	bfb8      	it	lt
 800881a:	4618      	movlt	r0, r3
 800881c:	e731      	b.n	8008682 <_printf_float+0xba>
 800881e:	2301      	movs	r3, #1
 8008820:	464a      	mov	r2, r9
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	f43f af28 	beq.w	800867e <_printf_float+0xb6>
 800882e:	f108 0801 	add.w	r8, r8, #1
 8008832:	e7e6      	b.n	8008802 <_printf_float+0x23a>
 8008834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008836:	2b00      	cmp	r3, #0
 8008838:	dc38      	bgt.n	80088ac <_printf_float+0x2e4>
 800883a:	2301      	movs	r3, #1
 800883c:	4631      	mov	r1, r6
 800883e:	4628      	mov	r0, r5
 8008840:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <_printf_float+0x2e0>)
 8008842:	47b8      	blx	r7
 8008844:	3001      	adds	r0, #1
 8008846:	f43f af1a 	beq.w	800867e <_printf_float+0xb6>
 800884a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800884e:	4313      	orrs	r3, r2
 8008850:	d102      	bne.n	8008858 <_printf_float+0x290>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	07d9      	lsls	r1, r3, #31
 8008856:	d5d8      	bpl.n	800880a <_printf_float+0x242>
 8008858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800885c:	4631      	mov	r1, r6
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	f43f af0b 	beq.w	800867e <_printf_float+0xb6>
 8008868:	f04f 0900 	mov.w	r9, #0
 800886c:	f104 0a1a 	add.w	sl, r4, #26
 8008870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008872:	425b      	negs	r3, r3
 8008874:	454b      	cmp	r3, r9
 8008876:	dc01      	bgt.n	800887c <_printf_float+0x2b4>
 8008878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800887a:	e794      	b.n	80087a6 <_printf_float+0x1de>
 800887c:	2301      	movs	r3, #1
 800887e:	4652      	mov	r2, sl
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f aef9 	beq.w	800867e <_printf_float+0xb6>
 800888c:	f109 0901 	add.w	r9, r9, #1
 8008890:	e7ee      	b.n	8008870 <_printf_float+0x2a8>
 8008892:	bf00      	nop
 8008894:	7fefffff 	.word	0x7fefffff
 8008898:	0800b850 	.word	0x0800b850
 800889c:	0800b854 	.word	0x0800b854
 80088a0:	0800b85c 	.word	0x0800b85c
 80088a4:	0800b858 	.word	0x0800b858
 80088a8:	0800b860 	.word	0x0800b860
 80088ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088b0:	429a      	cmp	r2, r3
 80088b2:	bfa8      	it	ge
 80088b4:	461a      	movge	r2, r3
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	4691      	mov	r9, r2
 80088ba:	dc37      	bgt.n	800892c <_printf_float+0x364>
 80088bc:	f04f 0b00 	mov.w	fp, #0
 80088c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088c4:	f104 021a 	add.w	r2, r4, #26
 80088c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80088cc:	ebaa 0309 	sub.w	r3, sl, r9
 80088d0:	455b      	cmp	r3, fp
 80088d2:	dc33      	bgt.n	800893c <_printf_float+0x374>
 80088d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088d8:	429a      	cmp	r2, r3
 80088da:	db3b      	blt.n	8008954 <_printf_float+0x38c>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	07da      	lsls	r2, r3, #31
 80088e0:	d438      	bmi.n	8008954 <_printf_float+0x38c>
 80088e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088e6:	eba3 020a 	sub.w	r2, r3, sl
 80088ea:	eba3 0901 	sub.w	r9, r3, r1
 80088ee:	4591      	cmp	r9, r2
 80088f0:	bfa8      	it	ge
 80088f2:	4691      	movge	r9, r2
 80088f4:	f1b9 0f00 	cmp.w	r9, #0
 80088f8:	dc34      	bgt.n	8008964 <_printf_float+0x39c>
 80088fa:	f04f 0800 	mov.w	r8, #0
 80088fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008902:	f104 0a1a 	add.w	sl, r4, #26
 8008906:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	eba3 0309 	sub.w	r3, r3, r9
 8008910:	4543      	cmp	r3, r8
 8008912:	f77f af7a 	ble.w	800880a <_printf_float+0x242>
 8008916:	2301      	movs	r3, #1
 8008918:	4652      	mov	r2, sl
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	f43f aeac 	beq.w	800867e <_printf_float+0xb6>
 8008926:	f108 0801 	add.w	r8, r8, #1
 800892a:	e7ec      	b.n	8008906 <_printf_float+0x33e>
 800892c:	4613      	mov	r3, r2
 800892e:	4631      	mov	r1, r6
 8008930:	4642      	mov	r2, r8
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	d1c0      	bne.n	80088bc <_printf_float+0x2f4>
 800893a:	e6a0      	b.n	800867e <_printf_float+0xb6>
 800893c:	2301      	movs	r3, #1
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	920b      	str	r2, [sp, #44]	; 0x2c
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f ae99 	beq.w	800867e <_printf_float+0xb6>
 800894c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800894e:	f10b 0b01 	add.w	fp, fp, #1
 8008952:	e7b9      	b.n	80088c8 <_printf_float+0x300>
 8008954:	4631      	mov	r1, r6
 8008956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	d1bf      	bne.n	80088e2 <_printf_float+0x31a>
 8008962:	e68c      	b.n	800867e <_printf_float+0xb6>
 8008964:	464b      	mov	r3, r9
 8008966:	4631      	mov	r1, r6
 8008968:	4628      	mov	r0, r5
 800896a:	eb08 020a 	add.w	r2, r8, sl
 800896e:	47b8      	blx	r7
 8008970:	3001      	adds	r0, #1
 8008972:	d1c2      	bne.n	80088fa <_printf_float+0x332>
 8008974:	e683      	b.n	800867e <_printf_float+0xb6>
 8008976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008978:	2a01      	cmp	r2, #1
 800897a:	dc01      	bgt.n	8008980 <_printf_float+0x3b8>
 800897c:	07db      	lsls	r3, r3, #31
 800897e:	d537      	bpl.n	80089f0 <_printf_float+0x428>
 8008980:	2301      	movs	r3, #1
 8008982:	4642      	mov	r2, r8
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f ae77 	beq.w	800867e <_printf_float+0xb6>
 8008990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	f43f ae6f 	beq.w	800867e <_printf_float+0xb6>
 80089a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089a4:	2200      	movs	r2, #0
 80089a6:	2300      	movs	r3, #0
 80089a8:	f7f8 f86a 	bl	8000a80 <__aeabi_dcmpeq>
 80089ac:	b9d8      	cbnz	r0, 80089e6 <_printf_float+0x41e>
 80089ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b0:	f108 0201 	add.w	r2, r8, #1
 80089b4:	3b01      	subs	r3, #1
 80089b6:	4631      	mov	r1, r6
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	d10e      	bne.n	80089de <_printf_float+0x416>
 80089c0:	e65d      	b.n	800867e <_printf_float+0xb6>
 80089c2:	2301      	movs	r3, #1
 80089c4:	464a      	mov	r2, r9
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	f43f ae56 	beq.w	800867e <_printf_float+0xb6>
 80089d2:	f108 0801 	add.w	r8, r8, #1
 80089d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d8:	3b01      	subs	r3, #1
 80089da:	4543      	cmp	r3, r8
 80089dc:	dcf1      	bgt.n	80089c2 <_printf_float+0x3fa>
 80089de:	4653      	mov	r3, sl
 80089e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089e4:	e6e0      	b.n	80087a8 <_printf_float+0x1e0>
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	f104 091a 	add.w	r9, r4, #26
 80089ee:	e7f2      	b.n	80089d6 <_printf_float+0x40e>
 80089f0:	2301      	movs	r3, #1
 80089f2:	4642      	mov	r2, r8
 80089f4:	e7df      	b.n	80089b6 <_printf_float+0x3ee>
 80089f6:	2301      	movs	r3, #1
 80089f8:	464a      	mov	r2, r9
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	f43f ae3c 	beq.w	800867e <_printf_float+0xb6>
 8008a06:	f108 0801 	add.w	r8, r8, #1
 8008a0a:	68e3      	ldr	r3, [r4, #12]
 8008a0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a0e:	1a5b      	subs	r3, r3, r1
 8008a10:	4543      	cmp	r3, r8
 8008a12:	dcf0      	bgt.n	80089f6 <_printf_float+0x42e>
 8008a14:	e6fd      	b.n	8008812 <_printf_float+0x24a>
 8008a16:	f04f 0800 	mov.w	r8, #0
 8008a1a:	f104 0919 	add.w	r9, r4, #25
 8008a1e:	e7f4      	b.n	8008a0a <_printf_float+0x442>

08008a20 <_printf_common>:
 8008a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	4616      	mov	r6, r2
 8008a26:	4699      	mov	r9, r3
 8008a28:	688a      	ldr	r2, [r1, #8]
 8008a2a:	690b      	ldr	r3, [r1, #16]
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	bfb8      	it	lt
 8008a32:	4613      	movlt	r3, r2
 8008a34:	6033      	str	r3, [r6, #0]
 8008a36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a40:	b10a      	cbz	r2, 8008a46 <_printf_common+0x26>
 8008a42:	3301      	adds	r3, #1
 8008a44:	6033      	str	r3, [r6, #0]
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	0699      	lsls	r1, r3, #26
 8008a4a:	bf42      	ittt	mi
 8008a4c:	6833      	ldrmi	r3, [r6, #0]
 8008a4e:	3302      	addmi	r3, #2
 8008a50:	6033      	strmi	r3, [r6, #0]
 8008a52:	6825      	ldr	r5, [r4, #0]
 8008a54:	f015 0506 	ands.w	r5, r5, #6
 8008a58:	d106      	bne.n	8008a68 <_printf_common+0x48>
 8008a5a:	f104 0a19 	add.w	sl, r4, #25
 8008a5e:	68e3      	ldr	r3, [r4, #12]
 8008a60:	6832      	ldr	r2, [r6, #0]
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	dc28      	bgt.n	8008aba <_printf_common+0x9a>
 8008a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a6c:	1e13      	subs	r3, r2, #0
 8008a6e:	6822      	ldr	r2, [r4, #0]
 8008a70:	bf18      	it	ne
 8008a72:	2301      	movne	r3, #1
 8008a74:	0692      	lsls	r2, r2, #26
 8008a76:	d42d      	bmi.n	8008ad4 <_printf_common+0xb4>
 8008a78:	4649      	mov	r1, r9
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a80:	47c0      	blx	r8
 8008a82:	3001      	adds	r0, #1
 8008a84:	d020      	beq.n	8008ac8 <_printf_common+0xa8>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	68e5      	ldr	r5, [r4, #12]
 8008a8a:	f003 0306 	and.w	r3, r3, #6
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	bf18      	it	ne
 8008a92:	2500      	movne	r5, #0
 8008a94:	6832      	ldr	r2, [r6, #0]
 8008a96:	f04f 0600 	mov.w	r6, #0
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	bf08      	it	eq
 8008a9e:	1aad      	subeq	r5, r5, r2
 8008aa0:	6922      	ldr	r2, [r4, #16]
 8008aa2:	bf08      	it	eq
 8008aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	bfc4      	itt	gt
 8008aac:	1a9b      	subgt	r3, r3, r2
 8008aae:	18ed      	addgt	r5, r5, r3
 8008ab0:	341a      	adds	r4, #26
 8008ab2:	42b5      	cmp	r5, r6
 8008ab4:	d11a      	bne.n	8008aec <_printf_common+0xcc>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e008      	b.n	8008acc <_printf_common+0xac>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4652      	mov	r2, sl
 8008abe:	4649      	mov	r1, r9
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	47c0      	blx	r8
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d103      	bne.n	8008ad0 <_printf_common+0xb0>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	e7c4      	b.n	8008a5e <_printf_common+0x3e>
 8008ad4:	2030      	movs	r0, #48	; 0x30
 8008ad6:	18e1      	adds	r1, r4, r3
 8008ad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ae2:	4422      	add	r2, r4
 8008ae4:	3302      	adds	r3, #2
 8008ae6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aea:	e7c5      	b.n	8008a78 <_printf_common+0x58>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4622      	mov	r2, r4
 8008af0:	4649      	mov	r1, r9
 8008af2:	4638      	mov	r0, r7
 8008af4:	47c0      	blx	r8
 8008af6:	3001      	adds	r0, #1
 8008af8:	d0e6      	beq.n	8008ac8 <_printf_common+0xa8>
 8008afa:	3601      	adds	r6, #1
 8008afc:	e7d9      	b.n	8008ab2 <_printf_common+0x92>
	...

08008b00 <_printf_i>:
 8008b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b04:	7e0f      	ldrb	r7, [r1, #24]
 8008b06:	4691      	mov	r9, r2
 8008b08:	2f78      	cmp	r7, #120	; 0x78
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	469a      	mov	sl, r3
 8008b10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b16:	d807      	bhi.n	8008b28 <_printf_i+0x28>
 8008b18:	2f62      	cmp	r7, #98	; 0x62
 8008b1a:	d80a      	bhi.n	8008b32 <_printf_i+0x32>
 8008b1c:	2f00      	cmp	r7, #0
 8008b1e:	f000 80d9 	beq.w	8008cd4 <_printf_i+0x1d4>
 8008b22:	2f58      	cmp	r7, #88	; 0x58
 8008b24:	f000 80a4 	beq.w	8008c70 <_printf_i+0x170>
 8008b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b30:	e03a      	b.n	8008ba8 <_printf_i+0xa8>
 8008b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b36:	2b15      	cmp	r3, #21
 8008b38:	d8f6      	bhi.n	8008b28 <_printf_i+0x28>
 8008b3a:	a101      	add	r1, pc, #4	; (adr r1, 8008b40 <_printf_i+0x40>)
 8008b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b40:	08008b99 	.word	0x08008b99
 8008b44:	08008bad 	.word	0x08008bad
 8008b48:	08008b29 	.word	0x08008b29
 8008b4c:	08008b29 	.word	0x08008b29
 8008b50:	08008b29 	.word	0x08008b29
 8008b54:	08008b29 	.word	0x08008b29
 8008b58:	08008bad 	.word	0x08008bad
 8008b5c:	08008b29 	.word	0x08008b29
 8008b60:	08008b29 	.word	0x08008b29
 8008b64:	08008b29 	.word	0x08008b29
 8008b68:	08008b29 	.word	0x08008b29
 8008b6c:	08008cbb 	.word	0x08008cbb
 8008b70:	08008bdd 	.word	0x08008bdd
 8008b74:	08008c9d 	.word	0x08008c9d
 8008b78:	08008b29 	.word	0x08008b29
 8008b7c:	08008b29 	.word	0x08008b29
 8008b80:	08008cdd 	.word	0x08008cdd
 8008b84:	08008b29 	.word	0x08008b29
 8008b88:	08008bdd 	.word	0x08008bdd
 8008b8c:	08008b29 	.word	0x08008b29
 8008b90:	08008b29 	.word	0x08008b29
 8008b94:	08008ca5 	.word	0x08008ca5
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	1d1a      	adds	r2, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0a4      	b.n	8008cf6 <_printf_i+0x1f6>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	6829      	ldr	r1, [r5, #0]
 8008bb0:	0606      	lsls	r6, r0, #24
 8008bb2:	f101 0304 	add.w	r3, r1, #4
 8008bb6:	d50a      	bpl.n	8008bce <_printf_i+0xce>
 8008bb8:	680e      	ldr	r6, [r1, #0]
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	2e00      	cmp	r6, #0
 8008bbe:	da03      	bge.n	8008bc8 <_printf_i+0xc8>
 8008bc0:	232d      	movs	r3, #45	; 0x2d
 8008bc2:	4276      	negs	r6, r6
 8008bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc8:	230a      	movs	r3, #10
 8008bca:	485e      	ldr	r0, [pc, #376]	; (8008d44 <_printf_i+0x244>)
 8008bcc:	e019      	b.n	8008c02 <_printf_i+0x102>
 8008bce:	680e      	ldr	r6, [r1, #0]
 8008bd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	bf18      	it	ne
 8008bd8:	b236      	sxthne	r6, r6
 8008bda:	e7ef      	b.n	8008bbc <_printf_i+0xbc>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	6820      	ldr	r0, [r4, #0]
 8008be0:	1d19      	adds	r1, r3, #4
 8008be2:	6029      	str	r1, [r5, #0]
 8008be4:	0601      	lsls	r1, r0, #24
 8008be6:	d501      	bpl.n	8008bec <_printf_i+0xec>
 8008be8:	681e      	ldr	r6, [r3, #0]
 8008bea:	e002      	b.n	8008bf2 <_printf_i+0xf2>
 8008bec:	0646      	lsls	r6, r0, #25
 8008bee:	d5fb      	bpl.n	8008be8 <_printf_i+0xe8>
 8008bf0:	881e      	ldrh	r6, [r3, #0]
 8008bf2:	2f6f      	cmp	r7, #111	; 0x6f
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2308      	moveq	r3, #8
 8008bf8:	230a      	movne	r3, #10
 8008bfa:	4852      	ldr	r0, [pc, #328]	; (8008d44 <_printf_i+0x244>)
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c02:	6865      	ldr	r5, [r4, #4]
 8008c04:	2d00      	cmp	r5, #0
 8008c06:	bfa8      	it	ge
 8008c08:	6821      	ldrge	r1, [r4, #0]
 8008c0a:	60a5      	str	r5, [r4, #8]
 8008c0c:	bfa4      	itt	ge
 8008c0e:	f021 0104 	bicge.w	r1, r1, #4
 8008c12:	6021      	strge	r1, [r4, #0]
 8008c14:	b90e      	cbnz	r6, 8008c1a <_printf_i+0x11a>
 8008c16:	2d00      	cmp	r5, #0
 8008c18:	d04d      	beq.n	8008cb6 <_printf_i+0x1b6>
 8008c1a:	4615      	mov	r5, r2
 8008c1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c20:	fb03 6711 	mls	r7, r3, r1, r6
 8008c24:	5dc7      	ldrb	r7, [r0, r7]
 8008c26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c2a:	4637      	mov	r7, r6
 8008c2c:	42bb      	cmp	r3, r7
 8008c2e:	460e      	mov	r6, r1
 8008c30:	d9f4      	bls.n	8008c1c <_printf_i+0x11c>
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d10b      	bne.n	8008c4e <_printf_i+0x14e>
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	07de      	lsls	r6, r3, #31
 8008c3a:	d508      	bpl.n	8008c4e <_printf_i+0x14e>
 8008c3c:	6923      	ldr	r3, [r4, #16]
 8008c3e:	6861      	ldr	r1, [r4, #4]
 8008c40:	4299      	cmp	r1, r3
 8008c42:	bfde      	ittt	le
 8008c44:	2330      	movle	r3, #48	; 0x30
 8008c46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c4e:	1b52      	subs	r2, r2, r5
 8008c50:	6122      	str	r2, [r4, #16]
 8008c52:	464b      	mov	r3, r9
 8008c54:	4621      	mov	r1, r4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f8cd a000 	str.w	sl, [sp]
 8008c5c:	aa03      	add	r2, sp, #12
 8008c5e:	f7ff fedf 	bl	8008a20 <_printf_common>
 8008c62:	3001      	adds	r0, #1
 8008c64:	d14c      	bne.n	8008d00 <_printf_i+0x200>
 8008c66:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6a:	b004      	add	sp, #16
 8008c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c70:	4834      	ldr	r0, [pc, #208]	; (8008d44 <_printf_i+0x244>)
 8008c72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c76:	6829      	ldr	r1, [r5, #0]
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c7e:	6029      	str	r1, [r5, #0]
 8008c80:	061d      	lsls	r5, r3, #24
 8008c82:	d514      	bpl.n	8008cae <_printf_i+0x1ae>
 8008c84:	07df      	lsls	r7, r3, #31
 8008c86:	bf44      	itt	mi
 8008c88:	f043 0320 	orrmi.w	r3, r3, #32
 8008c8c:	6023      	strmi	r3, [r4, #0]
 8008c8e:	b91e      	cbnz	r6, 8008c98 <_printf_i+0x198>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	f023 0320 	bic.w	r3, r3, #32
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	2310      	movs	r3, #16
 8008c9a:	e7af      	b.n	8008bfc <_printf_i+0xfc>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	f043 0320 	orr.w	r3, r3, #32
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	2378      	movs	r3, #120	; 0x78
 8008ca6:	4828      	ldr	r0, [pc, #160]	; (8008d48 <_printf_i+0x248>)
 8008ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cac:	e7e3      	b.n	8008c76 <_printf_i+0x176>
 8008cae:	0659      	lsls	r1, r3, #25
 8008cb0:	bf48      	it	mi
 8008cb2:	b2b6      	uxthmi	r6, r6
 8008cb4:	e7e6      	b.n	8008c84 <_printf_i+0x184>
 8008cb6:	4615      	mov	r5, r2
 8008cb8:	e7bb      	b.n	8008c32 <_printf_i+0x132>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	6826      	ldr	r6, [r4, #0]
 8008cbe:	1d18      	adds	r0, r3, #4
 8008cc0:	6961      	ldr	r1, [r4, #20]
 8008cc2:	6028      	str	r0, [r5, #0]
 8008cc4:	0635      	lsls	r5, r6, #24
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	d501      	bpl.n	8008cce <_printf_i+0x1ce>
 8008cca:	6019      	str	r1, [r3, #0]
 8008ccc:	e002      	b.n	8008cd4 <_printf_i+0x1d4>
 8008cce:	0670      	lsls	r0, r6, #25
 8008cd0:	d5fb      	bpl.n	8008cca <_printf_i+0x1ca>
 8008cd2:	8019      	strh	r1, [r3, #0]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4615      	mov	r5, r2
 8008cd8:	6123      	str	r3, [r4, #16]
 8008cda:	e7ba      	b.n	8008c52 <_printf_i+0x152>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	2100      	movs	r1, #0
 8008ce0:	1d1a      	adds	r2, r3, #4
 8008ce2:	602a      	str	r2, [r5, #0]
 8008ce4:	681d      	ldr	r5, [r3, #0]
 8008ce6:	6862      	ldr	r2, [r4, #4]
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f000 ff73 	bl	8009bd4 <memchr>
 8008cee:	b108      	cbz	r0, 8008cf4 <_printf_i+0x1f4>
 8008cf0:	1b40      	subs	r0, r0, r5
 8008cf2:	6060      	str	r0, [r4, #4]
 8008cf4:	6863      	ldr	r3, [r4, #4]
 8008cf6:	6123      	str	r3, [r4, #16]
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cfe:	e7a8      	b.n	8008c52 <_printf_i+0x152>
 8008d00:	462a      	mov	r2, r5
 8008d02:	4649      	mov	r1, r9
 8008d04:	4640      	mov	r0, r8
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	47d0      	blx	sl
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d0ab      	beq.n	8008c66 <_printf_i+0x166>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	079b      	lsls	r3, r3, #30
 8008d12:	d413      	bmi.n	8008d3c <_printf_i+0x23c>
 8008d14:	68e0      	ldr	r0, [r4, #12]
 8008d16:	9b03      	ldr	r3, [sp, #12]
 8008d18:	4298      	cmp	r0, r3
 8008d1a:	bfb8      	it	lt
 8008d1c:	4618      	movlt	r0, r3
 8008d1e:	e7a4      	b.n	8008c6a <_printf_i+0x16a>
 8008d20:	2301      	movs	r3, #1
 8008d22:	4632      	mov	r2, r6
 8008d24:	4649      	mov	r1, r9
 8008d26:	4640      	mov	r0, r8
 8008d28:	47d0      	blx	sl
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	d09b      	beq.n	8008c66 <_printf_i+0x166>
 8008d2e:	3501      	adds	r5, #1
 8008d30:	68e3      	ldr	r3, [r4, #12]
 8008d32:	9903      	ldr	r1, [sp, #12]
 8008d34:	1a5b      	subs	r3, r3, r1
 8008d36:	42ab      	cmp	r3, r5
 8008d38:	dcf2      	bgt.n	8008d20 <_printf_i+0x220>
 8008d3a:	e7eb      	b.n	8008d14 <_printf_i+0x214>
 8008d3c:	2500      	movs	r5, #0
 8008d3e:	f104 0619 	add.w	r6, r4, #25
 8008d42:	e7f5      	b.n	8008d30 <_printf_i+0x230>
 8008d44:	0800b862 	.word	0x0800b862
 8008d48:	0800b873 	.word	0x0800b873

08008d4c <siprintf>:
 8008d4c:	b40e      	push	{r1, r2, r3}
 8008d4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d52:	b500      	push	{lr}
 8008d54:	b09c      	sub	sp, #112	; 0x70
 8008d56:	ab1d      	add	r3, sp, #116	; 0x74
 8008d58:	9002      	str	r0, [sp, #8]
 8008d5a:	9006      	str	r0, [sp, #24]
 8008d5c:	9107      	str	r1, [sp, #28]
 8008d5e:	9104      	str	r1, [sp, #16]
 8008d60:	4808      	ldr	r0, [pc, #32]	; (8008d84 <siprintf+0x38>)
 8008d62:	4909      	ldr	r1, [pc, #36]	; (8008d88 <siprintf+0x3c>)
 8008d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d68:	9105      	str	r1, [sp, #20]
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	a902      	add	r1, sp, #8
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	f001 fc0c 	bl	800a58c <_svfiprintf_r>
 8008d74:	2200      	movs	r2, #0
 8008d76:	9b02      	ldr	r3, [sp, #8]
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	b01c      	add	sp, #112	; 0x70
 8008d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d80:	b003      	add	sp, #12
 8008d82:	4770      	bx	lr
 8008d84:	20000014 	.word	0x20000014
 8008d88:	ffff0208 	.word	0xffff0208

08008d8c <strstr>:
 8008d8c:	780a      	ldrb	r2, [r1, #0]
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	b96a      	cbnz	r2, 8008dae <strstr+0x22>
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d109      	bne.n	8008dac <strstr+0x20>
 8008d98:	460c      	mov	r4, r1
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0f6      	beq.n	8008d92 <strstr+0x6>
 8008da4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008da8:	429e      	cmp	r6, r3
 8008daa:	d0f7      	beq.n	8008d9c <strstr+0x10>
 8008dac:	3001      	adds	r0, #1
 8008dae:	7803      	ldrb	r3, [r0, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1ef      	bne.n	8008d94 <strstr+0x8>
 8008db4:	4618      	mov	r0, r3
 8008db6:	e7ec      	b.n	8008d92 <strstr+0x6>

08008db8 <_strtol_l.constprop.0>:
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	d001      	beq.n	8008dc6 <_strtol_l.constprop.0+0xe>
 8008dc2:	2b24      	cmp	r3, #36	; 0x24
 8008dc4:	d906      	bls.n	8008dd4 <_strtol_l.constprop.0+0x1c>
 8008dc6:	f7ff fb21 	bl	800840c <__errno>
 8008dca:	2316      	movs	r3, #22
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	2000      	movs	r0, #0
 8008dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd4:	460d      	mov	r5, r1
 8008dd6:	4f35      	ldr	r7, [pc, #212]	; (8008eac <_strtol_l.constprop.0+0xf4>)
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dde:	5de6      	ldrb	r6, [r4, r7]
 8008de0:	f016 0608 	ands.w	r6, r6, #8
 8008de4:	d1f8      	bne.n	8008dd8 <_strtol_l.constprop.0+0x20>
 8008de6:	2c2d      	cmp	r4, #45	; 0x2d
 8008de8:	d12f      	bne.n	8008e4a <_strtol_l.constprop.0+0x92>
 8008dea:	2601      	movs	r6, #1
 8008dec:	782c      	ldrb	r4, [r5, #0]
 8008dee:	1c85      	adds	r5, r0, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d057      	beq.n	8008ea4 <_strtol_l.constprop.0+0xec>
 8008df4:	2b10      	cmp	r3, #16
 8008df6:	d109      	bne.n	8008e0c <_strtol_l.constprop.0+0x54>
 8008df8:	2c30      	cmp	r4, #48	; 0x30
 8008dfa:	d107      	bne.n	8008e0c <_strtol_l.constprop.0+0x54>
 8008dfc:	7828      	ldrb	r0, [r5, #0]
 8008dfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008e02:	2858      	cmp	r0, #88	; 0x58
 8008e04:	d149      	bne.n	8008e9a <_strtol_l.constprop.0+0xe2>
 8008e06:	2310      	movs	r3, #16
 8008e08:	786c      	ldrb	r4, [r5, #1]
 8008e0a:	3502      	adds	r5, #2
 8008e0c:	2700      	movs	r7, #0
 8008e0e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008e12:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008e16:	fbbe f9f3 	udiv	r9, lr, r3
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	fb03 ea19 	mls	sl, r3, r9, lr
 8008e20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e24:	f1bc 0f09 	cmp.w	ip, #9
 8008e28:	d814      	bhi.n	8008e54 <_strtol_l.constprop.0+0x9c>
 8008e2a:	4664      	mov	r4, ip
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	dd22      	ble.n	8008e76 <_strtol_l.constprop.0+0xbe>
 8008e30:	2f00      	cmp	r7, #0
 8008e32:	db1d      	blt.n	8008e70 <_strtol_l.constprop.0+0xb8>
 8008e34:	4581      	cmp	r9, r0
 8008e36:	d31b      	bcc.n	8008e70 <_strtol_l.constprop.0+0xb8>
 8008e38:	d101      	bne.n	8008e3e <_strtol_l.constprop.0+0x86>
 8008e3a:	45a2      	cmp	sl, r4
 8008e3c:	db18      	blt.n	8008e70 <_strtol_l.constprop.0+0xb8>
 8008e3e:	2701      	movs	r7, #1
 8008e40:	fb00 4003 	mla	r0, r0, r3, r4
 8008e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e48:	e7ea      	b.n	8008e20 <_strtol_l.constprop.0+0x68>
 8008e4a:	2c2b      	cmp	r4, #43	; 0x2b
 8008e4c:	bf04      	itt	eq
 8008e4e:	782c      	ldrbeq	r4, [r5, #0]
 8008e50:	1c85      	addeq	r5, r0, #2
 8008e52:	e7cd      	b.n	8008df0 <_strtol_l.constprop.0+0x38>
 8008e54:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e58:	f1bc 0f19 	cmp.w	ip, #25
 8008e5c:	d801      	bhi.n	8008e62 <_strtol_l.constprop.0+0xaa>
 8008e5e:	3c37      	subs	r4, #55	; 0x37
 8008e60:	e7e4      	b.n	8008e2c <_strtol_l.constprop.0+0x74>
 8008e62:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e66:	f1bc 0f19 	cmp.w	ip, #25
 8008e6a:	d804      	bhi.n	8008e76 <_strtol_l.constprop.0+0xbe>
 8008e6c:	3c57      	subs	r4, #87	; 0x57
 8008e6e:	e7dd      	b.n	8008e2c <_strtol_l.constprop.0+0x74>
 8008e70:	f04f 37ff 	mov.w	r7, #4294967295
 8008e74:	e7e6      	b.n	8008e44 <_strtol_l.constprop.0+0x8c>
 8008e76:	2f00      	cmp	r7, #0
 8008e78:	da07      	bge.n	8008e8a <_strtol_l.constprop.0+0xd2>
 8008e7a:	2322      	movs	r3, #34	; 0x22
 8008e7c:	4670      	mov	r0, lr
 8008e7e:	f8c8 3000 	str.w	r3, [r8]
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d0a4      	beq.n	8008dd0 <_strtol_l.constprop.0+0x18>
 8008e86:	1e69      	subs	r1, r5, #1
 8008e88:	e005      	b.n	8008e96 <_strtol_l.constprop.0+0xde>
 8008e8a:	b106      	cbz	r6, 8008e8e <_strtol_l.constprop.0+0xd6>
 8008e8c:	4240      	negs	r0, r0
 8008e8e:	2a00      	cmp	r2, #0
 8008e90:	d09e      	beq.n	8008dd0 <_strtol_l.constprop.0+0x18>
 8008e92:	2f00      	cmp	r7, #0
 8008e94:	d1f7      	bne.n	8008e86 <_strtol_l.constprop.0+0xce>
 8008e96:	6011      	str	r1, [r2, #0]
 8008e98:	e79a      	b.n	8008dd0 <_strtol_l.constprop.0+0x18>
 8008e9a:	2430      	movs	r4, #48	; 0x30
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1b5      	bne.n	8008e0c <_strtol_l.constprop.0+0x54>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	e7b3      	b.n	8008e0c <_strtol_l.constprop.0+0x54>
 8008ea4:	2c30      	cmp	r4, #48	; 0x30
 8008ea6:	d0a9      	beq.n	8008dfc <_strtol_l.constprop.0+0x44>
 8008ea8:	230a      	movs	r3, #10
 8008eaa:	e7af      	b.n	8008e0c <_strtol_l.constprop.0+0x54>
 8008eac:	0800b885 	.word	0x0800b885

08008eb0 <strtol>:
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	460a      	mov	r2, r1
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	4802      	ldr	r0, [pc, #8]	; (8008ec0 <strtol+0x10>)
 8008eb8:	6800      	ldr	r0, [r0, #0]
 8008eba:	f7ff bf7d 	b.w	8008db8 <_strtol_l.constprop.0>
 8008ebe:	bf00      	nop
 8008ec0:	20000014 	.word	0x20000014

08008ec4 <quorem>:
 8008ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	6903      	ldr	r3, [r0, #16]
 8008eca:	690c      	ldr	r4, [r1, #16]
 8008ecc:	4607      	mov	r7, r0
 8008ece:	42a3      	cmp	r3, r4
 8008ed0:	f2c0 8082 	blt.w	8008fd8 <quorem+0x114>
 8008ed4:	3c01      	subs	r4, #1
 8008ed6:	f100 0514 	add.w	r5, r0, #20
 8008eda:	f101 0814 	add.w	r8, r1, #20
 8008ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eec:	3301      	adds	r3, #1
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008efc:	d331      	bcc.n	8008f62 <quorem+0x9e>
 8008efe:	f04f 0e00 	mov.w	lr, #0
 8008f02:	4640      	mov	r0, r8
 8008f04:	46ac      	mov	ip, r5
 8008f06:	46f2      	mov	sl, lr
 8008f08:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f0c:	b293      	uxth	r3, r2
 8008f0e:	fb06 e303 	mla	r3, r6, r3, lr
 8008f12:	0c12      	lsrs	r2, r2, #16
 8008f14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f1e:	ebaa 0303 	sub.w	r3, sl, r3
 8008f22:	f8dc a000 	ldr.w	sl, [ip]
 8008f26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f2a:	fa1f fa8a 	uxth.w	sl, sl
 8008f2e:	4453      	add	r3, sl
 8008f30:	f8dc a000 	ldr.w	sl, [ip]
 8008f34:	b292      	uxth	r2, r2
 8008f36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f44:	4581      	cmp	r9, r0
 8008f46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f4e:	d2db      	bcs.n	8008f08 <quorem+0x44>
 8008f50:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f54:	b92b      	cbnz	r3, 8008f62 <quorem+0x9e>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	429d      	cmp	r5, r3
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	d32f      	bcc.n	8008fc0 <quorem+0xfc>
 8008f60:	613c      	str	r4, [r7, #16]
 8008f62:	4638      	mov	r0, r7
 8008f64:	f001 f8c2 	bl	800a0ec <__mcmp>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	db25      	blt.n	8008fb8 <quorem+0xf4>
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f04f 0c00 	mov.w	ip, #0
 8008f72:	3601      	adds	r6, #1
 8008f74:	f858 1b04 	ldr.w	r1, [r8], #4
 8008f78:	f8d0 e000 	ldr.w	lr, [r0]
 8008f7c:	b28b      	uxth	r3, r1
 8008f7e:	ebac 0303 	sub.w	r3, ip, r3
 8008f82:	fa1f f28e 	uxth.w	r2, lr
 8008f86:	4413      	add	r3, r2
 8008f88:	0c0a      	lsrs	r2, r1, #16
 8008f8a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f98:	45c1      	cmp	r9, r8
 8008f9a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f9e:	f840 3b04 	str.w	r3, [r0], #4
 8008fa2:	d2e7      	bcs.n	8008f74 <quorem+0xb0>
 8008fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fac:	b922      	cbnz	r2, 8008fb8 <quorem+0xf4>
 8008fae:	3b04      	subs	r3, #4
 8008fb0:	429d      	cmp	r5, r3
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	d30a      	bcc.n	8008fcc <quorem+0x108>
 8008fb6:	613c      	str	r4, [r7, #16]
 8008fb8:	4630      	mov	r0, r6
 8008fba:	b003      	add	sp, #12
 8008fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc0:	6812      	ldr	r2, [r2, #0]
 8008fc2:	3b04      	subs	r3, #4
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	d1cb      	bne.n	8008f60 <quorem+0x9c>
 8008fc8:	3c01      	subs	r4, #1
 8008fca:	e7c6      	b.n	8008f5a <quorem+0x96>
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	3b04      	subs	r3, #4
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	d1f0      	bne.n	8008fb6 <quorem+0xf2>
 8008fd4:	3c01      	subs	r4, #1
 8008fd6:	e7eb      	b.n	8008fb0 <quorem+0xec>
 8008fd8:	2000      	movs	r0, #0
 8008fda:	e7ee      	b.n	8008fba <quorem+0xf6>
 8008fdc:	0000      	movs	r0, r0
	...

08008fe0 <_dtoa_r>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	461f      	mov	r7, r3
 8008fe8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008fea:	b099      	sub	sp, #100	; 0x64
 8008fec:	4605      	mov	r5, r0
 8008fee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ff2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008ff6:	b974      	cbnz	r4, 8009016 <_dtoa_r+0x36>
 8008ff8:	2010      	movs	r0, #16
 8008ffa:	f000 fde3 	bl	8009bc4 <malloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6268      	str	r0, [r5, #36]	; 0x24
 8009002:	b920      	cbnz	r0, 800900e <_dtoa_r+0x2e>
 8009004:	21ea      	movs	r1, #234	; 0xea
 8009006:	4ba8      	ldr	r3, [pc, #672]	; (80092a8 <_dtoa_r+0x2c8>)
 8009008:	48a8      	ldr	r0, [pc, #672]	; (80092ac <_dtoa_r+0x2cc>)
 800900a:	f001 fbcf 	bl	800a7ac <__assert_func>
 800900e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009012:	6004      	str	r4, [r0, #0]
 8009014:	60c4      	str	r4, [r0, #12]
 8009016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009018:	6819      	ldr	r1, [r3, #0]
 800901a:	b151      	cbz	r1, 8009032 <_dtoa_r+0x52>
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	2301      	movs	r3, #1
 8009020:	4093      	lsls	r3, r2
 8009022:	604a      	str	r2, [r1, #4]
 8009024:	608b      	str	r3, [r1, #8]
 8009026:	4628      	mov	r0, r5
 8009028:	f000 fe22 	bl	8009c70 <_Bfree>
 800902c:	2200      	movs	r2, #0
 800902e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	1e3b      	subs	r3, r7, #0
 8009034:	bfaf      	iteee	ge
 8009036:	2300      	movge	r3, #0
 8009038:	2201      	movlt	r2, #1
 800903a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800903e:	9305      	strlt	r3, [sp, #20]
 8009040:	bfa8      	it	ge
 8009042:	f8c8 3000 	strge.w	r3, [r8]
 8009046:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800904a:	4b99      	ldr	r3, [pc, #612]	; (80092b0 <_dtoa_r+0x2d0>)
 800904c:	bfb8      	it	lt
 800904e:	f8c8 2000 	strlt.w	r2, [r8]
 8009052:	ea33 0309 	bics.w	r3, r3, r9
 8009056:	d119      	bne.n	800908c <_dtoa_r+0xac>
 8009058:	f242 730f 	movw	r3, #9999	; 0x270f
 800905c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009064:	4333      	orrs	r3, r6
 8009066:	f000 857f 	beq.w	8009b68 <_dtoa_r+0xb88>
 800906a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800906c:	b953      	cbnz	r3, 8009084 <_dtoa_r+0xa4>
 800906e:	4b91      	ldr	r3, [pc, #580]	; (80092b4 <_dtoa_r+0x2d4>)
 8009070:	e022      	b.n	80090b8 <_dtoa_r+0xd8>
 8009072:	4b91      	ldr	r3, [pc, #580]	; (80092b8 <_dtoa_r+0x2d8>)
 8009074:	9303      	str	r3, [sp, #12]
 8009076:	3308      	adds	r3, #8
 8009078:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	9803      	ldr	r0, [sp, #12]
 800907e:	b019      	add	sp, #100	; 0x64
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	4b8b      	ldr	r3, [pc, #556]	; (80092b4 <_dtoa_r+0x2d4>)
 8009086:	9303      	str	r3, [sp, #12]
 8009088:	3303      	adds	r3, #3
 800908a:	e7f5      	b.n	8009078 <_dtoa_r+0x98>
 800908c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009090:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009098:	2200      	movs	r2, #0
 800909a:	2300      	movs	r3, #0
 800909c:	f7f7 fcf0 	bl	8000a80 <__aeabi_dcmpeq>
 80090a0:	4680      	mov	r8, r0
 80090a2:	b158      	cbz	r0, 80090bc <_dtoa_r+0xdc>
 80090a4:	2301      	movs	r3, #1
 80090a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8558 	beq.w	8009b62 <_dtoa_r+0xb82>
 80090b2:	4882      	ldr	r0, [pc, #520]	; (80092bc <_dtoa_r+0x2dc>)
 80090b4:	6018      	str	r0, [r3, #0]
 80090b6:	1e43      	subs	r3, r0, #1
 80090b8:	9303      	str	r3, [sp, #12]
 80090ba:	e7df      	b.n	800907c <_dtoa_r+0x9c>
 80090bc:	ab16      	add	r3, sp, #88	; 0x58
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	ab17      	add	r3, sp, #92	; 0x5c
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	4628      	mov	r0, r5
 80090c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80090ca:	f001 f8b7 	bl	800a23c <__d2b>
 80090ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80090d2:	4683      	mov	fp, r0
 80090d4:	2c00      	cmp	r4, #0
 80090d6:	d07f      	beq.n	80091d8 <_dtoa_r+0x1f8>
 80090d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80090e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80090ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80090ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80090f2:	2200      	movs	r2, #0
 80090f4:	4b72      	ldr	r3, [pc, #456]	; (80092c0 <_dtoa_r+0x2e0>)
 80090f6:	f7f7 f8a3 	bl	8000240 <__aeabi_dsub>
 80090fa:	a365      	add	r3, pc, #404	; (adr r3, 8009290 <_dtoa_r+0x2b0>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 fa56 	bl	80005b0 <__aeabi_dmul>
 8009104:	a364      	add	r3, pc, #400	; (adr r3, 8009298 <_dtoa_r+0x2b8>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f89b 	bl	8000244 <__adddf3>
 800910e:	4606      	mov	r6, r0
 8009110:	4620      	mov	r0, r4
 8009112:	460f      	mov	r7, r1
 8009114:	f7f7 f9e2 	bl	80004dc <__aeabi_i2d>
 8009118:	a361      	add	r3, pc, #388	; (adr r3, 80092a0 <_dtoa_r+0x2c0>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fa47 	bl	80005b0 <__aeabi_dmul>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4630      	mov	r0, r6
 8009128:	4639      	mov	r1, r7
 800912a:	f7f7 f88b 	bl	8000244 <__adddf3>
 800912e:	4606      	mov	r6, r0
 8009130:	460f      	mov	r7, r1
 8009132:	f7f7 fced 	bl	8000b10 <__aeabi_d2iz>
 8009136:	2200      	movs	r2, #0
 8009138:	4682      	mov	sl, r0
 800913a:	2300      	movs	r3, #0
 800913c:	4630      	mov	r0, r6
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fca8 	bl	8000a94 <__aeabi_dcmplt>
 8009144:	b148      	cbz	r0, 800915a <_dtoa_r+0x17a>
 8009146:	4650      	mov	r0, sl
 8009148:	f7f7 f9c8 	bl	80004dc <__aeabi_i2d>
 800914c:	4632      	mov	r2, r6
 800914e:	463b      	mov	r3, r7
 8009150:	f7f7 fc96 	bl	8000a80 <__aeabi_dcmpeq>
 8009154:	b908      	cbnz	r0, 800915a <_dtoa_r+0x17a>
 8009156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800915a:	f1ba 0f16 	cmp.w	sl, #22
 800915e:	d858      	bhi.n	8009212 <_dtoa_r+0x232>
 8009160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009164:	4b57      	ldr	r3, [pc, #348]	; (80092c4 <_dtoa_r+0x2e4>)
 8009166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 fc91 	bl	8000a94 <__aeabi_dcmplt>
 8009172:	2800      	cmp	r0, #0
 8009174:	d04f      	beq.n	8009216 <_dtoa_r+0x236>
 8009176:	2300      	movs	r3, #0
 8009178:	f10a 3aff 	add.w	sl, sl, #4294967295
 800917c:	930f      	str	r3, [sp, #60]	; 0x3c
 800917e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009180:	1b1c      	subs	r4, r3, r4
 8009182:	1e63      	subs	r3, r4, #1
 8009184:	9309      	str	r3, [sp, #36]	; 0x24
 8009186:	bf49      	itett	mi
 8009188:	f1c4 0301 	rsbmi	r3, r4, #1
 800918c:	2300      	movpl	r3, #0
 800918e:	9306      	strmi	r3, [sp, #24]
 8009190:	2300      	movmi	r3, #0
 8009192:	bf54      	ite	pl
 8009194:	9306      	strpl	r3, [sp, #24]
 8009196:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009198:	f1ba 0f00 	cmp.w	sl, #0
 800919c:	db3d      	blt.n	800921a <_dtoa_r+0x23a>
 800919e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80091a4:	4453      	add	r3, sl
 80091a6:	9309      	str	r3, [sp, #36]	; 0x24
 80091a8:	2300      	movs	r3, #0
 80091aa:	930a      	str	r3, [sp, #40]	; 0x28
 80091ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ae:	2b09      	cmp	r3, #9
 80091b0:	f200 808c 	bhi.w	80092cc <_dtoa_r+0x2ec>
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	bfc4      	itt	gt
 80091b8:	3b04      	subgt	r3, #4
 80091ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80091bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091be:	bfc8      	it	gt
 80091c0:	2400      	movgt	r4, #0
 80091c2:	f1a3 0302 	sub.w	r3, r3, #2
 80091c6:	bfd8      	it	le
 80091c8:	2401      	movle	r4, #1
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	f200 808a 	bhi.w	80092e4 <_dtoa_r+0x304>
 80091d0:	e8df f003 	tbb	[pc, r3]
 80091d4:	5b4d4f2d 	.word	0x5b4d4f2d
 80091d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80091dc:	441c      	add	r4, r3
 80091de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	bfc3      	ittte	gt
 80091e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091ea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80091ee:	fa09 f303 	lslgt.w	r3, r9, r3
 80091f2:	f1c3 0320 	rsble	r3, r3, #32
 80091f6:	bfc6      	itte	gt
 80091f8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091fc:	4318      	orrgt	r0, r3
 80091fe:	fa06 f003 	lslle.w	r0, r6, r3
 8009202:	f7f7 f95b 	bl	80004bc <__aeabi_ui2d>
 8009206:	2301      	movs	r3, #1
 8009208:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800920c:	3c01      	subs	r4, #1
 800920e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009210:	e76f      	b.n	80090f2 <_dtoa_r+0x112>
 8009212:	2301      	movs	r3, #1
 8009214:	e7b2      	b.n	800917c <_dtoa_r+0x19c>
 8009216:	900f      	str	r0, [sp, #60]	; 0x3c
 8009218:	e7b1      	b.n	800917e <_dtoa_r+0x19e>
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	eba3 030a 	sub.w	r3, r3, sl
 8009220:	9306      	str	r3, [sp, #24]
 8009222:	f1ca 0300 	rsb	r3, sl, #0
 8009226:	930a      	str	r3, [sp, #40]	; 0x28
 8009228:	2300      	movs	r3, #0
 800922a:	930e      	str	r3, [sp, #56]	; 0x38
 800922c:	e7be      	b.n	80091ac <_dtoa_r+0x1cc>
 800922e:	2300      	movs	r3, #0
 8009230:	930b      	str	r3, [sp, #44]	; 0x2c
 8009232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009234:	2b00      	cmp	r3, #0
 8009236:	dc58      	bgt.n	80092ea <_dtoa_r+0x30a>
 8009238:	f04f 0901 	mov.w	r9, #1
 800923c:	464b      	mov	r3, r9
 800923e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009242:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009246:	2200      	movs	r2, #0
 8009248:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800924a:	6042      	str	r2, [r0, #4]
 800924c:	2204      	movs	r2, #4
 800924e:	f102 0614 	add.w	r6, r2, #20
 8009252:	429e      	cmp	r6, r3
 8009254:	6841      	ldr	r1, [r0, #4]
 8009256:	d94e      	bls.n	80092f6 <_dtoa_r+0x316>
 8009258:	4628      	mov	r0, r5
 800925a:	f000 fcc9 	bl	8009bf0 <_Balloc>
 800925e:	9003      	str	r0, [sp, #12]
 8009260:	2800      	cmp	r0, #0
 8009262:	d14c      	bne.n	80092fe <_dtoa_r+0x31e>
 8009264:	4602      	mov	r2, r0
 8009266:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800926a:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <_dtoa_r+0x2e8>)
 800926c:	e6cc      	b.n	8009008 <_dtoa_r+0x28>
 800926e:	2301      	movs	r3, #1
 8009270:	e7de      	b.n	8009230 <_dtoa_r+0x250>
 8009272:	2300      	movs	r3, #0
 8009274:	930b      	str	r3, [sp, #44]	; 0x2c
 8009276:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009278:	eb0a 0903 	add.w	r9, sl, r3
 800927c:	f109 0301 	add.w	r3, r9, #1
 8009280:	2b01      	cmp	r3, #1
 8009282:	9308      	str	r3, [sp, #32]
 8009284:	bfb8      	it	lt
 8009286:	2301      	movlt	r3, #1
 8009288:	e7dd      	b.n	8009246 <_dtoa_r+0x266>
 800928a:	2301      	movs	r3, #1
 800928c:	e7f2      	b.n	8009274 <_dtoa_r+0x294>
 800928e:	bf00      	nop
 8009290:	636f4361 	.word	0x636f4361
 8009294:	3fd287a7 	.word	0x3fd287a7
 8009298:	8b60c8b3 	.word	0x8b60c8b3
 800929c:	3fc68a28 	.word	0x3fc68a28
 80092a0:	509f79fb 	.word	0x509f79fb
 80092a4:	3fd34413 	.word	0x3fd34413
 80092a8:	0800b992 	.word	0x0800b992
 80092ac:	0800b9a9 	.word	0x0800b9a9
 80092b0:	7ff00000 	.word	0x7ff00000
 80092b4:	0800b98e 	.word	0x0800b98e
 80092b8:	0800b985 	.word	0x0800b985
 80092bc:	0800b861 	.word	0x0800b861
 80092c0:	3ff80000 	.word	0x3ff80000
 80092c4:	0800baa0 	.word	0x0800baa0
 80092c8:	0800ba04 	.word	0x0800ba04
 80092cc:	2401      	movs	r4, #1
 80092ce:	2300      	movs	r3, #0
 80092d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80092d2:	9322      	str	r3, [sp, #136]	; 0x88
 80092d4:	f04f 39ff 	mov.w	r9, #4294967295
 80092d8:	2200      	movs	r2, #0
 80092da:	2312      	movs	r3, #18
 80092dc:	f8cd 9020 	str.w	r9, [sp, #32]
 80092e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80092e2:	e7b0      	b.n	8009246 <_dtoa_r+0x266>
 80092e4:	2301      	movs	r3, #1
 80092e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092e8:	e7f4      	b.n	80092d4 <_dtoa_r+0x2f4>
 80092ea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80092ee:	464b      	mov	r3, r9
 80092f0:	f8cd 9020 	str.w	r9, [sp, #32]
 80092f4:	e7a7      	b.n	8009246 <_dtoa_r+0x266>
 80092f6:	3101      	adds	r1, #1
 80092f8:	6041      	str	r1, [r0, #4]
 80092fa:	0052      	lsls	r2, r2, #1
 80092fc:	e7a7      	b.n	800924e <_dtoa_r+0x26e>
 80092fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009300:	9a03      	ldr	r2, [sp, #12]
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	2b0e      	cmp	r3, #14
 8009308:	f200 80a8 	bhi.w	800945c <_dtoa_r+0x47c>
 800930c:	2c00      	cmp	r4, #0
 800930e:	f000 80a5 	beq.w	800945c <_dtoa_r+0x47c>
 8009312:	f1ba 0f00 	cmp.w	sl, #0
 8009316:	dd34      	ble.n	8009382 <_dtoa_r+0x3a2>
 8009318:	4a9a      	ldr	r2, [pc, #616]	; (8009584 <_dtoa_r+0x5a4>)
 800931a:	f00a 030f 	and.w	r3, sl, #15
 800931e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009322:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009326:	e9d3 3400 	ldrd	r3, r4, [r3]
 800932a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800932e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009332:	d016      	beq.n	8009362 <_dtoa_r+0x382>
 8009334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009338:	4b93      	ldr	r3, [pc, #588]	; (8009588 <_dtoa_r+0x5a8>)
 800933a:	2703      	movs	r7, #3
 800933c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009340:	f7f7 fa60 	bl	8000804 <__aeabi_ddiv>
 8009344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009348:	f004 040f 	and.w	r4, r4, #15
 800934c:	4e8e      	ldr	r6, [pc, #568]	; (8009588 <_dtoa_r+0x5a8>)
 800934e:	b954      	cbnz	r4, 8009366 <_dtoa_r+0x386>
 8009350:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009358:	f7f7 fa54 	bl	8000804 <__aeabi_ddiv>
 800935c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009360:	e029      	b.n	80093b6 <_dtoa_r+0x3d6>
 8009362:	2702      	movs	r7, #2
 8009364:	e7f2      	b.n	800934c <_dtoa_r+0x36c>
 8009366:	07e1      	lsls	r1, r4, #31
 8009368:	d508      	bpl.n	800937c <_dtoa_r+0x39c>
 800936a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800936e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009372:	f7f7 f91d 	bl	80005b0 <__aeabi_dmul>
 8009376:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800937a:	3701      	adds	r7, #1
 800937c:	1064      	asrs	r4, r4, #1
 800937e:	3608      	adds	r6, #8
 8009380:	e7e5      	b.n	800934e <_dtoa_r+0x36e>
 8009382:	f000 80a5 	beq.w	80094d0 <_dtoa_r+0x4f0>
 8009386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800938a:	f1ca 0400 	rsb	r4, sl, #0
 800938e:	4b7d      	ldr	r3, [pc, #500]	; (8009584 <_dtoa_r+0x5a4>)
 8009390:	f004 020f 	and.w	r2, r4, #15
 8009394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f7f7 f908 	bl	80005b0 <__aeabi_dmul>
 80093a0:	2702      	movs	r7, #2
 80093a2:	2300      	movs	r3, #0
 80093a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093a8:	4e77      	ldr	r6, [pc, #476]	; (8009588 <_dtoa_r+0x5a8>)
 80093aa:	1124      	asrs	r4, r4, #4
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	f040 8084 	bne.w	80094ba <_dtoa_r+0x4da>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d2      	bne.n	800935c <_dtoa_r+0x37c>
 80093b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 808b 	beq.w	80094d4 <_dtoa_r+0x4f4>
 80093be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80093c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80093c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093ca:	2200      	movs	r2, #0
 80093cc:	4b6f      	ldr	r3, [pc, #444]	; (800958c <_dtoa_r+0x5ac>)
 80093ce:	f7f7 fb61 	bl	8000a94 <__aeabi_dcmplt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d07e      	beq.n	80094d4 <_dtoa_r+0x4f4>
 80093d6:	9b08      	ldr	r3, [sp, #32]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d07b      	beq.n	80094d4 <_dtoa_r+0x4f4>
 80093dc:	f1b9 0f00 	cmp.w	r9, #0
 80093e0:	dd38      	ble.n	8009454 <_dtoa_r+0x474>
 80093e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093e6:	2200      	movs	r2, #0
 80093e8:	4b69      	ldr	r3, [pc, #420]	; (8009590 <_dtoa_r+0x5b0>)
 80093ea:	f7f7 f8e1 	bl	80005b0 <__aeabi_dmul>
 80093ee:	464c      	mov	r4, r9
 80093f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093f4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80093f8:	3701      	adds	r7, #1
 80093fa:	4638      	mov	r0, r7
 80093fc:	f7f7 f86e 	bl	80004dc <__aeabi_i2d>
 8009400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009404:	f7f7 f8d4 	bl	80005b0 <__aeabi_dmul>
 8009408:	2200      	movs	r2, #0
 800940a:	4b62      	ldr	r3, [pc, #392]	; (8009594 <_dtoa_r+0x5b4>)
 800940c:	f7f6 ff1a 	bl	8000244 <__adddf3>
 8009410:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009414:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009418:	9611      	str	r6, [sp, #68]	; 0x44
 800941a:	2c00      	cmp	r4, #0
 800941c:	d15d      	bne.n	80094da <_dtoa_r+0x4fa>
 800941e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009422:	2200      	movs	r2, #0
 8009424:	4b5c      	ldr	r3, [pc, #368]	; (8009598 <_dtoa_r+0x5b8>)
 8009426:	f7f6 ff0b 	bl	8000240 <__aeabi_dsub>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009432:	4633      	mov	r3, r6
 8009434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009436:	f7f7 fb4b 	bl	8000ad0 <__aeabi_dcmpgt>
 800943a:	2800      	cmp	r0, #0
 800943c:	f040 829c 	bne.w	8009978 <_dtoa_r+0x998>
 8009440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009444:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009446:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800944a:	f7f7 fb23 	bl	8000a94 <__aeabi_dcmplt>
 800944e:	2800      	cmp	r0, #0
 8009450:	f040 8290 	bne.w	8009974 <_dtoa_r+0x994>
 8009454:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009458:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800945c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800945e:	2b00      	cmp	r3, #0
 8009460:	f2c0 8152 	blt.w	8009708 <_dtoa_r+0x728>
 8009464:	f1ba 0f0e 	cmp.w	sl, #14
 8009468:	f300 814e 	bgt.w	8009708 <_dtoa_r+0x728>
 800946c:	4b45      	ldr	r3, [pc, #276]	; (8009584 <_dtoa_r+0x5a4>)
 800946e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009472:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009476:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800947a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800947c:	2b00      	cmp	r3, #0
 800947e:	f280 80db 	bge.w	8009638 <_dtoa_r+0x658>
 8009482:	9b08      	ldr	r3, [sp, #32]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f300 80d7 	bgt.w	8009638 <_dtoa_r+0x658>
 800948a:	f040 8272 	bne.w	8009972 <_dtoa_r+0x992>
 800948e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009492:	2200      	movs	r2, #0
 8009494:	4b40      	ldr	r3, [pc, #256]	; (8009598 <_dtoa_r+0x5b8>)
 8009496:	f7f7 f88b 	bl	80005b0 <__aeabi_dmul>
 800949a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800949e:	f7f7 fb0d 	bl	8000abc <__aeabi_dcmpge>
 80094a2:	9c08      	ldr	r4, [sp, #32]
 80094a4:	4626      	mov	r6, r4
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f040 8248 	bne.w	800993c <_dtoa_r+0x95c>
 80094ac:	2331      	movs	r3, #49	; 0x31
 80094ae:	9f03      	ldr	r7, [sp, #12]
 80094b0:	f10a 0a01 	add.w	sl, sl, #1
 80094b4:	f807 3b01 	strb.w	r3, [r7], #1
 80094b8:	e244      	b.n	8009944 <_dtoa_r+0x964>
 80094ba:	07e2      	lsls	r2, r4, #31
 80094bc:	d505      	bpl.n	80094ca <_dtoa_r+0x4ea>
 80094be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094c2:	f7f7 f875 	bl	80005b0 <__aeabi_dmul>
 80094c6:	2301      	movs	r3, #1
 80094c8:	3701      	adds	r7, #1
 80094ca:	1064      	asrs	r4, r4, #1
 80094cc:	3608      	adds	r6, #8
 80094ce:	e76d      	b.n	80093ac <_dtoa_r+0x3cc>
 80094d0:	2702      	movs	r7, #2
 80094d2:	e770      	b.n	80093b6 <_dtoa_r+0x3d6>
 80094d4:	46d0      	mov	r8, sl
 80094d6:	9c08      	ldr	r4, [sp, #32]
 80094d8:	e78f      	b.n	80093fa <_dtoa_r+0x41a>
 80094da:	9903      	ldr	r1, [sp, #12]
 80094dc:	4b29      	ldr	r3, [pc, #164]	; (8009584 <_dtoa_r+0x5a4>)
 80094de:	4421      	add	r1, r4
 80094e0:	9112      	str	r1, [sp, #72]	; 0x48
 80094e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80094ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d055      	beq.n	80095a0 <_dtoa_r+0x5c0>
 80094f4:	2000      	movs	r0, #0
 80094f6:	4929      	ldr	r1, [pc, #164]	; (800959c <_dtoa_r+0x5bc>)
 80094f8:	f7f7 f984 	bl	8000804 <__aeabi_ddiv>
 80094fc:	463b      	mov	r3, r7
 80094fe:	4632      	mov	r2, r6
 8009500:	f7f6 fe9e 	bl	8000240 <__aeabi_dsub>
 8009504:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009508:	9f03      	ldr	r7, [sp, #12]
 800950a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800950e:	f7f7 faff 	bl	8000b10 <__aeabi_d2iz>
 8009512:	4604      	mov	r4, r0
 8009514:	f7f6 ffe2 	bl	80004dc <__aeabi_i2d>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009520:	f7f6 fe8e 	bl	8000240 <__aeabi_dsub>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	3430      	adds	r4, #48	; 0x30
 800952a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800952e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009532:	f807 4b01 	strb.w	r4, [r7], #1
 8009536:	f7f7 faad 	bl	8000a94 <__aeabi_dcmplt>
 800953a:	2800      	cmp	r0, #0
 800953c:	d174      	bne.n	8009628 <_dtoa_r+0x648>
 800953e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009542:	2000      	movs	r0, #0
 8009544:	4911      	ldr	r1, [pc, #68]	; (800958c <_dtoa_r+0x5ac>)
 8009546:	f7f6 fe7b 	bl	8000240 <__aeabi_dsub>
 800954a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800954e:	f7f7 faa1 	bl	8000a94 <__aeabi_dcmplt>
 8009552:	2800      	cmp	r0, #0
 8009554:	f040 80b7 	bne.w	80096c6 <_dtoa_r+0x6e6>
 8009558:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800955a:	429f      	cmp	r7, r3
 800955c:	f43f af7a 	beq.w	8009454 <_dtoa_r+0x474>
 8009560:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009564:	2200      	movs	r2, #0
 8009566:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <_dtoa_r+0x5b0>)
 8009568:	f7f7 f822 	bl	80005b0 <__aeabi_dmul>
 800956c:	2200      	movs	r2, #0
 800956e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009576:	4b06      	ldr	r3, [pc, #24]	; (8009590 <_dtoa_r+0x5b0>)
 8009578:	f7f7 f81a 	bl	80005b0 <__aeabi_dmul>
 800957c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009580:	e7c3      	b.n	800950a <_dtoa_r+0x52a>
 8009582:	bf00      	nop
 8009584:	0800baa0 	.word	0x0800baa0
 8009588:	0800ba78 	.word	0x0800ba78
 800958c:	3ff00000 	.word	0x3ff00000
 8009590:	40240000 	.word	0x40240000
 8009594:	401c0000 	.word	0x401c0000
 8009598:	40140000 	.word	0x40140000
 800959c:	3fe00000 	.word	0x3fe00000
 80095a0:	4630      	mov	r0, r6
 80095a2:	4639      	mov	r1, r7
 80095a4:	f7f7 f804 	bl	80005b0 <__aeabi_dmul>
 80095a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095ae:	9c03      	ldr	r4, [sp, #12]
 80095b0:	9314      	str	r3, [sp, #80]	; 0x50
 80095b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095b6:	f7f7 faab 	bl	8000b10 <__aeabi_d2iz>
 80095ba:	9015      	str	r0, [sp, #84]	; 0x54
 80095bc:	f7f6 ff8e 	bl	80004dc <__aeabi_i2d>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095c8:	f7f6 fe3a 	bl	8000240 <__aeabi_dsub>
 80095cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ce:	4606      	mov	r6, r0
 80095d0:	3330      	adds	r3, #48	; 0x30
 80095d2:	f804 3b01 	strb.w	r3, [r4], #1
 80095d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095d8:	460f      	mov	r7, r1
 80095da:	429c      	cmp	r4, r3
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	d124      	bne.n	800962c <_dtoa_r+0x64c>
 80095e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095e6:	4bb0      	ldr	r3, [pc, #704]	; (80098a8 <_dtoa_r+0x8c8>)
 80095e8:	f7f6 fe2c 	bl	8000244 <__adddf3>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4630      	mov	r0, r6
 80095f2:	4639      	mov	r1, r7
 80095f4:	f7f7 fa6c 	bl	8000ad0 <__aeabi_dcmpgt>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d163      	bne.n	80096c4 <_dtoa_r+0x6e4>
 80095fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009600:	2000      	movs	r0, #0
 8009602:	49a9      	ldr	r1, [pc, #676]	; (80098a8 <_dtoa_r+0x8c8>)
 8009604:	f7f6 fe1c 	bl	8000240 <__aeabi_dsub>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4630      	mov	r0, r6
 800960e:	4639      	mov	r1, r7
 8009610:	f7f7 fa40 	bl	8000a94 <__aeabi_dcmplt>
 8009614:	2800      	cmp	r0, #0
 8009616:	f43f af1d 	beq.w	8009454 <_dtoa_r+0x474>
 800961a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800961c:	1e7b      	subs	r3, r7, #1
 800961e:	9314      	str	r3, [sp, #80]	; 0x50
 8009620:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009624:	2b30      	cmp	r3, #48	; 0x30
 8009626:	d0f8      	beq.n	800961a <_dtoa_r+0x63a>
 8009628:	46c2      	mov	sl, r8
 800962a:	e03b      	b.n	80096a4 <_dtoa_r+0x6c4>
 800962c:	4b9f      	ldr	r3, [pc, #636]	; (80098ac <_dtoa_r+0x8cc>)
 800962e:	f7f6 ffbf 	bl	80005b0 <__aeabi_dmul>
 8009632:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009636:	e7bc      	b.n	80095b2 <_dtoa_r+0x5d2>
 8009638:	9f03      	ldr	r7, [sp, #12]
 800963a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800963e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009642:	4640      	mov	r0, r8
 8009644:	4649      	mov	r1, r9
 8009646:	f7f7 f8dd 	bl	8000804 <__aeabi_ddiv>
 800964a:	f7f7 fa61 	bl	8000b10 <__aeabi_d2iz>
 800964e:	4604      	mov	r4, r0
 8009650:	f7f6 ff44 	bl	80004dc <__aeabi_i2d>
 8009654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009658:	f7f6 ffaa 	bl	80005b0 <__aeabi_dmul>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	f7f6 fdec 	bl	8000240 <__aeabi_dsub>
 8009668:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800966c:	f807 6b01 	strb.w	r6, [r7], #1
 8009670:	9e03      	ldr	r6, [sp, #12]
 8009672:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009676:	1bbe      	subs	r6, r7, r6
 8009678:	45b4      	cmp	ip, r6
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	d136      	bne.n	80096ee <_dtoa_r+0x70e>
 8009680:	f7f6 fde0 	bl	8000244 <__adddf3>
 8009684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009688:	4680      	mov	r8, r0
 800968a:	4689      	mov	r9, r1
 800968c:	f7f7 fa20 	bl	8000ad0 <__aeabi_dcmpgt>
 8009690:	bb58      	cbnz	r0, 80096ea <_dtoa_r+0x70a>
 8009692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009696:	4640      	mov	r0, r8
 8009698:	4649      	mov	r1, r9
 800969a:	f7f7 f9f1 	bl	8000a80 <__aeabi_dcmpeq>
 800969e:	b108      	cbz	r0, 80096a4 <_dtoa_r+0x6c4>
 80096a0:	07e1      	lsls	r1, r4, #31
 80096a2:	d422      	bmi.n	80096ea <_dtoa_r+0x70a>
 80096a4:	4628      	mov	r0, r5
 80096a6:	4659      	mov	r1, fp
 80096a8:	f000 fae2 	bl	8009c70 <_Bfree>
 80096ac:	2300      	movs	r3, #0
 80096ae:	703b      	strb	r3, [r7, #0]
 80096b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096b2:	f10a 0001 	add.w	r0, sl, #1
 80096b6:	6018      	str	r0, [r3, #0]
 80096b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f43f acde 	beq.w	800907c <_dtoa_r+0x9c>
 80096c0:	601f      	str	r7, [r3, #0]
 80096c2:	e4db      	b.n	800907c <_dtoa_r+0x9c>
 80096c4:	4627      	mov	r7, r4
 80096c6:	463b      	mov	r3, r7
 80096c8:	461f      	mov	r7, r3
 80096ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096ce:	2a39      	cmp	r2, #57	; 0x39
 80096d0:	d107      	bne.n	80096e2 <_dtoa_r+0x702>
 80096d2:	9a03      	ldr	r2, [sp, #12]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d1f7      	bne.n	80096c8 <_dtoa_r+0x6e8>
 80096d8:	2230      	movs	r2, #48	; 0x30
 80096da:	9903      	ldr	r1, [sp, #12]
 80096dc:	f108 0801 	add.w	r8, r8, #1
 80096e0:	700a      	strb	r2, [r1, #0]
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	3201      	adds	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e79e      	b.n	8009628 <_dtoa_r+0x648>
 80096ea:	46d0      	mov	r8, sl
 80096ec:	e7eb      	b.n	80096c6 <_dtoa_r+0x6e6>
 80096ee:	2200      	movs	r2, #0
 80096f0:	4b6e      	ldr	r3, [pc, #440]	; (80098ac <_dtoa_r+0x8cc>)
 80096f2:	f7f6 ff5d 	bl	80005b0 <__aeabi_dmul>
 80096f6:	2200      	movs	r2, #0
 80096f8:	2300      	movs	r3, #0
 80096fa:	4680      	mov	r8, r0
 80096fc:	4689      	mov	r9, r1
 80096fe:	f7f7 f9bf 	bl	8000a80 <__aeabi_dcmpeq>
 8009702:	2800      	cmp	r0, #0
 8009704:	d09b      	beq.n	800963e <_dtoa_r+0x65e>
 8009706:	e7cd      	b.n	80096a4 <_dtoa_r+0x6c4>
 8009708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800970a:	2a00      	cmp	r2, #0
 800970c:	f000 80d0 	beq.w	80098b0 <_dtoa_r+0x8d0>
 8009710:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009712:	2a01      	cmp	r2, #1
 8009714:	f300 80ae 	bgt.w	8009874 <_dtoa_r+0x894>
 8009718:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800971a:	2a00      	cmp	r2, #0
 800971c:	f000 80a6 	beq.w	800986c <_dtoa_r+0x88c>
 8009720:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009724:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009726:	9f06      	ldr	r7, [sp, #24]
 8009728:	9a06      	ldr	r2, [sp, #24]
 800972a:	2101      	movs	r1, #1
 800972c:	441a      	add	r2, r3
 800972e:	9206      	str	r2, [sp, #24]
 8009730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009732:	4628      	mov	r0, r5
 8009734:	441a      	add	r2, r3
 8009736:	9209      	str	r2, [sp, #36]	; 0x24
 8009738:	f000 fb50 	bl	8009ddc <__i2b>
 800973c:	4606      	mov	r6, r0
 800973e:	2f00      	cmp	r7, #0
 8009740:	dd0c      	ble.n	800975c <_dtoa_r+0x77c>
 8009742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd09      	ble.n	800975c <_dtoa_r+0x77c>
 8009748:	42bb      	cmp	r3, r7
 800974a:	bfa8      	it	ge
 800974c:	463b      	movge	r3, r7
 800974e:	9a06      	ldr	r2, [sp, #24]
 8009750:	1aff      	subs	r7, r7, r3
 8009752:	1ad2      	subs	r2, r2, r3
 8009754:	9206      	str	r2, [sp, #24]
 8009756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	9309      	str	r3, [sp, #36]	; 0x24
 800975c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975e:	b1f3      	cbz	r3, 800979e <_dtoa_r+0x7be>
 8009760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 80a8 	beq.w	80098b8 <_dtoa_r+0x8d8>
 8009768:	2c00      	cmp	r4, #0
 800976a:	dd10      	ble.n	800978e <_dtoa_r+0x7ae>
 800976c:	4631      	mov	r1, r6
 800976e:	4622      	mov	r2, r4
 8009770:	4628      	mov	r0, r5
 8009772:	f000 fbf1 	bl	8009f58 <__pow5mult>
 8009776:	465a      	mov	r2, fp
 8009778:	4601      	mov	r1, r0
 800977a:	4606      	mov	r6, r0
 800977c:	4628      	mov	r0, r5
 800977e:	f000 fb43 	bl	8009e08 <__multiply>
 8009782:	4680      	mov	r8, r0
 8009784:	4659      	mov	r1, fp
 8009786:	4628      	mov	r0, r5
 8009788:	f000 fa72 	bl	8009c70 <_Bfree>
 800978c:	46c3      	mov	fp, r8
 800978e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009790:	1b1a      	subs	r2, r3, r4
 8009792:	d004      	beq.n	800979e <_dtoa_r+0x7be>
 8009794:	4659      	mov	r1, fp
 8009796:	4628      	mov	r0, r5
 8009798:	f000 fbde 	bl	8009f58 <__pow5mult>
 800979c:	4683      	mov	fp, r0
 800979e:	2101      	movs	r1, #1
 80097a0:	4628      	mov	r0, r5
 80097a2:	f000 fb1b 	bl	8009ddc <__i2b>
 80097a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a8:	4604      	mov	r4, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f340 8086 	ble.w	80098bc <_dtoa_r+0x8dc>
 80097b0:	461a      	mov	r2, r3
 80097b2:	4601      	mov	r1, r0
 80097b4:	4628      	mov	r0, r5
 80097b6:	f000 fbcf 	bl	8009f58 <__pow5mult>
 80097ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097bc:	4604      	mov	r4, r0
 80097be:	2b01      	cmp	r3, #1
 80097c0:	dd7f      	ble.n	80098c2 <_dtoa_r+0x8e2>
 80097c2:	f04f 0800 	mov.w	r8, #0
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097cc:	6918      	ldr	r0, [r3, #16]
 80097ce:	f000 fab7 	bl	8009d40 <__hi0bits>
 80097d2:	f1c0 0020 	rsb	r0, r0, #32
 80097d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d8:	4418      	add	r0, r3
 80097da:	f010 001f 	ands.w	r0, r0, #31
 80097de:	f000 8092 	beq.w	8009906 <_dtoa_r+0x926>
 80097e2:	f1c0 0320 	rsb	r3, r0, #32
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	f340 808a 	ble.w	8009900 <_dtoa_r+0x920>
 80097ec:	f1c0 001c 	rsb	r0, r0, #28
 80097f0:	9b06      	ldr	r3, [sp, #24]
 80097f2:	4407      	add	r7, r0
 80097f4:	4403      	add	r3, r0
 80097f6:	9306      	str	r3, [sp, #24]
 80097f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fa:	4403      	add	r3, r0
 80097fc:	9309      	str	r3, [sp, #36]	; 0x24
 80097fe:	9b06      	ldr	r3, [sp, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	dd05      	ble.n	8009810 <_dtoa_r+0x830>
 8009804:	4659      	mov	r1, fp
 8009806:	461a      	mov	r2, r3
 8009808:	4628      	mov	r0, r5
 800980a:	f000 fbff 	bl	800a00c <__lshift>
 800980e:	4683      	mov	fp, r0
 8009810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	dd05      	ble.n	8009822 <_dtoa_r+0x842>
 8009816:	4621      	mov	r1, r4
 8009818:	461a      	mov	r2, r3
 800981a:	4628      	mov	r0, r5
 800981c:	f000 fbf6 	bl	800a00c <__lshift>
 8009820:	4604      	mov	r4, r0
 8009822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d070      	beq.n	800990a <_dtoa_r+0x92a>
 8009828:	4621      	mov	r1, r4
 800982a:	4658      	mov	r0, fp
 800982c:	f000 fc5e 	bl	800a0ec <__mcmp>
 8009830:	2800      	cmp	r0, #0
 8009832:	da6a      	bge.n	800990a <_dtoa_r+0x92a>
 8009834:	2300      	movs	r3, #0
 8009836:	4659      	mov	r1, fp
 8009838:	220a      	movs	r2, #10
 800983a:	4628      	mov	r0, r5
 800983c:	f000 fa3a 	bl	8009cb4 <__multadd>
 8009840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009842:	4683      	mov	fp, r0
 8009844:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 8194 	beq.w	8009b76 <_dtoa_r+0xb96>
 800984e:	4631      	mov	r1, r6
 8009850:	2300      	movs	r3, #0
 8009852:	220a      	movs	r2, #10
 8009854:	4628      	mov	r0, r5
 8009856:	f000 fa2d 	bl	8009cb4 <__multadd>
 800985a:	f1b9 0f00 	cmp.w	r9, #0
 800985e:	4606      	mov	r6, r0
 8009860:	f300 8093 	bgt.w	800998a <_dtoa_r+0x9aa>
 8009864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009866:	2b02      	cmp	r3, #2
 8009868:	dc57      	bgt.n	800991a <_dtoa_r+0x93a>
 800986a:	e08e      	b.n	800998a <_dtoa_r+0x9aa>
 800986c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800986e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009872:	e757      	b.n	8009724 <_dtoa_r+0x744>
 8009874:	9b08      	ldr	r3, [sp, #32]
 8009876:	1e5c      	subs	r4, r3, #1
 8009878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987a:	42a3      	cmp	r3, r4
 800987c:	bfb7      	itett	lt
 800987e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009880:	1b1c      	subge	r4, r3, r4
 8009882:	1ae2      	sublt	r2, r4, r3
 8009884:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009886:	bfbe      	ittt	lt
 8009888:	940a      	strlt	r4, [sp, #40]	; 0x28
 800988a:	189b      	addlt	r3, r3, r2
 800988c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800988e:	9b08      	ldr	r3, [sp, #32]
 8009890:	bfb8      	it	lt
 8009892:	2400      	movlt	r4, #0
 8009894:	2b00      	cmp	r3, #0
 8009896:	bfbb      	ittet	lt
 8009898:	9b06      	ldrlt	r3, [sp, #24]
 800989a:	9a08      	ldrlt	r2, [sp, #32]
 800989c:	9f06      	ldrge	r7, [sp, #24]
 800989e:	1a9f      	sublt	r7, r3, r2
 80098a0:	bfac      	ite	ge
 80098a2:	9b08      	ldrge	r3, [sp, #32]
 80098a4:	2300      	movlt	r3, #0
 80098a6:	e73f      	b.n	8009728 <_dtoa_r+0x748>
 80098a8:	3fe00000 	.word	0x3fe00000
 80098ac:	40240000 	.word	0x40240000
 80098b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098b2:	9f06      	ldr	r7, [sp, #24]
 80098b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80098b6:	e742      	b.n	800973e <_dtoa_r+0x75e>
 80098b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ba:	e76b      	b.n	8009794 <_dtoa_r+0x7b4>
 80098bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098be:	2b01      	cmp	r3, #1
 80098c0:	dc19      	bgt.n	80098f6 <_dtoa_r+0x916>
 80098c2:	9b04      	ldr	r3, [sp, #16]
 80098c4:	b9bb      	cbnz	r3, 80098f6 <_dtoa_r+0x916>
 80098c6:	9b05      	ldr	r3, [sp, #20]
 80098c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098cc:	b99b      	cbnz	r3, 80098f6 <_dtoa_r+0x916>
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098d4:	0d1b      	lsrs	r3, r3, #20
 80098d6:	051b      	lsls	r3, r3, #20
 80098d8:	b183      	cbz	r3, 80098fc <_dtoa_r+0x91c>
 80098da:	f04f 0801 	mov.w	r8, #1
 80098de:	9b06      	ldr	r3, [sp, #24]
 80098e0:	3301      	adds	r3, #1
 80098e2:	9306      	str	r3, [sp, #24]
 80098e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e6:	3301      	adds	r3, #1
 80098e8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f47f af6a 	bne.w	80097c6 <_dtoa_r+0x7e6>
 80098f2:	2001      	movs	r0, #1
 80098f4:	e76f      	b.n	80097d6 <_dtoa_r+0x7f6>
 80098f6:	f04f 0800 	mov.w	r8, #0
 80098fa:	e7f6      	b.n	80098ea <_dtoa_r+0x90a>
 80098fc:	4698      	mov	r8, r3
 80098fe:	e7f4      	b.n	80098ea <_dtoa_r+0x90a>
 8009900:	f43f af7d 	beq.w	80097fe <_dtoa_r+0x81e>
 8009904:	4618      	mov	r0, r3
 8009906:	301c      	adds	r0, #28
 8009908:	e772      	b.n	80097f0 <_dtoa_r+0x810>
 800990a:	9b08      	ldr	r3, [sp, #32]
 800990c:	2b00      	cmp	r3, #0
 800990e:	dc36      	bgt.n	800997e <_dtoa_r+0x99e>
 8009910:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009912:	2b02      	cmp	r3, #2
 8009914:	dd33      	ble.n	800997e <_dtoa_r+0x99e>
 8009916:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800991a:	f1b9 0f00 	cmp.w	r9, #0
 800991e:	d10d      	bne.n	800993c <_dtoa_r+0x95c>
 8009920:	4621      	mov	r1, r4
 8009922:	464b      	mov	r3, r9
 8009924:	2205      	movs	r2, #5
 8009926:	4628      	mov	r0, r5
 8009928:	f000 f9c4 	bl	8009cb4 <__multadd>
 800992c:	4601      	mov	r1, r0
 800992e:	4604      	mov	r4, r0
 8009930:	4658      	mov	r0, fp
 8009932:	f000 fbdb 	bl	800a0ec <__mcmp>
 8009936:	2800      	cmp	r0, #0
 8009938:	f73f adb8 	bgt.w	80094ac <_dtoa_r+0x4cc>
 800993c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800993e:	9f03      	ldr	r7, [sp, #12]
 8009940:	ea6f 0a03 	mvn.w	sl, r3
 8009944:	f04f 0800 	mov.w	r8, #0
 8009948:	4621      	mov	r1, r4
 800994a:	4628      	mov	r0, r5
 800994c:	f000 f990 	bl	8009c70 <_Bfree>
 8009950:	2e00      	cmp	r6, #0
 8009952:	f43f aea7 	beq.w	80096a4 <_dtoa_r+0x6c4>
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	d005      	beq.n	8009968 <_dtoa_r+0x988>
 800995c:	45b0      	cmp	r8, r6
 800995e:	d003      	beq.n	8009968 <_dtoa_r+0x988>
 8009960:	4641      	mov	r1, r8
 8009962:	4628      	mov	r0, r5
 8009964:	f000 f984 	bl	8009c70 <_Bfree>
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	f000 f980 	bl	8009c70 <_Bfree>
 8009970:	e698      	b.n	80096a4 <_dtoa_r+0x6c4>
 8009972:	2400      	movs	r4, #0
 8009974:	4626      	mov	r6, r4
 8009976:	e7e1      	b.n	800993c <_dtoa_r+0x95c>
 8009978:	46c2      	mov	sl, r8
 800997a:	4626      	mov	r6, r4
 800997c:	e596      	b.n	80094ac <_dtoa_r+0x4cc>
 800997e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 80fd 	beq.w	8009b84 <_dtoa_r+0xba4>
 800998a:	2f00      	cmp	r7, #0
 800998c:	dd05      	ble.n	800999a <_dtoa_r+0x9ba>
 800998e:	4631      	mov	r1, r6
 8009990:	463a      	mov	r2, r7
 8009992:	4628      	mov	r0, r5
 8009994:	f000 fb3a 	bl	800a00c <__lshift>
 8009998:	4606      	mov	r6, r0
 800999a:	f1b8 0f00 	cmp.w	r8, #0
 800999e:	d05c      	beq.n	8009a5a <_dtoa_r+0xa7a>
 80099a0:	4628      	mov	r0, r5
 80099a2:	6871      	ldr	r1, [r6, #4]
 80099a4:	f000 f924 	bl	8009bf0 <_Balloc>
 80099a8:	4607      	mov	r7, r0
 80099aa:	b928      	cbnz	r0, 80099b8 <_dtoa_r+0x9d8>
 80099ac:	4602      	mov	r2, r0
 80099ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099b2:	4b7f      	ldr	r3, [pc, #508]	; (8009bb0 <_dtoa_r+0xbd0>)
 80099b4:	f7ff bb28 	b.w	8009008 <_dtoa_r+0x28>
 80099b8:	6932      	ldr	r2, [r6, #16]
 80099ba:	f106 010c 	add.w	r1, r6, #12
 80099be:	3202      	adds	r2, #2
 80099c0:	0092      	lsls	r2, r2, #2
 80099c2:	300c      	adds	r0, #12
 80099c4:	f7fe fd4c 	bl	8008460 <memcpy>
 80099c8:	2201      	movs	r2, #1
 80099ca:	4639      	mov	r1, r7
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 fb1d 	bl	800a00c <__lshift>
 80099d2:	46b0      	mov	r8, r6
 80099d4:	4606      	mov	r6, r0
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	9308      	str	r3, [sp, #32]
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	444b      	add	r3, r9
 80099e0:	930a      	str	r3, [sp, #40]	; 0x28
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ea:	9b08      	ldr	r3, [sp, #32]
 80099ec:	4621      	mov	r1, r4
 80099ee:	3b01      	subs	r3, #1
 80099f0:	4658      	mov	r0, fp
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	f7ff fa66 	bl	8008ec4 <quorem>
 80099f8:	4603      	mov	r3, r0
 80099fa:	4641      	mov	r1, r8
 80099fc:	3330      	adds	r3, #48	; 0x30
 80099fe:	9006      	str	r0, [sp, #24]
 8009a00:	4658      	mov	r0, fp
 8009a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a04:	f000 fb72 	bl	800a0ec <__mcmp>
 8009a08:	4632      	mov	r2, r6
 8009a0a:	4681      	mov	r9, r0
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f000 fb88 	bl	800a124 <__mdiff>
 8009a14:	68c2      	ldr	r2, [r0, #12]
 8009a16:	4607      	mov	r7, r0
 8009a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1a:	bb02      	cbnz	r2, 8009a5e <_dtoa_r+0xa7e>
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	4658      	mov	r0, fp
 8009a20:	f000 fb64 	bl	800a0ec <__mcmp>
 8009a24:	4602      	mov	r2, r0
 8009a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a28:	4639      	mov	r1, r7
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009a30:	f000 f91e 	bl	8009c70 <_Bfree>
 8009a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a38:	9f08      	ldr	r7, [sp, #32]
 8009a3a:	ea43 0102 	orr.w	r1, r3, r2
 8009a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a40:	430b      	orrs	r3, r1
 8009a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a44:	d10d      	bne.n	8009a62 <_dtoa_r+0xa82>
 8009a46:	2b39      	cmp	r3, #57	; 0x39
 8009a48:	d029      	beq.n	8009a9e <_dtoa_r+0xabe>
 8009a4a:	f1b9 0f00 	cmp.w	r9, #0
 8009a4e:	dd01      	ble.n	8009a54 <_dtoa_r+0xa74>
 8009a50:	9b06      	ldr	r3, [sp, #24]
 8009a52:	3331      	adds	r3, #49	; 0x31
 8009a54:	9a04      	ldr	r2, [sp, #16]
 8009a56:	7013      	strb	r3, [r2, #0]
 8009a58:	e776      	b.n	8009948 <_dtoa_r+0x968>
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	e7b9      	b.n	80099d2 <_dtoa_r+0x9f2>
 8009a5e:	2201      	movs	r2, #1
 8009a60:	e7e2      	b.n	8009a28 <_dtoa_r+0xa48>
 8009a62:	f1b9 0f00 	cmp.w	r9, #0
 8009a66:	db06      	blt.n	8009a76 <_dtoa_r+0xa96>
 8009a68:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a6a:	ea41 0909 	orr.w	r9, r1, r9
 8009a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a70:	ea59 0101 	orrs.w	r1, r9, r1
 8009a74:	d120      	bne.n	8009ab8 <_dtoa_r+0xad8>
 8009a76:	2a00      	cmp	r2, #0
 8009a78:	ddec      	ble.n	8009a54 <_dtoa_r+0xa74>
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4628      	mov	r0, r5
 8009a80:	9308      	str	r3, [sp, #32]
 8009a82:	f000 fac3 	bl	800a00c <__lshift>
 8009a86:	4621      	mov	r1, r4
 8009a88:	4683      	mov	fp, r0
 8009a8a:	f000 fb2f 	bl	800a0ec <__mcmp>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	9b08      	ldr	r3, [sp, #32]
 8009a92:	dc02      	bgt.n	8009a9a <_dtoa_r+0xaba>
 8009a94:	d1de      	bne.n	8009a54 <_dtoa_r+0xa74>
 8009a96:	07da      	lsls	r2, r3, #31
 8009a98:	d5dc      	bpl.n	8009a54 <_dtoa_r+0xa74>
 8009a9a:	2b39      	cmp	r3, #57	; 0x39
 8009a9c:	d1d8      	bne.n	8009a50 <_dtoa_r+0xa70>
 8009a9e:	2339      	movs	r3, #57	; 0x39
 8009aa0:	9a04      	ldr	r2, [sp, #16]
 8009aa2:	7013      	strb	r3, [r2, #0]
 8009aa4:	463b      	mov	r3, r7
 8009aa6:	461f      	mov	r7, r3
 8009aa8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	2a39      	cmp	r2, #57	; 0x39
 8009ab0:	d050      	beq.n	8009b54 <_dtoa_r+0xb74>
 8009ab2:	3201      	adds	r2, #1
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e747      	b.n	8009948 <_dtoa_r+0x968>
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	dd03      	ble.n	8009ac4 <_dtoa_r+0xae4>
 8009abc:	2b39      	cmp	r3, #57	; 0x39
 8009abe:	d0ee      	beq.n	8009a9e <_dtoa_r+0xabe>
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	e7c7      	b.n	8009a54 <_dtoa_r+0xa74>
 8009ac4:	9a08      	ldr	r2, [sp, #32]
 8009ac6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ac8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009acc:	428a      	cmp	r2, r1
 8009ace:	d02a      	beq.n	8009b26 <_dtoa_r+0xb46>
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	220a      	movs	r2, #10
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 f8ec 	bl	8009cb4 <__multadd>
 8009adc:	45b0      	cmp	r8, r6
 8009ade:	4683      	mov	fp, r0
 8009ae0:	f04f 0300 	mov.w	r3, #0
 8009ae4:	f04f 020a 	mov.w	r2, #10
 8009ae8:	4641      	mov	r1, r8
 8009aea:	4628      	mov	r0, r5
 8009aec:	d107      	bne.n	8009afe <_dtoa_r+0xb1e>
 8009aee:	f000 f8e1 	bl	8009cb4 <__multadd>
 8009af2:	4680      	mov	r8, r0
 8009af4:	4606      	mov	r6, r0
 8009af6:	9b08      	ldr	r3, [sp, #32]
 8009af8:	3301      	adds	r3, #1
 8009afa:	9308      	str	r3, [sp, #32]
 8009afc:	e775      	b.n	80099ea <_dtoa_r+0xa0a>
 8009afe:	f000 f8d9 	bl	8009cb4 <__multadd>
 8009b02:	4631      	mov	r1, r6
 8009b04:	4680      	mov	r8, r0
 8009b06:	2300      	movs	r3, #0
 8009b08:	220a      	movs	r2, #10
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f000 f8d2 	bl	8009cb4 <__multadd>
 8009b10:	4606      	mov	r6, r0
 8009b12:	e7f0      	b.n	8009af6 <_dtoa_r+0xb16>
 8009b14:	f1b9 0f00 	cmp.w	r9, #0
 8009b18:	bfcc      	ite	gt
 8009b1a:	464f      	movgt	r7, r9
 8009b1c:	2701      	movle	r7, #1
 8009b1e:	f04f 0800 	mov.w	r8, #0
 8009b22:	9a03      	ldr	r2, [sp, #12]
 8009b24:	4417      	add	r7, r2
 8009b26:	4659      	mov	r1, fp
 8009b28:	2201      	movs	r2, #1
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	9308      	str	r3, [sp, #32]
 8009b2e:	f000 fa6d 	bl	800a00c <__lshift>
 8009b32:	4621      	mov	r1, r4
 8009b34:	4683      	mov	fp, r0
 8009b36:	f000 fad9 	bl	800a0ec <__mcmp>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	dcb2      	bgt.n	8009aa4 <_dtoa_r+0xac4>
 8009b3e:	d102      	bne.n	8009b46 <_dtoa_r+0xb66>
 8009b40:	9b08      	ldr	r3, [sp, #32]
 8009b42:	07db      	lsls	r3, r3, #31
 8009b44:	d4ae      	bmi.n	8009aa4 <_dtoa_r+0xac4>
 8009b46:	463b      	mov	r3, r7
 8009b48:	461f      	mov	r7, r3
 8009b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b4e:	2a30      	cmp	r2, #48	; 0x30
 8009b50:	d0fa      	beq.n	8009b48 <_dtoa_r+0xb68>
 8009b52:	e6f9      	b.n	8009948 <_dtoa_r+0x968>
 8009b54:	9a03      	ldr	r2, [sp, #12]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d1a5      	bne.n	8009aa6 <_dtoa_r+0xac6>
 8009b5a:	2331      	movs	r3, #49	; 0x31
 8009b5c:	f10a 0a01 	add.w	sl, sl, #1
 8009b60:	e779      	b.n	8009a56 <_dtoa_r+0xa76>
 8009b62:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <_dtoa_r+0xbd4>)
 8009b64:	f7ff baa8 	b.w	80090b8 <_dtoa_r+0xd8>
 8009b68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f47f aa81 	bne.w	8009072 <_dtoa_r+0x92>
 8009b70:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <_dtoa_r+0xbd8>)
 8009b72:	f7ff baa1 	b.w	80090b8 <_dtoa_r+0xd8>
 8009b76:	f1b9 0f00 	cmp.w	r9, #0
 8009b7a:	dc03      	bgt.n	8009b84 <_dtoa_r+0xba4>
 8009b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	f73f aecb 	bgt.w	800991a <_dtoa_r+0x93a>
 8009b84:	9f03      	ldr	r7, [sp, #12]
 8009b86:	4621      	mov	r1, r4
 8009b88:	4658      	mov	r0, fp
 8009b8a:	f7ff f99b 	bl	8008ec4 <quorem>
 8009b8e:	9a03      	ldr	r2, [sp, #12]
 8009b90:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b94:	f807 3b01 	strb.w	r3, [r7], #1
 8009b98:	1aba      	subs	r2, r7, r2
 8009b9a:	4591      	cmp	r9, r2
 8009b9c:	ddba      	ble.n	8009b14 <_dtoa_r+0xb34>
 8009b9e:	4659      	mov	r1, fp
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	220a      	movs	r2, #10
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 f885 	bl	8009cb4 <__multadd>
 8009baa:	4683      	mov	fp, r0
 8009bac:	e7eb      	b.n	8009b86 <_dtoa_r+0xba6>
 8009bae:	bf00      	nop
 8009bb0:	0800ba04 	.word	0x0800ba04
 8009bb4:	0800b860 	.word	0x0800b860
 8009bb8:	0800b985 	.word	0x0800b985

08009bbc <_localeconv_r>:
 8009bbc:	4800      	ldr	r0, [pc, #0]	; (8009bc0 <_localeconv_r+0x4>)
 8009bbe:	4770      	bx	lr
 8009bc0:	20000168 	.word	0x20000168

08009bc4 <malloc>:
 8009bc4:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <malloc+0xc>)
 8009bc6:	4601      	mov	r1, r0
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	f000 bc0f 	b.w	800a3ec <_malloc_r>
 8009bce:	bf00      	nop
 8009bd0:	20000014 	.word	0x20000014

08009bd4 <memchr>:
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	b2c9      	uxtb	r1, r1
 8009bda:	4402      	add	r2, r0
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	d101      	bne.n	8009be6 <memchr+0x12>
 8009be2:	2000      	movs	r0, #0
 8009be4:	e003      	b.n	8009bee <memchr+0x1a>
 8009be6:	7804      	ldrb	r4, [r0, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	428c      	cmp	r4, r1
 8009bec:	d1f6      	bne.n	8009bdc <memchr+0x8>
 8009bee:	bd10      	pop	{r4, pc}

08009bf0 <_Balloc>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	b976      	cbnz	r6, 8009c18 <_Balloc+0x28>
 8009bfa:	2010      	movs	r0, #16
 8009bfc:	f7ff ffe2 	bl	8009bc4 <malloc>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6260      	str	r0, [r4, #36]	; 0x24
 8009c04:	b920      	cbnz	r0, 8009c10 <_Balloc+0x20>
 8009c06:	2166      	movs	r1, #102	; 0x66
 8009c08:	4b17      	ldr	r3, [pc, #92]	; (8009c68 <_Balloc+0x78>)
 8009c0a:	4818      	ldr	r0, [pc, #96]	; (8009c6c <_Balloc+0x7c>)
 8009c0c:	f000 fdce 	bl	800a7ac <__assert_func>
 8009c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c14:	6006      	str	r6, [r0, #0]
 8009c16:	60c6      	str	r6, [r0, #12]
 8009c18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c1a:	68f3      	ldr	r3, [r6, #12]
 8009c1c:	b183      	cbz	r3, 8009c40 <_Balloc+0x50>
 8009c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c26:	b9b8      	cbnz	r0, 8009c58 <_Balloc+0x68>
 8009c28:	2101      	movs	r1, #1
 8009c2a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c2e:	1d72      	adds	r2, r6, #5
 8009c30:	4620      	mov	r0, r4
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	f000 fb5e 	bl	800a2f4 <_calloc_r>
 8009c38:	b160      	cbz	r0, 8009c54 <_Balloc+0x64>
 8009c3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c3e:	e00e      	b.n	8009c5e <_Balloc+0x6e>
 8009c40:	2221      	movs	r2, #33	; 0x21
 8009c42:	2104      	movs	r1, #4
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 fb55 	bl	800a2f4 <_calloc_r>
 8009c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c4c:	60f0      	str	r0, [r6, #12]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e4      	bne.n	8009c1e <_Balloc+0x2e>
 8009c54:	2000      	movs	r0, #0
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	6802      	ldr	r2, [r0, #0]
 8009c5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c64:	e7f7      	b.n	8009c56 <_Balloc+0x66>
 8009c66:	bf00      	nop
 8009c68:	0800b992 	.word	0x0800b992
 8009c6c:	0800ba15 	.word	0x0800ba15

08009c70 <_Bfree>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c74:	4605      	mov	r5, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	b976      	cbnz	r6, 8009c98 <_Bfree+0x28>
 8009c7a:	2010      	movs	r0, #16
 8009c7c:	f7ff ffa2 	bl	8009bc4 <malloc>
 8009c80:	4602      	mov	r2, r0
 8009c82:	6268      	str	r0, [r5, #36]	; 0x24
 8009c84:	b920      	cbnz	r0, 8009c90 <_Bfree+0x20>
 8009c86:	218a      	movs	r1, #138	; 0x8a
 8009c88:	4b08      	ldr	r3, [pc, #32]	; (8009cac <_Bfree+0x3c>)
 8009c8a:	4809      	ldr	r0, [pc, #36]	; (8009cb0 <_Bfree+0x40>)
 8009c8c:	f000 fd8e 	bl	800a7ac <__assert_func>
 8009c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c94:	6006      	str	r6, [r0, #0]
 8009c96:	60c6      	str	r6, [r0, #12]
 8009c98:	b13c      	cbz	r4, 8009caa <_Bfree+0x3a>
 8009c9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c9c:	6862      	ldr	r2, [r4, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ca4:	6021      	str	r1, [r4, #0]
 8009ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	0800b992 	.word	0x0800b992
 8009cb0:	0800ba15 	.word	0x0800ba15

08009cb4 <__multadd>:
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb8:	4607      	mov	r7, r0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	461e      	mov	r6, r3
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	690d      	ldr	r5, [r1, #16]
 8009cc2:	f101 0c14 	add.w	ip, r1, #20
 8009cc6:	f8dc 3000 	ldr.w	r3, [ip]
 8009cca:	3001      	adds	r0, #1
 8009ccc:	b299      	uxth	r1, r3
 8009cce:	fb02 6101 	mla	r1, r2, r1, r6
 8009cd2:	0c1e      	lsrs	r6, r3, #16
 8009cd4:	0c0b      	lsrs	r3, r1, #16
 8009cd6:	fb02 3306 	mla	r3, r2, r6, r3
 8009cda:	b289      	uxth	r1, r1
 8009cdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ce0:	4285      	cmp	r5, r0
 8009ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ce6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cea:	dcec      	bgt.n	8009cc6 <__multadd+0x12>
 8009cec:	b30e      	cbz	r6, 8009d32 <__multadd+0x7e>
 8009cee:	68a3      	ldr	r3, [r4, #8]
 8009cf0:	42ab      	cmp	r3, r5
 8009cf2:	dc19      	bgt.n	8009d28 <__multadd+0x74>
 8009cf4:	6861      	ldr	r1, [r4, #4]
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	3101      	adds	r1, #1
 8009cfa:	f7ff ff79 	bl	8009bf0 <_Balloc>
 8009cfe:	4680      	mov	r8, r0
 8009d00:	b928      	cbnz	r0, 8009d0e <__multadd+0x5a>
 8009d02:	4602      	mov	r2, r0
 8009d04:	21b5      	movs	r1, #181	; 0xb5
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <__multadd+0x84>)
 8009d08:	480c      	ldr	r0, [pc, #48]	; (8009d3c <__multadd+0x88>)
 8009d0a:	f000 fd4f 	bl	800a7ac <__assert_func>
 8009d0e:	6922      	ldr	r2, [r4, #16]
 8009d10:	f104 010c 	add.w	r1, r4, #12
 8009d14:	3202      	adds	r2, #2
 8009d16:	0092      	lsls	r2, r2, #2
 8009d18:	300c      	adds	r0, #12
 8009d1a:	f7fe fba1 	bl	8008460 <memcpy>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4638      	mov	r0, r7
 8009d22:	f7ff ffa5 	bl	8009c70 <_Bfree>
 8009d26:	4644      	mov	r4, r8
 8009d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	615e      	str	r6, [r3, #20]
 8009d30:	6125      	str	r5, [r4, #16]
 8009d32:	4620      	mov	r0, r4
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d38:	0800ba04 	.word	0x0800ba04
 8009d3c:	0800ba15 	.word	0x0800ba15

08009d40 <__hi0bits>:
 8009d40:	0c02      	lsrs	r2, r0, #16
 8009d42:	0412      	lsls	r2, r2, #16
 8009d44:	4603      	mov	r3, r0
 8009d46:	b9ca      	cbnz	r2, 8009d7c <__hi0bits+0x3c>
 8009d48:	0403      	lsls	r3, r0, #16
 8009d4a:	2010      	movs	r0, #16
 8009d4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d50:	bf04      	itt	eq
 8009d52:	021b      	lsleq	r3, r3, #8
 8009d54:	3008      	addeq	r0, #8
 8009d56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d5a:	bf04      	itt	eq
 8009d5c:	011b      	lsleq	r3, r3, #4
 8009d5e:	3004      	addeq	r0, #4
 8009d60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d64:	bf04      	itt	eq
 8009d66:	009b      	lsleq	r3, r3, #2
 8009d68:	3002      	addeq	r0, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	db05      	blt.n	8009d7a <__hi0bits+0x3a>
 8009d6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009d72:	f100 0001 	add.w	r0, r0, #1
 8009d76:	bf08      	it	eq
 8009d78:	2020      	moveq	r0, #32
 8009d7a:	4770      	bx	lr
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e7e5      	b.n	8009d4c <__hi0bits+0xc>

08009d80 <__lo0bits>:
 8009d80:	6803      	ldr	r3, [r0, #0]
 8009d82:	4602      	mov	r2, r0
 8009d84:	f013 0007 	ands.w	r0, r3, #7
 8009d88:	d00b      	beq.n	8009da2 <__lo0bits+0x22>
 8009d8a:	07d9      	lsls	r1, r3, #31
 8009d8c:	d421      	bmi.n	8009dd2 <__lo0bits+0x52>
 8009d8e:	0798      	lsls	r0, r3, #30
 8009d90:	bf49      	itett	mi
 8009d92:	085b      	lsrmi	r3, r3, #1
 8009d94:	089b      	lsrpl	r3, r3, #2
 8009d96:	2001      	movmi	r0, #1
 8009d98:	6013      	strmi	r3, [r2, #0]
 8009d9a:	bf5c      	itt	pl
 8009d9c:	2002      	movpl	r0, #2
 8009d9e:	6013      	strpl	r3, [r2, #0]
 8009da0:	4770      	bx	lr
 8009da2:	b299      	uxth	r1, r3
 8009da4:	b909      	cbnz	r1, 8009daa <__lo0bits+0x2a>
 8009da6:	2010      	movs	r0, #16
 8009da8:	0c1b      	lsrs	r3, r3, #16
 8009daa:	b2d9      	uxtb	r1, r3
 8009dac:	b909      	cbnz	r1, 8009db2 <__lo0bits+0x32>
 8009dae:	3008      	adds	r0, #8
 8009db0:	0a1b      	lsrs	r3, r3, #8
 8009db2:	0719      	lsls	r1, r3, #28
 8009db4:	bf04      	itt	eq
 8009db6:	091b      	lsreq	r3, r3, #4
 8009db8:	3004      	addeq	r0, #4
 8009dba:	0799      	lsls	r1, r3, #30
 8009dbc:	bf04      	itt	eq
 8009dbe:	089b      	lsreq	r3, r3, #2
 8009dc0:	3002      	addeq	r0, #2
 8009dc2:	07d9      	lsls	r1, r3, #31
 8009dc4:	d403      	bmi.n	8009dce <__lo0bits+0x4e>
 8009dc6:	085b      	lsrs	r3, r3, #1
 8009dc8:	f100 0001 	add.w	r0, r0, #1
 8009dcc:	d003      	beq.n	8009dd6 <__lo0bits+0x56>
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	4770      	bx	lr
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	4770      	bx	lr
 8009dd6:	2020      	movs	r0, #32
 8009dd8:	4770      	bx	lr
	...

08009ddc <__i2b>:
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	460c      	mov	r4, r1
 8009de0:	2101      	movs	r1, #1
 8009de2:	f7ff ff05 	bl	8009bf0 <_Balloc>
 8009de6:	4602      	mov	r2, r0
 8009de8:	b928      	cbnz	r0, 8009df6 <__i2b+0x1a>
 8009dea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <__i2b+0x24>)
 8009df0:	4804      	ldr	r0, [pc, #16]	; (8009e04 <__i2b+0x28>)
 8009df2:	f000 fcdb 	bl	800a7ac <__assert_func>
 8009df6:	2301      	movs	r3, #1
 8009df8:	6144      	str	r4, [r0, #20]
 8009dfa:	6103      	str	r3, [r0, #16]
 8009dfc:	bd10      	pop	{r4, pc}
 8009dfe:	bf00      	nop
 8009e00:	0800ba04 	.word	0x0800ba04
 8009e04:	0800ba15 	.word	0x0800ba15

08009e08 <__multiply>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	4691      	mov	r9, r2
 8009e0e:	690a      	ldr	r2, [r1, #16]
 8009e10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e14:	460c      	mov	r4, r1
 8009e16:	429a      	cmp	r2, r3
 8009e18:	bfbe      	ittt	lt
 8009e1a:	460b      	movlt	r3, r1
 8009e1c:	464c      	movlt	r4, r9
 8009e1e:	4699      	movlt	r9, r3
 8009e20:	6927      	ldr	r7, [r4, #16]
 8009e22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e26:	68a3      	ldr	r3, [r4, #8]
 8009e28:	6861      	ldr	r1, [r4, #4]
 8009e2a:	eb07 060a 	add.w	r6, r7, sl
 8009e2e:	42b3      	cmp	r3, r6
 8009e30:	b085      	sub	sp, #20
 8009e32:	bfb8      	it	lt
 8009e34:	3101      	addlt	r1, #1
 8009e36:	f7ff fedb 	bl	8009bf0 <_Balloc>
 8009e3a:	b930      	cbnz	r0, 8009e4a <__multiply+0x42>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	f240 115d 	movw	r1, #349	; 0x15d
 8009e42:	4b43      	ldr	r3, [pc, #268]	; (8009f50 <__multiply+0x148>)
 8009e44:	4843      	ldr	r0, [pc, #268]	; (8009f54 <__multiply+0x14c>)
 8009e46:	f000 fcb1 	bl	800a7ac <__assert_func>
 8009e4a:	f100 0514 	add.w	r5, r0, #20
 8009e4e:	462b      	mov	r3, r5
 8009e50:	2200      	movs	r2, #0
 8009e52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e56:	4543      	cmp	r3, r8
 8009e58:	d321      	bcc.n	8009e9e <__multiply+0x96>
 8009e5a:	f104 0314 	add.w	r3, r4, #20
 8009e5e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e62:	f109 0314 	add.w	r3, r9, #20
 8009e66:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e6a:	9202      	str	r2, [sp, #8]
 8009e6c:	1b3a      	subs	r2, r7, r4
 8009e6e:	3a15      	subs	r2, #21
 8009e70:	f022 0203 	bic.w	r2, r2, #3
 8009e74:	3204      	adds	r2, #4
 8009e76:	f104 0115 	add.w	r1, r4, #21
 8009e7a:	428f      	cmp	r7, r1
 8009e7c:	bf38      	it	cc
 8009e7e:	2204      	movcc	r2, #4
 8009e80:	9201      	str	r2, [sp, #4]
 8009e82:	9a02      	ldr	r2, [sp, #8]
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d80c      	bhi.n	8009ea4 <__multiply+0x9c>
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	dd03      	ble.n	8009e96 <__multiply+0x8e>
 8009e8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d059      	beq.n	8009f4a <__multiply+0x142>
 8009e96:	6106      	str	r6, [r0, #16]
 8009e98:	b005      	add	sp, #20
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	f843 2b04 	str.w	r2, [r3], #4
 8009ea2:	e7d8      	b.n	8009e56 <__multiply+0x4e>
 8009ea4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ea8:	f1ba 0f00 	cmp.w	sl, #0
 8009eac:	d023      	beq.n	8009ef6 <__multiply+0xee>
 8009eae:	46a9      	mov	r9, r5
 8009eb0:	f04f 0c00 	mov.w	ip, #0
 8009eb4:	f104 0e14 	add.w	lr, r4, #20
 8009eb8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ebc:	f8d9 1000 	ldr.w	r1, [r9]
 8009ec0:	fa1f fb82 	uxth.w	fp, r2
 8009ec4:	b289      	uxth	r1, r1
 8009ec6:	fb0a 110b 	mla	r1, sl, fp, r1
 8009eca:	4461      	add	r1, ip
 8009ecc:	f8d9 c000 	ldr.w	ip, [r9]
 8009ed0:	0c12      	lsrs	r2, r2, #16
 8009ed2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009ed6:	fb0a c202 	mla	r2, sl, r2, ip
 8009eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ede:	b289      	uxth	r1, r1
 8009ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ee4:	4577      	cmp	r7, lr
 8009ee6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eea:	f849 1b04 	str.w	r1, [r9], #4
 8009eee:	d8e3      	bhi.n	8009eb8 <__multiply+0xb0>
 8009ef0:	9a01      	ldr	r2, [sp, #4]
 8009ef2:	f845 c002 	str.w	ip, [r5, r2]
 8009ef6:	9a03      	ldr	r2, [sp, #12]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009efe:	f1b9 0f00 	cmp.w	r9, #0
 8009f02:	d020      	beq.n	8009f46 <__multiply+0x13e>
 8009f04:	46ae      	mov	lr, r5
 8009f06:	f04f 0a00 	mov.w	sl, #0
 8009f0a:	6829      	ldr	r1, [r5, #0]
 8009f0c:	f104 0c14 	add.w	ip, r4, #20
 8009f10:	f8bc b000 	ldrh.w	fp, [ip]
 8009f14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f18:	b289      	uxth	r1, r1
 8009f1a:	fb09 220b 	mla	r2, r9, fp, r2
 8009f1e:	4492      	add	sl, r2
 8009f20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f24:	f84e 1b04 	str.w	r1, [lr], #4
 8009f28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f2c:	f8be 1000 	ldrh.w	r1, [lr]
 8009f30:	0c12      	lsrs	r2, r2, #16
 8009f32:	fb09 1102 	mla	r1, r9, r2, r1
 8009f36:	4567      	cmp	r7, ip
 8009f38:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f40:	d8e6      	bhi.n	8009f10 <__multiply+0x108>
 8009f42:	9a01      	ldr	r2, [sp, #4]
 8009f44:	50a9      	str	r1, [r5, r2]
 8009f46:	3504      	adds	r5, #4
 8009f48:	e79b      	b.n	8009e82 <__multiply+0x7a>
 8009f4a:	3e01      	subs	r6, #1
 8009f4c:	e79d      	b.n	8009e8a <__multiply+0x82>
 8009f4e:	bf00      	nop
 8009f50:	0800ba04 	.word	0x0800ba04
 8009f54:	0800ba15 	.word	0x0800ba15

08009f58 <__pow5mult>:
 8009f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f5c:	4615      	mov	r5, r2
 8009f5e:	f012 0203 	ands.w	r2, r2, #3
 8009f62:	4606      	mov	r6, r0
 8009f64:	460f      	mov	r7, r1
 8009f66:	d007      	beq.n	8009f78 <__pow5mult+0x20>
 8009f68:	4c25      	ldr	r4, [pc, #148]	; (800a000 <__pow5mult+0xa8>)
 8009f6a:	3a01      	subs	r2, #1
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f72:	f7ff fe9f 	bl	8009cb4 <__multadd>
 8009f76:	4607      	mov	r7, r0
 8009f78:	10ad      	asrs	r5, r5, #2
 8009f7a:	d03d      	beq.n	8009ff8 <__pow5mult+0xa0>
 8009f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f7e:	b97c      	cbnz	r4, 8009fa0 <__pow5mult+0x48>
 8009f80:	2010      	movs	r0, #16
 8009f82:	f7ff fe1f 	bl	8009bc4 <malloc>
 8009f86:	4602      	mov	r2, r0
 8009f88:	6270      	str	r0, [r6, #36]	; 0x24
 8009f8a:	b928      	cbnz	r0, 8009f98 <__pow5mult+0x40>
 8009f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f90:	4b1c      	ldr	r3, [pc, #112]	; (800a004 <__pow5mult+0xac>)
 8009f92:	481d      	ldr	r0, [pc, #116]	; (800a008 <__pow5mult+0xb0>)
 8009f94:	f000 fc0a 	bl	800a7ac <__assert_func>
 8009f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f9c:	6004      	str	r4, [r0, #0]
 8009f9e:	60c4      	str	r4, [r0, #12]
 8009fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fa8:	b94c      	cbnz	r4, 8009fbe <__pow5mult+0x66>
 8009faa:	f240 2171 	movw	r1, #625	; 0x271
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f7ff ff14 	bl	8009ddc <__i2b>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fbc:	6003      	str	r3, [r0, #0]
 8009fbe:	f04f 0900 	mov.w	r9, #0
 8009fc2:	07eb      	lsls	r3, r5, #31
 8009fc4:	d50a      	bpl.n	8009fdc <__pow5mult+0x84>
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7ff ff1c 	bl	8009e08 <__multiply>
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7ff fe4b 	bl	8009c70 <_Bfree>
 8009fda:	4647      	mov	r7, r8
 8009fdc:	106d      	asrs	r5, r5, #1
 8009fde:	d00b      	beq.n	8009ff8 <__pow5mult+0xa0>
 8009fe0:	6820      	ldr	r0, [r4, #0]
 8009fe2:	b938      	cbnz	r0, 8009ff4 <__pow5mult+0x9c>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7ff ff0d 	bl	8009e08 <__multiply>
 8009fee:	6020      	str	r0, [r4, #0]
 8009ff0:	f8c0 9000 	str.w	r9, [r0]
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	e7e4      	b.n	8009fc2 <__pow5mult+0x6a>
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	bf00      	nop
 800a000:	0800bb68 	.word	0x0800bb68
 800a004:	0800b992 	.word	0x0800b992
 800a008:	0800ba15 	.word	0x0800ba15

0800a00c <__lshift>:
 800a00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a010:	460c      	mov	r4, r1
 800a012:	4607      	mov	r7, r0
 800a014:	4691      	mov	r9, r2
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	6849      	ldr	r1, [r1, #4]
 800a01a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a024:	f108 0601 	add.w	r6, r8, #1
 800a028:	42b3      	cmp	r3, r6
 800a02a:	db0b      	blt.n	800a044 <__lshift+0x38>
 800a02c:	4638      	mov	r0, r7
 800a02e:	f7ff fddf 	bl	8009bf0 <_Balloc>
 800a032:	4605      	mov	r5, r0
 800a034:	b948      	cbnz	r0, 800a04a <__lshift+0x3e>
 800a036:	4602      	mov	r2, r0
 800a038:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a03c:	4b29      	ldr	r3, [pc, #164]	; (800a0e4 <__lshift+0xd8>)
 800a03e:	482a      	ldr	r0, [pc, #168]	; (800a0e8 <__lshift+0xdc>)
 800a040:	f000 fbb4 	bl	800a7ac <__assert_func>
 800a044:	3101      	adds	r1, #1
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	e7ee      	b.n	800a028 <__lshift+0x1c>
 800a04a:	2300      	movs	r3, #0
 800a04c:	f100 0114 	add.w	r1, r0, #20
 800a050:	f100 0210 	add.w	r2, r0, #16
 800a054:	4618      	mov	r0, r3
 800a056:	4553      	cmp	r3, sl
 800a058:	db37      	blt.n	800a0ca <__lshift+0xbe>
 800a05a:	6920      	ldr	r0, [r4, #16]
 800a05c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a060:	f104 0314 	add.w	r3, r4, #20
 800a064:	f019 091f 	ands.w	r9, r9, #31
 800a068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a06c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a070:	d02f      	beq.n	800a0d2 <__lshift+0xc6>
 800a072:	468a      	mov	sl, r1
 800a074:	f04f 0c00 	mov.w	ip, #0
 800a078:	f1c9 0e20 	rsb	lr, r9, #32
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	fa02 f209 	lsl.w	r2, r2, r9
 800a082:	ea42 020c 	orr.w	r2, r2, ip
 800a086:	f84a 2b04 	str.w	r2, [sl], #4
 800a08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a08e:	4298      	cmp	r0, r3
 800a090:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a094:	d8f2      	bhi.n	800a07c <__lshift+0x70>
 800a096:	1b03      	subs	r3, r0, r4
 800a098:	3b15      	subs	r3, #21
 800a09a:	f023 0303 	bic.w	r3, r3, #3
 800a09e:	3304      	adds	r3, #4
 800a0a0:	f104 0215 	add.w	r2, r4, #21
 800a0a4:	4290      	cmp	r0, r2
 800a0a6:	bf38      	it	cc
 800a0a8:	2304      	movcc	r3, #4
 800a0aa:	f841 c003 	str.w	ip, [r1, r3]
 800a0ae:	f1bc 0f00 	cmp.w	ip, #0
 800a0b2:	d001      	beq.n	800a0b8 <__lshift+0xac>
 800a0b4:	f108 0602 	add.w	r6, r8, #2
 800a0b8:	3e01      	subs	r6, #1
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	4621      	mov	r1, r4
 800a0be:	612e      	str	r6, [r5, #16]
 800a0c0:	f7ff fdd6 	bl	8009c70 <_Bfree>
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	e7c1      	b.n	800a056 <__lshift+0x4a>
 800a0d2:	3904      	subs	r1, #4
 800a0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d8:	4298      	cmp	r0, r3
 800a0da:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0de:	d8f9      	bhi.n	800a0d4 <__lshift+0xc8>
 800a0e0:	e7ea      	b.n	800a0b8 <__lshift+0xac>
 800a0e2:	bf00      	nop
 800a0e4:	0800ba04 	.word	0x0800ba04
 800a0e8:	0800ba15 	.word	0x0800ba15

0800a0ec <__mcmp>:
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	690a      	ldr	r2, [r1, #16]
 800a0f0:	6900      	ldr	r0, [r0, #16]
 800a0f2:	b530      	push	{r4, r5, lr}
 800a0f4:	1a80      	subs	r0, r0, r2
 800a0f6:	d10d      	bne.n	800a114 <__mcmp+0x28>
 800a0f8:	3314      	adds	r3, #20
 800a0fa:	3114      	adds	r1, #20
 800a0fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a10c:	4295      	cmp	r5, r2
 800a10e:	d002      	beq.n	800a116 <__mcmp+0x2a>
 800a110:	d304      	bcc.n	800a11c <__mcmp+0x30>
 800a112:	2001      	movs	r0, #1
 800a114:	bd30      	pop	{r4, r5, pc}
 800a116:	42a3      	cmp	r3, r4
 800a118:	d3f4      	bcc.n	800a104 <__mcmp+0x18>
 800a11a:	e7fb      	b.n	800a114 <__mcmp+0x28>
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	e7f8      	b.n	800a114 <__mcmp+0x28>
	...

0800a124 <__mdiff>:
 800a124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	460d      	mov	r5, r1
 800a12a:	4607      	mov	r7, r0
 800a12c:	4611      	mov	r1, r2
 800a12e:	4628      	mov	r0, r5
 800a130:	4614      	mov	r4, r2
 800a132:	f7ff ffdb 	bl	800a0ec <__mcmp>
 800a136:	1e06      	subs	r6, r0, #0
 800a138:	d111      	bne.n	800a15e <__mdiff+0x3a>
 800a13a:	4631      	mov	r1, r6
 800a13c:	4638      	mov	r0, r7
 800a13e:	f7ff fd57 	bl	8009bf0 <_Balloc>
 800a142:	4602      	mov	r2, r0
 800a144:	b928      	cbnz	r0, 800a152 <__mdiff+0x2e>
 800a146:	f240 2132 	movw	r1, #562	; 0x232
 800a14a:	4b3a      	ldr	r3, [pc, #232]	; (800a234 <__mdiff+0x110>)
 800a14c:	483a      	ldr	r0, [pc, #232]	; (800a238 <__mdiff+0x114>)
 800a14e:	f000 fb2d 	bl	800a7ac <__assert_func>
 800a152:	2301      	movs	r3, #1
 800a154:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a158:	4610      	mov	r0, r2
 800a15a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	bfa4      	itt	ge
 800a160:	4623      	movge	r3, r4
 800a162:	462c      	movge	r4, r5
 800a164:	4638      	mov	r0, r7
 800a166:	6861      	ldr	r1, [r4, #4]
 800a168:	bfa6      	itte	ge
 800a16a:	461d      	movge	r5, r3
 800a16c:	2600      	movge	r6, #0
 800a16e:	2601      	movlt	r6, #1
 800a170:	f7ff fd3e 	bl	8009bf0 <_Balloc>
 800a174:	4602      	mov	r2, r0
 800a176:	b918      	cbnz	r0, 800a180 <__mdiff+0x5c>
 800a178:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a17c:	4b2d      	ldr	r3, [pc, #180]	; (800a234 <__mdiff+0x110>)
 800a17e:	e7e5      	b.n	800a14c <__mdiff+0x28>
 800a180:	f102 0814 	add.w	r8, r2, #20
 800a184:	46c2      	mov	sl, r8
 800a186:	f04f 0c00 	mov.w	ip, #0
 800a18a:	6927      	ldr	r7, [r4, #16]
 800a18c:	60c6      	str	r6, [r0, #12]
 800a18e:	692e      	ldr	r6, [r5, #16]
 800a190:	f104 0014 	add.w	r0, r4, #20
 800a194:	f105 0914 	add.w	r9, r5, #20
 800a198:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a19c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a1a0:	3410      	adds	r4, #16
 800a1a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a1a6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1aa:	fa1f f18b 	uxth.w	r1, fp
 800a1ae:	448c      	add	ip, r1
 800a1b0:	b299      	uxth	r1, r3
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	ebac 0101 	sub.w	r1, ip, r1
 800a1b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a1c0:	b289      	uxth	r1, r1
 800a1c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a1c6:	454e      	cmp	r6, r9
 800a1c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a1cc:	f84a 3b04 	str.w	r3, [sl], #4
 800a1d0:	d8e7      	bhi.n	800a1a2 <__mdiff+0x7e>
 800a1d2:	1b73      	subs	r3, r6, r5
 800a1d4:	3b15      	subs	r3, #21
 800a1d6:	f023 0303 	bic.w	r3, r3, #3
 800a1da:	3515      	adds	r5, #21
 800a1dc:	3304      	adds	r3, #4
 800a1de:	42ae      	cmp	r6, r5
 800a1e0:	bf38      	it	cc
 800a1e2:	2304      	movcc	r3, #4
 800a1e4:	4418      	add	r0, r3
 800a1e6:	4443      	add	r3, r8
 800a1e8:	461e      	mov	r6, r3
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	4575      	cmp	r5, lr
 800a1ee:	d30e      	bcc.n	800a20e <__mdiff+0xea>
 800a1f0:	f10e 0103 	add.w	r1, lr, #3
 800a1f4:	1a09      	subs	r1, r1, r0
 800a1f6:	f021 0103 	bic.w	r1, r1, #3
 800a1fa:	3803      	subs	r0, #3
 800a1fc:	4586      	cmp	lr, r0
 800a1fe:	bf38      	it	cc
 800a200:	2100      	movcc	r1, #0
 800a202:	4419      	add	r1, r3
 800a204:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a208:	b18b      	cbz	r3, 800a22e <__mdiff+0x10a>
 800a20a:	6117      	str	r7, [r2, #16]
 800a20c:	e7a4      	b.n	800a158 <__mdiff+0x34>
 800a20e:	f855 8b04 	ldr.w	r8, [r5], #4
 800a212:	fa1f f188 	uxth.w	r1, r8
 800a216:	4461      	add	r1, ip
 800a218:	140c      	asrs	r4, r1, #16
 800a21a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a21e:	b289      	uxth	r1, r1
 800a220:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a224:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a228:	f846 1b04 	str.w	r1, [r6], #4
 800a22c:	e7de      	b.n	800a1ec <__mdiff+0xc8>
 800a22e:	3f01      	subs	r7, #1
 800a230:	e7e8      	b.n	800a204 <__mdiff+0xe0>
 800a232:	bf00      	nop
 800a234:	0800ba04 	.word	0x0800ba04
 800a238:	0800ba15 	.word	0x0800ba15

0800a23c <__d2b>:
 800a23c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a240:	2101      	movs	r1, #1
 800a242:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a246:	4690      	mov	r8, r2
 800a248:	461d      	mov	r5, r3
 800a24a:	f7ff fcd1 	bl	8009bf0 <_Balloc>
 800a24e:	4604      	mov	r4, r0
 800a250:	b930      	cbnz	r0, 800a260 <__d2b+0x24>
 800a252:	4602      	mov	r2, r0
 800a254:	f240 310a 	movw	r1, #778	; 0x30a
 800a258:	4b24      	ldr	r3, [pc, #144]	; (800a2ec <__d2b+0xb0>)
 800a25a:	4825      	ldr	r0, [pc, #148]	; (800a2f0 <__d2b+0xb4>)
 800a25c:	f000 faa6 	bl	800a7ac <__assert_func>
 800a260:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a264:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a268:	bb2d      	cbnz	r5, 800a2b6 <__d2b+0x7a>
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	f1b8 0300 	subs.w	r3, r8, #0
 800a270:	d026      	beq.n	800a2c0 <__d2b+0x84>
 800a272:	4668      	mov	r0, sp
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	f7ff fd83 	bl	8009d80 <__lo0bits>
 800a27a:	9900      	ldr	r1, [sp, #0]
 800a27c:	b1f0      	cbz	r0, 800a2bc <__d2b+0x80>
 800a27e:	9a01      	ldr	r2, [sp, #4]
 800a280:	f1c0 0320 	rsb	r3, r0, #32
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	430b      	orrs	r3, r1
 800a28a:	40c2      	lsrs	r2, r0
 800a28c:	6163      	str	r3, [r4, #20]
 800a28e:	9201      	str	r2, [sp, #4]
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	bf14      	ite	ne
 800a296:	2102      	movne	r1, #2
 800a298:	2101      	moveq	r1, #1
 800a29a:	61a3      	str	r3, [r4, #24]
 800a29c:	6121      	str	r1, [r4, #16]
 800a29e:	b1c5      	cbz	r5, 800a2d2 <__d2b+0x96>
 800a2a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2a4:	4405      	add	r5, r0
 800a2a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2aa:	603d      	str	r5, [r7, #0]
 800a2ac:	6030      	str	r0, [r6, #0]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	b002      	add	sp, #8
 800a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ba:	e7d6      	b.n	800a26a <__d2b+0x2e>
 800a2bc:	6161      	str	r1, [r4, #20]
 800a2be:	e7e7      	b.n	800a290 <__d2b+0x54>
 800a2c0:	a801      	add	r0, sp, #4
 800a2c2:	f7ff fd5d 	bl	8009d80 <__lo0bits>
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	9b01      	ldr	r3, [sp, #4]
 800a2ca:	6121      	str	r1, [r4, #16]
 800a2cc:	6163      	str	r3, [r4, #20]
 800a2ce:	3020      	adds	r0, #32
 800a2d0:	e7e5      	b.n	800a29e <__d2b+0x62>
 800a2d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a2d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2da:	6038      	str	r0, [r7, #0]
 800a2dc:	6918      	ldr	r0, [r3, #16]
 800a2de:	f7ff fd2f 	bl	8009d40 <__hi0bits>
 800a2e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a2e6:	6031      	str	r1, [r6, #0]
 800a2e8:	e7e1      	b.n	800a2ae <__d2b+0x72>
 800a2ea:	bf00      	nop
 800a2ec:	0800ba04 	.word	0x0800ba04
 800a2f0:	0800ba15 	.word	0x0800ba15

0800a2f4 <_calloc_r>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	fba1 5402 	umull	r5, r4, r1, r2
 800a2fa:	b934      	cbnz	r4, 800a30a <_calloc_r+0x16>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f000 f875 	bl	800a3ec <_malloc_r>
 800a302:	4606      	mov	r6, r0
 800a304:	b928      	cbnz	r0, 800a312 <_calloc_r+0x1e>
 800a306:	4630      	mov	r0, r6
 800a308:	bd70      	pop	{r4, r5, r6, pc}
 800a30a:	220c      	movs	r2, #12
 800a30c:	2600      	movs	r6, #0
 800a30e:	6002      	str	r2, [r0, #0]
 800a310:	e7f9      	b.n	800a306 <_calloc_r+0x12>
 800a312:	462a      	mov	r2, r5
 800a314:	4621      	mov	r1, r4
 800a316:	f7fe f8b1 	bl	800847c <memset>
 800a31a:	e7f4      	b.n	800a306 <_calloc_r+0x12>

0800a31c <_free_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4605      	mov	r5, r0
 800a320:	2900      	cmp	r1, #0
 800a322:	d040      	beq.n	800a3a6 <_free_r+0x8a>
 800a324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a328:	1f0c      	subs	r4, r1, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	bfb8      	it	lt
 800a32e:	18e4      	addlt	r4, r4, r3
 800a330:	f000 fa98 	bl	800a864 <__malloc_lock>
 800a334:	4a1c      	ldr	r2, [pc, #112]	; (800a3a8 <_free_r+0x8c>)
 800a336:	6813      	ldr	r3, [r2, #0]
 800a338:	b933      	cbnz	r3, 800a348 <_free_r+0x2c>
 800a33a:	6063      	str	r3, [r4, #4]
 800a33c:	6014      	str	r4, [r2, #0]
 800a33e:	4628      	mov	r0, r5
 800a340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a344:	f000 ba94 	b.w	800a870 <__malloc_unlock>
 800a348:	42a3      	cmp	r3, r4
 800a34a:	d908      	bls.n	800a35e <_free_r+0x42>
 800a34c:	6820      	ldr	r0, [r4, #0]
 800a34e:	1821      	adds	r1, r4, r0
 800a350:	428b      	cmp	r3, r1
 800a352:	bf01      	itttt	eq
 800a354:	6819      	ldreq	r1, [r3, #0]
 800a356:	685b      	ldreq	r3, [r3, #4]
 800a358:	1809      	addeq	r1, r1, r0
 800a35a:	6021      	streq	r1, [r4, #0]
 800a35c:	e7ed      	b.n	800a33a <_free_r+0x1e>
 800a35e:	461a      	mov	r2, r3
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	b10b      	cbz	r3, 800a368 <_free_r+0x4c>
 800a364:	42a3      	cmp	r3, r4
 800a366:	d9fa      	bls.n	800a35e <_free_r+0x42>
 800a368:	6811      	ldr	r1, [r2, #0]
 800a36a:	1850      	adds	r0, r2, r1
 800a36c:	42a0      	cmp	r0, r4
 800a36e:	d10b      	bne.n	800a388 <_free_r+0x6c>
 800a370:	6820      	ldr	r0, [r4, #0]
 800a372:	4401      	add	r1, r0
 800a374:	1850      	adds	r0, r2, r1
 800a376:	4283      	cmp	r3, r0
 800a378:	6011      	str	r1, [r2, #0]
 800a37a:	d1e0      	bne.n	800a33e <_free_r+0x22>
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	4401      	add	r1, r0
 800a382:	6011      	str	r1, [r2, #0]
 800a384:	6053      	str	r3, [r2, #4]
 800a386:	e7da      	b.n	800a33e <_free_r+0x22>
 800a388:	d902      	bls.n	800a390 <_free_r+0x74>
 800a38a:	230c      	movs	r3, #12
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	e7d6      	b.n	800a33e <_free_r+0x22>
 800a390:	6820      	ldr	r0, [r4, #0]
 800a392:	1821      	adds	r1, r4, r0
 800a394:	428b      	cmp	r3, r1
 800a396:	bf01      	itttt	eq
 800a398:	6819      	ldreq	r1, [r3, #0]
 800a39a:	685b      	ldreq	r3, [r3, #4]
 800a39c:	1809      	addeq	r1, r1, r0
 800a39e:	6021      	streq	r1, [r4, #0]
 800a3a0:	6063      	str	r3, [r4, #4]
 800a3a2:	6054      	str	r4, [r2, #4]
 800a3a4:	e7cb      	b.n	800a33e <_free_r+0x22>
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	200005f8 	.word	0x200005f8

0800a3ac <sbrk_aligned>:
 800a3ac:	b570      	push	{r4, r5, r6, lr}
 800a3ae:	4e0e      	ldr	r6, [pc, #56]	; (800a3e8 <sbrk_aligned+0x3c>)
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	6831      	ldr	r1, [r6, #0]
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	b911      	cbnz	r1, 800a3be <sbrk_aligned+0x12>
 800a3b8:	f000 f9e8 	bl	800a78c <_sbrk_r>
 800a3bc:	6030      	str	r0, [r6, #0]
 800a3be:	4621      	mov	r1, r4
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f000 f9e3 	bl	800a78c <_sbrk_r>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	d00a      	beq.n	800a3e0 <sbrk_aligned+0x34>
 800a3ca:	1cc4      	adds	r4, r0, #3
 800a3cc:	f024 0403 	bic.w	r4, r4, #3
 800a3d0:	42a0      	cmp	r0, r4
 800a3d2:	d007      	beq.n	800a3e4 <sbrk_aligned+0x38>
 800a3d4:	1a21      	subs	r1, r4, r0
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f000 f9d8 	bl	800a78c <_sbrk_r>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d101      	bne.n	800a3e4 <sbrk_aligned+0x38>
 800a3e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	200005fc 	.word	0x200005fc

0800a3ec <_malloc_r>:
 800a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f0:	1ccd      	adds	r5, r1, #3
 800a3f2:	f025 0503 	bic.w	r5, r5, #3
 800a3f6:	3508      	adds	r5, #8
 800a3f8:	2d0c      	cmp	r5, #12
 800a3fa:	bf38      	it	cc
 800a3fc:	250c      	movcc	r5, #12
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	4607      	mov	r7, r0
 800a402:	db01      	blt.n	800a408 <_malloc_r+0x1c>
 800a404:	42a9      	cmp	r1, r5
 800a406:	d905      	bls.n	800a414 <_malloc_r+0x28>
 800a408:	230c      	movs	r3, #12
 800a40a:	2600      	movs	r6, #0
 800a40c:	603b      	str	r3, [r7, #0]
 800a40e:	4630      	mov	r0, r6
 800a410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a414:	4e2e      	ldr	r6, [pc, #184]	; (800a4d0 <_malloc_r+0xe4>)
 800a416:	f000 fa25 	bl	800a864 <__malloc_lock>
 800a41a:	6833      	ldr	r3, [r6, #0]
 800a41c:	461c      	mov	r4, r3
 800a41e:	bb34      	cbnz	r4, 800a46e <_malloc_r+0x82>
 800a420:	4629      	mov	r1, r5
 800a422:	4638      	mov	r0, r7
 800a424:	f7ff ffc2 	bl	800a3ac <sbrk_aligned>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	4604      	mov	r4, r0
 800a42c:	d14d      	bne.n	800a4ca <_malloc_r+0xde>
 800a42e:	6834      	ldr	r4, [r6, #0]
 800a430:	4626      	mov	r6, r4
 800a432:	2e00      	cmp	r6, #0
 800a434:	d140      	bne.n	800a4b8 <_malloc_r+0xcc>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	4631      	mov	r1, r6
 800a43a:	4638      	mov	r0, r7
 800a43c:	eb04 0803 	add.w	r8, r4, r3
 800a440:	f000 f9a4 	bl	800a78c <_sbrk_r>
 800a444:	4580      	cmp	r8, r0
 800a446:	d13a      	bne.n	800a4be <_malloc_r+0xd2>
 800a448:	6821      	ldr	r1, [r4, #0]
 800a44a:	3503      	adds	r5, #3
 800a44c:	1a6d      	subs	r5, r5, r1
 800a44e:	f025 0503 	bic.w	r5, r5, #3
 800a452:	3508      	adds	r5, #8
 800a454:	2d0c      	cmp	r5, #12
 800a456:	bf38      	it	cc
 800a458:	250c      	movcc	r5, #12
 800a45a:	4638      	mov	r0, r7
 800a45c:	4629      	mov	r1, r5
 800a45e:	f7ff ffa5 	bl	800a3ac <sbrk_aligned>
 800a462:	3001      	adds	r0, #1
 800a464:	d02b      	beq.n	800a4be <_malloc_r+0xd2>
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	442b      	add	r3, r5
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	e00e      	b.n	800a48c <_malloc_r+0xa0>
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	1b52      	subs	r2, r2, r5
 800a472:	d41e      	bmi.n	800a4b2 <_malloc_r+0xc6>
 800a474:	2a0b      	cmp	r2, #11
 800a476:	d916      	bls.n	800a4a6 <_malloc_r+0xba>
 800a478:	1961      	adds	r1, r4, r5
 800a47a:	42a3      	cmp	r3, r4
 800a47c:	6025      	str	r5, [r4, #0]
 800a47e:	bf18      	it	ne
 800a480:	6059      	strne	r1, [r3, #4]
 800a482:	6863      	ldr	r3, [r4, #4]
 800a484:	bf08      	it	eq
 800a486:	6031      	streq	r1, [r6, #0]
 800a488:	5162      	str	r2, [r4, r5]
 800a48a:	604b      	str	r3, [r1, #4]
 800a48c:	4638      	mov	r0, r7
 800a48e:	f104 060b 	add.w	r6, r4, #11
 800a492:	f000 f9ed 	bl	800a870 <__malloc_unlock>
 800a496:	f026 0607 	bic.w	r6, r6, #7
 800a49a:	1d23      	adds	r3, r4, #4
 800a49c:	1af2      	subs	r2, r6, r3
 800a49e:	d0b6      	beq.n	800a40e <_malloc_r+0x22>
 800a4a0:	1b9b      	subs	r3, r3, r6
 800a4a2:	50a3      	str	r3, [r4, r2]
 800a4a4:	e7b3      	b.n	800a40e <_malloc_r+0x22>
 800a4a6:	6862      	ldr	r2, [r4, #4]
 800a4a8:	42a3      	cmp	r3, r4
 800a4aa:	bf0c      	ite	eq
 800a4ac:	6032      	streq	r2, [r6, #0]
 800a4ae:	605a      	strne	r2, [r3, #4]
 800a4b0:	e7ec      	b.n	800a48c <_malloc_r+0xa0>
 800a4b2:	4623      	mov	r3, r4
 800a4b4:	6864      	ldr	r4, [r4, #4]
 800a4b6:	e7b2      	b.n	800a41e <_malloc_r+0x32>
 800a4b8:	4634      	mov	r4, r6
 800a4ba:	6876      	ldr	r6, [r6, #4]
 800a4bc:	e7b9      	b.n	800a432 <_malloc_r+0x46>
 800a4be:	230c      	movs	r3, #12
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	f000 f9d4 	bl	800a870 <__malloc_unlock>
 800a4c8:	e7a1      	b.n	800a40e <_malloc_r+0x22>
 800a4ca:	6025      	str	r5, [r4, #0]
 800a4cc:	e7de      	b.n	800a48c <_malloc_r+0xa0>
 800a4ce:	bf00      	nop
 800a4d0:	200005f8 	.word	0x200005f8

0800a4d4 <__ssputs_r>:
 800a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d8:	688e      	ldr	r6, [r1, #8]
 800a4da:	4682      	mov	sl, r0
 800a4dc:	429e      	cmp	r6, r3
 800a4de:	460c      	mov	r4, r1
 800a4e0:	4690      	mov	r8, r2
 800a4e2:	461f      	mov	r7, r3
 800a4e4:	d838      	bhi.n	800a558 <__ssputs_r+0x84>
 800a4e6:	898a      	ldrh	r2, [r1, #12]
 800a4e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4ec:	d032      	beq.n	800a554 <__ssputs_r+0x80>
 800a4ee:	6825      	ldr	r5, [r4, #0]
 800a4f0:	6909      	ldr	r1, [r1, #16]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	eba5 0901 	sub.w	r9, r5, r1
 800a4f8:	6965      	ldr	r5, [r4, #20]
 800a4fa:	444b      	add	r3, r9
 800a4fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a500:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a504:	106d      	asrs	r5, r5, #1
 800a506:	429d      	cmp	r5, r3
 800a508:	bf38      	it	cc
 800a50a:	461d      	movcc	r5, r3
 800a50c:	0553      	lsls	r3, r2, #21
 800a50e:	d531      	bpl.n	800a574 <__ssputs_r+0xa0>
 800a510:	4629      	mov	r1, r5
 800a512:	f7ff ff6b 	bl	800a3ec <_malloc_r>
 800a516:	4606      	mov	r6, r0
 800a518:	b950      	cbnz	r0, 800a530 <__ssputs_r+0x5c>
 800a51a:	230c      	movs	r3, #12
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	f8ca 3000 	str.w	r3, [sl]
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a52a:	81a3      	strh	r3, [r4, #12]
 800a52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a530:	464a      	mov	r2, r9
 800a532:	6921      	ldr	r1, [r4, #16]
 800a534:	f7fd ff94 	bl	8008460 <memcpy>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	6126      	str	r6, [r4, #16]
 800a546:	444e      	add	r6, r9
 800a548:	6026      	str	r6, [r4, #0]
 800a54a:	463e      	mov	r6, r7
 800a54c:	6165      	str	r5, [r4, #20]
 800a54e:	eba5 0509 	sub.w	r5, r5, r9
 800a552:	60a5      	str	r5, [r4, #8]
 800a554:	42be      	cmp	r6, r7
 800a556:	d900      	bls.n	800a55a <__ssputs_r+0x86>
 800a558:	463e      	mov	r6, r7
 800a55a:	4632      	mov	r2, r6
 800a55c:	4641      	mov	r1, r8
 800a55e:	6820      	ldr	r0, [r4, #0]
 800a560:	f000 f966 	bl	800a830 <memmove>
 800a564:	68a3      	ldr	r3, [r4, #8]
 800a566:	2000      	movs	r0, #0
 800a568:	1b9b      	subs	r3, r3, r6
 800a56a:	60a3      	str	r3, [r4, #8]
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	4433      	add	r3, r6
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	e7db      	b.n	800a52c <__ssputs_r+0x58>
 800a574:	462a      	mov	r2, r5
 800a576:	f000 f981 	bl	800a87c <_realloc_r>
 800a57a:	4606      	mov	r6, r0
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d1e1      	bne.n	800a544 <__ssputs_r+0x70>
 800a580:	4650      	mov	r0, sl
 800a582:	6921      	ldr	r1, [r4, #16]
 800a584:	f7ff feca 	bl	800a31c <_free_r>
 800a588:	e7c7      	b.n	800a51a <__ssputs_r+0x46>
	...

0800a58c <_svfiprintf_r>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	4698      	mov	r8, r3
 800a592:	898b      	ldrh	r3, [r1, #12]
 800a594:	4607      	mov	r7, r0
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	460d      	mov	r5, r1
 800a59a:	4614      	mov	r4, r2
 800a59c:	b09d      	sub	sp, #116	; 0x74
 800a59e:	d50e      	bpl.n	800a5be <_svfiprintf_r+0x32>
 800a5a0:	690b      	ldr	r3, [r1, #16]
 800a5a2:	b963      	cbnz	r3, 800a5be <_svfiprintf_r+0x32>
 800a5a4:	2140      	movs	r1, #64	; 0x40
 800a5a6:	f7ff ff21 	bl	800a3ec <_malloc_r>
 800a5aa:	6028      	str	r0, [r5, #0]
 800a5ac:	6128      	str	r0, [r5, #16]
 800a5ae:	b920      	cbnz	r0, 800a5ba <_svfiprintf_r+0x2e>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e0d1      	b.n	800a75e <_svfiprintf_r+0x1d2>
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	616b      	str	r3, [r5, #20]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c2:	2320      	movs	r3, #32
 800a5c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c8:	2330      	movs	r3, #48	; 0x30
 800a5ca:	f04f 0901 	mov.w	r9, #1
 800a5ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a778 <_svfiprintf_r+0x1ec>
 800a5d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5da:	4623      	mov	r3, r4
 800a5dc:	469a      	mov	sl, r3
 800a5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e2:	b10a      	cbz	r2, 800a5e8 <_svfiprintf_r+0x5c>
 800a5e4:	2a25      	cmp	r2, #37	; 0x25
 800a5e6:	d1f9      	bne.n	800a5dc <_svfiprintf_r+0x50>
 800a5e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ec:	d00b      	beq.n	800a606 <_svfiprintf_r+0x7a>
 800a5ee:	465b      	mov	r3, fp
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff ff6d 	bl	800a4d4 <__ssputs_r>
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	f000 80aa 	beq.w	800a754 <_svfiprintf_r+0x1c8>
 800a600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a602:	445a      	add	r2, fp
 800a604:	9209      	str	r2, [sp, #36]	; 0x24
 800a606:	f89a 3000 	ldrb.w	r3, [sl]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 80a2 	beq.w	800a754 <_svfiprintf_r+0x1c8>
 800a610:	2300      	movs	r3, #0
 800a612:	f04f 32ff 	mov.w	r2, #4294967295
 800a616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a61a:	f10a 0a01 	add.w	sl, sl, #1
 800a61e:	9304      	str	r3, [sp, #16]
 800a620:	9307      	str	r3, [sp, #28]
 800a622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a626:	931a      	str	r3, [sp, #104]	; 0x68
 800a628:	4654      	mov	r4, sl
 800a62a:	2205      	movs	r2, #5
 800a62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a630:	4851      	ldr	r0, [pc, #324]	; (800a778 <_svfiprintf_r+0x1ec>)
 800a632:	f7ff facf 	bl	8009bd4 <memchr>
 800a636:	9a04      	ldr	r2, [sp, #16]
 800a638:	b9d8      	cbnz	r0, 800a672 <_svfiprintf_r+0xe6>
 800a63a:	06d0      	lsls	r0, r2, #27
 800a63c:	bf44      	itt	mi
 800a63e:	2320      	movmi	r3, #32
 800a640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a644:	0711      	lsls	r1, r2, #28
 800a646:	bf44      	itt	mi
 800a648:	232b      	movmi	r3, #43	; 0x2b
 800a64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64e:	f89a 3000 	ldrb.w	r3, [sl]
 800a652:	2b2a      	cmp	r3, #42	; 0x2a
 800a654:	d015      	beq.n	800a682 <_svfiprintf_r+0xf6>
 800a656:	4654      	mov	r4, sl
 800a658:	2000      	movs	r0, #0
 800a65a:	f04f 0c0a 	mov.w	ip, #10
 800a65e:	9a07      	ldr	r2, [sp, #28]
 800a660:	4621      	mov	r1, r4
 800a662:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a666:	3b30      	subs	r3, #48	; 0x30
 800a668:	2b09      	cmp	r3, #9
 800a66a:	d94e      	bls.n	800a70a <_svfiprintf_r+0x17e>
 800a66c:	b1b0      	cbz	r0, 800a69c <_svfiprintf_r+0x110>
 800a66e:	9207      	str	r2, [sp, #28]
 800a670:	e014      	b.n	800a69c <_svfiprintf_r+0x110>
 800a672:	eba0 0308 	sub.w	r3, r0, r8
 800a676:	fa09 f303 	lsl.w	r3, r9, r3
 800a67a:	4313      	orrs	r3, r2
 800a67c:	46a2      	mov	sl, r4
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	e7d2      	b.n	800a628 <_svfiprintf_r+0x9c>
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	1d19      	adds	r1, r3, #4
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	9103      	str	r1, [sp, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bfbb      	ittet	lt
 800a68e:	425b      	neglt	r3, r3
 800a690:	f042 0202 	orrlt.w	r2, r2, #2
 800a694:	9307      	strge	r3, [sp, #28]
 800a696:	9307      	strlt	r3, [sp, #28]
 800a698:	bfb8      	it	lt
 800a69a:	9204      	strlt	r2, [sp, #16]
 800a69c:	7823      	ldrb	r3, [r4, #0]
 800a69e:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a0:	d10c      	bne.n	800a6bc <_svfiprintf_r+0x130>
 800a6a2:	7863      	ldrb	r3, [r4, #1]
 800a6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a6:	d135      	bne.n	800a714 <_svfiprintf_r+0x188>
 800a6a8:	9b03      	ldr	r3, [sp, #12]
 800a6aa:	3402      	adds	r4, #2
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	9203      	str	r2, [sp, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfb8      	it	lt
 800a6b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6ba:	9305      	str	r3, [sp, #20]
 800a6bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a77c <_svfiprintf_r+0x1f0>
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	7821      	ldrb	r1, [r4, #0]
 800a6c6:	f7ff fa85 	bl	8009bd4 <memchr>
 800a6ca:	b140      	cbz	r0, 800a6de <_svfiprintf_r+0x152>
 800a6cc:	2340      	movs	r3, #64	; 0x40
 800a6ce:	eba0 000a 	sub.w	r0, r0, sl
 800a6d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a6d6:	9b04      	ldr	r3, [sp, #16]
 800a6d8:	3401      	adds	r4, #1
 800a6da:	4303      	orrs	r3, r0
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e2:	2206      	movs	r2, #6
 800a6e4:	4826      	ldr	r0, [pc, #152]	; (800a780 <_svfiprintf_r+0x1f4>)
 800a6e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ea:	f7ff fa73 	bl	8009bd4 <memchr>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d038      	beq.n	800a764 <_svfiprintf_r+0x1d8>
 800a6f2:	4b24      	ldr	r3, [pc, #144]	; (800a784 <_svfiprintf_r+0x1f8>)
 800a6f4:	bb1b      	cbnz	r3, 800a73e <_svfiprintf_r+0x1b2>
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	3307      	adds	r3, #7
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	3308      	adds	r3, #8
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a704:	4433      	add	r3, r6
 800a706:	9309      	str	r3, [sp, #36]	; 0x24
 800a708:	e767      	b.n	800a5da <_svfiprintf_r+0x4e>
 800a70a:	460c      	mov	r4, r1
 800a70c:	2001      	movs	r0, #1
 800a70e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a712:	e7a5      	b.n	800a660 <_svfiprintf_r+0xd4>
 800a714:	2300      	movs	r3, #0
 800a716:	f04f 0c0a 	mov.w	ip, #10
 800a71a:	4619      	mov	r1, r3
 800a71c:	3401      	adds	r4, #1
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	4620      	mov	r0, r4
 800a722:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a726:	3a30      	subs	r2, #48	; 0x30
 800a728:	2a09      	cmp	r2, #9
 800a72a:	d903      	bls.n	800a734 <_svfiprintf_r+0x1a8>
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0c5      	beq.n	800a6bc <_svfiprintf_r+0x130>
 800a730:	9105      	str	r1, [sp, #20]
 800a732:	e7c3      	b.n	800a6bc <_svfiprintf_r+0x130>
 800a734:	4604      	mov	r4, r0
 800a736:	2301      	movs	r3, #1
 800a738:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73c:	e7f0      	b.n	800a720 <_svfiprintf_r+0x194>
 800a73e:	ab03      	add	r3, sp, #12
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	462a      	mov	r2, r5
 800a744:	4638      	mov	r0, r7
 800a746:	4b10      	ldr	r3, [pc, #64]	; (800a788 <_svfiprintf_r+0x1fc>)
 800a748:	a904      	add	r1, sp, #16
 800a74a:	f7fd ff3d 	bl	80085c8 <_printf_float>
 800a74e:	1c42      	adds	r2, r0, #1
 800a750:	4606      	mov	r6, r0
 800a752:	d1d6      	bne.n	800a702 <_svfiprintf_r+0x176>
 800a754:	89ab      	ldrh	r3, [r5, #12]
 800a756:	065b      	lsls	r3, r3, #25
 800a758:	f53f af2c 	bmi.w	800a5b4 <_svfiprintf_r+0x28>
 800a75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a75e:	b01d      	add	sp, #116	; 0x74
 800a760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a764:	ab03      	add	r3, sp, #12
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	462a      	mov	r2, r5
 800a76a:	4638      	mov	r0, r7
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <_svfiprintf_r+0x1fc>)
 800a76e:	a904      	add	r1, sp, #16
 800a770:	f7fe f9c6 	bl	8008b00 <_printf_i>
 800a774:	e7eb      	b.n	800a74e <_svfiprintf_r+0x1c2>
 800a776:	bf00      	nop
 800a778:	0800bb74 	.word	0x0800bb74
 800a77c:	0800bb7a 	.word	0x0800bb7a
 800a780:	0800bb7e 	.word	0x0800bb7e
 800a784:	080085c9 	.word	0x080085c9
 800a788:	0800a4d5 	.word	0x0800a4d5

0800a78c <_sbrk_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	2300      	movs	r3, #0
 800a790:	4d05      	ldr	r5, [pc, #20]	; (800a7a8 <_sbrk_r+0x1c>)
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	602b      	str	r3, [r5, #0]
 800a798:	f7f8 fa76 	bl	8002c88 <_sbrk>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_sbrk_r+0x1a>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_sbrk_r+0x1a>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	20000600 	.word	0x20000600

0800a7ac <__assert_func>:
 800a7ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ae:	4614      	mov	r4, r2
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <__assert_func+0x2c>)
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68d8      	ldr	r0, [r3, #12]
 800a7ba:	b14c      	cbz	r4, 800a7d0 <__assert_func+0x24>
 800a7bc:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <__assert_func+0x30>)
 800a7be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7c2:	9100      	str	r1, [sp, #0]
 800a7c4:	462b      	mov	r3, r5
 800a7c6:	4906      	ldr	r1, [pc, #24]	; (800a7e0 <__assert_func+0x34>)
 800a7c8:	f000 f80e 	bl	800a7e8 <fiprintf>
 800a7cc:	f000 faaa 	bl	800ad24 <abort>
 800a7d0:	4b04      	ldr	r3, [pc, #16]	; (800a7e4 <__assert_func+0x38>)
 800a7d2:	461c      	mov	r4, r3
 800a7d4:	e7f3      	b.n	800a7be <__assert_func+0x12>
 800a7d6:	bf00      	nop
 800a7d8:	20000014 	.word	0x20000014
 800a7dc:	0800bb85 	.word	0x0800bb85
 800a7e0:	0800bb92 	.word	0x0800bb92
 800a7e4:	0800bbc0 	.word	0x0800bbc0

0800a7e8 <fiprintf>:
 800a7e8:	b40e      	push	{r1, r2, r3}
 800a7ea:	b503      	push	{r0, r1, lr}
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	4805      	ldr	r0, [pc, #20]	; (800a808 <fiprintf+0x20>)
 800a7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f6:	6800      	ldr	r0, [r0, #0]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	f000 f895 	bl	800a928 <_vfiprintf_r>
 800a7fe:	b002      	add	sp, #8
 800a800:	f85d eb04 	ldr.w	lr, [sp], #4
 800a804:	b003      	add	sp, #12
 800a806:	4770      	bx	lr
 800a808:	20000014 	.word	0x20000014

0800a80c <__ascii_mbtowc>:
 800a80c:	b082      	sub	sp, #8
 800a80e:	b901      	cbnz	r1, 800a812 <__ascii_mbtowc+0x6>
 800a810:	a901      	add	r1, sp, #4
 800a812:	b142      	cbz	r2, 800a826 <__ascii_mbtowc+0x1a>
 800a814:	b14b      	cbz	r3, 800a82a <__ascii_mbtowc+0x1e>
 800a816:	7813      	ldrb	r3, [r2, #0]
 800a818:	600b      	str	r3, [r1, #0]
 800a81a:	7812      	ldrb	r2, [r2, #0]
 800a81c:	1e10      	subs	r0, r2, #0
 800a81e:	bf18      	it	ne
 800a820:	2001      	movne	r0, #1
 800a822:	b002      	add	sp, #8
 800a824:	4770      	bx	lr
 800a826:	4610      	mov	r0, r2
 800a828:	e7fb      	b.n	800a822 <__ascii_mbtowc+0x16>
 800a82a:	f06f 0001 	mvn.w	r0, #1
 800a82e:	e7f8      	b.n	800a822 <__ascii_mbtowc+0x16>

0800a830 <memmove>:
 800a830:	4288      	cmp	r0, r1
 800a832:	b510      	push	{r4, lr}
 800a834:	eb01 0402 	add.w	r4, r1, r2
 800a838:	d902      	bls.n	800a840 <memmove+0x10>
 800a83a:	4284      	cmp	r4, r0
 800a83c:	4623      	mov	r3, r4
 800a83e:	d807      	bhi.n	800a850 <memmove+0x20>
 800a840:	1e43      	subs	r3, r0, #1
 800a842:	42a1      	cmp	r1, r4
 800a844:	d008      	beq.n	800a858 <memmove+0x28>
 800a846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a84a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a84e:	e7f8      	b.n	800a842 <memmove+0x12>
 800a850:	4601      	mov	r1, r0
 800a852:	4402      	add	r2, r0
 800a854:	428a      	cmp	r2, r1
 800a856:	d100      	bne.n	800a85a <memmove+0x2a>
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a85e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a862:	e7f7      	b.n	800a854 <memmove+0x24>

0800a864 <__malloc_lock>:
 800a864:	4801      	ldr	r0, [pc, #4]	; (800a86c <__malloc_lock+0x8>)
 800a866:	f000 bc19 	b.w	800b09c <__retarget_lock_acquire_recursive>
 800a86a:	bf00      	nop
 800a86c:	20000604 	.word	0x20000604

0800a870 <__malloc_unlock>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__malloc_unlock+0x8>)
 800a872:	f000 bc14 	b.w	800b09e <__retarget_lock_release_recursive>
 800a876:	bf00      	nop
 800a878:	20000604 	.word	0x20000604

0800a87c <_realloc_r>:
 800a87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a880:	4680      	mov	r8, r0
 800a882:	4614      	mov	r4, r2
 800a884:	460e      	mov	r6, r1
 800a886:	b921      	cbnz	r1, 800a892 <_realloc_r+0x16>
 800a888:	4611      	mov	r1, r2
 800a88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88e:	f7ff bdad 	b.w	800a3ec <_malloc_r>
 800a892:	b92a      	cbnz	r2, 800a8a0 <_realloc_r+0x24>
 800a894:	f7ff fd42 	bl	800a31c <_free_r>
 800a898:	4625      	mov	r5, r4
 800a89a:	4628      	mov	r0, r5
 800a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a0:	f000 fc64 	bl	800b16c <_malloc_usable_size_r>
 800a8a4:	4284      	cmp	r4, r0
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	d802      	bhi.n	800a8b0 <_realloc_r+0x34>
 800a8aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8ae:	d812      	bhi.n	800a8d6 <_realloc_r+0x5a>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	f7ff fd9a 	bl	800a3ec <_malloc_r>
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d0ed      	beq.n	800a89a <_realloc_r+0x1e>
 800a8be:	42bc      	cmp	r4, r7
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	bf28      	it	cs
 800a8c6:	463a      	movcs	r2, r7
 800a8c8:	f7fd fdca 	bl	8008460 <memcpy>
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	f7ff fd24 	bl	800a31c <_free_r>
 800a8d4:	e7e1      	b.n	800a89a <_realloc_r+0x1e>
 800a8d6:	4635      	mov	r5, r6
 800a8d8:	e7df      	b.n	800a89a <_realloc_r+0x1e>

0800a8da <__sfputc_r>:
 800a8da:	6893      	ldr	r3, [r2, #8]
 800a8dc:	b410      	push	{r4}
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	6093      	str	r3, [r2, #8]
 800a8e4:	da07      	bge.n	800a8f6 <__sfputc_r+0x1c>
 800a8e6:	6994      	ldr	r4, [r2, #24]
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	db01      	blt.n	800a8f0 <__sfputc_r+0x16>
 800a8ec:	290a      	cmp	r1, #10
 800a8ee:	d102      	bne.n	800a8f6 <__sfputc_r+0x1c>
 800a8f0:	bc10      	pop	{r4}
 800a8f2:	f000 b949 	b.w	800ab88 <__swbuf_r>
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	1c58      	adds	r0, r3, #1
 800a8fa:	6010      	str	r0, [r2, #0]
 800a8fc:	7019      	strb	r1, [r3, #0]
 800a8fe:	4608      	mov	r0, r1
 800a900:	bc10      	pop	{r4}
 800a902:	4770      	bx	lr

0800a904 <__sfputs_r>:
 800a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a906:	4606      	mov	r6, r0
 800a908:	460f      	mov	r7, r1
 800a90a:	4614      	mov	r4, r2
 800a90c:	18d5      	adds	r5, r2, r3
 800a90e:	42ac      	cmp	r4, r5
 800a910:	d101      	bne.n	800a916 <__sfputs_r+0x12>
 800a912:	2000      	movs	r0, #0
 800a914:	e007      	b.n	800a926 <__sfputs_r+0x22>
 800a916:	463a      	mov	r2, r7
 800a918:	4630      	mov	r0, r6
 800a91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91e:	f7ff ffdc 	bl	800a8da <__sfputc_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	d1f3      	bne.n	800a90e <__sfputs_r+0xa>
 800a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a928 <_vfiprintf_r>:
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	460d      	mov	r5, r1
 800a92e:	4614      	mov	r4, r2
 800a930:	4698      	mov	r8, r3
 800a932:	4606      	mov	r6, r0
 800a934:	b09d      	sub	sp, #116	; 0x74
 800a936:	b118      	cbz	r0, 800a940 <_vfiprintf_r+0x18>
 800a938:	6983      	ldr	r3, [r0, #24]
 800a93a:	b90b      	cbnz	r3, 800a940 <_vfiprintf_r+0x18>
 800a93c:	f000 fb10 	bl	800af60 <__sinit>
 800a940:	4b89      	ldr	r3, [pc, #548]	; (800ab68 <_vfiprintf_r+0x240>)
 800a942:	429d      	cmp	r5, r3
 800a944:	d11b      	bne.n	800a97e <_vfiprintf_r+0x56>
 800a946:	6875      	ldr	r5, [r6, #4]
 800a948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a94a:	07d9      	lsls	r1, r3, #31
 800a94c:	d405      	bmi.n	800a95a <_vfiprintf_r+0x32>
 800a94e:	89ab      	ldrh	r3, [r5, #12]
 800a950:	059a      	lsls	r2, r3, #22
 800a952:	d402      	bmi.n	800a95a <_vfiprintf_r+0x32>
 800a954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a956:	f000 fba1 	bl	800b09c <__retarget_lock_acquire_recursive>
 800a95a:	89ab      	ldrh	r3, [r5, #12]
 800a95c:	071b      	lsls	r3, r3, #28
 800a95e:	d501      	bpl.n	800a964 <_vfiprintf_r+0x3c>
 800a960:	692b      	ldr	r3, [r5, #16]
 800a962:	b9eb      	cbnz	r3, 800a9a0 <_vfiprintf_r+0x78>
 800a964:	4629      	mov	r1, r5
 800a966:	4630      	mov	r0, r6
 800a968:	f000 f96e 	bl	800ac48 <__swsetup_r>
 800a96c:	b1c0      	cbz	r0, 800a9a0 <_vfiprintf_r+0x78>
 800a96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a970:	07dc      	lsls	r4, r3, #31
 800a972:	d50e      	bpl.n	800a992 <_vfiprintf_r+0x6a>
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	b01d      	add	sp, #116	; 0x74
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	4b7b      	ldr	r3, [pc, #492]	; (800ab6c <_vfiprintf_r+0x244>)
 800a980:	429d      	cmp	r5, r3
 800a982:	d101      	bne.n	800a988 <_vfiprintf_r+0x60>
 800a984:	68b5      	ldr	r5, [r6, #8]
 800a986:	e7df      	b.n	800a948 <_vfiprintf_r+0x20>
 800a988:	4b79      	ldr	r3, [pc, #484]	; (800ab70 <_vfiprintf_r+0x248>)
 800a98a:	429d      	cmp	r5, r3
 800a98c:	bf08      	it	eq
 800a98e:	68f5      	ldreq	r5, [r6, #12]
 800a990:	e7da      	b.n	800a948 <_vfiprintf_r+0x20>
 800a992:	89ab      	ldrh	r3, [r5, #12]
 800a994:	0598      	lsls	r0, r3, #22
 800a996:	d4ed      	bmi.n	800a974 <_vfiprintf_r+0x4c>
 800a998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a99a:	f000 fb80 	bl	800b09e <__retarget_lock_release_recursive>
 800a99e:	e7e9      	b.n	800a974 <_vfiprintf_r+0x4c>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a4:	2320      	movs	r3, #32
 800a9a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9aa:	2330      	movs	r3, #48	; 0x30
 800a9ac:	f04f 0901 	mov.w	r9, #1
 800a9b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab74 <_vfiprintf_r+0x24c>
 800a9b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9bc:	4623      	mov	r3, r4
 800a9be:	469a      	mov	sl, r3
 800a9c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c4:	b10a      	cbz	r2, 800a9ca <_vfiprintf_r+0xa2>
 800a9c6:	2a25      	cmp	r2, #37	; 0x25
 800a9c8:	d1f9      	bne.n	800a9be <_vfiprintf_r+0x96>
 800a9ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ce:	d00b      	beq.n	800a9e8 <_vfiprintf_r+0xc0>
 800a9d0:	465b      	mov	r3, fp
 800a9d2:	4622      	mov	r2, r4
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f7ff ff94 	bl	800a904 <__sfputs_r>
 800a9dc:	3001      	adds	r0, #1
 800a9de:	f000 80aa 	beq.w	800ab36 <_vfiprintf_r+0x20e>
 800a9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e4:	445a      	add	r2, fp
 800a9e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 80a2 	beq.w	800ab36 <_vfiprintf_r+0x20e>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fc:	f10a 0a01 	add.w	sl, sl, #1
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	9307      	str	r3, [sp, #28]
 800aa04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa08:	931a      	str	r3, [sp, #104]	; 0x68
 800aa0a:	4654      	mov	r4, sl
 800aa0c:	2205      	movs	r2, #5
 800aa0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa12:	4858      	ldr	r0, [pc, #352]	; (800ab74 <_vfiprintf_r+0x24c>)
 800aa14:	f7ff f8de 	bl	8009bd4 <memchr>
 800aa18:	9a04      	ldr	r2, [sp, #16]
 800aa1a:	b9d8      	cbnz	r0, 800aa54 <_vfiprintf_r+0x12c>
 800aa1c:	06d1      	lsls	r1, r2, #27
 800aa1e:	bf44      	itt	mi
 800aa20:	2320      	movmi	r3, #32
 800aa22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa26:	0713      	lsls	r3, r2, #28
 800aa28:	bf44      	itt	mi
 800aa2a:	232b      	movmi	r3, #43	; 0x2b
 800aa2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa30:	f89a 3000 	ldrb.w	r3, [sl]
 800aa34:	2b2a      	cmp	r3, #42	; 0x2a
 800aa36:	d015      	beq.n	800aa64 <_vfiprintf_r+0x13c>
 800aa38:	4654      	mov	r4, sl
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	f04f 0c0a 	mov.w	ip, #10
 800aa40:	9a07      	ldr	r2, [sp, #28]
 800aa42:	4621      	mov	r1, r4
 800aa44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa48:	3b30      	subs	r3, #48	; 0x30
 800aa4a:	2b09      	cmp	r3, #9
 800aa4c:	d94e      	bls.n	800aaec <_vfiprintf_r+0x1c4>
 800aa4e:	b1b0      	cbz	r0, 800aa7e <_vfiprintf_r+0x156>
 800aa50:	9207      	str	r2, [sp, #28]
 800aa52:	e014      	b.n	800aa7e <_vfiprintf_r+0x156>
 800aa54:	eba0 0308 	sub.w	r3, r0, r8
 800aa58:	fa09 f303 	lsl.w	r3, r9, r3
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	46a2      	mov	sl, r4
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	e7d2      	b.n	800aa0a <_vfiprintf_r+0xe2>
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	1d19      	adds	r1, r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	9103      	str	r1, [sp, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bfbb      	ittet	lt
 800aa70:	425b      	neglt	r3, r3
 800aa72:	f042 0202 	orrlt.w	r2, r2, #2
 800aa76:	9307      	strge	r3, [sp, #28]
 800aa78:	9307      	strlt	r3, [sp, #28]
 800aa7a:	bfb8      	it	lt
 800aa7c:	9204      	strlt	r2, [sp, #16]
 800aa7e:	7823      	ldrb	r3, [r4, #0]
 800aa80:	2b2e      	cmp	r3, #46	; 0x2e
 800aa82:	d10c      	bne.n	800aa9e <_vfiprintf_r+0x176>
 800aa84:	7863      	ldrb	r3, [r4, #1]
 800aa86:	2b2a      	cmp	r3, #42	; 0x2a
 800aa88:	d135      	bne.n	800aaf6 <_vfiprintf_r+0x1ce>
 800aa8a:	9b03      	ldr	r3, [sp, #12]
 800aa8c:	3402      	adds	r4, #2
 800aa8e:	1d1a      	adds	r2, r3, #4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	9203      	str	r2, [sp, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bfb8      	it	lt
 800aa98:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa9c:	9305      	str	r3, [sp, #20]
 800aa9e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ab78 <_vfiprintf_r+0x250>
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	4650      	mov	r0, sl
 800aaa6:	7821      	ldrb	r1, [r4, #0]
 800aaa8:	f7ff f894 	bl	8009bd4 <memchr>
 800aaac:	b140      	cbz	r0, 800aac0 <_vfiprintf_r+0x198>
 800aaae:	2340      	movs	r3, #64	; 0x40
 800aab0:	eba0 000a 	sub.w	r0, r0, sl
 800aab4:	fa03 f000 	lsl.w	r0, r3, r0
 800aab8:	9b04      	ldr	r3, [sp, #16]
 800aaba:	3401      	adds	r4, #1
 800aabc:	4303      	orrs	r3, r0
 800aabe:	9304      	str	r3, [sp, #16]
 800aac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac4:	2206      	movs	r2, #6
 800aac6:	482d      	ldr	r0, [pc, #180]	; (800ab7c <_vfiprintf_r+0x254>)
 800aac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aacc:	f7ff f882 	bl	8009bd4 <memchr>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d03f      	beq.n	800ab54 <_vfiprintf_r+0x22c>
 800aad4:	4b2a      	ldr	r3, [pc, #168]	; (800ab80 <_vfiprintf_r+0x258>)
 800aad6:	bb1b      	cbnz	r3, 800ab20 <_vfiprintf_r+0x1f8>
 800aad8:	9b03      	ldr	r3, [sp, #12]
 800aada:	3307      	adds	r3, #7
 800aadc:	f023 0307 	bic.w	r3, r3, #7
 800aae0:	3308      	adds	r3, #8
 800aae2:	9303      	str	r3, [sp, #12]
 800aae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae6:	443b      	add	r3, r7
 800aae8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaea:	e767      	b.n	800a9bc <_vfiprintf_r+0x94>
 800aaec:	460c      	mov	r4, r1
 800aaee:	2001      	movs	r0, #1
 800aaf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaf4:	e7a5      	b.n	800aa42 <_vfiprintf_r+0x11a>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f04f 0c0a 	mov.w	ip, #10
 800aafc:	4619      	mov	r1, r3
 800aafe:	3401      	adds	r4, #1
 800ab00:	9305      	str	r3, [sp, #20]
 800ab02:	4620      	mov	r0, r4
 800ab04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab08:	3a30      	subs	r2, #48	; 0x30
 800ab0a:	2a09      	cmp	r2, #9
 800ab0c:	d903      	bls.n	800ab16 <_vfiprintf_r+0x1ee>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0c5      	beq.n	800aa9e <_vfiprintf_r+0x176>
 800ab12:	9105      	str	r1, [sp, #20]
 800ab14:	e7c3      	b.n	800aa9e <_vfiprintf_r+0x176>
 800ab16:	4604      	mov	r4, r0
 800ab18:	2301      	movs	r3, #1
 800ab1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab1e:	e7f0      	b.n	800ab02 <_vfiprintf_r+0x1da>
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	462a      	mov	r2, r5
 800ab26:	4630      	mov	r0, r6
 800ab28:	4b16      	ldr	r3, [pc, #88]	; (800ab84 <_vfiprintf_r+0x25c>)
 800ab2a:	a904      	add	r1, sp, #16
 800ab2c:	f7fd fd4c 	bl	80085c8 <_printf_float>
 800ab30:	4607      	mov	r7, r0
 800ab32:	1c78      	adds	r0, r7, #1
 800ab34:	d1d6      	bne.n	800aae4 <_vfiprintf_r+0x1bc>
 800ab36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab38:	07d9      	lsls	r1, r3, #31
 800ab3a:	d405      	bmi.n	800ab48 <_vfiprintf_r+0x220>
 800ab3c:	89ab      	ldrh	r3, [r5, #12]
 800ab3e:	059a      	lsls	r2, r3, #22
 800ab40:	d402      	bmi.n	800ab48 <_vfiprintf_r+0x220>
 800ab42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab44:	f000 faab 	bl	800b09e <__retarget_lock_release_recursive>
 800ab48:	89ab      	ldrh	r3, [r5, #12]
 800ab4a:	065b      	lsls	r3, r3, #25
 800ab4c:	f53f af12 	bmi.w	800a974 <_vfiprintf_r+0x4c>
 800ab50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab52:	e711      	b.n	800a978 <_vfiprintf_r+0x50>
 800ab54:	ab03      	add	r3, sp, #12
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	462a      	mov	r2, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <_vfiprintf_r+0x25c>)
 800ab5e:	a904      	add	r1, sp, #16
 800ab60:	f7fd ffce 	bl	8008b00 <_printf_i>
 800ab64:	e7e4      	b.n	800ab30 <_vfiprintf_r+0x208>
 800ab66:	bf00      	nop
 800ab68:	0800bbec 	.word	0x0800bbec
 800ab6c:	0800bc0c 	.word	0x0800bc0c
 800ab70:	0800bbcc 	.word	0x0800bbcc
 800ab74:	0800bb74 	.word	0x0800bb74
 800ab78:	0800bb7a 	.word	0x0800bb7a
 800ab7c:	0800bb7e 	.word	0x0800bb7e
 800ab80:	080085c9 	.word	0x080085c9
 800ab84:	0800a905 	.word	0x0800a905

0800ab88 <__swbuf_r>:
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8a:	460e      	mov	r6, r1
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	4605      	mov	r5, r0
 800ab90:	b118      	cbz	r0, 800ab9a <__swbuf_r+0x12>
 800ab92:	6983      	ldr	r3, [r0, #24]
 800ab94:	b90b      	cbnz	r3, 800ab9a <__swbuf_r+0x12>
 800ab96:	f000 f9e3 	bl	800af60 <__sinit>
 800ab9a:	4b21      	ldr	r3, [pc, #132]	; (800ac20 <__swbuf_r+0x98>)
 800ab9c:	429c      	cmp	r4, r3
 800ab9e:	d12b      	bne.n	800abf8 <__swbuf_r+0x70>
 800aba0:	686c      	ldr	r4, [r5, #4]
 800aba2:	69a3      	ldr	r3, [r4, #24]
 800aba4:	60a3      	str	r3, [r4, #8]
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	071a      	lsls	r2, r3, #28
 800abaa:	d52f      	bpl.n	800ac0c <__swbuf_r+0x84>
 800abac:	6923      	ldr	r3, [r4, #16]
 800abae:	b36b      	cbz	r3, 800ac0c <__swbuf_r+0x84>
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	6820      	ldr	r0, [r4, #0]
 800abb4:	b2f6      	uxtb	r6, r6
 800abb6:	1ac0      	subs	r0, r0, r3
 800abb8:	6963      	ldr	r3, [r4, #20]
 800abba:	4637      	mov	r7, r6
 800abbc:	4283      	cmp	r3, r0
 800abbe:	dc04      	bgt.n	800abca <__swbuf_r+0x42>
 800abc0:	4621      	mov	r1, r4
 800abc2:	4628      	mov	r0, r5
 800abc4:	f000 f938 	bl	800ae38 <_fflush_r>
 800abc8:	bb30      	cbnz	r0, 800ac18 <__swbuf_r+0x90>
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	3001      	adds	r0, #1
 800abce:	3b01      	subs	r3, #1
 800abd0:	60a3      	str	r3, [r4, #8]
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	6022      	str	r2, [r4, #0]
 800abd8:	701e      	strb	r6, [r3, #0]
 800abda:	6963      	ldr	r3, [r4, #20]
 800abdc:	4283      	cmp	r3, r0
 800abde:	d004      	beq.n	800abea <__swbuf_r+0x62>
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	07db      	lsls	r3, r3, #31
 800abe4:	d506      	bpl.n	800abf4 <__swbuf_r+0x6c>
 800abe6:	2e0a      	cmp	r6, #10
 800abe8:	d104      	bne.n	800abf4 <__swbuf_r+0x6c>
 800abea:	4621      	mov	r1, r4
 800abec:	4628      	mov	r0, r5
 800abee:	f000 f923 	bl	800ae38 <_fflush_r>
 800abf2:	b988      	cbnz	r0, 800ac18 <__swbuf_r+0x90>
 800abf4:	4638      	mov	r0, r7
 800abf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <__swbuf_r+0x9c>)
 800abfa:	429c      	cmp	r4, r3
 800abfc:	d101      	bne.n	800ac02 <__swbuf_r+0x7a>
 800abfe:	68ac      	ldr	r4, [r5, #8]
 800ac00:	e7cf      	b.n	800aba2 <__swbuf_r+0x1a>
 800ac02:	4b09      	ldr	r3, [pc, #36]	; (800ac28 <__swbuf_r+0xa0>)
 800ac04:	429c      	cmp	r4, r3
 800ac06:	bf08      	it	eq
 800ac08:	68ec      	ldreq	r4, [r5, #12]
 800ac0a:	e7ca      	b.n	800aba2 <__swbuf_r+0x1a>
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 f81a 	bl	800ac48 <__swsetup_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d0cb      	beq.n	800abb0 <__swbuf_r+0x28>
 800ac18:	f04f 37ff 	mov.w	r7, #4294967295
 800ac1c:	e7ea      	b.n	800abf4 <__swbuf_r+0x6c>
 800ac1e:	bf00      	nop
 800ac20:	0800bbec 	.word	0x0800bbec
 800ac24:	0800bc0c 	.word	0x0800bc0c
 800ac28:	0800bbcc 	.word	0x0800bbcc

0800ac2c <__ascii_wctomb>:
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	4608      	mov	r0, r1
 800ac30:	b141      	cbz	r1, 800ac44 <__ascii_wctomb+0x18>
 800ac32:	2aff      	cmp	r2, #255	; 0xff
 800ac34:	d904      	bls.n	800ac40 <__ascii_wctomb+0x14>
 800ac36:	228a      	movs	r2, #138	; 0x8a
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	4770      	bx	lr
 800ac40:	2001      	movs	r0, #1
 800ac42:	700a      	strb	r2, [r1, #0]
 800ac44:	4770      	bx	lr
	...

0800ac48 <__swsetup_r>:
 800ac48:	4b32      	ldr	r3, [pc, #200]	; (800ad14 <__swsetup_r+0xcc>)
 800ac4a:	b570      	push	{r4, r5, r6, lr}
 800ac4c:	681d      	ldr	r5, [r3, #0]
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460c      	mov	r4, r1
 800ac52:	b125      	cbz	r5, 800ac5e <__swsetup_r+0x16>
 800ac54:	69ab      	ldr	r3, [r5, #24]
 800ac56:	b913      	cbnz	r3, 800ac5e <__swsetup_r+0x16>
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f000 f981 	bl	800af60 <__sinit>
 800ac5e:	4b2e      	ldr	r3, [pc, #184]	; (800ad18 <__swsetup_r+0xd0>)
 800ac60:	429c      	cmp	r4, r3
 800ac62:	d10f      	bne.n	800ac84 <__swsetup_r+0x3c>
 800ac64:	686c      	ldr	r4, [r5, #4]
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac6c:	0719      	lsls	r1, r3, #28
 800ac6e:	d42c      	bmi.n	800acca <__swsetup_r+0x82>
 800ac70:	06dd      	lsls	r5, r3, #27
 800ac72:	d411      	bmi.n	800ac98 <__swsetup_r+0x50>
 800ac74:	2309      	movs	r3, #9
 800ac76:	6033      	str	r3, [r6, #0]
 800ac78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	e03e      	b.n	800ad02 <__swsetup_r+0xba>
 800ac84:	4b25      	ldr	r3, [pc, #148]	; (800ad1c <__swsetup_r+0xd4>)
 800ac86:	429c      	cmp	r4, r3
 800ac88:	d101      	bne.n	800ac8e <__swsetup_r+0x46>
 800ac8a:	68ac      	ldr	r4, [r5, #8]
 800ac8c:	e7eb      	b.n	800ac66 <__swsetup_r+0x1e>
 800ac8e:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <__swsetup_r+0xd8>)
 800ac90:	429c      	cmp	r4, r3
 800ac92:	bf08      	it	eq
 800ac94:	68ec      	ldreq	r4, [r5, #12]
 800ac96:	e7e6      	b.n	800ac66 <__swsetup_r+0x1e>
 800ac98:	0758      	lsls	r0, r3, #29
 800ac9a:	d512      	bpl.n	800acc2 <__swsetup_r+0x7a>
 800ac9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac9e:	b141      	cbz	r1, 800acb2 <__swsetup_r+0x6a>
 800aca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aca4:	4299      	cmp	r1, r3
 800aca6:	d002      	beq.n	800acae <__swsetup_r+0x66>
 800aca8:	4630      	mov	r0, r6
 800acaa:	f7ff fb37 	bl	800a31c <_free_r>
 800acae:	2300      	movs	r3, #0
 800acb0:	6363      	str	r3, [r4, #52]	; 0x34
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acb8:	81a3      	strh	r3, [r4, #12]
 800acba:	2300      	movs	r3, #0
 800acbc:	6063      	str	r3, [r4, #4]
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f043 0308 	orr.w	r3, r3, #8
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	b94b      	cbnz	r3, 800ace2 <__swsetup_r+0x9a>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acd8:	d003      	beq.n	800ace2 <__swsetup_r+0x9a>
 800acda:	4621      	mov	r1, r4
 800acdc:	4630      	mov	r0, r6
 800acde:	f000 fa05 	bl	800b0ec <__smakebuf_r>
 800ace2:	89a0      	ldrh	r0, [r4, #12]
 800ace4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ace8:	f010 0301 	ands.w	r3, r0, #1
 800acec:	d00a      	beq.n	800ad04 <__swsetup_r+0xbc>
 800acee:	2300      	movs	r3, #0
 800acf0:	60a3      	str	r3, [r4, #8]
 800acf2:	6963      	ldr	r3, [r4, #20]
 800acf4:	425b      	negs	r3, r3
 800acf6:	61a3      	str	r3, [r4, #24]
 800acf8:	6923      	ldr	r3, [r4, #16]
 800acfa:	b943      	cbnz	r3, 800ad0e <__swsetup_r+0xc6>
 800acfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad00:	d1ba      	bne.n	800ac78 <__swsetup_r+0x30>
 800ad02:	bd70      	pop	{r4, r5, r6, pc}
 800ad04:	0781      	lsls	r1, r0, #30
 800ad06:	bf58      	it	pl
 800ad08:	6963      	ldrpl	r3, [r4, #20]
 800ad0a:	60a3      	str	r3, [r4, #8]
 800ad0c:	e7f4      	b.n	800acf8 <__swsetup_r+0xb0>
 800ad0e:	2000      	movs	r0, #0
 800ad10:	e7f7      	b.n	800ad02 <__swsetup_r+0xba>
 800ad12:	bf00      	nop
 800ad14:	20000014 	.word	0x20000014
 800ad18:	0800bbec 	.word	0x0800bbec
 800ad1c:	0800bc0c 	.word	0x0800bc0c
 800ad20:	0800bbcc 	.word	0x0800bbcc

0800ad24 <abort>:
 800ad24:	2006      	movs	r0, #6
 800ad26:	b508      	push	{r3, lr}
 800ad28:	f000 fa50 	bl	800b1cc <raise>
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	f7f7 ff38 	bl	8002ba2 <_exit>
	...

0800ad34 <__sflush_r>:
 800ad34:	898a      	ldrh	r2, [r1, #12]
 800ad36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad38:	4605      	mov	r5, r0
 800ad3a:	0710      	lsls	r0, r2, #28
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	d457      	bmi.n	800adf0 <__sflush_r+0xbc>
 800ad40:	684b      	ldr	r3, [r1, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	dc04      	bgt.n	800ad50 <__sflush_r+0x1c>
 800ad46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	dc01      	bgt.n	800ad50 <__sflush_r+0x1c>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	d0fa      	beq.n	800ad4c <__sflush_r+0x18>
 800ad56:	2300      	movs	r3, #0
 800ad58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad5c:	682f      	ldr	r7, [r5, #0]
 800ad5e:	602b      	str	r3, [r5, #0]
 800ad60:	d032      	beq.n	800adc8 <__sflush_r+0x94>
 800ad62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	075a      	lsls	r2, r3, #29
 800ad68:	d505      	bpl.n	800ad76 <__sflush_r+0x42>
 800ad6a:	6863      	ldr	r3, [r4, #4]
 800ad6c:	1ac0      	subs	r0, r0, r3
 800ad6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad70:	b10b      	cbz	r3, 800ad76 <__sflush_r+0x42>
 800ad72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad74:	1ac0      	subs	r0, r0, r3
 800ad76:	2300      	movs	r3, #0
 800ad78:	4602      	mov	r2, r0
 800ad7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	6a21      	ldr	r1, [r4, #32]
 800ad80:	47b0      	blx	r6
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	d106      	bne.n	800ad96 <__sflush_r+0x62>
 800ad88:	6829      	ldr	r1, [r5, #0]
 800ad8a:	291d      	cmp	r1, #29
 800ad8c:	d82c      	bhi.n	800ade8 <__sflush_r+0xb4>
 800ad8e:	4a29      	ldr	r2, [pc, #164]	; (800ae34 <__sflush_r+0x100>)
 800ad90:	40ca      	lsrs	r2, r1
 800ad92:	07d6      	lsls	r6, r2, #31
 800ad94:	d528      	bpl.n	800ade8 <__sflush_r+0xb4>
 800ad96:	2200      	movs	r2, #0
 800ad98:	6062      	str	r2, [r4, #4]
 800ad9a:	6922      	ldr	r2, [r4, #16]
 800ad9c:	04d9      	lsls	r1, r3, #19
 800ad9e:	6022      	str	r2, [r4, #0]
 800ada0:	d504      	bpl.n	800adac <__sflush_r+0x78>
 800ada2:	1c42      	adds	r2, r0, #1
 800ada4:	d101      	bne.n	800adaa <__sflush_r+0x76>
 800ada6:	682b      	ldr	r3, [r5, #0]
 800ada8:	b903      	cbnz	r3, 800adac <__sflush_r+0x78>
 800adaa:	6560      	str	r0, [r4, #84]	; 0x54
 800adac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adae:	602f      	str	r7, [r5, #0]
 800adb0:	2900      	cmp	r1, #0
 800adb2:	d0cb      	beq.n	800ad4c <__sflush_r+0x18>
 800adb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adb8:	4299      	cmp	r1, r3
 800adba:	d002      	beq.n	800adc2 <__sflush_r+0x8e>
 800adbc:	4628      	mov	r0, r5
 800adbe:	f7ff faad 	bl	800a31c <_free_r>
 800adc2:	2000      	movs	r0, #0
 800adc4:	6360      	str	r0, [r4, #52]	; 0x34
 800adc6:	e7c2      	b.n	800ad4e <__sflush_r+0x1a>
 800adc8:	6a21      	ldr	r1, [r4, #32]
 800adca:	2301      	movs	r3, #1
 800adcc:	4628      	mov	r0, r5
 800adce:	47b0      	blx	r6
 800add0:	1c41      	adds	r1, r0, #1
 800add2:	d1c7      	bne.n	800ad64 <__sflush_r+0x30>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0c4      	beq.n	800ad64 <__sflush_r+0x30>
 800adda:	2b1d      	cmp	r3, #29
 800addc:	d001      	beq.n	800ade2 <__sflush_r+0xae>
 800adde:	2b16      	cmp	r3, #22
 800ade0:	d101      	bne.n	800ade6 <__sflush_r+0xb2>
 800ade2:	602f      	str	r7, [r5, #0]
 800ade4:	e7b2      	b.n	800ad4c <__sflush_r+0x18>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adec:	81a3      	strh	r3, [r4, #12]
 800adee:	e7ae      	b.n	800ad4e <__sflush_r+0x1a>
 800adf0:	690f      	ldr	r7, [r1, #16]
 800adf2:	2f00      	cmp	r7, #0
 800adf4:	d0aa      	beq.n	800ad4c <__sflush_r+0x18>
 800adf6:	0793      	lsls	r3, r2, #30
 800adf8:	bf18      	it	ne
 800adfa:	2300      	movne	r3, #0
 800adfc:	680e      	ldr	r6, [r1, #0]
 800adfe:	bf08      	it	eq
 800ae00:	694b      	ldreq	r3, [r1, #20]
 800ae02:	1bf6      	subs	r6, r6, r7
 800ae04:	600f      	str	r7, [r1, #0]
 800ae06:	608b      	str	r3, [r1, #8]
 800ae08:	2e00      	cmp	r6, #0
 800ae0a:	dd9f      	ble.n	800ad4c <__sflush_r+0x18>
 800ae0c:	4633      	mov	r3, r6
 800ae0e:	463a      	mov	r2, r7
 800ae10:	4628      	mov	r0, r5
 800ae12:	6a21      	ldr	r1, [r4, #32]
 800ae14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ae18:	47e0      	blx	ip
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	dc06      	bgt.n	800ae2c <__sflush_r+0xf8>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295
 800ae24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	e790      	b.n	800ad4e <__sflush_r+0x1a>
 800ae2c:	4407      	add	r7, r0
 800ae2e:	1a36      	subs	r6, r6, r0
 800ae30:	e7ea      	b.n	800ae08 <__sflush_r+0xd4>
 800ae32:	bf00      	nop
 800ae34:	20400001 	.word	0x20400001

0800ae38 <_fflush_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	690b      	ldr	r3, [r1, #16]
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	b913      	cbnz	r3, 800ae48 <_fflush_r+0x10>
 800ae42:	2500      	movs	r5, #0
 800ae44:	4628      	mov	r0, r5
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	b118      	cbz	r0, 800ae52 <_fflush_r+0x1a>
 800ae4a:	6983      	ldr	r3, [r0, #24]
 800ae4c:	b90b      	cbnz	r3, 800ae52 <_fflush_r+0x1a>
 800ae4e:	f000 f887 	bl	800af60 <__sinit>
 800ae52:	4b14      	ldr	r3, [pc, #80]	; (800aea4 <_fflush_r+0x6c>)
 800ae54:	429c      	cmp	r4, r3
 800ae56:	d11b      	bne.n	800ae90 <_fflush_r+0x58>
 800ae58:	686c      	ldr	r4, [r5, #4]
 800ae5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d0ef      	beq.n	800ae42 <_fflush_r+0xa>
 800ae62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae64:	07d0      	lsls	r0, r2, #31
 800ae66:	d404      	bmi.n	800ae72 <_fflush_r+0x3a>
 800ae68:	0599      	lsls	r1, r3, #22
 800ae6a:	d402      	bmi.n	800ae72 <_fflush_r+0x3a>
 800ae6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae6e:	f000 f915 	bl	800b09c <__retarget_lock_acquire_recursive>
 800ae72:	4628      	mov	r0, r5
 800ae74:	4621      	mov	r1, r4
 800ae76:	f7ff ff5d 	bl	800ad34 <__sflush_r>
 800ae7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	07da      	lsls	r2, r3, #31
 800ae80:	d4e0      	bmi.n	800ae44 <_fflush_r+0xc>
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	059b      	lsls	r3, r3, #22
 800ae86:	d4dd      	bmi.n	800ae44 <_fflush_r+0xc>
 800ae88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8a:	f000 f908 	bl	800b09e <__retarget_lock_release_recursive>
 800ae8e:	e7d9      	b.n	800ae44 <_fflush_r+0xc>
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <_fflush_r+0x70>)
 800ae92:	429c      	cmp	r4, r3
 800ae94:	d101      	bne.n	800ae9a <_fflush_r+0x62>
 800ae96:	68ac      	ldr	r4, [r5, #8]
 800ae98:	e7df      	b.n	800ae5a <_fflush_r+0x22>
 800ae9a:	4b04      	ldr	r3, [pc, #16]	; (800aeac <_fflush_r+0x74>)
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	bf08      	it	eq
 800aea0:	68ec      	ldreq	r4, [r5, #12]
 800aea2:	e7da      	b.n	800ae5a <_fflush_r+0x22>
 800aea4:	0800bbec 	.word	0x0800bbec
 800aea8:	0800bc0c 	.word	0x0800bc0c
 800aeac:	0800bbcc 	.word	0x0800bbcc

0800aeb0 <std>:
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aebe:	6083      	str	r3, [r0, #8]
 800aec0:	8181      	strh	r1, [r0, #12]
 800aec2:	6643      	str	r3, [r0, #100]	; 0x64
 800aec4:	81c2      	strh	r2, [r0, #14]
 800aec6:	6183      	str	r3, [r0, #24]
 800aec8:	4619      	mov	r1, r3
 800aeca:	2208      	movs	r2, #8
 800aecc:	305c      	adds	r0, #92	; 0x5c
 800aece:	f7fd fad5 	bl	800847c <memset>
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <std+0x38>)
 800aed4:	6224      	str	r4, [r4, #32]
 800aed6:	6263      	str	r3, [r4, #36]	; 0x24
 800aed8:	4b04      	ldr	r3, [pc, #16]	; (800aeec <std+0x3c>)
 800aeda:	62a3      	str	r3, [r4, #40]	; 0x28
 800aedc:	4b04      	ldr	r3, [pc, #16]	; (800aef0 <std+0x40>)
 800aede:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aee0:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <std+0x44>)
 800aee2:	6323      	str	r3, [r4, #48]	; 0x30
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	bf00      	nop
 800aee8:	0800b205 	.word	0x0800b205
 800aeec:	0800b227 	.word	0x0800b227
 800aef0:	0800b25f 	.word	0x0800b25f
 800aef4:	0800b283 	.word	0x0800b283

0800aef8 <_cleanup_r>:
 800aef8:	4901      	ldr	r1, [pc, #4]	; (800af00 <_cleanup_r+0x8>)
 800aefa:	f000 b8af 	b.w	800b05c <_fwalk_reent>
 800aefe:	bf00      	nop
 800af00:	0800ae39 	.word	0x0800ae39

0800af04 <__sfmoreglue>:
 800af04:	2268      	movs	r2, #104	; 0x68
 800af06:	b570      	push	{r4, r5, r6, lr}
 800af08:	1e4d      	subs	r5, r1, #1
 800af0a:	4355      	muls	r5, r2
 800af0c:	460e      	mov	r6, r1
 800af0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af12:	f7ff fa6b 	bl	800a3ec <_malloc_r>
 800af16:	4604      	mov	r4, r0
 800af18:	b140      	cbz	r0, 800af2c <__sfmoreglue+0x28>
 800af1a:	2100      	movs	r1, #0
 800af1c:	e9c0 1600 	strd	r1, r6, [r0]
 800af20:	300c      	adds	r0, #12
 800af22:	60a0      	str	r0, [r4, #8]
 800af24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af28:	f7fd faa8 	bl	800847c <memset>
 800af2c:	4620      	mov	r0, r4
 800af2e:	bd70      	pop	{r4, r5, r6, pc}

0800af30 <__sfp_lock_acquire>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__sfp_lock_acquire+0x8>)
 800af32:	f000 b8b3 	b.w	800b09c <__retarget_lock_acquire_recursive>
 800af36:	bf00      	nop
 800af38:	20000605 	.word	0x20000605

0800af3c <__sfp_lock_release>:
 800af3c:	4801      	ldr	r0, [pc, #4]	; (800af44 <__sfp_lock_release+0x8>)
 800af3e:	f000 b8ae 	b.w	800b09e <__retarget_lock_release_recursive>
 800af42:	bf00      	nop
 800af44:	20000605 	.word	0x20000605

0800af48 <__sinit_lock_acquire>:
 800af48:	4801      	ldr	r0, [pc, #4]	; (800af50 <__sinit_lock_acquire+0x8>)
 800af4a:	f000 b8a7 	b.w	800b09c <__retarget_lock_acquire_recursive>
 800af4e:	bf00      	nop
 800af50:	20000606 	.word	0x20000606

0800af54 <__sinit_lock_release>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__sinit_lock_release+0x8>)
 800af56:	f000 b8a2 	b.w	800b09e <__retarget_lock_release_recursive>
 800af5a:	bf00      	nop
 800af5c:	20000606 	.word	0x20000606

0800af60 <__sinit>:
 800af60:	b510      	push	{r4, lr}
 800af62:	4604      	mov	r4, r0
 800af64:	f7ff fff0 	bl	800af48 <__sinit_lock_acquire>
 800af68:	69a3      	ldr	r3, [r4, #24]
 800af6a:	b11b      	cbz	r3, 800af74 <__sinit+0x14>
 800af6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af70:	f7ff bff0 	b.w	800af54 <__sinit_lock_release>
 800af74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af78:	6523      	str	r3, [r4, #80]	; 0x50
 800af7a:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <__sinit+0x68>)
 800af7c:	4a13      	ldr	r2, [pc, #76]	; (800afcc <__sinit+0x6c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	62a2      	str	r2, [r4, #40]	; 0x28
 800af82:	42a3      	cmp	r3, r4
 800af84:	bf08      	it	eq
 800af86:	2301      	moveq	r3, #1
 800af88:	4620      	mov	r0, r4
 800af8a:	bf08      	it	eq
 800af8c:	61a3      	streq	r3, [r4, #24]
 800af8e:	f000 f81f 	bl	800afd0 <__sfp>
 800af92:	6060      	str	r0, [r4, #4]
 800af94:	4620      	mov	r0, r4
 800af96:	f000 f81b 	bl	800afd0 <__sfp>
 800af9a:	60a0      	str	r0, [r4, #8]
 800af9c:	4620      	mov	r0, r4
 800af9e:	f000 f817 	bl	800afd0 <__sfp>
 800afa2:	2200      	movs	r2, #0
 800afa4:	2104      	movs	r1, #4
 800afa6:	60e0      	str	r0, [r4, #12]
 800afa8:	6860      	ldr	r0, [r4, #4]
 800afaa:	f7ff ff81 	bl	800aeb0 <std>
 800afae:	2201      	movs	r2, #1
 800afb0:	2109      	movs	r1, #9
 800afb2:	68a0      	ldr	r0, [r4, #8]
 800afb4:	f7ff ff7c 	bl	800aeb0 <std>
 800afb8:	2202      	movs	r2, #2
 800afba:	2112      	movs	r1, #18
 800afbc:	68e0      	ldr	r0, [r4, #12]
 800afbe:	f7ff ff77 	bl	800aeb0 <std>
 800afc2:	2301      	movs	r3, #1
 800afc4:	61a3      	str	r3, [r4, #24]
 800afc6:	e7d1      	b.n	800af6c <__sinit+0xc>
 800afc8:	0800b84c 	.word	0x0800b84c
 800afcc:	0800aef9 	.word	0x0800aef9

0800afd0 <__sfp>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	4607      	mov	r7, r0
 800afd4:	f7ff ffac 	bl	800af30 <__sfp_lock_acquire>
 800afd8:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <__sfp+0x84>)
 800afda:	681e      	ldr	r6, [r3, #0]
 800afdc:	69b3      	ldr	r3, [r6, #24]
 800afde:	b913      	cbnz	r3, 800afe6 <__sfp+0x16>
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7ff ffbd 	bl	800af60 <__sinit>
 800afe6:	3648      	adds	r6, #72	; 0x48
 800afe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afec:	3b01      	subs	r3, #1
 800afee:	d503      	bpl.n	800aff8 <__sfp+0x28>
 800aff0:	6833      	ldr	r3, [r6, #0]
 800aff2:	b30b      	cbz	r3, 800b038 <__sfp+0x68>
 800aff4:	6836      	ldr	r6, [r6, #0]
 800aff6:	e7f7      	b.n	800afe8 <__sfp+0x18>
 800aff8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800affc:	b9d5      	cbnz	r5, 800b034 <__sfp+0x64>
 800affe:	4b16      	ldr	r3, [pc, #88]	; (800b058 <__sfp+0x88>)
 800b000:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b004:	60e3      	str	r3, [r4, #12]
 800b006:	6665      	str	r5, [r4, #100]	; 0x64
 800b008:	f000 f847 	bl	800b09a <__retarget_lock_init_recursive>
 800b00c:	f7ff ff96 	bl	800af3c <__sfp_lock_release>
 800b010:	2208      	movs	r2, #8
 800b012:	4629      	mov	r1, r5
 800b014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b01c:	6025      	str	r5, [r4, #0]
 800b01e:	61a5      	str	r5, [r4, #24]
 800b020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b024:	f7fd fa2a 	bl	800847c <memset>
 800b028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b02c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b030:	4620      	mov	r0, r4
 800b032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b034:	3468      	adds	r4, #104	; 0x68
 800b036:	e7d9      	b.n	800afec <__sfp+0x1c>
 800b038:	2104      	movs	r1, #4
 800b03a:	4638      	mov	r0, r7
 800b03c:	f7ff ff62 	bl	800af04 <__sfmoreglue>
 800b040:	4604      	mov	r4, r0
 800b042:	6030      	str	r0, [r6, #0]
 800b044:	2800      	cmp	r0, #0
 800b046:	d1d5      	bne.n	800aff4 <__sfp+0x24>
 800b048:	f7ff ff78 	bl	800af3c <__sfp_lock_release>
 800b04c:	230c      	movs	r3, #12
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	e7ee      	b.n	800b030 <__sfp+0x60>
 800b052:	bf00      	nop
 800b054:	0800b84c 	.word	0x0800b84c
 800b058:	ffff0001 	.word	0xffff0001

0800b05c <_fwalk_reent>:
 800b05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b060:	4606      	mov	r6, r0
 800b062:	4688      	mov	r8, r1
 800b064:	2700      	movs	r7, #0
 800b066:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b06a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b06e:	f1b9 0901 	subs.w	r9, r9, #1
 800b072:	d505      	bpl.n	800b080 <_fwalk_reent+0x24>
 800b074:	6824      	ldr	r4, [r4, #0]
 800b076:	2c00      	cmp	r4, #0
 800b078:	d1f7      	bne.n	800b06a <_fwalk_reent+0xe>
 800b07a:	4638      	mov	r0, r7
 800b07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b080:	89ab      	ldrh	r3, [r5, #12]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d907      	bls.n	800b096 <_fwalk_reent+0x3a>
 800b086:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b08a:	3301      	adds	r3, #1
 800b08c:	d003      	beq.n	800b096 <_fwalk_reent+0x3a>
 800b08e:	4629      	mov	r1, r5
 800b090:	4630      	mov	r0, r6
 800b092:	47c0      	blx	r8
 800b094:	4307      	orrs	r7, r0
 800b096:	3568      	adds	r5, #104	; 0x68
 800b098:	e7e9      	b.n	800b06e <_fwalk_reent+0x12>

0800b09a <__retarget_lock_init_recursive>:
 800b09a:	4770      	bx	lr

0800b09c <__retarget_lock_acquire_recursive>:
 800b09c:	4770      	bx	lr

0800b09e <__retarget_lock_release_recursive>:
 800b09e:	4770      	bx	lr

0800b0a0 <__swhatbuf_r>:
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	460e      	mov	r6, r1
 800b0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	2900      	cmp	r1, #0
 800b0ac:	461d      	mov	r5, r3
 800b0ae:	b096      	sub	sp, #88	; 0x58
 800b0b0:	da08      	bge.n	800b0c4 <__swhatbuf_r+0x24>
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0b8:	602a      	str	r2, [r5, #0]
 800b0ba:	061a      	lsls	r2, r3, #24
 800b0bc:	d410      	bmi.n	800b0e0 <__swhatbuf_r+0x40>
 800b0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c2:	e00e      	b.n	800b0e2 <__swhatbuf_r+0x42>
 800b0c4:	466a      	mov	r2, sp
 800b0c6:	f000 f903 	bl	800b2d0 <_fstat_r>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	dbf1      	blt.n	800b0b2 <__swhatbuf_r+0x12>
 800b0ce:	9a01      	ldr	r2, [sp, #4]
 800b0d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0d8:	425a      	negs	r2, r3
 800b0da:	415a      	adcs	r2, r3
 800b0dc:	602a      	str	r2, [r5, #0]
 800b0de:	e7ee      	b.n	800b0be <__swhatbuf_r+0x1e>
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	b016      	add	sp, #88	; 0x58
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0ec <__smakebuf_r>:
 800b0ec:	898b      	ldrh	r3, [r1, #12]
 800b0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f0:	079d      	lsls	r5, r3, #30
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	d507      	bpl.n	800b108 <__smakebuf_r+0x1c>
 800b0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	6123      	str	r3, [r4, #16]
 800b100:	2301      	movs	r3, #1
 800b102:	6163      	str	r3, [r4, #20]
 800b104:	b002      	add	sp, #8
 800b106:	bd70      	pop	{r4, r5, r6, pc}
 800b108:	466a      	mov	r2, sp
 800b10a:	ab01      	add	r3, sp, #4
 800b10c:	f7ff ffc8 	bl	800b0a0 <__swhatbuf_r>
 800b110:	9900      	ldr	r1, [sp, #0]
 800b112:	4605      	mov	r5, r0
 800b114:	4630      	mov	r0, r6
 800b116:	f7ff f969 	bl	800a3ec <_malloc_r>
 800b11a:	b948      	cbnz	r0, 800b130 <__smakebuf_r+0x44>
 800b11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b120:	059a      	lsls	r2, r3, #22
 800b122:	d4ef      	bmi.n	800b104 <__smakebuf_r+0x18>
 800b124:	f023 0303 	bic.w	r3, r3, #3
 800b128:	f043 0302 	orr.w	r3, r3, #2
 800b12c:	81a3      	strh	r3, [r4, #12]
 800b12e:	e7e3      	b.n	800b0f8 <__smakebuf_r+0xc>
 800b130:	4b0d      	ldr	r3, [pc, #52]	; (800b168 <__smakebuf_r+0x7c>)
 800b132:	62b3      	str	r3, [r6, #40]	; 0x28
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	6020      	str	r0, [r4, #0]
 800b138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	9b00      	ldr	r3, [sp, #0]
 800b140:	6120      	str	r0, [r4, #16]
 800b142:	6163      	str	r3, [r4, #20]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	b15b      	cbz	r3, 800b160 <__smakebuf_r+0x74>
 800b148:	4630      	mov	r0, r6
 800b14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b14e:	f000 f8d1 	bl	800b2f4 <_isatty_r>
 800b152:	b128      	cbz	r0, 800b160 <__smakebuf_r+0x74>
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	f023 0303 	bic.w	r3, r3, #3
 800b15a:	f043 0301 	orr.w	r3, r3, #1
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	89a0      	ldrh	r0, [r4, #12]
 800b162:	4305      	orrs	r5, r0
 800b164:	81a5      	strh	r5, [r4, #12]
 800b166:	e7cd      	b.n	800b104 <__smakebuf_r+0x18>
 800b168:	0800aef9 	.word	0x0800aef9

0800b16c <_malloc_usable_size_r>:
 800b16c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b170:	1f18      	subs	r0, r3, #4
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfbc      	itt	lt
 800b176:	580b      	ldrlt	r3, [r1, r0]
 800b178:	18c0      	addlt	r0, r0, r3
 800b17a:	4770      	bx	lr

0800b17c <_raise_r>:
 800b17c:	291f      	cmp	r1, #31
 800b17e:	b538      	push	{r3, r4, r5, lr}
 800b180:	4604      	mov	r4, r0
 800b182:	460d      	mov	r5, r1
 800b184:	d904      	bls.n	800b190 <_raise_r+0x14>
 800b186:	2316      	movs	r3, #22
 800b188:	6003      	str	r3, [r0, #0]
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b192:	b112      	cbz	r2, 800b19a <_raise_r+0x1e>
 800b194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b198:	b94b      	cbnz	r3, 800b1ae <_raise_r+0x32>
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 f830 	bl	800b200 <_getpid_r>
 800b1a0:	462a      	mov	r2, r5
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1aa:	f000 b817 	b.w	800b1dc <_kill_r>
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d00a      	beq.n	800b1c8 <_raise_r+0x4c>
 800b1b2:	1c59      	adds	r1, r3, #1
 800b1b4:	d103      	bne.n	800b1be <_raise_r+0x42>
 800b1b6:	2316      	movs	r3, #22
 800b1b8:	6003      	str	r3, [r0, #0]
 800b1ba:	2001      	movs	r0, #1
 800b1bc:	e7e7      	b.n	800b18e <_raise_r+0x12>
 800b1be:	2400      	movs	r4, #0
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1c6:	4798      	blx	r3
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	e7e0      	b.n	800b18e <_raise_r+0x12>

0800b1cc <raise>:
 800b1cc:	4b02      	ldr	r3, [pc, #8]	; (800b1d8 <raise+0xc>)
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	f7ff bfd3 	b.w	800b17c <_raise_r>
 800b1d6:	bf00      	nop
 800b1d8:	20000014 	.word	0x20000014

0800b1dc <_kill_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4d06      	ldr	r5, [pc, #24]	; (800b1fc <_kill_r+0x20>)
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	f7f7 fcca 	bl	8002b82 <_kill>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	d102      	bne.n	800b1f8 <_kill_r+0x1c>
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	b103      	cbz	r3, 800b1f8 <_kill_r+0x1c>
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	bd38      	pop	{r3, r4, r5, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20000600 	.word	0x20000600

0800b200 <_getpid_r>:
 800b200:	f7f7 bcb8 	b.w	8002b74 <_getpid>

0800b204 <__sread>:
 800b204:	b510      	push	{r4, lr}
 800b206:	460c      	mov	r4, r1
 800b208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20c:	f000 f894 	bl	800b338 <_read_r>
 800b210:	2800      	cmp	r0, #0
 800b212:	bfab      	itete	ge
 800b214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b216:	89a3      	ldrhlt	r3, [r4, #12]
 800b218:	181b      	addge	r3, r3, r0
 800b21a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b21e:	bfac      	ite	ge
 800b220:	6563      	strge	r3, [r4, #84]	; 0x54
 800b222:	81a3      	strhlt	r3, [r4, #12]
 800b224:	bd10      	pop	{r4, pc}

0800b226 <__swrite>:
 800b226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b22a:	461f      	mov	r7, r3
 800b22c:	898b      	ldrh	r3, [r1, #12]
 800b22e:	4605      	mov	r5, r0
 800b230:	05db      	lsls	r3, r3, #23
 800b232:	460c      	mov	r4, r1
 800b234:	4616      	mov	r6, r2
 800b236:	d505      	bpl.n	800b244 <__swrite+0x1e>
 800b238:	2302      	movs	r3, #2
 800b23a:	2200      	movs	r2, #0
 800b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b240:	f000 f868 	bl	800b314 <_lseek_r>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	4632      	mov	r2, r6
 800b248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	4628      	mov	r0, r5
 800b250:	463b      	mov	r3, r7
 800b252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b25a:	f000 b817 	b.w	800b28c <_write_r>

0800b25e <__sseek>:
 800b25e:	b510      	push	{r4, lr}
 800b260:	460c      	mov	r4, r1
 800b262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b266:	f000 f855 	bl	800b314 <_lseek_r>
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	bf15      	itete	ne
 800b270:	6560      	strne	r0, [r4, #84]	; 0x54
 800b272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b27a:	81a3      	strheq	r3, [r4, #12]
 800b27c:	bf18      	it	ne
 800b27e:	81a3      	strhne	r3, [r4, #12]
 800b280:	bd10      	pop	{r4, pc}

0800b282 <__sclose>:
 800b282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b286:	f000 b813 	b.w	800b2b0 <_close_r>
	...

0800b28c <_write_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	2200      	movs	r2, #0
 800b296:	4d05      	ldr	r5, [pc, #20]	; (800b2ac <_write_r+0x20>)
 800b298:	602a      	str	r2, [r5, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f7f7 fca8 	bl	8002bf0 <_write>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_write_r+0x1e>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_write_r+0x1e>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	20000600 	.word	0x20000600

0800b2b0 <_close_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	4d05      	ldr	r5, [pc, #20]	; (800b2cc <_close_r+0x1c>)
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	602b      	str	r3, [r5, #0]
 800b2bc:	f7f7 fcb4 	bl	8002c28 <_close>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	d102      	bne.n	800b2ca <_close_r+0x1a>
 800b2c4:	682b      	ldr	r3, [r5, #0]
 800b2c6:	b103      	cbz	r3, 800b2ca <_close_r+0x1a>
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	20000600 	.word	0x20000600

0800b2d0 <_fstat_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4d06      	ldr	r5, [pc, #24]	; (800b2f0 <_fstat_r+0x20>)
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	4611      	mov	r1, r2
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	f7f7 fcae 	bl	8002c3e <_fstat>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	d102      	bne.n	800b2ec <_fstat_r+0x1c>
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	b103      	cbz	r3, 800b2ec <_fstat_r+0x1c>
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000600 	.word	0x20000600

0800b2f4 <_isatty_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4d05      	ldr	r5, [pc, #20]	; (800b310 <_isatty_r+0x1c>)
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	f7f7 fcac 	bl	8002c5c <_isatty>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d102      	bne.n	800b30e <_isatty_r+0x1a>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	b103      	cbz	r3, 800b30e <_isatty_r+0x1a>
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	20000600 	.word	0x20000600

0800b314 <_lseek_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4604      	mov	r4, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	4611      	mov	r1, r2
 800b31c:	2200      	movs	r2, #0
 800b31e:	4d05      	ldr	r5, [pc, #20]	; (800b334 <_lseek_r+0x20>)
 800b320:	602a      	str	r2, [r5, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f7f7 fca4 	bl	8002c70 <_lseek>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_lseek_r+0x1e>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_lseek_r+0x1e>
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	20000600 	.word	0x20000600

0800b338 <_read_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	4611      	mov	r1, r2
 800b340:	2200      	movs	r2, #0
 800b342:	4d05      	ldr	r5, [pc, #20]	; (800b358 <_read_r+0x20>)
 800b344:	602a      	str	r2, [r5, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	f7f7 fc35 	bl	8002bb6 <_read>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_read_r+0x1e>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	b103      	cbz	r3, 800b356 <_read_r+0x1e>
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	20000600 	.word	0x20000600

0800b35c <_init>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	bf00      	nop
 800b360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b362:	bc08      	pop	{r3}
 800b364:	469e      	mov	lr, r3
 800b366:	4770      	bx	lr

0800b368 <_fini>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	bf00      	nop
 800b36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b36e:	bc08      	pop	{r3}
 800b370:	469e      	mov	lr, r3
 800b372:	4770      	bx	lr
