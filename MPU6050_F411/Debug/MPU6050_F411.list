
MPU6050_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800ba88  0800ba88  0001ba88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c334  0800c334  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c334  0800c334  0001c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c33c  0800c33c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c33c  0800c33c  0001c33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200001e4  0800c52c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0800c52c  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186f1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000336d  00000000  00000000  00038905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003cff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb40  00000000  00000000  0003e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180a5  00000000  00000000  0005ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ccb  00000000  00000000  00072e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114af8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006774  00000000  00000000  00114b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba6c 	.word	0x0800ba6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800ba6c 	.word	0x0800ba6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f66:	edc7 0a00 	vstr	s1, [r7]
 8000f6a:	edd7 0a00 	vldr	s1, [r7]
 8000f6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f72:	f006 ff13 	bl	8007d9c <atan2f>
 8000f76:	eef0 7a40 	vmov.f32	s15, s0
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f92:	f006 fe79 	bl	8007c88 <cosf>
 8000f96:	eef0 7a40 	vmov.f32	s15, s0
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fae:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fb2:	f006 fead 	bl	8007d10 <sinf>
 8000fb6:	eef0 7a40 	vmov.f32	s15, s0
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fce:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fd2:	f006 fee5 	bl	8007da0 <sqrtf>
 8000fd6:	eef0 7a40 	vmov.f32	s15, s0
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN6KalmanC1Ef>:
#include <Kalman_cpp.h>
#include "math.h"

float PI = 3.1416;

Kalman::Kalman(float z0)
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	ed87 0a00 	vstr	s0, [r7]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <_ZN6KalmanC1Ef+0x34>)
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <_ZN6KalmanC1Ef+0x38>)
 8001002:	609a      	str	r2, [r3, #8]
{
	x = z0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	60da      	str	r2, [r3, #12]
}
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	3e051eb8 	.word	0x3e051eb8
 800101c:	447a0000 	.word	0x447a0000

08001020 <_ZN6Kalman6updateEf>:

float Kalman::update(float z)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	float D_ = D + Q;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103c:	edc7 7a03 	vstr	s15, [r7, #12]
	float K = D_ / (D_ + R);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	ed93 7a01 	vldr	s14, [r3, #4]
 8001046:	edd7 7a03 	vldr	s15, [r7, #12]
 800104a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001056:	edc7 7a02 	vstr	s15, [r7, #8]
	x = x + K * (z - x);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	edd3 7a03 	vldr	s15, [r3, #12]
 8001066:	edd7 6a00 	vldr	s13, [r7]
 800106a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800106e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	edc3 7a03 	vstr	s15, [r3, #12]
	D = (1 - K) * D_;
 8001080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001084:	edd7 7a02 	vldr	s15, [r7, #8]
 8001088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800108c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edc3 7a02 	vstr	s15, [r3, #8]
	return x;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	ee07 3a90 	vmov	s15, r3
}
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_ZN10GradFilterC1Effi>:

GradFilter::GradFilter(float beta_1, float eps_1, int count_to_change_params)
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <_ZN10GradFilterC1Effi+0x48>)
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ce:	609a      	str	r2, [r3, #8]
{
	beta1 = beta_1;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	605a      	str	r2, [r3, #4]
	eps1 = eps_1;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	60da      	str	r2, [r3, #12]
	cnt_thres = count_to_change_params;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	621a      	str	r2, [r3, #32]
	cnt = 0;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
}
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	41700000 	.word	0x41700000

080010fc <_ZN10GradFilter4initEf>:
{
	roll = atan2(gz, gx);
}

void GradFilter::init(float roll0)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	ed87 0a00 	vstr	s0, [r7]
	roll = roll0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	611a      	str	r2, [r3, #16]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <_ZN10GradFilter6updateEffff>:

float GradFilter::update(float wz, float gx, float gy, float delT)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	ed2d 8b02 	vpush	{d8}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6178      	str	r0, [r7, #20]
 8001128:	ed87 0a04 	vstr	s0, [r7, #16]
 800112c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001130:	ed87 1a02 	vstr	s2, [r7, #8]
 8001134:	edc7 1a01 	vstr	s3, [r7, #4]
	if (cnt == cnt_thres)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	69da      	ldr	r2, [r3, #28]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	429a      	cmp	r2, r3
 8001142:	d107      	bne.n	8001154 <_ZN10GradFilter6updateEffff+0x38>
	{
        beta = beta1;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
        eps = eps1;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	609a      	str	r2, [r3, #8]
	}
	float norm = sqrt(gx*gx + gy*gy);
 8001154:	edd7 7a03 	vldr	s15, [r7, #12]
 8001158:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800115c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001160:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	f7ff ff2a 	bl	8000fc4 <_ZSt4sqrtf>
 8001170:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	if(norm == 0)
 8001174:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	d133      	bne.n	80011ea <_ZN10GradFilter6updateEffff+0xce>
	{
		w_bias += eps*fDiv*delT;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	ed93 7a06 	vldr	s14, [r3, #24]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	edd3 6a02 	vldr	s13, [r3, #8]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	edd3 7a05 	vldr	s15, [r3, #20]
 8001194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001198:	edd7 7a01 	vldr	s15, [r7, #4]
 800119c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	edc3 7a06 	vstr	s15, [r3, #24]
		roll += (wz - w_bias - beta*fDiv)*delT;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80011b6:	edd7 6a04 	vldr	s13, [r7, #16]
 80011ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	ed93 6a00 	vldr	s12, [r3]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	edc3 7a04 	vstr	s15, [r3, #16]
		return roll;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	e0a0      	b.n	800132c <_ZN10GradFilter6updateEffff+0x210>
	}
	float gxNorm = gx/norm;
 80011ea:	edd7 6a03 	vldr	s13, [r7, #12]
 80011ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f6:	edc7 7a08 	vstr	s15, [r7, #32]
	float gyNorm = gy/norm;
 80011fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80011fe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001206:	edc7 7a07 	vstr	s15, [r7, #28]
	fDiv = sin(roll)*gyNorm - cos(roll)*gxNorm;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	f7ff fec6 	bl	8000fa4 <_ZSt3sinf>
 8001218:	eeb0 7a40 	vmov.f32	s14, s0
 800121c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001220:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	edd3 7a04 	vldr	s15, [r3, #16]
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	f7ff fea9 	bl	8000f84 <_ZSt3cosf>
 8001232:	eeb0 7a40 	vmov.f32	s14, s0
 8001236:	edd7 7a08 	vldr	s15, [r7, #32]
 800123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	edc3 7a05 	vstr	s15, [r3, #20]
	w_bias += eps*fDiv*delT;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	ed93 7a06 	vldr	s14, [r3, #24]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	edd3 6a02 	vldr	s13, [r3, #8]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	edd3 7a05 	vldr	s15, [r3, #20]
 800125a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800125e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	edc3 7a06 	vstr	s15, [r3, #24]
	float wCalib = wz - w_bias;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	edd3 7a06 	vldr	s15, [r3, #24]
 8001276:	ed97 7a04 	vldr	s14, [r7, #16]
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	edc7 7a06 	vstr	s15, [r7, #24]
	roll += (wCalib - beta*fDiv)*delT;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	ed93 7a04 	vldr	s14, [r3, #16]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	edd3 6a00 	vldr	s13, [r3]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	edd3 7a05 	vldr	s15, [r3, #20]
 8001294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001298:	edd7 6a06 	vldr	s13, [r7, #24]
 800129c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	edc3 7a04 	vstr	s15, [r3, #16]
	if (roll >= 2*PI)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <_ZN10GradFilter6updateEffff+0x224>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	db0c      	blt.n	80012e6 <_ZN10GradFilter6updateEffff+0x1ca>
	{
		roll -= 2*PI;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <_ZN10GradFilter6updateEffff+0x224>)
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	if (roll <= -2*PI)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <_ZN10GradFilter6updateEffff+0x224>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 80012f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	d80c      	bhi.n	800131e <_ZN10GradFilter6updateEffff+0x202>
	{
		roll += 2*PI;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	ed93 7a04 	vldr	s14, [r3, #16]
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <_ZN10GradFilter6updateEffff+0x224>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	cnt++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	61da      	str	r2, [r3, #28]
	return roll;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	691b      	ldr	r3, [r3, #16]
}
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	ecbd 8b02 	vpop	{d8}
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000

08001344 <MPU6050_Init>:
uint32_t countTest;

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd, MPU_ConfigTypeDef *mpuCon)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 800134e:	2254      	movs	r2, #84	; 0x54
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MPU6050_Init+0x24>)
 8001354:	f007 fbfe 	bl	8008b54 <memcpy>
	//MPU config handle to local library
	MpuConfig = mpuCon;
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <MPU6050_Init+0x28>)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6013      	str	r3, [r2, #0]
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000200 	.word	0x20000200
 800136c:	20000254 	.word	0x20000254

08001370 <I2C_Read>:

//2- i2c Read
HAL_StatusTypeDef I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
	uint8_t MPUADDR;
	uint8_t i2cBuf[2] = {0};
 8001380:	2300      	movs	r3, #0
 8001382:	81bb      	strh	r3, [r7, #12]
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001384:	23d0      	movs	r3, #208	; 0xd0
 8001386:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 100)!= HAL_OK) return HAL_ERROR;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	b299      	uxth	r1, r3
 8001390:	f107 020c 	add.w	r2, r7, #12
 8001394:	2364      	movs	r3, #100	; 0x64
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <I2C_Read+0x64>)
 800139c:	f003 fb0e 	bl	80049bc <HAL_I2C_Master_Transmit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <I2C_Read+0x3a>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <I2C_Read+0x5a>
	if(HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100)!= HAL_OK) return HAL_ERROR;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	b299      	uxth	r1, r3
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2264      	movs	r2, #100	; 0x64
 80013b4:	9200      	str	r2, [sp, #0]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <I2C_Read+0x64>)
 80013ba:	f003 fbfd 	bl	8004bb8 <HAL_I2C_Master_Receive>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <I2C_Read+0x58>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <I2C_Read+0x5a>
	return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000200 	.word	0x20000200

080013d8 <I2C_Write8>:

//3- i2c Write
HAL_StatusTypeDef I2C_Write8(uint8_t ADDR, uint8_t data)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2] = {0};
 80013e8:	2300      	movs	r3, #0
 80013ea:	81bb      	strh	r3, [r7, #12]
	i2cData[0] = ADDR;
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 80013f4:	23d0      	movs	r3, #208	; 0xd0
 80013f6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,5)!= HAL_OK) return HAL_ERROR;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	b299      	uxth	r1, r3
 80013fc:	f107 020c 	add.w	r2, r7, #12
 8001400:	2305      	movs	r3, #5
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <I2C_Write8+0x48>)
 8001408:	f003 fad8 	bl	80049bc <HAL_I2C_Master_Transmit>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C_Write8+0x3e>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <I2C_Write8+0x40>
	return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000200 	.word	0x20000200

08001424 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t Buffer = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
	float PI = 3.14159f;
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <MPU6050_Config+0x198>)
 8001430:	603b      	str	r3, [r7, #0]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	206b      	movs	r0, #107	; 0x6b
 8001436:	f7ff ffcf 	bl	80013d8 <I2C_Write8>
	HAL_Delay(100);
 800143a:	2064      	movs	r0, #100	; 0x64
 800143c:	f001 fbde 	bl	8002bfc <HAL_Delay>
	Buffer = MpuConfig ->ClockSource & 0x07; //change the 7th bits of register
 8001440:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <MPU6050_Config+0x19c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	71fb      	strb	r3, [r7, #7]
	Buffer |= (MpuConfig ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 800144c:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <MPU6050_Config+0x19c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	019b      	lsls	r3, r3, #6
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	b25a      	sxtb	r2, r3
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4313      	orrs	r3, r2
 8001462:	b25b      	sxtb	r3, r3
 8001464:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4619      	mov	r1, r3
 800146a:	206b      	movs	r0, #107	; 0x6b
 800146c:	f7ff ffb4 	bl	80013d8 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001470:	2064      	movs	r0, #100	; 0x64
 8001472:	f001 fbc3 	bl	8002bfc <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]
	Buffer = MpuConfig->CONFIG_DLPF & 0x07;
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <MPU6050_Config+0x19c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	78db      	ldrb	r3, [r3, #3]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(CONFIG_REG, Buffer);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4619      	mov	r1, r3
 800148a:	201a      	movs	r0, #26
 800148c:	f7ff ffa4 	bl	80013d8 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Gyro_Full_Scale << 3) & 0x18;
 8001494:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <MPU6050_Config+0x19c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0318 	and.w	r3, r3, #24
 80014a2:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4619      	mov	r1, r3
 80014a8:	201b      	movs	r0, #27
 80014aa:	f7ff ff95 	bl	80013d8 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Accel_Full_Scale << 3) & 0x18;
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <MPU6050_Config+0x19c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 0318 	and.w	r3, r3, #24
 80014c0:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4619      	mov	r1, r3
 80014c6:	201c      	movs	r0, #28
 80014c8:	f7ff ff86 	bl	80013d8 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f000 f887 	bl	80015e0 <MPU6050_Set_SMPRT_DIV>
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (MpuConfig->Accel_Full_Scale)
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <MPU6050_Config+0x19c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	789b      	ldrb	r3, [r3, #2]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d81f      	bhi.n	800151c <MPU6050_Config+0xf8>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <MPU6050_Config+0xc0>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	080014ff 	.word	0x080014ff
 80014ec:	08001509 	.word	0x08001509
 80014f0:	08001513 	.word	0x08001513
	{
		case AFS_SEL_2g:
			accelScalingFactor = 2.00f/32768.00f;
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <MPU6050_Config+0x1a0>)
 80014f6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80014fa:	601a      	str	r2, [r3, #0]
			break;
 80014fc:	e00f      	b.n	800151e <MPU6050_Config+0xfa>
		
		case AFS_SEL_4g:
			accelScalingFactor = 4.00f/32768.00f;
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MPU6050_Config+0x1a0>)
 8001500:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001504:	601a      	str	r2, [r3, #0]
				break;
 8001506:	e00a      	b.n	800151e <MPU6050_Config+0xfa>
		
		case AFS_SEL_8g:
			accelScalingFactor = 8.00f/32768.00f;
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MPU6050_Config+0x1a0>)
 800150a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800150e:	601a      	str	r2, [r3, #0]
			break;
 8001510:	e005      	b.n	800151e <MPU6050_Config+0xfa>
		
		case AFS_SEL_16g:
			accelScalingFactor = 16.00f/32768.00f;
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <MPU6050_Config+0x1a0>)
 8001514:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001518:	601a      	str	r2, [r3, #0]
			break;
 800151a:	e000      	b.n	800151e <MPU6050_Config+0xfa>
		
		default:
			break;
 800151c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (MpuConfig->Gyro_Full_Scale)
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <MPU6050_Config+0x19c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d843      	bhi.n	80015b0 <MPU6050_Config+0x18c>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <MPU6050_Config+0x10c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001541 	.word	0x08001541
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001579 	.word	0x08001579
 800153c:	08001595 	.word	0x08001595
	{
		case FS_SEL_250:
			gyroScalingFactor = (250.0f/32768.0f)*PI/180;
 8001540:	edd7 7a00 	vldr	s15, [r7]
 8001544:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015c8 <MPU6050_Config+0x1a4>
 8001548:	ee27 7a87 	vmul.f32	s14, s15, s14
 800154c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80015cc <MPU6050_Config+0x1a8>
 8001550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MPU6050_Config+0x1ac>)
 8001556:	edc3 7a00 	vstr	s15, [r3]
			break;
 800155a:	e02a      	b.n	80015b2 <MPU6050_Config+0x18e>
		
		case FS_SEL_500:
			gyroScalingFactor = (500.0f/32768.0f)*PI/180;
 800155c:	edd7 7a00 	vldr	s15, [r7]
 8001560:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80015d4 <MPU6050_Config+0x1b0>
 8001564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001568:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015cc <MPU6050_Config+0x1a8>
 800156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MPU6050_Config+0x1ac>)
 8001572:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001576:	e01c      	b.n	80015b2 <MPU6050_Config+0x18e>
		
		case FS_SEL_1000:
			gyroScalingFactor = (1000.0f/32768.0f)*PI/180;
 8001578:	edd7 7a00 	vldr	s15, [r7]
 800157c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80015d8 <MPU6050_Config+0x1b4>
 8001580:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001584:	eddf 6a11 	vldr	s13, [pc, #68]	; 80015cc <MPU6050_Config+0x1a8>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MPU6050_Config+0x1ac>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001592:	e00e      	b.n	80015b2 <MPU6050_Config+0x18e>
		
		case FS_SEL_2000:
			gyroScalingFactor = (2000.0f/32768.0f)*PI/180;
 8001594:	edd7 7a00 	vldr	s15, [r7]
 8001598:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015dc <MPU6050_Config+0x1b8>
 800159c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015a0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80015cc <MPU6050_Config+0x1a8>
 80015a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MPU6050_Config+0x1ac>)
 80015aa:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015ae:	e000      	b.n	80015b2 <MPU6050_Config+0x18e>
		
		default:
			break;
 80015b0:	bf00      	nop
	}
	
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40490fd0 	.word	0x40490fd0
 80015c0:	20000254 	.word	0x20000254
 80015c4:	20000258 	.word	0x20000258
 80015c8:	3bfa0000 	.word	0x3bfa0000
 80015cc:	43340000 	.word	0x43340000
 80015d0:	2000025c 	.word	0x2000025c
 80015d4:	3c7a0000 	.word	0x3c7a0000
 80015d8:	3cfa0000 	.word	0x3cfa0000
 80015dc:	3d7a0000 	.word	0x3d7a0000

080015e0 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4619      	mov	r1, r3
 80015ee:	2019      	movs	r0, #25
 80015f0:	f7ff fef2 	bl	80013d8 <I2C_Write8>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <ReadI2C_MPU>:
	I2C_Write8(CONFIG_REG, Buffer);	
}

//9- Get Accel Raw Data
HAL_StatusTypeDef ReadI2C_MPU(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
	uint8_t AcceArr[6];
	uint8_t GyroArr[6];
	if(I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6)== HAL_OK && I2C_Read(GYRO_XOUT_H_REG, GyroArr,6) == HAL_OK)
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2206      	movs	r2, #6
 8001608:	4619      	mov	r1, r3
 800160a:	203b      	movs	r0, #59	; 0x3b
 800160c:	f7ff feb0 	bl	8001370 <I2C_Read>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d159      	bne.n	80016ca <ReadI2C_MPU+0xce>
 8001616:	463b      	mov	r3, r7
 8001618:	2206      	movs	r2, #6
 800161a:	4619      	mov	r1, r3
 800161c:	2043      	movs	r0, #67	; 0x43
 800161e:	f7ff fea7 	bl	8001370 <I2C_Read>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d150      	bne.n	80016ca <ReadI2C_MPU+0xce>
	{
		//Accel Raw Data
		Accel.x = (int16_t)((AcceArr[0]<<8) | AcceArr[1]);
 8001628:	7a3b      	ldrb	r3, [r7, #8]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	7a7b      	ldrb	r3, [r7, #9]
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21a      	sxth	r2, r3
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <ReadI2C_MPU+0xf4>)
 8001638:	801a      	strh	r2, [r3, #0]
		Accel.y = (int16_t)((AcceArr[2]<<8) | AcceArr[3]);
 800163a:	7abb      	ldrb	r3, [r7, #10]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21a      	sxth	r2, r3
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <ReadI2C_MPU+0xf4>)
 800164a:	805a      	strh	r2, [r3, #2]
		Accel.z = (int16_t)((AcceArr[4]<<8) | AcceArr[5]);
 800164c:	7b3b      	ldrb	r3, [r7, #12]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	7b7b      	ldrb	r3, [r7, #13]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21a      	sxth	r2, r3
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <ReadI2C_MPU+0xf4>)
 800165c:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		Gyro.x = (int16_t)((GyroArr[0]<<8) | GyroArr[1]);
 800165e:	783b      	ldrb	r3, [r7, #0]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21a      	sxth	r2, r3
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <ReadI2C_MPU+0xf8>)
 800166e:	801a      	strh	r2, [r3, #0]
		Gyro.y = (int16_t)((GyroArr[2]<<8) | GyroArr[3]);
 8001670:	78bb      	ldrb	r3, [r7, #2]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <ReadI2C_MPU+0xf8>)
 8001680:	805a      	strh	r2, [r3, #2]
		Gyro.z = (int16_t)((GyroArr[4]<<8) | GyroArr[5]);
 8001682:	793b      	ldrb	r3, [r7, #4]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	797b      	ldrb	r3, [r7, #5]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <ReadI2C_MPU+0xf8>)
 8001692:	809a      	strh	r2, [r3, #4]

		if (Accel.x == 0 && Accel.y == 0 && Accel.z == 0)
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <ReadI2C_MPU+0xf4>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d121      	bne.n	80016e2 <ReadI2C_MPU+0xe6>
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <ReadI2C_MPU+0xf4>)
 80016a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11c      	bne.n	80016e2 <ReadI2C_MPU+0xe6>
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <ReadI2C_MPU+0xf4>)
 80016aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d117      	bne.n	80016e2 <ReadI2C_MPU+0xe6>
		{
			HAL_I2C_Init(&i2cHandler);
 80016b2:	4811      	ldr	r0, [pc, #68]	; (80016f8 <ReadI2C_MPU+0xfc>)
 80016b4:	f003 f83e 	bl	8004734 <HAL_I2C_Init>
			MPU6050_Config();
 80016b8:	f7ff feb4 	bl	8001424 <MPU6050_Config>
			errtest++;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <ReadI2C_MPU+0x100>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <ReadI2C_MPU+0x100>)
 80016c4:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00d      	b.n	80016e6 <ReadI2C_MPU+0xea>
		}
	}
	else
	{
		HAL_I2C_Init(&i2cHandler);
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <ReadI2C_MPU+0xfc>)
 80016cc:	f003 f832 	bl	8004734 <HAL_I2C_Init>
		MPU6050_Config();
 80016d0:	f7ff fea8 	bl	8001424 <MPU6050_Config>
		errtest++;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <ReadI2C_MPU+0x100>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <ReadI2C_MPU+0x100>)
 80016dc:	6013      	str	r3, [r2, #0]
		return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e001      	b.n	80016e6 <ReadI2C_MPU+0xea>
		if (Accel.x == 0 && Accel.y == 0 && Accel.z == 0)
 80016e2:	bf00      	nop
	}
	return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000260 	.word	0x20000260
 80016f4:	20000268 	.word	0x20000268
 80016f8:	20000200 	.word	0x20000200
 80016fc:	20000288 	.word	0x20000288

08001700 <CalibrateMPU6050>:
	return HAL_OK;
}

//11- Calibrate MPU6050
HAL_StatusTypeDef CalibrateMPU6050(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b090      	sub	sp, #64	; 0x40
 8001704:	af00      	add	r7, sp, #0
	float accelOffset[3] = {0}, gyroOffset[3] = {0};
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
	int32_t at[3] = {0}, wt[3] = {0};
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
	uint16_t count = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	87fb      	strh	r3, [r7, #62]	; 0x3e
	countTest = 0;	
 8001738:	4b48      	ldr	r3, [pc, #288]	; (800185c <CalibrateMPU6050+0x15c>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<20000; i++)
 800173e:	2300      	movs	r3, #0
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
 8001742:	e035      	b.n	80017b0 <CalibrateMPU6050+0xb0>
	{
		if(ReadI2C_MPU() == HAL_OK)
 8001744:	f7ff ff5a 	bl	80015fc <ReadI2C_MPU>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d12d      	bne.n	80017aa <CalibrateMPU6050+0xaa>
		{
			at[0] += Accel.x;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4a43      	ldr	r2, [pc, #268]	; (8001860 <CalibrateMPU6050+0x160>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4413      	add	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
			at[1] += Accel.y;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a40      	ldr	r2, [pc, #256]	; (8001860 <CalibrateMPU6050+0x160>)
 800175e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
			at[2] += (Accel.z - 16384);
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <CalibrateMPU6050+0x160>)
 800176a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800176e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001772:	4413      	add	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
			wt[0] += Gyro.x;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <CalibrateMPU6050+0x164>)
 800177a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800177e:	4413      	add	r3, r2
 8001780:	607b      	str	r3, [r7, #4]
			wt[1] += Gyro.y;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4a37      	ldr	r2, [pc, #220]	; (8001864 <CalibrateMPU6050+0x164>)
 8001786:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800178a:	4413      	add	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
			wt[2] += Gyro.z;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <CalibrateMPU6050+0x164>)
 8001792:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
			count++;
 800179a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800179c:	3301      	adds	r3, #1
 800179e:	87fb      	strh	r3, [r7, #62]	; 0x3e
			countTest++;
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <CalibrateMPU6050+0x15c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4a2d      	ldr	r2, [pc, #180]	; (800185c <CalibrateMPU6050+0x15c>)
 80017a8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<20000; i++)
 80017aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ac:	3301      	adds	r3, #1
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017b6:	4293      	cmp	r3, r2
 80017b8:	ddc4      	ble.n	8001744 <CalibrateMPU6050+0x44>
		}
	}
	if(count < 15000) return HAL_ERROR;
 80017ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80017bc:	f643 2297 	movw	r2, #14999	; 0x3a97
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d801      	bhi.n	80017c8 <CalibrateMPU6050+0xc8>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e045      	b.n	8001854 <CalibrateMPU6050+0x154>

	for(int i = 0; i < 3; i++){
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
 80017cc:	e036      	b.n	800183c <CalibrateMPU6050+0x13c>
		// calculate Acc offset
		accelOffset[i] = -(at[i]*1.0000f)/count;
 80017ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	3340      	adds	r3, #64	; 0x40
 80017d4:	443b      	add	r3, r7
 80017d6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e2:	eef1 6a67 	vneg.f32	s13, s15
 80017e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	3340      	adds	r3, #64	; 0x40
 80017fa:	443b      	add	r3, r7
 80017fc:	3b18      	subs	r3, #24
 80017fe:	edc3 7a00 	vstr	s15, [r3]
		// calculate Gyr offset
		gyroOffset[i] = -(wt[i]*1.0000f)/count;
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	3340      	adds	r3, #64	; 0x40
 8001808:	443b      	add	r3, r7
 800180a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	eef1 6a67 	vneg.f32	s13, s15
 800181a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	3340      	adds	r3, #64	; 0x40
 800182e:	443b      	add	r3, r7
 8001830:	3b24      	subs	r3, #36	; 0x24
 8001832:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 3; i++){
 8001836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001838:	3301      	adds	r3, #1
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	2b02      	cmp	r3, #2
 8001840:	ddc5      	ble.n	80017ce <CalibrateMPU6050+0xce>
	}
	
	Soft_SetOffset(accelOffset, gyroOffset);
 8001842:	f107 021c 	add.w	r2, r7, #28
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f80b 	bl	8001868 <Soft_SetOffset>
	
	return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3740      	adds	r7, #64	; 0x40
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000028c 	.word	0x2000028c
 8001860:	20000260 	.word	0x20000260
 8001864:	20000268 	.word	0x20000268

08001868 <Soft_SetOffset>:

//12 - Set offset Soft
void Soft_SetOffset(float accelOffset[3], float gyroOffset[3])
{
 8001868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800186c:	b08a      	sub	sp, #40	; 0x28
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001874:	2301      	movs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
	EraseInitStruct.TypeErase  = FLASH_TYPEERASE_SECTORS;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 800187c:	2307      	movs	r3, #7
 800187e:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbSectors    = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
	
	HAL_FLASH_Unlock();
 8001888:	f002 fb3c 	bl	8003f04 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fca6 	bl	80041e8 <HAL_FLASHEx_Erase>
	for(int i = 0; i < 3; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e03c      	b.n	800191c <Soft_SetOffset+0xb4>
	{
		accel_reg_bias[i] = accelOffset[i];
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4920      	ldr	r1, [pc, #128]	; (8001930 <Soft_SetOffset+0xc8>)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	601a      	str	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressFlash + 4*i, *((uint32_t*)&accel_reg_bias[i]));
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80018bc:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4619      	mov	r1, r3
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <Soft_SetOffset+0xc8>)
 80018ca:	4413      	add	r3, r2
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	461c      	mov	r4, r3
 80018d2:	4615      	mov	r5, r2
 80018d4:	4622      	mov	r2, r4
 80018d6:	462b      	mov	r3, r5
 80018d8:	2002      	movs	r0, #2
 80018da:	f002 fabf 	bl	8003e5c <HAL_FLASH_Program>
		gyr_reg_bias[i] = gyroOffset[i];
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4912      	ldr	r1, [pc, #72]	; (8001934 <Soft_SetOffset+0xcc>)
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	601a      	str	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressFlash + 4*i + 12, *((uint32_t*)&gyr_reg_bias[i]));
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <Soft_SetOffset+0xd0>)
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4619      	mov	r1, r3
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <Soft_SetOffset+0xcc>)
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	4698      	mov	r8, r3
 800190a:	4691      	mov	r9, r2
 800190c:	4642      	mov	r2, r8
 800190e:	464b      	mov	r3, r9
 8001910:	2002      	movs	r0, #2
 8001912:	f002 faa3 	bl	8003e5c <HAL_FLASH_Program>
	for(int i = 0; i < 3; i++)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	3301      	adds	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	2b02      	cmp	r3, #2
 8001920:	ddbf      	ble.n	80018a2 <Soft_SetOffset+0x3a>
	}
	HAL_FLASH_Lock();
 8001922:	f002 fb11 	bl	8003f48 <HAL_FLASH_Lock>
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001930:	20000270 	.word	0x20000270
 8001934:	2000027c 	.word	0x2000027c
 8001938:	02018003 	.word	0x02018003

0800193c <Read_MPU_Calc>:
	return rs;
}

//15. Read MPU values calculated
HAL_StatusTypeDef Read_MPU_Calc(float* acc, float* gyr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	if (ReadI2C_MPU() == HAL_OK)
 8001946:	f7ff fe59 	bl	80015fc <ReadI2C_MPU>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d17d      	bne.n	8001a4c <Read_MPU_Calc+0x110>
	{
		acc[0] = (Accel.x + accel_reg_bias[0]) * accelScalingFactor;
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <Read_MPU_Calc+0x11c>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <Read_MPU_Calc+0x120>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <Read_MPU_Calc+0x124>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edc3 7a00 	vstr	s15, [r3]
		acc[1] = (Accel.y + accel_reg_bias[1]) * accelScalingFactor;
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <Read_MPU_Calc+0x11c>)
 800197a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001986:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <Read_MPU_Calc+0x120>)
 8001988:	edd3 7a01 	vldr	s15, [r3, #4]
 800198c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <Read_MPU_Calc+0x124>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3304      	adds	r3, #4
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	edc3 7a00 	vstr	s15, [r3]
		acc[2] = (Accel.z + accel_reg_bias[2]) * accelScalingFactor;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <Read_MPU_Calc+0x11c>)
 80019a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <Read_MPU_Calc+0x120>)
 80019b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <Read_MPU_Calc+0x124>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3308      	adds	r3, #8
 80019c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c8:	edc3 7a00 	vstr	s15, [r3]
		gyr[0] = (Gyro.x + gyr_reg_bias[0]) * gyroScalingFactor;
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <Read_MPU_Calc+0x128>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <Read_MPU_Calc+0x12c>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <Read_MPU_Calc+0x130>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	edc3 7a00 	vstr	s15, [r3]
		gyr[1] = (Gyro.y + gyr_reg_bias[1]) * gyroScalingFactor;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <Read_MPU_Calc+0x128>)
 80019f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <Read_MPU_Calc+0x12c>)
 8001a04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <Read_MPU_Calc+0x130>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3304      	adds	r3, #4
 8001a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
		gyr[2] = (Gyro.z + gyr_reg_bias[2]) * gyroScalingFactor;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <Read_MPU_Calc+0x128>)
 8001a20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <Read_MPU_Calc+0x12c>)
 8001a2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <Read_MPU_Calc+0x130>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	3308      	adds	r3, #8
 8001a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a44:	edc3 7a00 	vstr	s15, [r3]
		return HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <Read_MPU_Calc+0x112>
	}
	return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000260 	.word	0x20000260
 8001a5c:	20000270 	.word	0x20000270
 8001a60:	20000258 	.word	0x20000258
 8001a64:	20000268 	.word	0x20000268
 8001a68:	2000027c 	.word	0x2000027c
 8001a6c:	2000025c 	.word	0x2000025c

08001a70 <Flash_Assign_Param>:
uint16_t *maxRFC;
uint16_t minRFC_default;
uint16_t maxRFC_default;

void Flash_Assign_Param(uint16_t *min_RFC, uint16_t *max_RFC, uint16_t min_RFC_default, uint16_t max_RFC_default)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	80fb      	strh	r3, [r7, #6]
 8001a82:	4613      	mov	r3, r2
 8001a84:	80bb      	strh	r3, [r7, #4]
	minRFC = min_RFC;
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <Flash_Assign_Param+0x3c>)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6013      	str	r3, [r2, #0]
	maxRFC = max_RFC;
 8001a8c:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <Flash_Assign_Param+0x40>)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6013      	str	r3, [r2, #0]
	minRFC_default = min_RFC_default;
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <Flash_Assign_Param+0x44>)
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	8013      	strh	r3, [r2, #0]
	maxRFC_default = max_RFC_default;
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <Flash_Assign_Param+0x48>)
 8001a9a:	88bb      	ldrh	r3, [r7, #4]
 8001a9c:	8013      	strh	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000290 	.word	0x20000290
 8001ab0:	20000294 	.word	0x20000294
 8001ab4:	20000298 	.word	0x20000298
 8001ab8:	2000029a 	.word	0x2000029a

08001abc <Flash_Soft_SetOffset>:

void Flash_Soft_SetOffset(int RFC_min, int RFC_max)
{
 8001abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ac0:	b088      	sub	sp, #32
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 8001adc:	f002 fa12 	bl	8003f04 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8001ae0:	f107 0208 	add.w	r2, r7, #8
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fb7c 	bl	80041e8 <HAL_FLASHEx_Erase>

	if(RFC_min >= 0)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db10      	blt.n	8001b18 <Flash_Soft_SetOffset+0x5c>
	{
		*minRFC = RFC_min;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <Flash_Soft_SetOffset+0x94>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	b292      	uxth	r2, r2
 8001afe:	801a      	strh	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressRFC, *((uint32_t*)minRFC));
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <Flash_Soft_SetOffset+0x94>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	4698      	mov	r8, r3
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	464b      	mov	r3, r9
 8001b10:	4910      	ldr	r1, [pc, #64]	; (8001b54 <Flash_Soft_SetOffset+0x98>)
 8001b12:	2002      	movs	r0, #2
 8001b14:	f002 f9a2 	bl	8003e5c <HAL_FLASH_Program>
	}

	if(RFC_max >= 0)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db10      	blt.n	8001b40 <Flash_Soft_SetOffset+0x84>
	{
		*maxRFC = RFC_max;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <Flash_Soft_SetOffset+0x9c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	b292      	uxth	r2, r2
 8001b26:	801a      	strh	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddressRFC + 4, *((uint32_t*)maxRFC));
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <Flash_Soft_SetOffset+0x9c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	461c      	mov	r4, r3
 8001b32:	4615      	mov	r5, r2
 8001b34:	4622      	mov	r2, r4
 8001b36:	462b      	mov	r3, r5
 8001b38:	4908      	ldr	r1, [pc, #32]	; (8001b5c <Flash_Soft_SetOffset+0xa0>)
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	f002 f98e 	bl	8003e5c <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8001b40:	f002 fa02 	bl	8003f48 <HAL_FLASH_Lock>
}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000290 	.word	0x20000290
 8001b54:	08060020 	.word	0x08060020
 8001b58:	20000294 	.word	0x20000294
 8001b5c:	08060024 	.word	0x08060024

08001b60 <Flash_Soft_GetOffset>:


void Flash_Soft_GetOffset(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
	uint16_t temp;
	temp = *((uint16_t*)((__IO uint32_t *)(startAddressRFC)));
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <Flash_Soft_GetOffset+0x58>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	80fb      	strh	r3, [r7, #6]
	if (temp>4095) *minRFC = minRFC_default;
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b72:	d305      	bcc.n	8001b80 <Flash_Soft_GetOffset+0x20>
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <Flash_Soft_GetOffset+0x5c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <Flash_Soft_GetOffset+0x60>)
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	e003      	b.n	8001b88 <Flash_Soft_GetOffset+0x28>
	else *minRFC = temp;
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <Flash_Soft_GetOffset+0x5c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	88fa      	ldrh	r2, [r7, #6]
 8001b86:	801a      	strh	r2, [r3, #0]

	temp = *((uint16_t*)((__IO uint32_t *)(startAddressRFC + 4)));
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <Flash_Soft_GetOffset+0x64>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	80fb      	strh	r3, [r7, #6]
	if (temp>4095) *maxRFC = maxRFC_default;
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b94:	d305      	bcc.n	8001ba2 <Flash_Soft_GetOffset+0x42>
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <Flash_Soft_GetOffset+0x68>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <Flash_Soft_GetOffset+0x6c>)
 8001b9c:	8812      	ldrh	r2, [r2, #0]
 8001b9e:	801a      	strh	r2, [r3, #0]
	else *maxRFC = temp;
}
 8001ba0:	e003      	b.n	8001baa <Flash_Soft_GetOffset+0x4a>
	else *maxRFC = temp;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <Flash_Soft_GetOffset+0x68>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	801a      	strh	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	08060020 	.word	0x08060020
 8001bbc:	20000290 	.word	0x20000290
 8001bc0:	20000298 	.word	0x20000298
 8001bc4:	08060024 	.word	0x08060024
 8001bc8:	20000294 	.word	0x20000294
 8001bcc:	2000029a 	.word	0x2000029a

08001bd0 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_UARTEx_RxEventCallback+0x40>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10f      	bne.n	8001c06 <HAL_UARTEx_RxEventCallback+0x36>
	{
		memset(PcData,0,BUFFER_SIZE);
 8001be6:	2264      	movs	r2, #100	; 0x64
 8001be8:	2100      	movs	r1, #0
 8001bea:	480a      	ldr	r0, [pc, #40]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x44>)
 8001bec:	f006 ffc0 	bl	8008b70 <memset>
		memcpy(PcData,buffUART,Size);
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4908      	ldr	r1, [pc, #32]	; (8001c18 <HAL_UARTEx_RxEventCallback+0x48>)
 8001bf6:	4807      	ldr	r0, [pc, #28]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x44>)
 8001bf8:	f006 ffac 	bl	8008b54 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffUART, BUFFER_SIZE);
 8001bfc:	2264      	movs	r2, #100	; 0x64
 8001bfe:	4906      	ldr	r1, [pc, #24]	; (8001c18 <HAL_UARTEx_RxEventCallback+0x48>)
 8001c00:	4806      	ldr	r0, [pc, #24]	; (8001c1c <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c02:	f004 feec 	bl	80069de <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40004400 	.word	0x40004400
 8001c14:	20000300 	.word	0x20000300
 8001c18:	2000029c 	.word	0x2000029c
 8001c1c:	200004a8 	.word	0x200004a8

08001c20 <UARTRXInit>:

void UARTRXInit(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffUART, BUFFER_SIZE);
 8001c24:	2264      	movs	r2, #100	; 0x64
 8001c26:	4907      	ldr	r1, [pc, #28]	; (8001c44 <UARTRXInit+0x24>)
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <UARTRXInit+0x28>)
 8001c2a:	f004 fed8 	bl	80069de <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <UARTRXInit+0x2c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <UARTRXInit+0x2c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0208 	bic.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000029c 	.word	0x2000029c
 8001c48:	200004a8 	.word	0x200004a8
 8001c4c:	200004ec 	.word	0x200004ec

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c56:	f000 ff5f 	bl	8002b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5a:	f000 f825 	bl	8001ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5e:	f000 f9b7 	bl	8001fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c62:	f000 f97f 	bl	8001f64 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c66:	f000 f8d9 	bl	8001e1c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001c6a:	f000 f951 	bl	8001f10 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c6e:	f000 f903 	bl	8001e78 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001c72:	f000 f881 	bl	8001d78 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  UARTRXInit();
 8001c76:	f7ff ffd3 	bl	8001c20 <UARTRXInit>
  //1. Initialise the MPU6050 module and I2C
  MPU6050_Init(&hi2c1, &myMpuConfig);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <main+0x54>)
 8001c80:	f7ff fb60 	bl	8001344 <MPU6050_Init>
  //2. Configure Accel and Gyro parameters
  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 8001c84:	2301      	movs	r3, #1
 8001c86:	70bb      	strb	r3, [r7, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	703b      	strb	r3, [r7, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8001c90:	2301      	movs	r3, #1
 8001c92:	707b      	strb	r3, [r7, #1]
  myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8001c94:	2300      	movs	r3, #0
 8001c96:	713b      	strb	r3, [r7, #4]
  MPU6050_Config();
 8001c98:	f7ff fbc4 	bl	8001424 <MPU6050_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  myMain();
 8001c9c:	f000 fa7c 	bl	8002198 <myMain>
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <main+0x50>
 8001ca2:	bf00      	nop
 8001ca4:	2000040c 	.word	0x2000040c

08001ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b094      	sub	sp, #80	; 0x50
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0320 	add.w	r3, r7, #32
 8001cb2:	2230      	movs	r2, #48	; 0x30
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f006 ff5a 	bl	8008b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <SystemClock_Config+0xc8>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <SystemClock_Config+0xc8>)
 8001cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <SystemClock_Config+0xc8>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <SystemClock_Config+0xcc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <SystemClock_Config+0xcc>)
 8001cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <SystemClock_Config+0xcc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d04:	2301      	movs	r3, #1
 8001d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d1c:	2364      	movs	r3, #100	; 0x64
 8001d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d20:	2302      	movs	r3, #2
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d24:	2304      	movs	r3, #4
 8001d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fc97 	bl	8005660 <HAL_RCC_OscConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d38:	f000 f980 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2103      	movs	r1, #3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fef9 	bl	8005b50 <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d64:	f000 f96a 	bl	800203c <Error_Handler>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3750      	adds	r7, #80	; 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	463b      	mov	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <MX_ADC1_Init+0x9c>)
 8001d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <MX_ADC1_Init+0xa0>)
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dda:	f000 ff33 	bl	8002c44 <HAL_ADC_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001de4:	f000 f92a 	bl	800203c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dfa:	f001 f86b 	bl	8002ed4 <HAL_ADC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e04:	f000 f91a 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000364 	.word	0x20000364
 8001e14:	40012000 	.word	0x40012000
 8001e18:	0f000001 	.word	0x0f000001

08001e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <MX_I2C1_Init+0x54>)
 8001e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <MX_I2C1_Init+0x58>)
 8001e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e5a:	f002 fc6b 	bl	8004734 <HAL_I2C_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e64:	f000 f8ea 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000040c 	.word	0x2000040c
 8001e70:	40005400 	.word	0x40005400
 8001e74:	00061a80 	.word	0x00061a80

08001e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001e9e:	2263      	movs	r2, #99	; 0x63
 8001ea0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ebc:	4813      	ldr	r0, [pc, #76]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001ebe:	f004 f867 	bl	8005f90 <HAL_TIM_Base_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ec8:	f000 f8b8 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001eda:	f004 fa0b 	bl	80062f4 <HAL_TIM_ConfigClockSource>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ee4:	f000 f8aa 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_TIM2_Init+0x94>)
 8001ef6:	f004 fc11 	bl	800671c <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f00:	f000 f89c 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000460 	.word	0x20000460

08001f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_USART2_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f48:	f004 fc6a 	bl	8006820 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f52:	f000 f873 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200004a8 	.word	0x200004a8
 8001f60:	40004400 	.word	0x40004400

08001f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <MX_DMA_Init+0x68>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <MX_DMA_Init+0x68>)
 8001f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <MX_DMA_Init+0x68>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_DMA_Init+0x68>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <MX_DMA_Init+0x68>)
 8001f90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <MX_DMA_Init+0x68>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f001 fb1f 	bl	80035ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001fac:	2010      	movs	r0, #16
 8001fae:	f001 fb38 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2038      	movs	r0, #56	; 0x38
 8001fb8:	f001 fb17 	bl	80035ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fbc:	2038      	movs	r0, #56	; 0x38
 8001fbe:	f001 fb30 	bl	8003622 <HAL_NVIC_EnableIRQ>

}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_GPIO_Init+0x68>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <MX_GPIO_Init+0x68>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_GPIO_Init+0x68>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <MX_GPIO_Init+0x68>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <MX_GPIO_Init+0x68>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <MX_GPIO_Init+0x68>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_GPIO_Init+0x68>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <MX_GPIO_Init+0x68>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_GPIO_Init+0x68>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002044:	e7fe      	b.n	8002044 <Error_Handler+0x8>
	...

08002048 <HAL_ADC_ConvCpltCallback>:
uint16_t MaxRFC = 3650;
uint16_t RangeADC;
float RFCAngle = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
	RFCAdcValue = RFCKal.update(RFCAdcValue);
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x58>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205e:	eeb0 0a67 	vmov.f32	s0, s15
 8002062:	4810      	ldr	r0, [pc, #64]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002064:	f7fe ffdc 	bl	8001020 <_ZN6Kalman6updateEf>
 8002068:	eef0 7a40 	vmov.f32	s15, s0
 800206c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x58>)
 8002078:	801a      	strh	r2, [r3, #0]
	RFCAngle = RFCAdcValue*RFC_Factor;
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x58>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x60>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_ADC_ConvCpltCallback+0x64>)
 8002094:	edc3 7a00 	vstr	s15, [r3]
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000608 	.word	0x20000608
 80020a4:	2000057c 	.word	0x2000057c
 80020a8:	2000060c 	.word	0x2000060c
 80020ac:	20000614 	.word	0x20000614

080020b0 <_Z9RFC_Calibv>:

void RFC_Calib()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
	sprintf(tx2pcData,">Bat dau hieu chinh RFC\r");
 80020b6:	492d      	ldr	r1, [pc, #180]	; (800216c <_Z9RFC_Calibv+0xbc>)
 80020b8:	482d      	ldr	r0, [pc, #180]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 80020ba:	f007 f9cb 	bl	8009454 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 80020be:	482c      	ldr	r0, [pc, #176]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 80020c0:	f7fe f88e 	bl	80001e0 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	2364      	movs	r3, #100	; 0x64
 80020ca:	4929      	ldr	r1, [pc, #164]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 80020cc:	4829      	ldr	r0, [pc, #164]	; (8002174 <_Z9RFC_Calibv+0xc4>)
 80020ce:	f004 fbf4 	bl	80068ba <HAL_UART_Transmit>
	while(1)
	{
		if(strstr((char*)PcData,"RFCCE"))
 80020d2:	4929      	ldr	r1, [pc, #164]	; (8002178 <_Z9RFC_Calibv+0xc8>)
 80020d4:	4829      	ldr	r0, [pc, #164]	; (800217c <_Z9RFC_Calibv+0xcc>)
 80020d6:	f007 f9dd 	bl	8009494 <strstr>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d027      	beq.n	8002130 <_Z9RFC_Calibv+0x80>
 80020e0:	4b26      	ldr	r3, [pc, #152]	; (800217c <_Z9RFC_Calibv+0xcc>)
 80020e2:	f8d3 3005 	ldr.w	r3, [r3, #5]
		{
			char str[4];
			memcpy(str,&PcData[5],sizeof(str));
 80020e6:	607b      	str	r3, [r7, #4]
			MinRFC = atoi(str);
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fd04 	bl	8008af8 <atoi>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <_Z9RFC_Calibv+0xd0>)
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <_Z9RFC_Calibv+0xcc>)
 80020fa:	f8d3 3009 	ldr.w	r3, [r3, #9]
			memcpy(str,&PcData[9],sizeof(str));
 80020fe:	607b      	str	r3, [r7, #4]
			MaxRFC = atoi(str);
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4618      	mov	r0, r3
 8002104:	f006 fcf8 	bl	8008af8 <atoi>
 8002108:	4603      	mov	r3, r0
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <_Z9RFC_Calibv+0xd4>)
 800210e:	801a      	strh	r2, [r3, #0]
			break;
 8002110:	bf00      	nop
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
		sprintf(tx2pcData,">%d\r",RFCAdcValue);
		HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
		HAL_Delay(3);
	}
	sprintf(tx2pcData,">Hieu chinh RFC xong\r");
 8002112:	491d      	ldr	r1, [pc, #116]	; (8002188 <_Z9RFC_Calibv+0xd8>)
 8002114:	4816      	ldr	r0, [pc, #88]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 8002116:	f007 f99d 	bl	8009454 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 800211a:	4815      	ldr	r0, [pc, #84]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 800211c:	f7fe f860 	bl	80001e0 <strlen>
 8002120:	4603      	mov	r3, r0
 8002122:	b29a      	uxth	r2, r3
 8002124:	2364      	movs	r3, #100	; 0x64
 8002126:	4912      	ldr	r1, [pc, #72]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 8002128:	4812      	ldr	r0, [pc, #72]	; (8002174 <_Z9RFC_Calibv+0xc4>)
 800212a:	f004 fbc6 	bl	80068ba <HAL_UART_Transmit>
}
 800212e:	e01a      	b.n	8002166 <_Z9RFC_Calibv+0xb6>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 8002130:	2201      	movs	r2, #1
 8002132:	4916      	ldr	r1, [pc, #88]	; (800218c <_Z9RFC_Calibv+0xdc>)
 8002134:	4816      	ldr	r0, [pc, #88]	; (8002190 <_Z9RFC_Calibv+0xe0>)
 8002136:	f000 fdc9 	bl	8002ccc <HAL_ADC_Start_DMA>
		sprintf(tx2pcData,">%d\r",RFCAdcValue);
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <_Z9RFC_Calibv+0xdc>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	4914      	ldr	r1, [pc, #80]	; (8002194 <_Z9RFC_Calibv+0xe4>)
 8002144:	480a      	ldr	r0, [pc, #40]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 8002146:	f007 f985 	bl	8009454 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 800214c:	f7fe f848 	bl	80001e0 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	2364      	movs	r3, #100	; 0x64
 8002156:	4906      	ldr	r1, [pc, #24]	; (8002170 <_Z9RFC_Calibv+0xc0>)
 8002158:	4806      	ldr	r0, [pc, #24]	; (8002174 <_Z9RFC_Calibv+0xc4>)
 800215a:	f004 fbae 	bl	80068ba <HAL_UART_Transmit>
		HAL_Delay(3);
 800215e:	2003      	movs	r0, #3
 8002160:	f000 fd4c 	bl	8002bfc <HAL_Delay>
	}
 8002164:	e7b5      	b.n	80020d2 <_Z9RFC_Calibv+0x22>
}
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	0800ba88 	.word	0x0800ba88
 8002170:	2000058c 	.word	0x2000058c
 8002174:	200004a8 	.word	0x200004a8
 8002178:	0800baa4 	.word	0x0800baa4
 800217c:	20000300 	.word	0x20000300
 8002180:	20000004 	.word	0x20000004
 8002184:	20000006 	.word	0x20000006
 8002188:	0800baac 	.word	0x0800baac
 800218c:	20000608 	.word	0x20000608
 8002190:	20000364 	.word	0x20000364
 8002194:	0800bac4 	.word	0x0800bac4

08002198 <myMain>:

int myMain(void)
{
 8002198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800219c:	b092      	sub	sp, #72	; 0x48
 800219e:	af08      	add	r7, sp, #32
	Flash_Assign_Param(&MinRFC, &MaxRFC, MinRFC, MaxRFC);
 80021a0:	4b65      	ldr	r3, [pc, #404]	; (8002338 <myMain+0x1a0>)
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	4b65      	ldr	r3, [pc, #404]	; (800233c <myMain+0x1a4>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	4964      	ldr	r1, [pc, #400]	; (800233c <myMain+0x1a4>)
 80021aa:	4863      	ldr	r0, [pc, #396]	; (8002338 <myMain+0x1a0>)
 80021ac:	f7ff fc60 	bl	8001a70 <Flash_Assign_Param>
	// Init values
	Flash_Soft_GetOffset();
 80021b0:	f7ff fcd6 	bl	8001b60 <Flash_Soft_GetOffset>
	RangeADC = MaxRFC - MinRFC;
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <myMain+0x1a4>)
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	4b5f      	ldr	r3, [pc, #380]	; (8002338 <myMain+0x1a0>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <myMain+0x1a8>)
 80021c2:	801a      	strh	r2, [r3, #0]
	RFC_Factor = 360.0f/RangeADC;
 80021c4:	4b5e      	ldr	r3, [pc, #376]	; (8002340 <myMain+0x1a8>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d0:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002344 <myMain+0x1ac>
 80021d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d8:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <myMain+0x1b0>)
 80021da:	edc3 7a00 	vstr	s15, [r3]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 80021de:	2201      	movs	r2, #1
 80021e0:	495a      	ldr	r1, [pc, #360]	; (800234c <myMain+0x1b4>)
 80021e2:	485b      	ldr	r0, [pc, #364]	; (8002350 <myMain+0x1b8>)
 80021e4:	f000 fd72 	bl	8002ccc <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim2);
 80021e8:	485a      	ldr	r0, [pc, #360]	; (8002354 <myMain+0x1bc>)
 80021ea:	f003 ff21 	bl	8006030 <HAL_TIM_Base_Start>
	uint32_t t_old = __HAL_TIM_GetCounter(&htim2);
 80021ee:	4b59      	ldr	r3, [pc, #356]	; (8002354 <myMain+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t init_loops = 50;
 80021f6:	2332      	movs	r3, #50	; 0x32
 80021f8:	83fb      	strh	r3, [r7, #30]
	uint16_t num_loop = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	847b      	strh	r3, [r7, #34]	; 0x22
	Roll_IMU = 0;
 80021fe:	4b56      	ldr	r3, [pc, #344]	; (8002358 <myMain+0x1c0>)
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
	uint8_t cnt_trans = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while (1)
	{
		cnt_trans++;
 800220c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002210:	3301      	adds	r3, #1
 8002212:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (strstr((char*) PcData, "IMUCS"))
 8002216:	4951      	ldr	r1, [pc, #324]	; (800235c <myMain+0x1c4>)
 8002218:	4851      	ldr	r0, [pc, #324]	; (8002360 <myMain+0x1c8>)
 800221a:	f007 f93b 	bl	8009494 <strstr>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d022      	beq.n	800226a <myMain+0xd2>
		{
			sprintf(tx2pcData, ">Bat dau hieu chinh MPU6050\r");
 8002224:	494f      	ldr	r1, [pc, #316]	; (8002364 <myMain+0x1cc>)
 8002226:	4850      	ldr	r0, [pc, #320]	; (8002368 <myMain+0x1d0>)
 8002228:	f007 f914 	bl	8009454 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 800222c:	484e      	ldr	r0, [pc, #312]	; (8002368 <myMain+0x1d0>)
 800222e:	f7fd ffd7 	bl	80001e0 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	b29a      	uxth	r2, r3
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	494b      	ldr	r1, [pc, #300]	; (8002368 <myMain+0x1d0>)
 800223a:	484c      	ldr	r0, [pc, #304]	; (800236c <myMain+0x1d4>)
 800223c:	f004 fb3d 	bl	80068ba <HAL_UART_Transmit>
			CalibrateMPU6050();
 8002240:	f7ff fa5e 	bl	8001700 <CalibrateMPU6050>
			memset(PcData, 0, BUFFER_SIZE);
 8002244:	2264      	movs	r2, #100	; 0x64
 8002246:	2100      	movs	r1, #0
 8002248:	4845      	ldr	r0, [pc, #276]	; (8002360 <myMain+0x1c8>)
 800224a:	f006 fc91 	bl	8008b70 <memset>
			sprintf(tx2pcData, ">Hieu chinh xong\r");
 800224e:	4948      	ldr	r1, [pc, #288]	; (8002370 <myMain+0x1d8>)
 8002250:	4845      	ldr	r0, [pc, #276]	; (8002368 <myMain+0x1d0>)
 8002252:	f007 f8ff 	bl	8009454 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 8002256:	4844      	ldr	r0, [pc, #272]	; (8002368 <myMain+0x1d0>)
 8002258:	f7fd ffc2 	bl	80001e0 <strlen>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	2364      	movs	r3, #100	; 0x64
 8002262:	4941      	ldr	r1, [pc, #260]	; (8002368 <myMain+0x1d0>)
 8002264:	4841      	ldr	r0, [pc, #260]	; (800236c <myMain+0x1d4>)
 8002266:	f004 fb28 	bl	80068ba <HAL_UART_Transmit>
		}
		if (strstr((char*) PcData, "RFCCS"))
 800226a:	4942      	ldr	r1, [pc, #264]	; (8002374 <myMain+0x1dc>)
 800226c:	483c      	ldr	r0, [pc, #240]	; (8002360 <myMain+0x1c8>)
 800226e:	f007 f911 	bl	8009494 <strstr>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d024      	beq.n	80022c2 <myMain+0x12a>
		{
			RFC_Calib();
 8002278:	f7ff ff1a 	bl	80020b0 <_Z9RFC_Calibv>
			memset(PcData, 0, BUFFER_SIZE);
 800227c:	2264      	movs	r2, #100	; 0x64
 800227e:	2100      	movs	r1, #0
 8002280:	4837      	ldr	r0, [pc, #220]	; (8002360 <myMain+0x1c8>)
 8002282:	f006 fc75 	bl	8008b70 <memset>
			Flash_Soft_SetOffset(MinRFC, MaxRFC);
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <myMain+0x1a0>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b2b      	ldr	r3, [pc, #172]	; (800233c <myMain+0x1a4>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f7ff fc12 	bl	8001abc <Flash_Soft_SetOffset>
			RangeADC = MaxRFC - MinRFC;
 8002298:	4b28      	ldr	r3, [pc, #160]	; (800233c <myMain+0x1a4>)
 800229a:	881a      	ldrh	r2, [r3, #0]
 800229c:	4b26      	ldr	r3, [pc, #152]	; (8002338 <myMain+0x1a0>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <myMain+0x1a8>)
 80022a6:	801a      	strh	r2, [r3, #0]
			RFC_Factor = 360.0f / RangeADC;
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <myMain+0x1a8>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002344 <myMain+0x1ac>
 80022b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <myMain+0x1b0>)
 80022be:	edc3 7a00 	vstr	s15, [r3]
		}

		if (Read_MPU_Calc(acc, gyr) != HAL_OK)
 80022c2:	492d      	ldr	r1, [pc, #180]	; (8002378 <myMain+0x1e0>)
 80022c4:	482d      	ldr	r0, [pc, #180]	; (800237c <myMain+0x1e4>)
 80022c6:	f7ff fb39 	bl	800193c <Read_MPU_Calc>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80ed 	bne.w	80024b6 <myMain+0x31e>
			continue;

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
 80022dc:	2201      	movs	r2, #1
 80022de:	491b      	ldr	r1, [pc, #108]	; (800234c <myMain+0x1b4>)
 80022e0:	481b      	ldr	r0, [pc, #108]	; (8002350 <myMain+0x1b8>)
 80022e2:	f000 fcf3 	bl	8002ccc <HAL_ADC_Start_DMA>

		float wz = gyr[2];
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <myMain+0x1e0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
		float gx = acc[1];
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <myMain+0x1e4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	617b      	str	r3, [r7, #20]
		float gy = -acc[0];
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <myMain+0x1e4>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	eef1 7a67 	vneg.f32	s15, s15
 80022fc:	edc7 7a04 	vstr	s15, [r7, #16]
		if (num_loop < init_loops)
 8002300:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002302:	8bfb      	ldrh	r3, [r7, #30]
 8002304:	429a      	cmp	r2, r3
 8002306:	d23b      	bcs.n	8002380 <myMain+0x1e8>
		{
			Roll_IMU += atan2(gy, gx);
 8002308:	edd7 0a05 	vldr	s1, [r7, #20]
 800230c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002310:	f7fe fe24 	bl	8000f5c <_ZSt5atan2ff>
 8002314:	eeb0 7a40 	vmov.f32	s14, s0
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <myMain+0x1c0>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <myMain+0x1c0>)
 8002324:	edc3 7a00 	vstr	s15, [r3]
			t_old = __HAL_TIM_GetCounter(&htim2);
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <myMain+0x1bc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
			num_loop++;
 8002330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002332:	3301      	adds	r3, #1
 8002334:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 8002336:	e0bf      	b.n	80024b8 <myMain+0x320>
 8002338:	20000004 	.word	0x20000004
 800233c:	20000006 	.word	0x20000006
 8002340:	20000610 	.word	0x20000610
 8002344:	43b40000 	.word	0x43b40000
 8002348:	2000060c 	.word	0x2000060c
 800234c:	20000608 	.word	0x20000608
 8002350:	20000364 	.word	0x20000364
 8002354:	20000460 	.word	0x20000460
 8002358:	20000550 	.word	0x20000550
 800235c:	0800bacc 	.word	0x0800bacc
 8002360:	20000300 	.word	0x20000300
 8002364:	0800bad4 	.word	0x0800bad4
 8002368:	2000058c 	.word	0x2000058c
 800236c:	200004a8 	.word	0x200004a8
 8002370:	0800baf4 	.word	0x0800baf4
 8002374:	0800bb08 	.word	0x0800bb08
 8002378:	200005fc 	.word	0x200005fc
 800237c:	200005f0 	.word	0x200005f0
		}
		else if (num_loop == init_loops)
 8002380:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002382:	8bfb      	ldrh	r3, [r7, #30]
 8002384:	429a      	cmp	r2, r3
 8002386:	d117      	bne.n	80023b8 <myMain+0x220>
		{
			Roll_IMU /= init_loops;
 8002388:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <myMain+0x330>)
 800238a:	edd3 6a00 	vldr	s13, [r3]
 800238e:	8bfb      	ldrh	r3, [r7, #30]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <myMain+0x330>)
 800239e:	edc3 7a00 	vstr	s15, [r3]
			Filter.init(Roll_IMU);
 80023a2:	4b49      	ldr	r3, [pc, #292]	; (80024c8 <myMain+0x330>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ac:	4847      	ldr	r0, [pc, #284]	; (80024cc <myMain+0x334>)
 80023ae:	f7fe fea5 	bl	80010fc <_ZN10GradFilter4initEf>
			num_loop++;
 80023b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023b4:	3301      	adds	r3, #1
 80023b6:	847b      	strh	r3, [r7, #34]	; 0x22
		}

		uint32_t t_cur = __HAL_TIM_GetCounter(&htim2);
 80023b8:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <myMain+0x338>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	60fb      	str	r3, [r7, #12]
		T = (t_cur - t_old) * 0.000001;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8a4 	bl	8000514 <__aeabi_ui2d>
 80023cc:	a33c      	add	r3, pc, #240	; (adr r3, 80024c0 <myMain+0x328>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f919 	bl	8000608 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fbeb 	bl	8000bb8 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <myMain+0x33c>)
 80023e6:	6013      	str	r3, [r2, #0]
		t_old = t_cur;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24

		Roll_IMU = Filter.update(wz, gx, gy, T);
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <myMain+0x33c>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	eef0 1a67 	vmov.f32	s3, s15
 80023f6:	ed97 1a04 	vldr	s2, [r7, #16]
 80023fa:	edd7 0a05 	vldr	s1, [r7, #20]
 80023fe:	ed97 0a06 	vldr	s0, [r7, #24]
 8002402:	4832      	ldr	r0, [pc, #200]	; (80024cc <myMain+0x334>)
 8002404:	f7fe fe8a 	bl	800111c <_ZN10GradFilter6updateEffff>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <myMain+0x330>)
 800240e:	edc3 7a00 	vstr	s15, [r3]
		Roll_T = Roll_IMU*(180 / PI) - RFCAngle;
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <myMain+0x340>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	eddf 6a30 	vldr	s13, [pc, #192]	; 80024dc <myMain+0x344>
 800241c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <myMain+0x330>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <myMain+0x348>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <myMain+0x34c>)
 8002436:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_trans >= 1)
 800243a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800243e:	2b00      	cmp	r3, #0
 8002440:	f43f aee4 	beq.w	800220c <myMain+0x74>
		{
			cnt_trans = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			sprintf(tx2pcData, ">%.4f|%.4f|%.4f|%.4f|%.4f\r\n", Roll_T, wz, gx, gy, T);
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <myMain+0x34c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f882 	bl	8000558 <__aeabi_f2d>
 8002454:	e9c7 0100 	strd	r0, r1, [r7]
 8002458:	69b8      	ldr	r0, [r7, #24]
 800245a:	f7fe f87d 	bl	8000558 <__aeabi_f2d>
 800245e:	4604      	mov	r4, r0
 8002460:	460d      	mov	r5, r1
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7fe f878 	bl	8000558 <__aeabi_f2d>
 8002468:	4680      	mov	r8, r0
 800246a:	4689      	mov	r9, r1
 800246c:	6938      	ldr	r0, [r7, #16]
 800246e:	f7fe f873 	bl	8000558 <__aeabi_f2d>
 8002472:	4682      	mov	sl, r0
 8002474:	468b      	mov	fp, r1
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <myMain+0x33c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f86c 	bl	8000558 <__aeabi_f2d>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002488:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800248c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002490:	e9cd 4500 	strd	r4, r5, [sp]
 8002494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002498:	4913      	ldr	r1, [pc, #76]	; (80024e8 <myMain+0x350>)
 800249a:	4814      	ldr	r0, [pc, #80]	; (80024ec <myMain+0x354>)
 800249c:	f006 ffda 	bl	8009454 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) tx2pcData, strlen(tx2pcData), 100);
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <myMain+0x354>)
 80024a2:	f7fd fe9d 	bl	80001e0 <strlen>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	2364      	movs	r3, #100	; 0x64
 80024ac:	490f      	ldr	r1, [pc, #60]	; (80024ec <myMain+0x354>)
 80024ae:	4810      	ldr	r0, [pc, #64]	; (80024f0 <myMain+0x358>)
 80024b0:	f004 fa03 	bl	80068ba <HAL_UART_Transmit>
 80024b4:	e6aa      	b.n	800220c <myMain+0x74>
			continue;
 80024b6:	bf00      	nop
		}
	}
 80024b8:	e6a8      	b.n	800220c <myMain+0x74>
 80024ba:	bf00      	nop
 80024bc:	f3af 8000 	nop.w
 80024c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80024c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80024c8:	20000550 	.word	0x20000550
 80024cc:	20000558 	.word	0x20000558
 80024d0:	20000460 	.word	0x20000460
 80024d4:	2000054c 	.word	0x2000054c
 80024d8:	20000000 	.word	0x20000000
 80024dc:	43340000 	.word	0x43340000
 80024e0:	20000614 	.word	0x20000614
 80024e4:	20000554 	.word	0x20000554
 80024e8:	0800bb10 	.word	0x0800bb10
 80024ec:	2000058c 	.word	0x2000058c
 80024f0:	200004a8 	.word	0x200004a8

080024f4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d112      	bne.n	800252a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250a:	4293      	cmp	r3, r2
 800250c:	d10d      	bne.n	800252a <_Z41__static_initialization_and_destruction_0ii+0x36>
GradFilter Filter(15,1,-1);
 800250e:	f04f 31ff 	mov.w	r1, #4294967295
 8002512:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002516:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800251c:	f7fe fdc8 	bl	80010b0 <_ZN10GradFilterC1Effi>
Kalman RFCKal(0);
 8002520:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002538 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002526:	f7fe fd5d 	bl	8000fe4 <_ZN6KalmanC1Ef>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000558 	.word	0x20000558
 8002538:	00000000 	.word	0x00000000
 800253c:	2000057c 	.word	0x2000057c

08002540 <_GLOBAL__sub_I_T>:
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
 8002544:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ffd3 	bl	80024f4 <_Z41__static_initialization_and_destruction_0ii>
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a0f      	ldr	r2, [pc, #60]	; (800259c <HAL_MspInit+0x4c>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_MspInit+0x4c>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_MspInit+0x4c>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_MspInit+0x4c>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2f      	ldr	r2, [pc, #188]	; (800267c <HAL_ADC_MspInit+0xdc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d157      	bne.n	8002672 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_ADC_MspInit+0xe0>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_ADC_MspInit+0xe0>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_ADC_MspInit+0xe0>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_ADC_MspInit+0xe0>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_ADC_MspInit+0xe0>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_ADC_MspInit+0xe0>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025fa:	2302      	movs	r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025fe:	2303      	movs	r3, #3
 8002600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	481d      	ldr	r0, [pc, #116]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 800260e:	f001 ff0d 	bl	800442c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_ADC_MspInit+0xec>)
 8002616:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 800262c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002630:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 8002634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002638:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 800263c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002640:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 8002644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002648:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 800264c:	2200      	movs	r2, #0
 800264e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 8002652:	2200      	movs	r2, #0
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002656:	480c      	ldr	r0, [pc, #48]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 8002658:	f000 fffe 	bl	8003658 <HAL_DMA_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002662:	f7ff fceb 	bl	800203c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002672:	bf00      	nop
 8002674:	3728      	adds	r7, #40	; 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40012000 	.word	0x40012000
 8002680:	40023800 	.word	0x40023800
 8002684:	40020000 	.word	0x40020000
 8002688:	200003ac 	.word	0x200003ac
 800268c:	40026410 	.word	0x40026410

08002690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_I2C_MspInit+0x84>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d12b      	bne.n	800270a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_I2C_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_I2C_MspInit+0x88>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_I2C_MspInit+0x88>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d2:	2312      	movs	r3, #18
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026de:	2304      	movs	r3, #4
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <HAL_I2C_MspInit+0x8c>)
 80026ea:	f001 fe9f 	bl	800442c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_I2C_MspInit+0x88>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a08      	ldr	r2, [pc, #32]	; (8002718 <HAL_I2C_MspInit+0x88>)
 80026f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_I2C_MspInit+0x88>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40005400 	.word	0x40005400
 8002718:	40023800 	.word	0x40023800
 800271c:	40020400 	.word	0x40020400

08002720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002730:	d115      	bne.n	800275e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_TIM_Base_MspInit+0x48>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_TIM_Base_MspInit+0x48>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_TIM_Base_MspInit+0x48>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	201c      	movs	r0, #28
 8002754:	f000 ff49 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002758:	201c      	movs	r0, #28
 800275a:	f000 ff62 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_UART_MspInit+0xf0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d161      	bne.n	8002852 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_UART_MspInit+0xf4>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_UART_MspInit+0xf4>)
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_UART_MspInit+0xf4>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_UART_MspInit+0xf4>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_UART_MspInit+0xf4>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_UART_MspInit+0xf4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027c6:	230c      	movs	r3, #12
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d6:	2307      	movs	r3, #7
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	4820      	ldr	r0, [pc, #128]	; (8002864 <HAL_UART_MspInit+0xf8>)
 80027e2:	f001 fe23 	bl	800442c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_UART_MspInit+0xfc>)
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <HAL_UART_MspInit+0x100>)
 80027ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_UART_MspInit+0xfc>)
 80027ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f4:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_UART_MspInit+0xfc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_UART_MspInit+0xfc>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_UART_MspInit+0xfc>)
 8002802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002806:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_UART_MspInit+0xfc>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_UART_MspInit+0xfc>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_UART_MspInit+0xfc>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_UART_MspInit+0xfc>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_UART_MspInit+0xfc>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002826:	4810      	ldr	r0, [pc, #64]	; (8002868 <HAL_UART_MspInit+0xfc>)
 8002828:	f000 ff16 	bl	8003658 <HAL_DMA_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002832:	f7ff fc03 	bl	800203c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_UART_MspInit+0xfc>)
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_UART_MspInit+0xfc>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2026      	movs	r0, #38	; 0x26
 8002848:	f000 fecf 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800284c:	2026      	movs	r0, #38	; 0x26
 800284e:	f000 fee8 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40004400 	.word	0x40004400
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000
 8002868:	200004ec 	.word	0x200004ec
 800286c:	40026088 	.word	0x40026088

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>

08002876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler+0x4>

08002882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler+0x4>

0800288e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028bc:	f000 f97e 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA1_Stream5_IRQHandler+0x10>)
 80028ca:	f001 f85d 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200004ec 	.word	0x200004ec

080028d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM2_IRQHandler+0x10>)
 80028de:	f003 fc01 	bl	80060e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000460 	.word	0x20000460

080028ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <USART2_IRQHandler+0x10>)
 80028f2:	f004 f8d9 	bl	8006aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200004a8 	.word	0x200004a8

08002900 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <DMA2_Stream0_IRQHandler+0x10>)
 8002906:	f001 f83f 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200003ac 	.word	0x200003ac

08002914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
	return 1;
 8002918:	2301      	movs	r3, #1
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_kill>:

int _kill(int pid, int sig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800292e:	f006 f8e7 	bl	8008b00 <__errno>
 8002932:	4603      	mov	r3, r0
 8002934:	2216      	movs	r2, #22
 8002936:	601a      	str	r2, [r3, #0]
	return -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <_exit>:

void _exit (int status)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ffe7 	bl	8002924 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002956:	e7fe      	b.n	8002956 <_exit+0x12>

08002958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e00a      	b.n	8002980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800296a:	f3af 8000 	nop.w
 800296e:	4601      	mov	r1, r0
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	60ba      	str	r2, [r7, #8]
 8002976:	b2ca      	uxtb	r2, r1
 8002978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	dbf0      	blt.n	800296a <_read+0x12>
	}

return len;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e009      	b.n	80029b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	60ba      	str	r2, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	dbf1      	blt.n	80029a4 <_write+0x12>
	}
	return len;
 80029c0:	687b      	ldr	r3, [r7, #4]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_close>:

int _close(int file)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
	return -1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f2:	605a      	str	r2, [r3, #4]
	return 0;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <_isatty>:

int _isatty(int file)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
	return 1;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
	return 0;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a64:	f006 f84c 	bl	8008b00 <__errno>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20020000 	.word	0x20020000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	20000618 	.word	0x20000618
 8002a9c:	20000650 	.word	0x20000650

08002aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <SystemInit+0x20>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <SystemInit+0x20>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aca:	490e      	ldr	r1, [pc, #56]	; (8002b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ade:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ae0:	4c0b      	ldr	r4, [pc, #44]	; (8002b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aee:	f7ff ffd7 	bl	8002aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af2:	f006 f80b 	bl	8008b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002af6:	f7ff f8ab 	bl	8001c50 <main>
  bx  lr    
 8002afa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b04:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002b08:	0800c348 	.word	0x0800c348
  ldr r2, =_sbss
 8002b0c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002b10:	20000650 	.word	0x20000650

08002b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b14:	e7fe      	b.n	8002b14 <ADC_IRQHandler>
	...

08002b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <HAL_Init+0x40>)
 8002b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_Init+0x40>)
 8002b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_Init+0x40>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f000 fd47 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	200f      	movs	r0, #15
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fd00 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd5f 	bl	800363e <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f000 fd27 	bl	80035ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000008 	.word	0x20000008
 8002bb4:	20000010 	.word	0x20000010
 8002bb8:	2000000c 	.word	0x2000000c

08002bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_IncTick+0x20>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_IncTick+0x24>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_IncTick+0x24>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000010 	.word	0x20000010
 8002be0:	2000061c 	.word	0x2000061c

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2000061c 	.word	0x2000061c

08002bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff ffee 	bl	8002be4 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d005      	beq.n	8002c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_Delay+0x44>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c22:	bf00      	nop
 8002c24:	f7ff ffde 	bl	8002be4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d8f7      	bhi.n	8002c24 <HAL_Delay+0x28>
  {
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000010 	.word	0x20000010

08002c44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e033      	b.n	8002cc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fc9c 	bl	80025a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c8a:	f023 0302 	bic.w	r3, r3, #2
 8002c8e:	f043 0202 	orr.w	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa4e 	bl	8003138 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb2:	e001      	b.n	8002cb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Start_DMA+0x1e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0ce      	b.n	8002e88 <HAL_ADC_Start_DMA+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d018      	beq.n	8002d32 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d10:	4b5f      	ldr	r3, [pc, #380]	; (8002e90 <HAL_ADC_Start_DMA+0x1c4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a5f      	ldr	r2, [pc, #380]	; (8002e94 <HAL_ADC_Start_DMA+0x1c8>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0c9a      	lsrs	r2, r3, #18
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d24:	e002      	b.n	8002d2c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f9      	bne.n	8002d26 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d40:	d107      	bne.n	8002d52 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d50:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f040 8086 	bne.w	8002e6e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d106      	bne.n	8002db0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f023 0206 	bic.w	r2, r3, #6
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
 8002dae:	e002      	b.n	8002db6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_ADC_Start_DMA+0x1cc>)
 8002dc0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <HAL_ADC_Start_DMA+0x1d0>)
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_ADC_Start_DMA+0x1d4>)
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <HAL_ADC_Start_DMA+0x1d8>)
 8002dd8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002de2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002df2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	334c      	adds	r3, #76	; 0x4c
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f000 fcce 	bl	80037b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10f      	bne.n	8002e44 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d129      	bne.n	8002e86 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e020      	b.n	8002e86 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_ADC_Start_DMA+0x1dc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d11b      	bne.n	8002e86 <HAL_ADC_Start_DMA+0x1ba>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d114      	bne.n	8002e86 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	e00b      	b.n	8002e86 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000008 	.word	0x20000008
 8002e94:	431bde83 	.word	0x431bde83
 8002e98:	40012300 	.word	0x40012300
 8002e9c:	08003331 	.word	0x08003331
 8002ea0:	080033eb 	.word	0x080033eb
 8002ea4:	08003407 	.word	0x08003407
 8002ea8:	40012000 	.word	0x40012000

08002eac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x1c>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e113      	b.n	8003118 <HAL_ADC_ConfigChannel+0x244>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d925      	bls.n	8002f4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	3b1e      	subs	r3, #30
 8002f16:	2207      	movs	r2, #7
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43da      	mvns	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	400a      	ands	r2, r1
 8002f24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	4603      	mov	r3, r0
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4403      	add	r3, r0
 8002f3e:	3b1e      	subs	r3, #30
 8002f40:	409a      	lsls	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	e022      	b.n	8002f92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6919      	ldr	r1, [r3, #16]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	2207      	movs	r2, #7
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6919      	ldr	r1, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4403      	add	r3, r0
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d824      	bhi.n	8002fe4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	3b05      	subs	r3, #5
 8002fac:	221f      	movs	r2, #31
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	400a      	ands	r2, r1
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b05      	subs	r3, #5
 8002fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fe2:	e04c      	b.n	800307e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d824      	bhi.n	8003036 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b23      	subs	r3, #35	; 0x23
 8002ffe:	221f      	movs	r2, #31
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43da      	mvns	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	400a      	ands	r2, r1
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	3b23      	subs	r3, #35	; 0x23
 8003028:	fa00 f203 	lsl.w	r2, r0, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
 8003034:	e023      	b.n	800307e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b41      	subs	r3, #65	; 0x41
 8003048:	221f      	movs	r2, #31
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	400a      	ands	r2, r1
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b41      	subs	r3, #65	; 0x41
 8003072:	fa00 f203 	lsl.w	r2, r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_ADC_ConfigChannel+0x250>)
 8003080:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_ADC_ConfigChannel+0x254>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d10f      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x1d8>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b12      	cmp	r3, #18
 8003092:	d10b      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_ADC_ConfigChannel+0x254>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d12b      	bne.n	800310e <HAL_ADC_ConfigChannel+0x23a>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1c      	ldr	r2, [pc, #112]	; (800312c <HAL_ADC_ConfigChannel+0x258>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d003      	beq.n	80030c8 <HAL_ADC_ConfigChannel+0x1f4>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b11      	cmp	r3, #17
 80030c6:	d122      	bne.n	800310e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a11      	ldr	r2, [pc, #68]	; (800312c <HAL_ADC_ConfigChannel+0x258>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d111      	bne.n	800310e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_ADC_ConfigChannel+0x25c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_ADC_ConfigChannel+0x260>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	0c9a      	lsrs	r2, r3, #18
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003100:	e002      	b.n	8003108 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3b01      	subs	r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f9      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40012300 	.word	0x40012300
 8003128:	40012000 	.word	0x40012000
 800312c:	10000012 	.word	0x10000012
 8003130:	20000008 	.word	0x20000008
 8003134:	431bde83 	.word	0x431bde83

08003138 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003140:	4b79      	ldr	r3, [pc, #484]	; (8003328 <ADC_Init+0x1f0>)
 8003142:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	4a58      	ldr	r2, [pc, #352]	; (800332c <ADC_Init+0x1f4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e00f      	b.n	8003236 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003234:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0202 	bic.w	r2, r2, #2
 8003244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7e1b      	ldrb	r3, [r3, #24]
 8003250:	005a      	lsls	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003272:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003282:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	3b01      	subs	r3, #1
 8003290:	035a      	lsls	r2, r3, #13
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e007      	b.n	80032ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	051a      	lsls	r2, r3, #20
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ee:	025a      	lsls	r2, r3, #9
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	029a      	lsls	r2, r3, #10
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012300 	.word	0x40012300
 800332c:	0f000001 	.word	0x0f000001

08003330 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003346:	2b00      	cmp	r3, #0
 8003348:	d13c      	bne.n	80033c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12b      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003368:	2b00      	cmp	r3, #0
 800336a:	d127      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003384:	2b00      	cmp	r3, #0
 8003386:	d119      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0220 	bic.w	r2, r2, #32
 8003396:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7fe fe43 	bl	8002048 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033c2:	e00e      	b.n	80033e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff fd75 	bl	8002ec0 <HAL_ADC_ErrorCallback>
}
 80033d6:	e004      	b.n	80033e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff fd57 	bl	8002eac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2240      	movs	r2, #64	; 0x40
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff fd4a 	bl	8002ec0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800345c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <__NVIC_GetPriorityGrouping+0x18>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 0307 	and.w	r3, r3, #7
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	db0b      	blt.n	80034c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <__NVIC_EnableIRQ+0x38>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2001      	movs	r0, #1
 80034ba:	fa00 f202 	lsl.w	r2, r0, r2
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	; (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	; (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff29 	bl	8003434 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035fc:	f7ff ff3e 	bl	800347c <__NVIC_GetPriorityGrouping>
 8003600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff8e 	bl	8003528 <NVIC_EncodePriority>
 800360c:	4602      	mov	r2, r0
 800360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff5d 	bl	80034d4 <__NVIC_SetPriority>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff31 	bl	8003498 <__NVIC_EnableIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ffa2 	bl	8003590 <SysTick_Config>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003664:	f7ff fabe 	bl	8002be4 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e099      	b.n	80037a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003694:	e00f      	b.n	80036b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003696:	f7ff faa5 	bl	8002be4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d908      	bls.n	80036b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2203      	movs	r2, #3
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e078      	b.n	80037a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e8      	bne.n	8003696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <HAL_DMA_Init+0x158>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4313      	orrs	r3, r2
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0307 	bic.w	r3, r3, #7
 8003736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b04      	cmp	r3, #4
 8003748:	d117      	bne.n	800377a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fb01 	bl	8003d64 <DMA_CheckFifoParam>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2240      	movs	r2, #64	; 0x40
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003776:	2301      	movs	r3, #1
 8003778:	e016      	b.n	80037a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fab8 	bl	8003cf8 <DMA_CalcBaseAndBitshift>
 8003788:	4603      	mov	r3, r0
 800378a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	223f      	movs	r2, #63	; 0x3f
 8003792:	409a      	lsls	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	f010803f 	.word	0xf010803f

080037b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_DMA_Start_IT+0x26>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e040      	b.n	800385c <HAL_DMA_Start_IT+0xa8>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d12f      	bne.n	800384e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fa4a 	bl	8003c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	223f      	movs	r2, #63	; 0x3f
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0216 	orr.w	r2, r2, #22
 8003822:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e005      	b.n	800385a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800385a:	7dfb      	ldrb	r3, [r7, #23]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003872:	f7ff f9b7 	bl	8002be4 <HAL_GetTick>
 8003876:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d008      	beq.n	8003896 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e052      	b.n	800393c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0216 	bic.w	r2, r2, #22
 80038a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <HAL_DMA_Abort+0x62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0208 	bic.w	r2, r2, #8
 80038d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e6:	e013      	b.n	8003910 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e8:	f7ff f97c 	bl	8002be4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d90c      	bls.n	8003910 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2203      	movs	r2, #3
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e015      	b.n	800393c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e4      	bne.n	80038e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	223f      	movs	r2, #63	; 0x3f
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00c      	b.n	800397c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2205      	movs	r2, #5
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003994:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <HAL_DMA_IRQHandler+0x248>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8e      	ldr	r2, [pc, #568]	; (8003bd4 <HAL_DMA_IRQHandler+0x24c>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2208      	movs	r2, #8
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d012      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2210      	movs	r2, #16
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d043      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2210      	movs	r2, #16
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d024      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e01f      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e016      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2220      	movs	r2, #32
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808f 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8087 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2220      	movs	r2, #32
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d136      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0216 	bic.w	r2, r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x1da>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	223f      	movs	r2, #63	; 0x3f
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d07e      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
        }
        return;
 8003b9e:	e079      	b.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d031      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e02c      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
 8003bce:	bf00      	nop
 8003bd0:	20000008 	.word	0x20000008
 8003bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d023      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
 8003be8:	e01e      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0210 	bic.w	r2, r2, #16
 8003c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d032      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2205      	movs	r2, #5
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d307      	bcc.n	8003c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x2cc>
 8003c6e:	e000      	b.n	8003c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c94:	bf00      	nop
    }
  }
}
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d108      	bne.n	8003cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cda:	e007      	b.n	8003cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b10      	subs	r3, #16
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <DMA_CalcBaseAndBitshift+0x64>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <DMA_CalcBaseAndBitshift+0x68>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d909      	bls.n	8003d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
 8003d38:	e007      	b.n	8003d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	aaaaaaab 	.word	0xaaaaaaab
 8003d60:	0800bb44 	.word	0x0800bb44

08003d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11f      	bne.n	8003dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d856      	bhi.n	8003e32 <DMA_CheckFifoParam+0xce>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <DMA_CheckFifoParam+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003daf 	.word	0x08003daf
 8003d94:	08003d9d 	.word	0x08003d9d
 8003d98:	08003e33 	.word	0x08003e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d046      	beq.n	8003e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dac:	e043      	b.n	8003e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db6:	d140      	bne.n	8003e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e03d      	b.n	8003e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d121      	bne.n	8003e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d837      	bhi.n	8003e3e <DMA_CheckFifoParam+0xda>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <DMA_CheckFifoParam+0x70>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003deb 	.word	0x08003deb
 8003ddc:	08003de5 	.word	0x08003de5
 8003de0:	08003dfd 	.word	0x08003dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e030      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d025      	beq.n	8003e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfa:	e022      	b.n	8003e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e04:	d11f      	bne.n	8003e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e0a:	e01c      	b.n	8003e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d903      	bls.n	8003e1a <DMA_CheckFifoParam+0xb6>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d003      	beq.n	8003e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e18:	e018      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1e:	e015      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e30:	e00b      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e32:	bf00      	nop
 8003e34:	e00a      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e008      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e006      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop

08003e5c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <HAL_FLASH_Program+0xa0>)
 8003e70:	7e1b      	ldrb	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_FLASH_Program+0x1e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e03b      	b.n	8003ef2 <HAL_FLASH_Program+0x96>
 8003e7a:	4b20      	ldr	r3, [pc, #128]	; (8003efc <HAL_FLASH_Program+0xa0>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e84:	f000 f870 	bl	8003f68 <FLASH_WaitForLastOperation>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d12b      	bne.n	8003eea <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e98:	783b      	ldrb	r3, [r7, #0]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	68b8      	ldr	r0, [r7, #8]
 8003e9e:	f000 f91b 	bl	80040d8 <FLASH_Program_Byte>
 8003ea2:	e016      	b.n	8003ed2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003eaa:	883b      	ldrh	r3, [r7, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	68b8      	ldr	r0, [r7, #8]
 8003eb0:	f000 f8ee 	bl	8004090 <FLASH_Program_HalfWord>
 8003eb4:	e00d      	b.n	8003ed2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d105      	bne.n	8003ec8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68b8      	ldr	r0, [r7, #8]
 8003ec2:	f000 f8c3 	bl	800404c <FLASH_Program_Word>
 8003ec6:	e004      	b.n	8003ed2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ecc:	68b8      	ldr	r0, [r7, #8]
 8003ece:	f000 f88b 	bl	8003fe8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ed6:	f000 f847 	bl	8003f68 <FLASH_WaitForLastOperation>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_FLASH_Program+0xa4>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_FLASH_Program+0xa4>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_FLASH_Program+0xa0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000620 	.word	0x20000620
 8003f00:	40023c00 	.word	0x40023c00

08003f04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_FLASH_Unlock+0x38>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da0b      	bge.n	8003f2e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_FLASH_Unlock+0x38>)
 8003f18:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <HAL_FLASH_Unlock+0x3c>)
 8003f1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_FLASH_Unlock+0x38>)
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_FLASH_Unlock+0x40>)
 8003f20:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_FLASH_Unlock+0x38>)
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da01      	bge.n	8003f2e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40023c00 	.word	0x40023c00
 8003f40:	45670123 	.word	0x45670123
 8003f44:	cdef89ab 	.word	0xcdef89ab

08003f48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_FLASH_Lock+0x1c>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <HAL_FLASH_Lock+0x1c>)
 8003f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f56:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40023c00 	.word	0x40023c00

08003f68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <FLASH_WaitForLastOperation+0x78>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f7a:	f7fe fe33 	bl	8002be4 <HAL_GetTick>
 8003f7e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f80:	e010      	b.n	8003fa4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d00c      	beq.n	8003fa4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <FLASH_WaitForLastOperation+0x38>
 8003f90:	f7fe fe28 	bl	8002be4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d201      	bcs.n	8003fa4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e019      	b.n	8003fd8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <FLASH_WaitForLastOperation+0x7c>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e8      	bne.n	8003f82 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <FLASH_WaitForLastOperation+0x7c>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <FLASH_WaitForLastOperation+0x7c>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <FLASH_WaitForLastOperation+0x7c>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003fce:	f000 f8a5 	bl	800411c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
  
}  
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000620 	.word	0x20000620
 8003fe4:	40023c00 	.word	0x40023c00

08003fe8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ff4:	4b14      	ldr	r3, [pc, #80]	; (8004048 <FLASH_Program_DoubleWord+0x60>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <FLASH_Program_DoubleWord+0x60>)
 8003ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <FLASH_Program_DoubleWord+0x60>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	4a10      	ldr	r2, [pc, #64]	; (8004048 <FLASH_Program_DoubleWord+0x60>)
 8004006:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800400a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <FLASH_Program_DoubleWord+0x60>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <FLASH_Program_DoubleWord+0x60>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800401e:	f3bf 8f6f 	isb	sy
}
 8004022:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	000a      	movs	r2, r1
 8004032:	2300      	movs	r3, #0
 8004034:	68f9      	ldr	r1, [r7, #12]
 8004036:	3104      	adds	r1, #4
 8004038:	4613      	mov	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40023c00 	.word	0x40023c00

0800404c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <FLASH_Program_Word+0x40>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4a0c      	ldr	r2, [pc, #48]	; (800408c <FLASH_Program_Word+0x40>)
 800405c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004060:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <FLASH_Program_Word+0x40>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	4a09      	ldr	r2, [pc, #36]	; (800408c <FLASH_Program_Word+0x40>)
 8004068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <FLASH_Program_Word+0x40>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	4a06      	ldr	r2, [pc, #24]	; (800408c <FLASH_Program_Word+0x40>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	601a      	str	r2, [r3, #0]
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40023c00 	.word	0x40023c00

08004090 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <FLASH_Program_HalfWord+0x44>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <FLASH_Program_HalfWord+0x44>)
 80040a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <FLASH_Program_HalfWord+0x44>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <FLASH_Program_HalfWord+0x44>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <FLASH_Program_HalfWord+0x44>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <FLASH_Program_HalfWord+0x44>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	801a      	strh	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00

080040d8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <FLASH_Program_Byte+0x40>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <FLASH_Program_Byte+0x40>)
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <FLASH_Program_Byte+0x40>)
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <FLASH_Program_Byte+0x40>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <FLASH_Program_Byte+0x40>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	4a06      	ldr	r2, [pc, #24]	; (8004118 <FLASH_Program_Byte+0x40>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	701a      	strb	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023c00 	.word	0x40023c00

0800411c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800412c:	4b2d      	ldr	r3, [pc, #180]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f043 0310 	orr.w	r3, r3, #16
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 8004136:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004138:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 800413a:	2210      	movs	r2, #16
 800413c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f043 0308 	orr.w	r3, r3, #8
 8004152:	4a24      	ldr	r2, [pc, #144]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 8004154:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 8004158:	2220      	movs	r2, #32
 800415a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 8004172:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f043 0302 	orr.w	r3, r3, #2
 800418e:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 8004190:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	4a0d      	ldr	r2, [pc, #52]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 80041ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 80041b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041b6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f043 0320 	orr.w	r3, r3, #32
 80041cc:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <FLASH_SetErrorCode+0xc8>)
 80041ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <FLASH_SetErrorCode+0xc4>)
 80041d2:	2202      	movs	r2, #2
 80041d4:	60da      	str	r2, [r3, #12]
  }
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40023c00 	.word	0x40023c00
 80041e4:	20000620 	.word	0x20000620

080041e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041fa:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <HAL_FLASHEx_Erase+0xd8>)
 80041fc:	7e1b      	ldrb	r3, [r3, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_FLASHEx_Erase+0x1e>
 8004202:	2302      	movs	r3, #2
 8004204:	e058      	b.n	80042b8 <HAL_FLASHEx_Erase+0xd0>
 8004206:	4b2e      	ldr	r3, [pc, #184]	; (80042c0 <HAL_FLASHEx_Erase+0xd8>)
 8004208:	2201      	movs	r2, #1
 800420a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800420c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004210:	f7ff feaa 	bl	8003f68 <FLASH_WaitForLastOperation>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d148      	bne.n	80042b0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d115      	bne.n	800425a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 f844 	bl	80042c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004240:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004244:	f7ff fe90 	bl	8003f68 <FLASH_WaitForLastOperation>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_FLASHEx_Erase+0xdc>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <HAL_FLASHEx_Erase+0xdc>)
 8004252:	f023 0304 	bic.w	r3, r3, #4
 8004256:	6113      	str	r3, [r2, #16]
 8004258:	e028      	b.n	80042ac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	e01c      	b.n	800429c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	68b8      	ldr	r0, [r7, #8]
 800426c:	f000 f850 	bl	8004310 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004270:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004274:	f7ff fe78 	bl	8003f68 <FLASH_WaitForLastOperation>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_FLASHEx_Erase+0xdc>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_FLASHEx_Erase+0xdc>)
 8004282:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004286:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	601a      	str	r2, [r3, #0]
          break;
 8004294:	e00a      	b.n	80042ac <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3301      	adds	r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4413      	add	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d3da      	bcc.n	8004262 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80042ac:	f000 f878 	bl	80043a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_FLASHEx_Erase+0xd8>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	761a      	strb	r2, [r3, #24]

  return status;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000620 	.word	0x20000620
 80042c4:	40023c00 	.word	0x40023c00

080042c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042d4:	4b0d      	ldr	r3, [pc, #52]	; (800430c <FLASH_MassErase+0x44>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	4a0c      	ldr	r2, [pc, #48]	; (800430c <FLASH_MassErase+0x44>)
 80042da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <FLASH_MassErase+0x44>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <FLASH_MassErase+0x44>)
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <FLASH_MassErase+0x44>)
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	4313      	orrs	r3, r2
 80042f6:	4a05      	ldr	r2, [pc, #20]	; (800430c <FLASH_MassErase+0x44>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	6113      	str	r3, [r2, #16]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40023c00 	.word	0x40023c00

08004310 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e010      	b.n	800434e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d103      	bne.n	800433a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e009      	b.n	800434e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d103      	bne.n	8004348 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e002      	b.n	800434e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004348:	f44f 7340 	mov.w	r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <FLASH_Erase_Sector+0x8c>)
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <FLASH_Erase_Sector+0x8c>)
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <FLASH_Erase_Sector+0x8c>)
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	490f      	ldr	r1, [pc, #60]	; (800439c <FLASH_Erase_Sector+0x8c>)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <FLASH_Erase_Sector+0x8c>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <FLASH_Erase_Sector+0x8c>)
 800436c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004370:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <FLASH_Erase_Sector+0x8c>)
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4313      	orrs	r3, r2
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <FLASH_Erase_Sector+0x8c>)
 800437e:	f043 0302 	orr.w	r3, r3, #2
 8004382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <FLASH_Erase_Sector+0x8c>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <FLASH_Erase_Sector+0x8c>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438e:	6113      	str	r3, [r2, #16]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40023c00 	.word	0x40023c00

080043a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80043a4:	4b20      	ldr	r3, [pc, #128]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d017      	beq.n	80043e0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043ba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80043bc:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b17      	ldr	r3, [pc, #92]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a16      	ldr	r2, [pc, #88]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043d2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043d4:	4b14      	ldr	r3, [pc, #80]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a13      	ldr	r2, [pc, #76]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043de:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d017      	beq.n	800441c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <FLASH_FlushCaches+0x88>)
 80043fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <FLASH_FlushCaches+0x88>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a07      	ldr	r2, [pc, #28]	; (8004428 <FLASH_FlushCaches+0x88>)
 800440a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800440e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <FLASH_FlushCaches+0x88>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <FLASH_FlushCaches+0x88>)
 8004416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800441a:	6013      	str	r3, [r2, #0]
  }
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40023c00 	.word	0x40023c00

0800442c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800442c:	b480      	push	{r7}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	e159      	b.n	80046fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004448:	2201      	movs	r2, #1
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	429a      	cmp	r2, r3
 8004462:	f040 8148 	bne.w	80046f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d005      	beq.n	800447e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800447a:	2b02      	cmp	r3, #2
 800447c:	d130      	bne.n	80044e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	f003 0201 	and.w	r2, r3, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d017      	beq.n	800451c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	2203      	movs	r2, #3
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d123      	bne.n	8004570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	08da      	lsrs	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3208      	adds	r2, #8
 8004530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	220f      	movs	r2, #15
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	08da      	lsrs	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	2203      	movs	r2, #3
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0203 	and.w	r2, r3, #3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80a2 	beq.w	80046f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	4b57      	ldr	r3, [pc, #348]	; (8004714 <HAL_GPIO_Init+0x2e8>)
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	4a56      	ldr	r2, [pc, #344]	; (8004714 <HAL_GPIO_Init+0x2e8>)
 80045bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c0:	6453      	str	r3, [r2, #68]	; 0x44
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <HAL_GPIO_Init+0x2e8>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ce:	4a52      	ldr	r2, [pc, #328]	; (8004718 <HAL_GPIO_Init+0x2ec>)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	3302      	adds	r3, #2
 80045d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	220f      	movs	r2, #15
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a49      	ldr	r2, [pc, #292]	; (800471c <HAL_GPIO_Init+0x2f0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d019      	beq.n	800462e <HAL_GPIO_Init+0x202>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a48      	ldr	r2, [pc, #288]	; (8004720 <HAL_GPIO_Init+0x2f4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_GPIO_Init+0x1fe>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a47      	ldr	r2, [pc, #284]	; (8004724 <HAL_GPIO_Init+0x2f8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00d      	beq.n	8004626 <HAL_GPIO_Init+0x1fa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a46      	ldr	r2, [pc, #280]	; (8004728 <HAL_GPIO_Init+0x2fc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <HAL_GPIO_Init+0x1f6>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a45      	ldr	r2, [pc, #276]	; (800472c <HAL_GPIO_Init+0x300>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_GPIO_Init+0x1f2>
 800461a:	2304      	movs	r3, #4
 800461c:	e008      	b.n	8004630 <HAL_GPIO_Init+0x204>
 800461e:	2307      	movs	r3, #7
 8004620:	e006      	b.n	8004630 <HAL_GPIO_Init+0x204>
 8004622:	2303      	movs	r3, #3
 8004624:	e004      	b.n	8004630 <HAL_GPIO_Init+0x204>
 8004626:	2302      	movs	r3, #2
 8004628:	e002      	b.n	8004630 <HAL_GPIO_Init+0x204>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_GPIO_Init+0x204>
 800462e:	2300      	movs	r3, #0
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	f002 0203 	and.w	r2, r2, #3
 8004636:	0092      	lsls	r2, r2, #2
 8004638:	4093      	lsls	r3, r2
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004640:	4935      	ldr	r1, [pc, #212]	; (8004718 <HAL_GPIO_Init+0x2ec>)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	3302      	adds	r3, #2
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800464e:	4b38      	ldr	r3, [pc, #224]	; (8004730 <HAL_GPIO_Init+0x304>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004672:	4a2f      	ldr	r2, [pc, #188]	; (8004730 <HAL_GPIO_Init+0x304>)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004678:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <HAL_GPIO_Init+0x304>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <HAL_GPIO_Init+0x304>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046a2:	4b23      	ldr	r3, [pc, #140]	; (8004730 <HAL_GPIO_Init+0x304>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_GPIO_Init+0x304>)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <HAL_GPIO_Init+0x304>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046f0:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <HAL_GPIO_Init+0x304>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3301      	adds	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b0f      	cmp	r3, #15
 8004700:	f67f aea2 	bls.w	8004448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	3724      	adds	r7, #36	; 0x24
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
 8004718:	40013800 	.word	0x40013800
 800471c:	40020000 	.word	0x40020000
 8004720:	40020400 	.word	0x40020400
 8004724:	40020800 	.word	0x40020800
 8004728:	40020c00 	.word	0x40020c00
 800472c:	40021000 	.word	0x40021000
 8004730:	40013c00 	.word	0x40013c00

08004734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e12b      	b.n	800499e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd ff98 	bl	8002690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004798:	f001 fbd2 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 800479c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4a81      	ldr	r2, [pc, #516]	; (80049a8 <HAL_I2C_Init+0x274>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d807      	bhi.n	80047b8 <HAL_I2C_Init+0x84>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a80      	ldr	r2, [pc, #512]	; (80049ac <HAL_I2C_Init+0x278>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	bf94      	ite	ls
 80047b0:	2301      	movls	r3, #1
 80047b2:	2300      	movhi	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e006      	b.n	80047c6 <HAL_I2C_Init+0x92>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a7d      	ldr	r2, [pc, #500]	; (80049b0 <HAL_I2C_Init+0x27c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	bf94      	ite	ls
 80047c0:	2301      	movls	r3, #1
 80047c2:	2300      	movhi	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e0e7      	b.n	800499e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <HAL_I2C_Init+0x280>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0c9b      	lsrs	r3, r3, #18
 80047d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a6a      	ldr	r2, [pc, #424]	; (80049a8 <HAL_I2C_Init+0x274>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d802      	bhi.n	8004808 <HAL_I2C_Init+0xd4>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3301      	adds	r3, #1
 8004806:	e009      	b.n	800481c <HAL_I2C_Init+0xe8>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	4a69      	ldr	r2, [pc, #420]	; (80049b8 <HAL_I2C_Init+0x284>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	3301      	adds	r3, #1
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	430b      	orrs	r3, r1
 8004822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800482e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	495c      	ldr	r1, [pc, #368]	; (80049a8 <HAL_I2C_Init+0x274>)
 8004838:	428b      	cmp	r3, r1
 800483a:	d819      	bhi.n	8004870 <HAL_I2C_Init+0x13c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1e59      	subs	r1, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	fbb1 f3f3 	udiv	r3, r1, r3
 800484a:	1c59      	adds	r1, r3, #1
 800484c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004850:	400b      	ands	r3, r1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_I2C_Init+0x138>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1e59      	subs	r1, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fbb1 f3f3 	udiv	r3, r1, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	e051      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 800486c:	2304      	movs	r3, #4
 800486e:	e04f      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <HAL_I2C_Init+0x168>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1e58      	subs	r0, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	440b      	add	r3, r1
 8004886:	fbb0 f3f3 	udiv	r3, r0, r3
 800488a:	3301      	adds	r3, #1
 800488c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e012      	b.n	80048c2 <HAL_I2C_Init+0x18e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1e58      	subs	r0, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	0099      	lsls	r1, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Init+0x196>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e022      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10e      	bne.n	80048f0 <HAL_I2C_Init+0x1bc>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1e58      	subs	r0, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	440b      	add	r3, r1
 80048e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e4:	3301      	adds	r3, #1
 80048e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	e00f      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1e58      	subs	r0, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	0099      	lsls	r1, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	fbb0 f3f3 	udiv	r3, r0, r3
 8004906:	3301      	adds	r3, #1
 8004908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	6809      	ldr	r1, [r1, #0]
 8004914:	4313      	orrs	r3, r2
 8004916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800493e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6911      	ldr	r1, [r2, #16]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68d2      	ldr	r2, [r2, #12]
 800494a:	4311      	orrs	r1, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	430b      	orrs	r3, r1
 8004952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	000186a0 	.word	0x000186a0
 80049ac:	001e847f 	.word	0x001e847f
 80049b0:	003d08ff 	.word	0x003d08ff
 80049b4:	431bde83 	.word	0x431bde83
 80049b8:	10624dd3 	.word	0x10624dd3

080049bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	461a      	mov	r2, r3
 80049c8:	460b      	mov	r3, r1
 80049ca:	817b      	strh	r3, [r7, #10]
 80049cc:	4613      	mov	r3, r2
 80049ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d0:	f7fe f908 	bl	8002be4 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b20      	cmp	r3, #32
 80049e0:	f040 80e0 	bne.w	8004ba4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2319      	movs	r3, #25
 80049ea:	2201      	movs	r2, #1
 80049ec:	4970      	ldr	r1, [pc, #448]	; (8004bb0 <HAL_I2C_Master_Transmit+0x1f4>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fc58 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0d3      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_I2C_Master_Transmit+0x50>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e0cc      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d007      	beq.n	8004a32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2221      	movs	r2, #33	; 0x21
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	893a      	ldrh	r2, [r7, #8]
 8004a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a50      	ldr	r2, [pc, #320]	; (8004bb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a74:	8979      	ldrh	r1, [r7, #10]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fac2 	bl	8005004 <I2C_MasterRequestWrite>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e08d      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004aa0:	e066      	b.n	8004b70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	6a39      	ldr	r1, [r7, #32]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fcd2 	bl	8005450 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d107      	bne.n	8004aca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06b      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d11b      	bne.n	8004b44 <HAL_I2C_Master_Transmit+0x188>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	6a39      	ldr	r1, [r7, #32]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fcc2 	bl	80054d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d107      	bne.n	8004b6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e01a      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d194      	bne.n	8004aa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	00100002 	.word	0x00100002
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	; 0x30
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	817b      	strh	r3, [r7, #10]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bcc:	f7fe f80a 	bl	8002be4 <HAL_GetTick>
 8004bd0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	f040 820b 	bne.w	8004ff6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2319      	movs	r3, #25
 8004be6:	2201      	movs	r2, #1
 8004be8:	497c      	ldr	r1, [pc, #496]	; (8004ddc <HAL_I2C_Master_Receive+0x224>)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fb5a 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e1fe      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_I2C_Master_Receive+0x50>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e1f7      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d007      	beq.n	8004c2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2222      	movs	r2, #34	; 0x22
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2210      	movs	r2, #16
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	893a      	ldrh	r2, [r7, #8]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a5c      	ldr	r2, [pc, #368]	; (8004de0 <HAL_I2C_Master_Receive+0x228>)
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c70:	8979      	ldrh	r1, [r7, #10]
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fa46 	bl	8005108 <I2C_MasterRequestRead>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e1b8      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d113      	bne.n	8004cb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e18c      	b.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d11b      	bne.n	8004cf6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e16c      	b.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d11b      	bne.n	8004d36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	e14c      	b.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d5c:	e138      	b.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	f200 80f1 	bhi.w	8004f4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d123      	bne.n	8004db8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fbed 	bl	8005554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e139      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004db6:	e10b      	b.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d14e      	bne.n	8004e5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	4906      	ldr	r1, [pc, #24]	; (8004de4 <HAL_I2C_Master_Receive+0x22c>)
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fa6a 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e10e      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
 8004dda:	bf00      	nop
 8004ddc:	00100002 	.word	0x00100002
 8004de0:	ffff0000 	.word	0xffff0000
 8004de4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e5c:	e0b8      	b.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2200      	movs	r2, #0
 8004e66:	4966      	ldr	r1, [pc, #408]	; (8005000 <HAL_I2C_Master_Receive+0x448>)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fa1b 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0bf      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	494f      	ldr	r1, [pc, #316]	; (8005000 <HAL_I2C_Master_Receive+0x448>)
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f9ed 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e091      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f48:	e042      	b.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fb00 	bl	8005554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e04c      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d118      	bne.n	8004fd0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f47f aec2 	bne.w	8004d5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	00010004 	.word	0x00010004

08005004 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	460b      	mov	r3, r1
 8005012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d006      	beq.n	800502e <I2C_MasterRequestWrite+0x2a>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d003      	beq.n	800502e <I2C_MasterRequestWrite+0x2a>
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800502c:	d108      	bne.n	8005040 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e00b      	b.n	8005058 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	2b12      	cmp	r3, #18
 8005046:	d107      	bne.n	8005058 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005056:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f91d 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00d      	beq.n	800508c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507e:	d103      	bne.n	8005088 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e035      	b.n	80050f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005094:	d108      	bne.n	80050a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005096:	897b      	ldrh	r3, [r7, #10]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050a4:	611a      	str	r2, [r3, #16]
 80050a6:	e01b      	b.n	80050e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050a8:	897b      	ldrh	r3, [r7, #10]
 80050aa:	11db      	asrs	r3, r3, #7
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f063 030f 	orn	r3, r3, #15
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	490e      	ldr	r1, [pc, #56]	; (8005100 <I2C_MasterRequestWrite+0xfc>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f943 	bl	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e010      	b.n	80050f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050d6:	897b      	ldrh	r3, [r7, #10]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4907      	ldr	r1, [pc, #28]	; (8005104 <I2C_MasterRequestWrite+0x100>)
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f933 	bl	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	00010008 	.word	0x00010008
 8005104:	00010002 	.word	0x00010002

08005108 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	460b      	mov	r3, r1
 8005116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800512c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d006      	beq.n	8005142 <I2C_MasterRequestRead+0x3a>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d003      	beq.n	8005142 <I2C_MasterRequestRead+0x3a>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005140:	d108      	bne.n	8005154 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e00b      	b.n	800516c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b11      	cmp	r3, #17
 800515a:	d107      	bne.n	800516c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f893 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d103      	bne.n	800519c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e079      	b.n	8005294 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a8:	d108      	bne.n	80051bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	e05f      	b.n	800527c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051bc:	897b      	ldrh	r3, [r7, #10]
 80051be:	11db      	asrs	r3, r3, #7
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0306 	and.w	r3, r3, #6
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f063 030f 	orn	r3, r3, #15
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	4930      	ldr	r1, [pc, #192]	; (800529c <I2C_MasterRequestRead+0x194>)
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f8b9 	bl	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e054      	b.n	8005294 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4929      	ldr	r1, [pc, #164]	; (80052a0 <I2C_MasterRequestRead+0x198>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f8a9 	bl	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e044      	b.n	8005294 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f831 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d103      	bne.n	8005260 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e017      	b.n	8005294 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005264:	897b      	ldrh	r3, [r7, #10]
 8005266:	11db      	asrs	r3, r3, #7
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f063 030e 	orn	r3, r3, #14
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <I2C_MasterRequestRead+0x198>)
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f865 	bl	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	00010008 	.word	0x00010008
 80052a0:	00010002 	.word	0x00010002

080052a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b4:	e025      	b.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d021      	beq.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fd fc91 	bl	8002be4 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d116      	bne.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e023      	b.n	800534a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10d      	bne.n	8005328 <I2C_WaitOnFlagUntilTimeout+0x84>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	43da      	mvns	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	e00c      	b.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	43da      	mvns	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4013      	ands	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf0c      	ite	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	2300      	movne	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	429a      	cmp	r2, r3
 8005346:	d0b6      	beq.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005360:	e051      	b.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005370:	d123      	bne.n	80053ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800538a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e046      	b.n	8005448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d021      	beq.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fd fc0f 	bl	8002be4 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d116      	bne.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e020      	b.n	8005448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10c      	bne.n	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e00b      	b.n	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	43da      	mvns	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d18d      	bne.n	8005362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800545c:	e02d      	b.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f8ce 	bl	8005600 <I2C_IsAcknowledgeFailed>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e02d      	b.n	80054ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d021      	beq.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005476:	f7fd fbb5 	bl	8002be4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	d302      	bcc.n	800548c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d116      	bne.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f043 0220 	orr.w	r2, r3, #32
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e007      	b.n	80054ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	d1ca      	bne.n	800545e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054de:	e02d      	b.n	800553c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f88d 	bl	8005600 <I2C_IsAcknowledgeFailed>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e02d      	b.n	800554c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d021      	beq.n	800553c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f8:	f7fd fb74 	bl	8002be4 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d116      	bne.n	800553c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	f043 0220 	orr.w	r2, r3, #32
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e007      	b.n	800554c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d1ca      	bne.n	80054e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005560:	e042      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b10      	cmp	r3, #16
 800556e:	d119      	bne.n	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0210 	mvn.w	r2, #16
 8005578:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e029      	b.n	80055f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fd fb1e 	bl	8002be4 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d116      	bne.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e007      	b.n	80055f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d1b5      	bne.n	8005562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005616:	d11b      	bne.n	8005650 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005620:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e267      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d075      	beq.n	800576a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800567e:	4b88      	ldr	r3, [pc, #544]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b04      	cmp	r3, #4
 8005688:	d00c      	beq.n	80056a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800568a:	4b85      	ldr	r3, [pc, #532]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005692:	2b08      	cmp	r3, #8
 8005694:	d112      	bne.n	80056bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005696:	4b82      	ldr	r3, [pc, #520]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a2:	d10b      	bne.n	80056bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	4b7e      	ldr	r3, [pc, #504]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05b      	beq.n	8005768 <HAL_RCC_OscConfig+0x108>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d157      	bne.n	8005768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e242      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d106      	bne.n	80056d4 <HAL_RCC_OscConfig+0x74>
 80056c6:	4b76      	ldr	r3, [pc, #472]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a75      	ldr	r2, [pc, #468]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e01d      	b.n	8005710 <HAL_RCC_OscConfig+0xb0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCC_OscConfig+0x98>
 80056de:	4b70      	ldr	r3, [pc, #448]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6f      	ldr	r2, [pc, #444]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6c      	ldr	r2, [pc, #432]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e00b      	b.n	8005710 <HAL_RCC_OscConfig+0xb0>
 80056f8:	4b69      	ldr	r3, [pc, #420]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a68      	ldr	r2, [pc, #416]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b66      	ldr	r3, [pc, #408]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a65      	ldr	r2, [pc, #404]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800570a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fd fa64 	bl	8002be4 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005720:	f7fd fa60 	bl	8002be4 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e207      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	4b5b      	ldr	r3, [pc, #364]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0xc0>
 800573e:	e014      	b.n	800576a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005740:	f7fd fa50 	bl	8002be4 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005748:	f7fd fa4c 	bl	8002be4 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1f3      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575a:	4b51      	ldr	r3, [pc, #324]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0xe8>
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d063      	beq.n	800583e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800578a:	2b08      	cmp	r3, #8
 800578c:	d11c      	bne.n	80057c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578e:	4b44      	ldr	r3, [pc, #272]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d116      	bne.n	80057c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_RCC_OscConfig+0x152>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d001      	beq.n	80057b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e1c7      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4937      	ldr	r1, [pc, #220]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c6:	e03a      	b.n	800583e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d0:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <HAL_RCC_OscConfig+0x244>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fd fa05 	bl	8002be4 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057de:	f7fd fa01 	bl	8002be4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e1a8      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f0:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fc:	4b28      	ldr	r3, [pc, #160]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4925      	ldr	r1, [pc, #148]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800580c:	4313      	orrs	r3, r2
 800580e:	600b      	str	r3, [r1, #0]
 8005810:	e015      	b.n	800583e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005812:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <HAL_RCC_OscConfig+0x244>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fd f9e4 	bl	8002be4 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005820:	f7fd f9e0 	bl	8002be4 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e187      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005832:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d036      	beq.n	80058b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d016      	beq.n	8005880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_RCC_OscConfig+0x248>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fd f9c4 	bl	8002be4 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005860:	f7fd f9c0 	bl	8002be4 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e167      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x200>
 800587e:	e01b      	b.n	80058b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <HAL_RCC_OscConfig+0x248>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005886:	f7fd f9ad 	bl	8002be4 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588c:	e00e      	b.n	80058ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588e:	f7fd f9a9 	bl	8002be4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d907      	bls.n	80058ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e150      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
 80058a0:	40023800 	.word	0x40023800
 80058a4:	42470000 	.word	0x42470000
 80058a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ac:	4b88      	ldr	r3, [pc, #544]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ea      	bne.n	800588e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8097 	beq.w	80059f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ca:	4b81      	ldr	r3, [pc, #516]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	4b7d      	ldr	r3, [pc, #500]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4a7c      	ldr	r2, [pc, #496]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	6413      	str	r3, [r2, #64]	; 0x40
 80058e6:	4b7a      	ldr	r3, [pc, #488]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f6:	4b77      	ldr	r3, [pc, #476]	; (8005ad4 <HAL_RCC_OscConfig+0x474>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d118      	bne.n	8005934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005902:	4b74      	ldr	r3, [pc, #464]	; (8005ad4 <HAL_RCC_OscConfig+0x474>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a73      	ldr	r2, [pc, #460]	; (8005ad4 <HAL_RCC_OscConfig+0x474>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590e:	f7fd f969 	bl	8002be4 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005916:	f7fd f965 	bl	8002be4 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e10c      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005928:	4b6a      	ldr	r3, [pc, #424]	; (8005ad4 <HAL_RCC_OscConfig+0x474>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d106      	bne.n	800594a <HAL_RCC_OscConfig+0x2ea>
 800593c:	4b64      	ldr	r3, [pc, #400]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a63      	ldr	r2, [pc, #396]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
 8005948:	e01c      	b.n	8005984 <HAL_RCC_OscConfig+0x324>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b05      	cmp	r3, #5
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x30c>
 8005952:	4b5f      	ldr	r3, [pc, #380]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	4a5e      	ldr	r2, [pc, #376]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	6713      	str	r3, [r2, #112]	; 0x70
 800595e:	4b5c      	ldr	r3, [pc, #368]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a5b      	ldr	r2, [pc, #364]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	6713      	str	r3, [r2, #112]	; 0x70
 800596a:	e00b      	b.n	8005984 <HAL_RCC_OscConfig+0x324>
 800596c:	4b58      	ldr	r3, [pc, #352]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	4a57      	ldr	r2, [pc, #348]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	6713      	str	r3, [r2, #112]	; 0x70
 8005978:	4b55      	ldr	r3, [pc, #340]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a54      	ldr	r2, [pc, #336]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 800597e:	f023 0304 	bic.w	r3, r3, #4
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fd f92a 	bl	8002be4 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005992:	e00a      	b.n	80059aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7fd f926 	bl	8002be4 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0cb      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059aa:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ee      	beq.n	8005994 <HAL_RCC_OscConfig+0x334>
 80059b6:	e014      	b.n	80059e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b8:	f7fd f914 	bl	8002be4 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c0:	f7fd f910 	bl	8002be4 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0b5      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d6:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ee      	bne.n	80059c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d105      	bne.n	80059f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e8:	4b39      	ldr	r3, [pc, #228]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	4a38      	ldr	r2, [pc, #224]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80a1 	beq.w	8005b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059fe:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d05c      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d141      	bne.n	8005a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a12:	4b31      	ldr	r3, [pc, #196]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fd f8e4 	bl	8002be4 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a20:	f7fd f8e0 	bl	8002be4 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e087      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	4b27      	ldr	r3, [pc, #156]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69da      	ldr	r2, [r3, #28]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	3b01      	subs	r3, #1
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	061b      	lsls	r3, r3, #24
 8005a62:	491b      	ldr	r1, [pc, #108]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6e:	f7fd f8b9 	bl	8002be4 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a76:	f7fd f8b5 	bl	8002be4 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e05c      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a88:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x416>
 8005a94:	e054      	b.n	8005b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a96:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9c:	f7fd f8a2 	bl	8002be4 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa4:	f7fd f89e 	bl	8002be4 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e045      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <HAL_RCC_OscConfig+0x470>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x444>
 8005ac2:	e03d      	b.n	8005b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d107      	bne.n	8005adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e038      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40007000 	.word	0x40007000
 8005ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005adc:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <HAL_RCC_OscConfig+0x4ec>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d028      	beq.n	8005b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d121      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d11a      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d111      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	3b01      	subs	r3, #1
 8005b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40023800 	.word	0x40023800

08005b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0cc      	b.n	8005cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b64:	4b68      	ldr	r3, [pc, #416]	; (8005d08 <HAL_RCC_ClockConfig+0x1b8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d90c      	bls.n	8005b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b72:	4b65      	ldr	r3, [pc, #404]	; (8005d08 <HAL_RCC_ClockConfig+0x1b8>)
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7a:	4b63      	ldr	r3, [pc, #396]	; (8005d08 <HAL_RCC_ClockConfig+0x1b8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d001      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0b8      	b.n	8005cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ba4:	4b59      	ldr	r3, [pc, #356]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4a58      	ldr	r2, [pc, #352]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bbc:	4b53      	ldr	r3, [pc, #332]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4a52      	ldr	r2, [pc, #328]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc8:	4b50      	ldr	r3, [pc, #320]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	494d      	ldr	r1, [pc, #308]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d044      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d107      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bee:	4b47      	ldr	r3, [pc, #284]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d119      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e07f      	b.n	8005cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d003      	beq.n	8005c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d107      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c0e:	4b3f      	ldr	r3, [pc, #252]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e06f      	b.n	8005cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1e:	4b3b      	ldr	r3, [pc, #236]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e067      	b.n	8005cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c2e:	4b37      	ldr	r3, [pc, #220]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f023 0203 	bic.w	r2, r3, #3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	4934      	ldr	r1, [pc, #208]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c40:	f7fc ffd0 	bl	8002be4 <HAL_GetTick>
 8005c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c48:	f7fc ffcc 	bl	8002be4 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e04f      	b.n	8005cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c5e:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 020c 	and.w	r2, r3, #12
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d1eb      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c70:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <HAL_RCC_ClockConfig+0x1b8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d20c      	bcs.n	8005c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c86:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <HAL_RCC_ClockConfig+0x1b8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d001      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e032      	b.n	8005cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca4:	4b19      	ldr	r3, [pc, #100]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4916      	ldr	r1, [pc, #88]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cc2:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	490e      	ldr	r1, [pc, #56]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cd6:	f000 f821 	bl	8005d1c <HAL_RCC_GetSysClockFreq>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	091b      	lsrs	r3, r3, #4
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	490a      	ldr	r1, [pc, #40]	; (8005d10 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce8:	5ccb      	ldrb	r3, [r1, r3]
 8005cea:	fa22 f303 	lsr.w	r3, r2, r3
 8005cee:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fc ff30 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40023c00 	.word	0x40023c00
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	0800bb2c 	.word	0x0800bb2c
 8005d14:	20000008 	.word	0x20000008
 8005d18:	2000000c 	.word	0x2000000c

08005d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d20:	b094      	sub	sp, #80	; 0x50
 8005d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	647b      	str	r3, [r7, #68]	; 0x44
 8005d28:	2300      	movs	r3, #0
 8005d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d34:	4b79      	ldr	r3, [pc, #484]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 030c 	and.w	r3, r3, #12
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d00d      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0x40>
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	f200 80e1 	bhi.w	8005f08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_RCC_GetSysClockFreq+0x34>
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d003      	beq.n	8005d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d4e:	e0db      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d50:	4b73      	ldr	r3, [pc, #460]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d54:	e0db      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d56:	4b73      	ldr	r3, [pc, #460]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d5a:	e0d8      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d5c:	4b6f      	ldr	r3, [pc, #444]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d66:	4b6d      	ldr	r3, [pc, #436]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d063      	beq.n	8005e3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d72:	4b6a      	ldr	r3, [pc, #424]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	099b      	lsrs	r3, r3, #6
 8005d78:	2200      	movs	r2, #0
 8005d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d84:	633b      	str	r3, [r7, #48]	; 0x30
 8005d86:	2300      	movs	r3, #0
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f04f 0100 	mov.w	r1, #0
 8005d9a:	0159      	lsls	r1, r3, #5
 8005d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da0:	0150      	lsls	r0, r2, #5
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4621      	mov	r1, r4
 8005da8:	1a51      	subs	r1, r2, r1
 8005daa:	6139      	str	r1, [r7, #16]
 8005dac:	4629      	mov	r1, r5
 8005dae:	eb63 0301 	sbc.w	r3, r3, r1
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	018b      	lsls	r3, r1, #6
 8005dc4:	4651      	mov	r1, sl
 8005dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dca:	4651      	mov	r1, sl
 8005dcc:	018a      	lsls	r2, r1, #6
 8005dce:	4651      	mov	r1, sl
 8005dd0:	ebb2 0801 	subs.w	r8, r2, r1
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	eb63 0901 	sbc.w	r9, r3, r1
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dee:	4690      	mov	r8, r2
 8005df0:	4699      	mov	r9, r3
 8005df2:	4623      	mov	r3, r4
 8005df4:	eb18 0303 	adds.w	r3, r8, r3
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	eb49 0303 	adc.w	r3, r9, r3
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e0e:	4629      	mov	r1, r5
 8005e10:	024b      	lsls	r3, r1, #9
 8005e12:	4621      	mov	r1, r4
 8005e14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e18:	4621      	mov	r1, r4
 8005e1a:	024a      	lsls	r2, r1, #9
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e22:	2200      	movs	r2, #0
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e2c:	f7fa ff14 	bl	8000c58 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4613      	mov	r3, r2
 8005e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e38:	e058      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3a:	4b38      	ldr	r3, [pc, #224]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	099b      	lsrs	r3, r3, #6
 8005e40:	2200      	movs	r2, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	4611      	mov	r1, r2
 8005e46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e4a:	623b      	str	r3, [r7, #32]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	f04f 0000 	mov.w	r0, #0
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	0159      	lsls	r1, r3, #5
 8005e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e66:	0150      	lsls	r0, r2, #5
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e72:	4649      	mov	r1, r9
 8005e74:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e8c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e90:	eb63 050b 	sbc.w	r5, r3, fp
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	00eb      	lsls	r3, r5, #3
 8005e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ea2:	00e2      	lsls	r2, r4, #3
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	461d      	mov	r5, r3
 8005ea8:	4643      	mov	r3, r8
 8005eaa:	18e3      	adds	r3, r4, r3
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	464b      	mov	r3, r9
 8005eb0:	eb45 0303 	adc.w	r3, r5, r3
 8005eb4:	607b      	str	r3, [r7, #4]
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	028b      	lsls	r3, r1, #10
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ecc:	4621      	mov	r1, r4
 8005ece:	028a      	lsls	r2, r1, #10
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	61fa      	str	r2, [r7, #28]
 8005edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee0:	f7fa feba 	bl	8000c58 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4613      	mov	r3, r2
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f06:	e002      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3750      	adds	r7, #80	; 0x50
 8005f14:	46bd      	mov	sp, r7
 8005f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	00f42400 	.word	0x00f42400
 8005f24:	007a1200 	.word	0x007a1200

08005f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000008 	.word	0x20000008

08005f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f44:	f7ff fff0 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	0a9b      	lsrs	r3, r3, #10
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4903      	ldr	r1, [pc, #12]	; (8005f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40023800 	.word	0x40023800
 8005f64:	0800bb3c 	.word	0x0800bb3c

08005f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f6c:	f7ff ffdc 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	0b5b      	lsrs	r3, r3, #13
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	4903      	ldr	r1, [pc, #12]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f7e:	5ccb      	ldrb	r3, [r1, r3]
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	0800bb3c 	.word	0x0800bb3c

08005f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e041      	b.n	8006026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc fbb2 	bl	8002720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f000 fa8a 	bl	80064e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d001      	beq.n	8006048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e03c      	b.n	80060c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <HAL_TIM_Base_Start+0xa0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006062:	d013      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <HAL_TIM_Base_Start+0xa4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <HAL_TIM_Base_Start+0xa8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <HAL_TIM_Base_Start+0xac>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a16      	ldr	r2, [pc, #88]	; (80060e0 <HAL_TIM_Base_Start+0xb0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d111      	bne.n	80060b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d010      	beq.n	80060c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0201 	orr.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	e007      	b.n	80060c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40014000 	.word	0x40014000

080060e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0202 	mvn.w	r2, #2
 8006110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f9bf 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9b1 	bl	8006496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f9c2 	bl	80064be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b04      	cmp	r3, #4
 800614c:	d122      	bne.n	8006194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b04      	cmp	r3, #4
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0204 	mvn.w	r2, #4
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f995 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f987 	bl	8006496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f998 	bl	80064be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0208 	mvn.w	r2, #8
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2204      	movs	r2, #4
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f96b 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f95d 	bl	8006496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f96e 	bl	80064be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b10      	cmp	r3, #16
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0210 	mvn.w	r2, #16
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2208      	movs	r2, #8
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f941 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f933 	bl	8006496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f944 	bl	80064be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b01      	cmp	r3, #1
 8006248:	d10e      	bne.n	8006268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b01      	cmp	r3, #1
 8006256:	d107      	bne.n	8006268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0201 	mvn.w	r2, #1
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f90d 	bl	8006482 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d10e      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	d107      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fabc 	bl	800680c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d10e      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d107      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f909 	bl	80064d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d10e      	bne.n	80062ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d107      	bne.n	80062ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0220 	mvn.w	r2, #32
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa86 	bl	80067f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_TIM_ConfigClockSource+0x1c>
 800630c:	2302      	movs	r3, #2
 800630e:	e0b4      	b.n	800647a <HAL_TIM_ConfigClockSource+0x186>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800632e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006348:	d03e      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0xd4>
 800634a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634e:	f200 8087 	bhi.w	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006356:	f000 8086 	beq.w	8006466 <HAL_TIM_ConfigClockSource+0x172>
 800635a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635e:	d87f      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b70      	cmp	r3, #112	; 0x70
 8006362:	d01a      	beq.n	800639a <HAL_TIM_ConfigClockSource+0xa6>
 8006364:	2b70      	cmp	r3, #112	; 0x70
 8006366:	d87b      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b60      	cmp	r3, #96	; 0x60
 800636a:	d050      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x11a>
 800636c:	2b60      	cmp	r3, #96	; 0x60
 800636e:	d877      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b50      	cmp	r3, #80	; 0x50
 8006372:	d03c      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0xfa>
 8006374:	2b50      	cmp	r3, #80	; 0x50
 8006376:	d873      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d058      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x13a>
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d86f      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b30      	cmp	r3, #48	; 0x30
 8006382:	d064      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d86b      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d060      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d867      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d05c      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 8006394:	2b10      	cmp	r3, #16
 8006396:	d05a      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 8006398:	e062      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6899      	ldr	r1, [r3, #8]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f000 f997 	bl	80066dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	609a      	str	r2, [r3, #8]
      break;
 80063c6:	e04f      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	6899      	ldr	r1, [r3, #8]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f000 f980 	bl	80066dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ea:	609a      	str	r2, [r3, #8]
      break;
 80063ec:	e03c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6859      	ldr	r1, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	461a      	mov	r2, r3
 80063fc:	f000 f8f4 	bl	80065e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2150      	movs	r1, #80	; 0x50
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f94d 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 800640c:	e02c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 f913 	bl	8006646 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2160      	movs	r1, #96	; 0x60
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f93d 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 800642c:	e01c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 f8d4 	bl	80065e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2140      	movs	r1, #64	; 0x40
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f92d 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 800644c:	e00c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f000 f924 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 800645e:	e003      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	e000      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a34      	ldr	r2, [pc, #208]	; (80065cc <TIM_Base_SetConfig+0xe4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00f      	beq.n	8006520 <TIM_Base_SetConfig+0x38>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006506:	d00b      	beq.n	8006520 <TIM_Base_SetConfig+0x38>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a31      	ldr	r2, [pc, #196]	; (80065d0 <TIM_Base_SetConfig+0xe8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d007      	beq.n	8006520 <TIM_Base_SetConfig+0x38>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a30      	ldr	r2, [pc, #192]	; (80065d4 <TIM_Base_SetConfig+0xec>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <TIM_Base_SetConfig+0x38>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2f      	ldr	r2, [pc, #188]	; (80065d8 <TIM_Base_SetConfig+0xf0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d108      	bne.n	8006532 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a25      	ldr	r2, [pc, #148]	; (80065cc <TIM_Base_SetConfig+0xe4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01b      	beq.n	8006572 <TIM_Base_SetConfig+0x8a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006540:	d017      	beq.n	8006572 <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a22      	ldr	r2, [pc, #136]	; (80065d0 <TIM_Base_SetConfig+0xe8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a21      	ldr	r2, [pc, #132]	; (80065d4 <TIM_Base_SetConfig+0xec>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a20      	ldr	r2, [pc, #128]	; (80065d8 <TIM_Base_SetConfig+0xf0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1f      	ldr	r2, [pc, #124]	; (80065dc <TIM_Base_SetConfig+0xf4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_Base_SetConfig+0x8a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <TIM_Base_SetConfig+0xf8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_Base_SetConfig+0x8a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <TIM_Base_SetConfig+0xfc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d108      	bne.n	8006584 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a08      	ldr	r2, [pc, #32]	; (80065cc <TIM_Base_SetConfig+0xe4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d103      	bne.n	80065b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	615a      	str	r2, [r3, #20]
}
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800

080065e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f023 0201 	bic.w	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 030a 	bic.w	r3, r3, #10
 8006624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006646:	b480      	push	{r7}
 8006648:	b087      	sub	sp, #28
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f023 0210 	bic.w	r2, r3, #16
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	031b      	lsls	r3, r3, #12
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f043 0307 	orr.w	r3, r3, #7
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	609a      	str	r2, [r3, #8]
}
 80066d0:	bf00      	nop
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	021a      	lsls	r2, r3, #8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	431a      	orrs	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	609a      	str	r2, [r3, #8]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e050      	b.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d013      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a13      	ldr	r2, [pc, #76]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10c      	bne.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40014000 	.word	0x40014000

080067f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e03f      	b.n	80068b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fb ff90 	bl	800276c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 ff9b 	bl	80077a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695a      	ldr	r2, [r3, #20]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b08a      	sub	sp, #40	; 0x28
 80068be:	af02      	add	r7, sp, #8
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d17c      	bne.n	80069d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_UART_Transmit+0x2c>
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e075      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_UART_Transmit+0x3e>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e06e      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2221      	movs	r2, #33	; 0x21
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800690e:	f7fc f969 	bl	8002be4 <HAL_GetTick>
 8006912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	88fa      	ldrh	r2, [r7, #6]
 800691e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006928:	d108      	bne.n	800693c <HAL_UART_Transmit+0x82>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e003      	b.n	8006944 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800694c:	e02a      	b.n	80069a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fc53 	bl	8007204 <UART_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e036      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800697c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	3302      	adds	r3, #2
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e007      	b.n	8006996 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1cf      	bne.n	800694e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	2140      	movs	r1, #64	; 0x40
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fc23 	bl	8007204 <UART_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e000      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b08c      	sub	sp, #48	; 0x30
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	4613      	mov	r3, r2
 80069ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d152      	bne.n	8006a9e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e04b      	b.n	8006aa0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e044      	b.n	8006aa0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	461a      	mov	r2, r3
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fc58 	bl	80072e0 <UART_Start_Receive_DMA>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d12c      	bne.n	8006a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d125      	bne.n	8006a92 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f043 0310 	orr.w	r3, r3, #16
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	330c      	adds	r3, #12
 8006a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a7e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6a39      	ldr	r1, [r7, #32]
 8006a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e5      	bne.n	8006a5c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006a90:	e002      	b.n	8006a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a9c:	e000      	b.n	8006aa0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
  }
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3730      	adds	r7, #48	; 0x30
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b0ba      	sub	sp, #232	; 0xe8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10f      	bne.n	8006b0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <HAL_UART_IRQHandler+0x66>
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fd8f 	bl	800762a <UART_Receive_IT>
      return;
 8006b0c:	e256      	b.n	8006fbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80de 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x22c>
 8006b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d106      	bne.n	8006b32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 80d1 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <HAL_UART_IRQHandler+0xae>
 8006b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f043 0201 	orr.w	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00b      	beq.n	8006b7a <HAL_UART_IRQHandler+0xd2>
 8006b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f043 0202 	orr.w	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <HAL_UART_IRQHandler+0xf6>
 8006b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d005      	beq.n	8006b9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f043 0204 	orr.w	r2, r3, #4
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d011      	beq.n	8006bce <HAL_UART_IRQHandler+0x126>
 8006baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f043 0208 	orr.w	r2, r3, #8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 81ed 	beq.w	8006fb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x14e>
 8006be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fd1a 	bl	800762a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	bf0c      	ite	eq
 8006c04:	2301      	moveq	r3, #1
 8006c06:	2300      	movne	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d103      	bne.n	8006c22 <HAL_UART_IRQHandler+0x17a>
 8006c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d04f      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fc22 	bl	800746c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c32:	2b40      	cmp	r3, #64	; 0x40
 8006c34:	d141      	bne.n	8006cba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1d9      	bne.n	8006c36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d013      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	4a7d      	ldr	r2, [pc, #500]	; (8006e84 <HAL_UART_IRQHandler+0x3dc>)
 8006c90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fc fe54 	bl	8003944 <HAL_DMA_Abort_IT>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d016      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb0:	e00e      	b.n	8006cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f9a4 	bl	8007000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb8:	e00a      	b.n	8006cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9a0 	bl	8007000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e006      	b.n	8006cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f99c 	bl	8007000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006cce:	e170      	b.n	8006fb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	bf00      	nop
    return;
 8006cd2:	e16e      	b.n	8006fb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f040 814a 	bne.w	8006f72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 0310 	and.w	r3, r3, #16
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8143 	beq.w	8006f72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 813c 	beq.w	8006f72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	f040 80b4 	bne.w	8006e88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8140 	beq.w	8006fb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	f080 8139 	bcs.w	8006fb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d56:	f000 8088 	beq.w	8006e6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1d9      	bne.n	8006d5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3314      	adds	r3, #20
 8006dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3314      	adds	r3, #20
 8006dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e1      	bne.n	8006da6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e3      	bne.n	8006de2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3a:	f023 0310 	bic.w	r3, r3, #16
 8006e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e3      	bne.n	8006e28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fc fcfd 	bl	8003864 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fa fea8 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e80:	e099      	b.n	8006fb6 <HAL_UART_IRQHandler+0x50e>
 8006e82:	bf00      	nop
 8006e84:	08007533 	.word	0x08007533
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 808b 	beq.w	8006fba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8086 	beq.w	8006fba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ed2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e3      	bne.n	8006eae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3314      	adds	r3, #20
 8006f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e3      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f50:	61fa      	str	r2, [r7, #28]
 8006f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e3      	bne.n	8006f2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fa fe30 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f70:	e023      	b.n	8006fba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <HAL_UART_IRQHandler+0x4ea>
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fae5 	bl	800755a <UART_Transmit_IT>
    return;
 8006f90:	e014      	b.n	8006fbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00e      	beq.n	8006fbc <HAL_UART_IRQHandler+0x514>
 8006f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fb25 	bl	80075fa <UART_EndTransmit_IT>
    return;
 8006fb0:	e004      	b.n	8006fbc <HAL_UART_IRQHandler+0x514>
    return;
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <HAL_UART_IRQHandler+0x514>
      return;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <HAL_UART_IRQHandler+0x514>
      return;
 8006fba:	bf00      	nop
  }
}
 8006fbc:	37e8      	adds	r7, #232	; 0xe8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop

08006fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b09c      	sub	sp, #112	; 0x70
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d172      	bne.n	8007116 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007032:	2200      	movs	r2, #0
 8007034:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800704c:	66bb      	str	r3, [r7, #104]	; 0x68
 800704e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007056:	65ba      	str	r2, [r7, #88]	; 0x58
 8007058:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800705c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3314      	adds	r3, #20
 8007070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	667b      	str	r3, [r7, #100]	; 0x64
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3314      	adds	r3, #20
 8007088:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800708a:	647a      	str	r2, [r7, #68]	; 0x44
 800708c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e5      	bne.n	800706a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	623b      	str	r3, [r7, #32]
   return(result);
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b4:	663b      	str	r3, [r7, #96]	; 0x60
 80070b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3314      	adds	r3, #20
 80070bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070be:	633a      	str	r2, [r7, #48]	; 0x30
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e5      	bne.n	800709e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d119      	bne.n	8007116 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007102:	61fa      	str	r2, [r7, #28]
 8007104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	69b9      	ldr	r1, [r7, #24]
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	617b      	str	r3, [r7, #20]
   return(result);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	2b01      	cmp	r3, #1
 800711c:	d106      	bne.n	800712c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007122:	4619      	mov	r1, r3
 8007124:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007126:	f7fa fd53 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800712a:	e002      	b.n	8007132 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800712c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800712e:	f7ff ff53 	bl	8006fd8 <HAL_UART_RxCpltCallback>
}
 8007132:	bf00      	nop
 8007134:	3770      	adds	r7, #112	; 0x70
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	2b01      	cmp	r3, #1
 800714e:	d108      	bne.n	8007162 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007154:	085b      	lsrs	r3, r3, #1
 8007156:	b29b      	uxth	r3, r3
 8007158:	4619      	mov	r1, r3
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7fa fd38 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007160:	e002      	b.n	8007168 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff ff42 	bl	8006fec <HAL_UART_RxHalfCpltCallback>
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718c:	2b80      	cmp	r3, #128	; 0x80
 800718e:	bf0c      	ite	eq
 8007190:	2301      	moveq	r3, #1
 8007192:	2300      	movne	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b21      	cmp	r3, #33	; 0x21
 80071a2:	d108      	bne.n	80071b6 <UART_DMAError+0x46>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80071b0:	68b8      	ldr	r0, [r7, #8]
 80071b2:	f000 f933 	bl	800741c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c0:	2b40      	cmp	r3, #64	; 0x40
 80071c2:	bf0c      	ite	eq
 80071c4:	2301      	moveq	r3, #1
 80071c6:	2300      	movne	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b22      	cmp	r3, #34	; 0x22
 80071d6:	d108      	bne.n	80071ea <UART_DMAError+0x7a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2200      	movs	r2, #0
 80071e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f000 f941 	bl	800746c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f043 0210 	orr.w	r2, r3, #16
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f6:	68b8      	ldr	r0, [r7, #8]
 80071f8:	f7ff ff02 	bl	8007000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b090      	sub	sp, #64	; 0x40
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007214:	e050      	b.n	80072b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d04c      	beq.n	80072b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800721e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <UART_WaitOnFlagUntilTimeout+0x30>
 8007224:	f7fb fcde 	bl	8002be4 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007230:	429a      	cmp	r2, r3
 8007232:	d241      	bcs.n	80072b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800724a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007254:	637a      	str	r2, [r7, #52]	; 0x34
 8007256:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800725a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3314      	adds	r3, #20
 800726e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	613b      	str	r3, [r7, #16]
   return(result);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007288:	623a      	str	r2, [r7, #32]
 800728a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	69f9      	ldr	r1, [r7, #28]
 800728e:	6a3a      	ldr	r2, [r7, #32]
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	61bb      	str	r3, [r7, #24]
   return(result);
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e00f      	b.n	80072d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4013      	ands	r3, r2
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	bf0c      	ite	eq
 80072c8:	2301      	moveq	r3, #1
 80072ca:	2300      	movne	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d09f      	beq.n	8007216 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3740      	adds	r7, #64	; 0x40
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b098      	sub	sp, #96	; 0x60
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2222      	movs	r2, #34	; 0x22
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	4a40      	ldr	r2, [pc, #256]	; (8007410 <UART_Start_Receive_DMA+0x130>)
 800730e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	4a3f      	ldr	r2, [pc, #252]	; (8007414 <UART_Start_Receive_DMA+0x134>)
 8007316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	4a3e      	ldr	r2, [pc, #248]	; (8007418 <UART_Start_Receive_DMA+0x138>)
 800731e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	2200      	movs	r2, #0
 8007326:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	f7fc fa38 	bl	80037b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	613b      	str	r3, [r7, #16]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d019      	beq.n	800739e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007380:	65bb      	str	r3, [r7, #88]	; 0x58
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800738a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800738c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	657b      	str	r3, [r7, #84]	; 0x54
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073be:	63ba      	str	r2, [r7, #56]	; 0x38
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e5      	bne.n	800739e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3314      	adds	r3, #20
 80073d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	617b      	str	r3, [r7, #20]
   return(result);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e8:	653b      	str	r3, [r7, #80]	; 0x50
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3314      	adds	r3, #20
 80073f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073f2:	627a      	str	r2, [r7, #36]	; 0x24
 80073f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6a39      	ldr	r1, [r7, #32]
 80073f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e5      	bne.n	80073d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3760      	adds	r7, #96	; 0x60
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	08007015 	.word	0x08007015
 8007414:	0800713b 	.word	0x0800713b
 8007418:	08007171 	.word	0x08007171

0800741c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b089      	sub	sp, #36	; 0x24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	60bb      	str	r3, [r7, #8]
   return(result);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	330c      	adds	r3, #12
 8007442:	69fa      	ldr	r2, [r7, #28]
 8007444:	61ba      	str	r2, [r7, #24]
 8007446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6979      	ldr	r1, [r7, #20]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	613b      	str	r3, [r7, #16]
   return(result);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e5      	bne.n	8007424 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007460:	bf00      	nop
 8007462:	3724      	adds	r7, #36	; 0x24
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b095      	sub	sp, #84	; 0x54
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	330c      	adds	r3, #12
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800748a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	330c      	adds	r3, #12
 8007492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007494:	643a      	str	r2, [r7, #64]	; 0x40
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800749a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e5      	bne.n	8007474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3314      	adds	r3, #20
 80074ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3314      	adds	r3, #20
 80074c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e5      	bne.n	80074a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d119      	bne.n	8007518 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f023 0310 	bic.w	r3, r3, #16
 80074fa:	647b      	str	r3, [r7, #68]	; 0x44
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007504:	61ba      	str	r2, [r7, #24]
 8007506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6979      	ldr	r1, [r7, #20]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	613b      	str	r3, [r7, #16]
   return(result);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007526:	bf00      	nop
 8007528:	3754      	adds	r7, #84	; 0x54
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fd57 	bl	8007000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b21      	cmp	r3, #33	; 0x21
 800756c:	d13e      	bne.n	80075ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007576:	d114      	bne.n	80075a2 <UART_Transmit_IT+0x48>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d110      	bne.n	80075a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007594:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	621a      	str	r2, [r3, #32]
 80075a0:	e008      	b.n	80075b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	1c59      	adds	r1, r3, #1
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6211      	str	r1, [r2, #32]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29b      	uxth	r3, r3
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4619      	mov	r1, r3
 80075c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10f      	bne.n	80075e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	e000      	b.n	80075ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075ec:	2302      	movs	r3, #2
  }
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007610:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff fcd2 	bl	8006fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b08c      	sub	sp, #48	; 0x30
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b22      	cmp	r3, #34	; 0x22
 800763c:	f040 80ab 	bne.w	8007796 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007648:	d117      	bne.n	800767a <UART_Receive_IT+0x50>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d113      	bne.n	800767a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	b29b      	uxth	r3, r3
 8007664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007668:	b29a      	uxth	r2, r3
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	1c9a      	adds	r2, r3, #2
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	629a      	str	r2, [r3, #40]	; 0x28
 8007678:	e026      	b.n	80076c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768c:	d007      	beq.n	800769e <UART_Receive_IT+0x74>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <UART_Receive_IT+0x82>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	e008      	b.n	80076be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	4619      	mov	r1, r3
 80076d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d15a      	bne.n	8007792 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0220 	bic.w	r2, r2, #32
 80076ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	2b01      	cmp	r3, #1
 800771a:	d135      	bne.n	8007788 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	330c      	adds	r3, #12
 8007728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	613b      	str	r3, [r7, #16]
   return(result);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f023 0310 	bic.w	r3, r3, #16
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007742:	623a      	str	r2, [r7, #32]
 8007744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	69f9      	ldr	r1, [r7, #28]
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0310 	and.w	r3, r3, #16
 8007760:	2b10      	cmp	r3, #16
 8007762:	d10a      	bne.n	800777a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fa fa25 	bl	8001bd0 <HAL_UARTEx_RxEventCallback>
 8007786:	e002      	b.n	800778e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff fc25 	bl	8006fd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e002      	b.n	8007798 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	e000      	b.n	8007798 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3730      	adds	r7, #48	; 0x30
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b0c0      	sub	sp, #256	; 0x100
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077bc:	68d9      	ldr	r1, [r3, #12]
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	ea40 0301 	orr.w	r3, r0, r1
 80077c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	431a      	orrs	r2, r3
 80077e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077f8:	f021 010c 	bic.w	r1, r1, #12
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007806:	430b      	orrs	r3, r1
 8007808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800780a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781a:	6999      	ldr	r1, [r3, #24]
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	ea40 0301 	orr.w	r3, r0, r1
 8007826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4b8f      	ldr	r3, [pc, #572]	; (8007a6c <UART_SetConfig+0x2cc>)
 8007830:	429a      	cmp	r2, r3
 8007832:	d005      	beq.n	8007840 <UART_SetConfig+0xa0>
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b8d      	ldr	r3, [pc, #564]	; (8007a70 <UART_SetConfig+0x2d0>)
 800783c:	429a      	cmp	r2, r3
 800783e:	d104      	bne.n	800784a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007840:	f7fe fb92 	bl	8005f68 <HAL_RCC_GetPCLK2Freq>
 8007844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007848:	e003      	b.n	8007852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800784a:	f7fe fb79 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 800784e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800785c:	f040 810c 	bne.w	8007a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007864:	2200      	movs	r2, #0
 8007866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800786a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800786e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007872:	4622      	mov	r2, r4
 8007874:	462b      	mov	r3, r5
 8007876:	1891      	adds	r1, r2, r2
 8007878:	65b9      	str	r1, [r7, #88]	; 0x58
 800787a:	415b      	adcs	r3, r3
 800787c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800787e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007882:	4621      	mov	r1, r4
 8007884:	eb12 0801 	adds.w	r8, r2, r1
 8007888:	4629      	mov	r1, r5
 800788a:	eb43 0901 	adc.w	r9, r3, r1
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800789a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800789e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078a2:	4690      	mov	r8, r2
 80078a4:	4699      	mov	r9, r3
 80078a6:	4623      	mov	r3, r4
 80078a8:	eb18 0303 	adds.w	r3, r8, r3
 80078ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078b0:	462b      	mov	r3, r5
 80078b2:	eb49 0303 	adc.w	r3, r9, r3
 80078b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80078ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80078ce:	460b      	mov	r3, r1
 80078d0:	18db      	adds	r3, r3, r3
 80078d2:	653b      	str	r3, [r7, #80]	; 0x50
 80078d4:	4613      	mov	r3, r2
 80078d6:	eb42 0303 	adc.w	r3, r2, r3
 80078da:	657b      	str	r3, [r7, #84]	; 0x54
 80078dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80078e4:	f7f9 f9b8 	bl	8000c58 <__aeabi_uldivmod>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4b61      	ldr	r3, [pc, #388]	; (8007a74 <UART_SetConfig+0x2d4>)
 80078ee:	fba3 2302 	umull	r2, r3, r3, r2
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	011c      	lsls	r4, r3, #4
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	1891      	adds	r1, r2, r2
 800790e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007910:	415b      	adcs	r3, r3
 8007912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007918:	4641      	mov	r1, r8
 800791a:	eb12 0a01 	adds.w	sl, r2, r1
 800791e:	4649      	mov	r1, r9
 8007920:	eb43 0b01 	adc.w	fp, r3, r1
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007938:	4692      	mov	sl, r2
 800793a:	469b      	mov	fp, r3
 800793c:	4643      	mov	r3, r8
 800793e:	eb1a 0303 	adds.w	r3, sl, r3
 8007942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007946:	464b      	mov	r3, r9
 8007948:	eb4b 0303 	adc.w	r3, fp, r3
 800794c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800795c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007964:	460b      	mov	r3, r1
 8007966:	18db      	adds	r3, r3, r3
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
 800796a:	4613      	mov	r3, r2
 800796c:	eb42 0303 	adc.w	r3, r2, r3
 8007970:	647b      	str	r3, [r7, #68]	; 0x44
 8007972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800797a:	f7f9 f96d 	bl	8000c58 <__aeabi_uldivmod>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4611      	mov	r1, r2
 8007984:	4b3b      	ldr	r3, [pc, #236]	; (8007a74 <UART_SetConfig+0x2d4>)
 8007986:	fba3 2301 	umull	r2, r3, r3, r1
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	2264      	movs	r2, #100	; 0x64
 800798e:	fb02 f303 	mul.w	r3, r2, r3
 8007992:	1acb      	subs	r3, r1, r3
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800799a:	4b36      	ldr	r3, [pc, #216]	; (8007a74 <UART_SetConfig+0x2d4>)
 800799c:	fba3 2302 	umull	r2, r3, r3, r2
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079a8:	441c      	add	r4, r3
 80079aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	1891      	adds	r1, r2, r2
 80079c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80079c4:	415b      	adcs	r3, r3
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079cc:	4641      	mov	r1, r8
 80079ce:	1851      	adds	r1, r2, r1
 80079d0:	6339      	str	r1, [r7, #48]	; 0x30
 80079d2:	4649      	mov	r1, r9
 80079d4:	414b      	adcs	r3, r1
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80079e4:	4659      	mov	r1, fp
 80079e6:	00cb      	lsls	r3, r1, #3
 80079e8:	4651      	mov	r1, sl
 80079ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ee:	4651      	mov	r1, sl
 80079f0:	00ca      	lsls	r2, r1, #3
 80079f2:	4610      	mov	r0, r2
 80079f4:	4619      	mov	r1, r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	4642      	mov	r2, r8
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a00:	464b      	mov	r3, r9
 8007a02:	460a      	mov	r2, r1
 8007a04:	eb42 0303 	adc.w	r3, r2, r3
 8007a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a20:	460b      	mov	r3, r1
 8007a22:	18db      	adds	r3, r3, r3
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a26:	4613      	mov	r3, r2
 8007a28:	eb42 0303 	adc.w	r3, r2, r3
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a36:	f7f9 f90f 	bl	8000c58 <__aeabi_uldivmod>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <UART_SetConfig+0x2d4>)
 8007a40:	fba3 1302 	umull	r1, r3, r3, r2
 8007a44:	095b      	lsrs	r3, r3, #5
 8007a46:	2164      	movs	r1, #100	; 0x64
 8007a48:	fb01 f303 	mul.w	r3, r1, r3
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	3332      	adds	r3, #50	; 0x32
 8007a52:	4a08      	ldr	r2, [pc, #32]	; (8007a74 <UART_SetConfig+0x2d4>)
 8007a54:	fba2 2303 	umull	r2, r3, r2, r3
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	f003 0207 	and.w	r2, r3, #7
 8007a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4422      	add	r2, r4
 8007a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a68:	e105      	b.n	8007c76 <UART_SetConfig+0x4d6>
 8007a6a:	bf00      	nop
 8007a6c:	40011000 	.word	0x40011000
 8007a70:	40011400 	.word	0x40011400
 8007a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a8a:	4642      	mov	r2, r8
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	1891      	adds	r1, r2, r2
 8007a90:	6239      	str	r1, [r7, #32]
 8007a92:	415b      	adcs	r3, r3
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
 8007a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	1854      	adds	r4, r2, r1
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	eb43 0501 	adc.w	r5, r3, r1
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	00eb      	lsls	r3, r5, #3
 8007aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ab2:	00e2      	lsls	r2, r4, #3
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	4643      	mov	r3, r8
 8007aba:	18e3      	adds	r3, r4, r3
 8007abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	eb45 0303 	adc.w	r3, r5, r3
 8007ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	008b      	lsls	r3, r1, #2
 8007aea:	4621      	mov	r1, r4
 8007aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007af0:	4621      	mov	r1, r4
 8007af2:	008a      	lsls	r2, r1, #2
 8007af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007af8:	f7f9 f8ae 	bl	8000c58 <__aeabi_uldivmod>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4b60      	ldr	r3, [pc, #384]	; (8007c84 <UART_SetConfig+0x4e4>)
 8007b02:	fba3 2302 	umull	r2, r3, r3, r2
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	011c      	lsls	r4, r3, #4
 8007b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	1891      	adds	r1, r2, r2
 8007b22:	61b9      	str	r1, [r7, #24]
 8007b24:	415b      	adcs	r3, r3
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	1851      	adds	r1, r2, r1
 8007b30:	6139      	str	r1, [r7, #16]
 8007b32:	4649      	mov	r1, r9
 8007b34:	414b      	adcs	r3, r1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b44:	4659      	mov	r1, fp
 8007b46:	00cb      	lsls	r3, r1, #3
 8007b48:	4651      	mov	r1, sl
 8007b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b4e:	4651      	mov	r1, sl
 8007b50:	00ca      	lsls	r2, r1, #3
 8007b52:	4610      	mov	r0, r2
 8007b54:	4619      	mov	r1, r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	4642      	mov	r2, r8
 8007b5a:	189b      	adds	r3, r3, r2
 8007b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b60:	464b      	mov	r3, r9
 8007b62:	460a      	mov	r2, r1
 8007b64:	eb42 0303 	adc.w	r3, r2, r3
 8007b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b84:	4649      	mov	r1, r9
 8007b86:	008b      	lsls	r3, r1, #2
 8007b88:	4641      	mov	r1, r8
 8007b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b8e:	4641      	mov	r1, r8
 8007b90:	008a      	lsls	r2, r1, #2
 8007b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b96:	f7f9 f85f 	bl	8000c58 <__aeabi_uldivmod>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <UART_SetConfig+0x4e4>)
 8007ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba4:	095b      	lsrs	r3, r3, #5
 8007ba6:	2164      	movs	r1, #100	; 0x64
 8007ba8:	fb01 f303 	mul.w	r3, r1, r3
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	3332      	adds	r3, #50	; 0x32
 8007bb2:	4a34      	ldr	r2, [pc, #208]	; (8007c84 <UART_SetConfig+0x4e4>)
 8007bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bbe:	441c      	add	r4, r3
 8007bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8007bc8:	677a      	str	r2, [r7, #116]	; 0x74
 8007bca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007bce:	4642      	mov	r2, r8
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	1891      	adds	r1, r2, r2
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	415b      	adcs	r3, r3
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bde:	4641      	mov	r1, r8
 8007be0:	1851      	adds	r1, r2, r1
 8007be2:	6039      	str	r1, [r7, #0]
 8007be4:	4649      	mov	r1, r9
 8007be6:	414b      	adcs	r3, r1
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	f04f 0200 	mov.w	r2, #0
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bf6:	4659      	mov	r1, fp
 8007bf8:	00cb      	lsls	r3, r1, #3
 8007bfa:	4651      	mov	r1, sl
 8007bfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c00:	4651      	mov	r1, sl
 8007c02:	00ca      	lsls	r2, r1, #3
 8007c04:	4610      	mov	r0, r2
 8007c06:	4619      	mov	r1, r3
 8007c08:	4603      	mov	r3, r0
 8007c0a:	4642      	mov	r2, r8
 8007c0c:	189b      	adds	r3, r3, r2
 8007c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c10:	464b      	mov	r3, r9
 8007c12:	460a      	mov	r2, r1
 8007c14:	eb42 0303 	adc.w	r3, r2, r3
 8007c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	663b      	str	r3, [r7, #96]	; 0x60
 8007c24:	667a      	str	r2, [r7, #100]	; 0x64
 8007c26:	f04f 0200 	mov.w	r2, #0
 8007c2a:	f04f 0300 	mov.w	r3, #0
 8007c2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c32:	4649      	mov	r1, r9
 8007c34:	008b      	lsls	r3, r1, #2
 8007c36:	4641      	mov	r1, r8
 8007c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	008a      	lsls	r2, r1, #2
 8007c40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c44:	f7f9 f808 	bl	8000c58 <__aeabi_uldivmod>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <UART_SetConfig+0x4e4>)
 8007c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	2164      	movs	r1, #100	; 0x64
 8007c56:	fb01 f303 	mul.w	r3, r1, r3
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	3332      	adds	r3, #50	; 0x32
 8007c60:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <UART_SetConfig+0x4e4>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4422      	add	r2, r4
 8007c74:	609a      	str	r2, [r3, #8]
}
 8007c76:	bf00      	nop
 8007c78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c82:	bf00      	nop
 8007c84:	51eb851f 	.word	0x51eb851f

08007c88 <cosf>:
 8007c88:	ee10 3a10 	vmov	r3, s0
 8007c8c:	b507      	push	{r0, r1, r2, lr}
 8007c8e:	4a1e      	ldr	r2, [pc, #120]	; (8007d08 <cosf+0x80>)
 8007c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c94:	4293      	cmp	r3, r2
 8007c96:	dc06      	bgt.n	8007ca6 <cosf+0x1e>
 8007c98:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8007d0c <cosf+0x84>
 8007c9c:	b003      	add	sp, #12
 8007c9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ca2:	f000 ba7b 	b.w	800819c <__kernel_cosf>
 8007ca6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007caa:	db04      	blt.n	8007cb6 <cosf+0x2e>
 8007cac:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007cb0:	b003      	add	sp, #12
 8007cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cb6:	4668      	mov	r0, sp
 8007cb8:	f000 f930 	bl	8007f1c <__ieee754_rem_pio2f>
 8007cbc:	f000 0003 	and.w	r0, r0, #3
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d009      	beq.n	8007cd8 <cosf+0x50>
 8007cc4:	2802      	cmp	r0, #2
 8007cc6:	d010      	beq.n	8007cea <cosf+0x62>
 8007cc8:	b9b0      	cbnz	r0, 8007cf8 <cosf+0x70>
 8007cca:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cce:	ed9d 0a00 	vldr	s0, [sp]
 8007cd2:	f000 fa63 	bl	800819c <__kernel_cosf>
 8007cd6:	e7eb      	b.n	8007cb0 <cosf+0x28>
 8007cd8:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cdc:	ed9d 0a00 	vldr	s0, [sp]
 8007ce0:	f000 fd32 	bl	8008748 <__kernel_sinf>
 8007ce4:	eeb1 0a40 	vneg.f32	s0, s0
 8007ce8:	e7e2      	b.n	8007cb0 <cosf+0x28>
 8007cea:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cee:	ed9d 0a00 	vldr	s0, [sp]
 8007cf2:	f000 fa53 	bl	800819c <__kernel_cosf>
 8007cf6:	e7f5      	b.n	8007ce4 <cosf+0x5c>
 8007cf8:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cfc:	ed9d 0a00 	vldr	s0, [sp]
 8007d00:	2001      	movs	r0, #1
 8007d02:	f000 fd21 	bl	8008748 <__kernel_sinf>
 8007d06:	e7d3      	b.n	8007cb0 <cosf+0x28>
 8007d08:	3f490fd8 	.word	0x3f490fd8
 8007d0c:	00000000 	.word	0x00000000

08007d10 <sinf>:
 8007d10:	ee10 3a10 	vmov	r3, s0
 8007d14:	b507      	push	{r0, r1, r2, lr}
 8007d16:	4a1f      	ldr	r2, [pc, #124]	; (8007d94 <sinf+0x84>)
 8007d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	dc07      	bgt.n	8007d30 <sinf+0x20>
 8007d20:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007d98 <sinf+0x88>
 8007d24:	2000      	movs	r0, #0
 8007d26:	b003      	add	sp, #12
 8007d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d2c:	f000 bd0c 	b.w	8008748 <__kernel_sinf>
 8007d30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007d34:	db04      	blt.n	8007d40 <sinf+0x30>
 8007d36:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007d3a:	b003      	add	sp, #12
 8007d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d40:	4668      	mov	r0, sp
 8007d42:	f000 f8eb 	bl	8007f1c <__ieee754_rem_pio2f>
 8007d46:	f000 0003 	and.w	r0, r0, #3
 8007d4a:	2801      	cmp	r0, #1
 8007d4c:	d00a      	beq.n	8007d64 <sinf+0x54>
 8007d4e:	2802      	cmp	r0, #2
 8007d50:	d00f      	beq.n	8007d72 <sinf+0x62>
 8007d52:	b9c0      	cbnz	r0, 8007d86 <sinf+0x76>
 8007d54:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d58:	ed9d 0a00 	vldr	s0, [sp]
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	f000 fcf3 	bl	8008748 <__kernel_sinf>
 8007d62:	e7ea      	b.n	8007d3a <sinf+0x2a>
 8007d64:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d68:	ed9d 0a00 	vldr	s0, [sp]
 8007d6c:	f000 fa16 	bl	800819c <__kernel_cosf>
 8007d70:	e7e3      	b.n	8007d3a <sinf+0x2a>
 8007d72:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d76:	ed9d 0a00 	vldr	s0, [sp]
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	f000 fce4 	bl	8008748 <__kernel_sinf>
 8007d80:	eeb1 0a40 	vneg.f32	s0, s0
 8007d84:	e7d9      	b.n	8007d3a <sinf+0x2a>
 8007d86:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d8a:	ed9d 0a00 	vldr	s0, [sp]
 8007d8e:	f000 fa05 	bl	800819c <__kernel_cosf>
 8007d92:	e7f5      	b.n	8007d80 <sinf+0x70>
 8007d94:	3f490fd8 	.word	0x3f490fd8
 8007d98:	00000000 	.word	0x00000000

08007d9c <atan2f>:
 8007d9c:	f000 b81e 	b.w	8007ddc <__ieee754_atan2f>

08007da0 <sqrtf>:
 8007da0:	b508      	push	{r3, lr}
 8007da2:	ed2d 8b02 	vpush	{d8}
 8007da6:	eeb0 8a40 	vmov.f32	s16, s0
 8007daa:	f000 f9f3 	bl	8008194 <__ieee754_sqrtf>
 8007dae:	eeb4 8a48 	vcmp.f32	s16, s16
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	d60c      	bvs.n	8007dd2 <sqrtf+0x32>
 8007db8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007dd8 <sqrtf+0x38>
 8007dbc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc4:	d505      	bpl.n	8007dd2 <sqrtf+0x32>
 8007dc6:	f000 fe9b 	bl	8008b00 <__errno>
 8007dca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007dce:	2321      	movs	r3, #33	; 0x21
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	ecbd 8b02 	vpop	{d8}
 8007dd6:	bd08      	pop	{r3, pc}
 8007dd8:	00000000 	.word	0x00000000

08007ddc <__ieee754_atan2f>:
 8007ddc:	ee10 2a90 	vmov	r2, s1
 8007de0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007de4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007de8:	b510      	push	{r4, lr}
 8007dea:	eef0 7a40 	vmov.f32	s15, s0
 8007dee:	dc06      	bgt.n	8007dfe <__ieee754_atan2f+0x22>
 8007df0:	ee10 0a10 	vmov	r0, s0
 8007df4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007df8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007dfc:	dd04      	ble.n	8007e08 <__ieee754_atan2f+0x2c>
 8007dfe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007e02:	eeb0 0a67 	vmov.f32	s0, s15
 8007e06:	bd10      	pop	{r4, pc}
 8007e08:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007e0c:	d103      	bne.n	8007e16 <__ieee754_atan2f+0x3a>
 8007e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e12:	f000 bce1 	b.w	80087d8 <atanf>
 8007e16:	1794      	asrs	r4, r2, #30
 8007e18:	f004 0402 	and.w	r4, r4, #2
 8007e1c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007e20:	b943      	cbnz	r3, 8007e34 <__ieee754_atan2f+0x58>
 8007e22:	2c02      	cmp	r4, #2
 8007e24:	d05e      	beq.n	8007ee4 <__ieee754_atan2f+0x108>
 8007e26:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007ef8 <__ieee754_atan2f+0x11c>
 8007e2a:	2c03      	cmp	r4, #3
 8007e2c:	bf08      	it	eq
 8007e2e:	eef0 7a47 	vmoveq.f32	s15, s14
 8007e32:	e7e6      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007e34:	b941      	cbnz	r1, 8007e48 <__ieee754_atan2f+0x6c>
 8007e36:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007efc <__ieee754_atan2f+0x120>
 8007e3a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007f00 <__ieee754_atan2f+0x124>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	bfb8      	it	lt
 8007e42:	eef0 7a40 	vmovlt.f32	s15, s0
 8007e46:	e7dc      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007e48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007e4c:	d110      	bne.n	8007e70 <__ieee754_atan2f+0x94>
 8007e4e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e56:	d107      	bne.n	8007e68 <__ieee754_atan2f+0x8c>
 8007e58:	2c02      	cmp	r4, #2
 8007e5a:	d846      	bhi.n	8007eea <__ieee754_atan2f+0x10e>
 8007e5c:	4b29      	ldr	r3, [pc, #164]	; (8007f04 <__ieee754_atan2f+0x128>)
 8007e5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e62:	edd4 7a00 	vldr	s15, [r4]
 8007e66:	e7cc      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007e68:	2c02      	cmp	r4, #2
 8007e6a:	d841      	bhi.n	8007ef0 <__ieee754_atan2f+0x114>
 8007e6c:	4b26      	ldr	r3, [pc, #152]	; (8007f08 <__ieee754_atan2f+0x12c>)
 8007e6e:	e7f6      	b.n	8007e5e <__ieee754_atan2f+0x82>
 8007e70:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007e74:	d0df      	beq.n	8007e36 <__ieee754_atan2f+0x5a>
 8007e76:	1a5b      	subs	r3, r3, r1
 8007e78:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8007e7c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007e80:	da1a      	bge.n	8007eb8 <__ieee754_atan2f+0xdc>
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	da01      	bge.n	8007e8a <__ieee754_atan2f+0xae>
 8007e86:	313c      	adds	r1, #60	; 0x3c
 8007e88:	db19      	blt.n	8007ebe <__ieee754_atan2f+0xe2>
 8007e8a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007e8e:	f000 fd77 	bl	8008980 <fabsf>
 8007e92:	f000 fca1 	bl	80087d8 <atanf>
 8007e96:	eef0 7a40 	vmov.f32	s15, s0
 8007e9a:	2c01      	cmp	r4, #1
 8007e9c:	d012      	beq.n	8007ec4 <__ieee754_atan2f+0xe8>
 8007e9e:	2c02      	cmp	r4, #2
 8007ea0:	d017      	beq.n	8007ed2 <__ieee754_atan2f+0xf6>
 8007ea2:	2c00      	cmp	r4, #0
 8007ea4:	d0ad      	beq.n	8007e02 <__ieee754_atan2f+0x26>
 8007ea6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007f0c <__ieee754_atan2f+0x130>
 8007eaa:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007eae:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007f10 <__ieee754_atan2f+0x134>
 8007eb2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007eb6:	e7a4      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007eb8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007efc <__ieee754_atan2f+0x120>
 8007ebc:	e7ed      	b.n	8007e9a <__ieee754_atan2f+0xbe>
 8007ebe:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007f14 <__ieee754_atan2f+0x138>
 8007ec2:	e7ea      	b.n	8007e9a <__ieee754_atan2f+0xbe>
 8007ec4:	ee17 3a90 	vmov	r3, s15
 8007ec8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	e797      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007ed2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007f0c <__ieee754_atan2f+0x130>
 8007ed6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007eda:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007f10 <__ieee754_atan2f+0x134>
 8007ede:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007ee2:	e78e      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007ee4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007f10 <__ieee754_atan2f+0x134>
 8007ee8:	e78b      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007eea:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007f18 <__ieee754_atan2f+0x13c>
 8007eee:	e788      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007ef0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007f14 <__ieee754_atan2f+0x138>
 8007ef4:	e785      	b.n	8007e02 <__ieee754_atan2f+0x26>
 8007ef6:	bf00      	nop
 8007ef8:	c0490fdb 	.word	0xc0490fdb
 8007efc:	3fc90fdb 	.word	0x3fc90fdb
 8007f00:	bfc90fdb 	.word	0xbfc90fdb
 8007f04:	0800bb4c 	.word	0x0800bb4c
 8007f08:	0800bb58 	.word	0x0800bb58
 8007f0c:	33bbbd2e 	.word	0x33bbbd2e
 8007f10:	40490fdb 	.word	0x40490fdb
 8007f14:	00000000 	.word	0x00000000
 8007f18:	3f490fdb 	.word	0x3f490fdb

08007f1c <__ieee754_rem_pio2f>:
 8007f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1e:	ee10 6a10 	vmov	r6, s0
 8007f22:	4b8e      	ldr	r3, [pc, #568]	; (800815c <__ieee754_rem_pio2f+0x240>)
 8007f24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007f28:	429d      	cmp	r5, r3
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	eef0 7a40 	vmov.f32	s15, s0
 8007f30:	4604      	mov	r4, r0
 8007f32:	dc05      	bgt.n	8007f40 <__ieee754_rem_pio2f+0x24>
 8007f34:	2300      	movs	r3, #0
 8007f36:	ed80 0a00 	vstr	s0, [r0]
 8007f3a:	6043      	str	r3, [r0, #4]
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e01a      	b.n	8007f76 <__ieee754_rem_pio2f+0x5a>
 8007f40:	4b87      	ldr	r3, [pc, #540]	; (8008160 <__ieee754_rem_pio2f+0x244>)
 8007f42:	429d      	cmp	r5, r3
 8007f44:	dc46      	bgt.n	8007fd4 <__ieee754_rem_pio2f+0xb8>
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008164 <__ieee754_rem_pio2f+0x248>
 8007f4c:	4b86      	ldr	r3, [pc, #536]	; (8008168 <__ieee754_rem_pio2f+0x24c>)
 8007f4e:	f025 050f 	bic.w	r5, r5, #15
 8007f52:	dd1f      	ble.n	8007f94 <__ieee754_rem_pio2f+0x78>
 8007f54:	429d      	cmp	r5, r3
 8007f56:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f5a:	d00e      	beq.n	8007f7a <__ieee754_rem_pio2f+0x5e>
 8007f5c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800816c <__ieee754_rem_pio2f+0x250>
 8007f60:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007f64:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f68:	ed80 0a00 	vstr	s0, [r0]
 8007f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f70:	2001      	movs	r0, #1
 8007f72:	edc4 7a01 	vstr	s15, [r4, #4]
 8007f76:	b007      	add	sp, #28
 8007f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f7a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008170 <__ieee754_rem_pio2f+0x254>
 8007f7e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008174 <__ieee754_rem_pio2f+0x258>
 8007f82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f86:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f8e:	edc0 6a00 	vstr	s13, [r0]
 8007f92:	e7eb      	b.n	8007f6c <__ieee754_rem_pio2f+0x50>
 8007f94:	429d      	cmp	r5, r3
 8007f96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007f9a:	d00e      	beq.n	8007fba <__ieee754_rem_pio2f+0x9e>
 8007f9c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800816c <__ieee754_rem_pio2f+0x250>
 8007fa0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007fa4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007fa8:	ed80 0a00 	vstr	s0, [r0]
 8007fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	edc4 7a01 	vstr	s15, [r4, #4]
 8007fb8:	e7dd      	b.n	8007f76 <__ieee754_rem_pio2f+0x5a>
 8007fba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008170 <__ieee754_rem_pio2f+0x254>
 8007fbe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008174 <__ieee754_rem_pio2f+0x258>
 8007fc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007fc6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007fca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fce:	edc0 6a00 	vstr	s13, [r0]
 8007fd2:	e7eb      	b.n	8007fac <__ieee754_rem_pio2f+0x90>
 8007fd4:	4b68      	ldr	r3, [pc, #416]	; (8008178 <__ieee754_rem_pio2f+0x25c>)
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	dc72      	bgt.n	80080c0 <__ieee754_rem_pio2f+0x1a4>
 8007fda:	f000 fcd1 	bl	8008980 <fabsf>
 8007fde:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800817c <__ieee754_rem_pio2f+0x260>
 8007fe2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007fe6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ff2:	ee17 0a90 	vmov	r0, s15
 8007ff6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008164 <__ieee754_rem_pio2f+0x248>
 8007ffa:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007ffe:	281f      	cmp	r0, #31
 8008000:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800816c <__ieee754_rem_pio2f+0x250>
 8008004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008008:	eeb1 6a47 	vneg.f32	s12, s14
 800800c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008010:	ee16 2a90 	vmov	r2, s13
 8008014:	dc1c      	bgt.n	8008050 <__ieee754_rem_pio2f+0x134>
 8008016:	495a      	ldr	r1, [pc, #360]	; (8008180 <__ieee754_rem_pio2f+0x264>)
 8008018:	1e47      	subs	r7, r0, #1
 800801a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800801e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008022:	428b      	cmp	r3, r1
 8008024:	d014      	beq.n	8008050 <__ieee754_rem_pio2f+0x134>
 8008026:	6022      	str	r2, [r4, #0]
 8008028:	ed94 7a00 	vldr	s14, [r4]
 800802c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008030:	2e00      	cmp	r6, #0
 8008032:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008036:	ed84 0a01 	vstr	s0, [r4, #4]
 800803a:	da9c      	bge.n	8007f76 <__ieee754_rem_pio2f+0x5a>
 800803c:	eeb1 7a47 	vneg.f32	s14, s14
 8008040:	eeb1 0a40 	vneg.f32	s0, s0
 8008044:	ed84 7a00 	vstr	s14, [r4]
 8008048:	ed84 0a01 	vstr	s0, [r4, #4]
 800804c:	4240      	negs	r0, r0
 800804e:	e792      	b.n	8007f76 <__ieee754_rem_pio2f+0x5a>
 8008050:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008054:	15eb      	asrs	r3, r5, #23
 8008056:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800805a:	2d08      	cmp	r5, #8
 800805c:	dde3      	ble.n	8008026 <__ieee754_rem_pio2f+0x10a>
 800805e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008170 <__ieee754_rem_pio2f+0x254>
 8008062:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008174 <__ieee754_rem_pio2f+0x258>
 8008066:	eef0 6a40 	vmov.f32	s13, s0
 800806a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800806e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008072:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008076:	eef0 7a40 	vmov.f32	s15, s0
 800807a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800807e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008082:	ee15 2a90 	vmov	r2, s11
 8008086:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800808a:	1a5b      	subs	r3, r3, r1
 800808c:	2b19      	cmp	r3, #25
 800808e:	dc04      	bgt.n	800809a <__ieee754_rem_pio2f+0x17e>
 8008090:	edc4 5a00 	vstr	s11, [r4]
 8008094:	eeb0 0a66 	vmov.f32	s0, s13
 8008098:	e7c6      	b.n	8008028 <__ieee754_rem_pio2f+0x10c>
 800809a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008184 <__ieee754_rem_pio2f+0x268>
 800809e:	eeb0 0a66 	vmov.f32	s0, s13
 80080a2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80080a6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80080aa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008188 <__ieee754_rem_pio2f+0x26c>
 80080ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80080b2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80080b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80080ba:	ed84 7a00 	vstr	s14, [r4]
 80080be:	e7b3      	b.n	8008028 <__ieee754_rem_pio2f+0x10c>
 80080c0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80080c4:	db06      	blt.n	80080d4 <__ieee754_rem_pio2f+0x1b8>
 80080c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80080ca:	edc0 7a01 	vstr	s15, [r0, #4]
 80080ce:	edc0 7a00 	vstr	s15, [r0]
 80080d2:	e733      	b.n	8007f3c <__ieee754_rem_pio2f+0x20>
 80080d4:	15ea      	asrs	r2, r5, #23
 80080d6:	3a86      	subs	r2, #134	; 0x86
 80080d8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80080dc:	ee07 3a90 	vmov	s15, r3
 80080e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080e4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800818c <__ieee754_rem_pio2f+0x270>
 80080e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080f0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80080f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008104:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800810c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008114:	edcd 7a05 	vstr	s15, [sp, #20]
 8008118:	d11e      	bne.n	8008158 <__ieee754_rem_pio2f+0x23c>
 800811a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800811e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008122:	bf14      	ite	ne
 8008124:	2302      	movne	r3, #2
 8008126:	2301      	moveq	r3, #1
 8008128:	4919      	ldr	r1, [pc, #100]	; (8008190 <__ieee754_rem_pio2f+0x274>)
 800812a:	9101      	str	r1, [sp, #4]
 800812c:	2102      	movs	r1, #2
 800812e:	9100      	str	r1, [sp, #0]
 8008130:	a803      	add	r0, sp, #12
 8008132:	4621      	mov	r1, r4
 8008134:	f000 f892 	bl	800825c <__kernel_rem_pio2f>
 8008138:	2e00      	cmp	r6, #0
 800813a:	f6bf af1c 	bge.w	8007f76 <__ieee754_rem_pio2f+0x5a>
 800813e:	edd4 7a00 	vldr	s15, [r4]
 8008142:	eef1 7a67 	vneg.f32	s15, s15
 8008146:	edc4 7a00 	vstr	s15, [r4]
 800814a:	edd4 7a01 	vldr	s15, [r4, #4]
 800814e:	eef1 7a67 	vneg.f32	s15, s15
 8008152:	edc4 7a01 	vstr	s15, [r4, #4]
 8008156:	e779      	b.n	800804c <__ieee754_rem_pio2f+0x130>
 8008158:	2303      	movs	r3, #3
 800815a:	e7e5      	b.n	8008128 <__ieee754_rem_pio2f+0x20c>
 800815c:	3f490fd8 	.word	0x3f490fd8
 8008160:	4016cbe3 	.word	0x4016cbe3
 8008164:	3fc90f80 	.word	0x3fc90f80
 8008168:	3fc90fd0 	.word	0x3fc90fd0
 800816c:	37354443 	.word	0x37354443
 8008170:	37354400 	.word	0x37354400
 8008174:	2e85a308 	.word	0x2e85a308
 8008178:	43490f80 	.word	0x43490f80
 800817c:	3f22f984 	.word	0x3f22f984
 8008180:	0800bb64 	.word	0x0800bb64
 8008184:	2e85a300 	.word	0x2e85a300
 8008188:	248d3132 	.word	0x248d3132
 800818c:	43800000 	.word	0x43800000
 8008190:	0800bbe4 	.word	0x0800bbe4

08008194 <__ieee754_sqrtf>:
 8008194:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008198:	4770      	bx	lr
	...

0800819c <__kernel_cosf>:
 800819c:	ee10 3a10 	vmov	r3, s0
 80081a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80081a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80081ac:	da05      	bge.n	80081ba <__kernel_cosf+0x1e>
 80081ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80081b2:	ee17 2a90 	vmov	r2, s15
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	d03d      	beq.n	8008236 <__kernel_cosf+0x9a>
 80081ba:	ee60 5a00 	vmul.f32	s11, s0, s0
 80081be:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800823c <__kernel_cosf+0xa0>
 80081c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008240 <__kernel_cosf+0xa4>
 80081c6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008244 <__kernel_cosf+0xa8>
 80081ca:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <__kernel_cosf+0xac>)
 80081cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80081d0:	4293      	cmp	r3, r2
 80081d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800824c <__kernel_cosf+0xb0>
 80081d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80081da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008250 <__kernel_cosf+0xb4>
 80081de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80081e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008254 <__kernel_cosf+0xb8>
 80081e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80081ea:	eeb0 7a66 	vmov.f32	s14, s13
 80081ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80081f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80081f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80081fa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80081fe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008202:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008206:	dc04      	bgt.n	8008212 <__kernel_cosf+0x76>
 8008208:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800820c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008210:	4770      	bx	lr
 8008212:	4a11      	ldr	r2, [pc, #68]	; (8008258 <__kernel_cosf+0xbc>)
 8008214:	4293      	cmp	r3, r2
 8008216:	bfda      	itte	le
 8008218:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800821c:	ee06 3a90 	vmovle	s13, r3
 8008220:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008224:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008228:	ee36 0a66 	vsub.f32	s0, s12, s13
 800822c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008230:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008234:	4770      	bx	lr
 8008236:	eeb0 0a46 	vmov.f32	s0, s12
 800823a:	4770      	bx	lr
 800823c:	ad47d74e 	.word	0xad47d74e
 8008240:	310f74f6 	.word	0x310f74f6
 8008244:	3d2aaaab 	.word	0x3d2aaaab
 8008248:	3e999999 	.word	0x3e999999
 800824c:	b493f27c 	.word	0xb493f27c
 8008250:	37d00d01 	.word	0x37d00d01
 8008254:	bab60b61 	.word	0xbab60b61
 8008258:	3f480000 	.word	0x3f480000

0800825c <__kernel_rem_pio2f>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	ed2d 8b04 	vpush	{d8-d9}
 8008264:	b0d9      	sub	sp, #356	; 0x164
 8008266:	4688      	mov	r8, r1
 8008268:	9002      	str	r0, [sp, #8]
 800826a:	49bb      	ldr	r1, [pc, #748]	; (8008558 <__kernel_rem_pio2f+0x2fc>)
 800826c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008274:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008278:	1e59      	subs	r1, r3, #1
 800827a:	1d13      	adds	r3, r2, #4
 800827c:	db27      	blt.n	80082ce <__kernel_rem_pio2f+0x72>
 800827e:	f1b2 0b03 	subs.w	fp, r2, #3
 8008282:	bf48      	it	mi
 8008284:	f102 0b04 	addmi.w	fp, r2, #4
 8008288:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800828c:	1c45      	adds	r5, r0, #1
 800828e:	00ec      	lsls	r4, r5, #3
 8008290:	1a47      	subs	r7, r0, r1
 8008292:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008568 <__kernel_rem_pio2f+0x30c>
 8008296:	9403      	str	r4, [sp, #12]
 8008298:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800829c:	eb0a 0c01 	add.w	ip, sl, r1
 80082a0:	ae1c      	add	r6, sp, #112	; 0x70
 80082a2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80082a6:	2400      	movs	r4, #0
 80082a8:	4564      	cmp	r4, ip
 80082aa:	dd12      	ble.n	80082d2 <__kernel_rem_pio2f+0x76>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	ac1c      	add	r4, sp, #112	; 0x70
 80082b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80082b4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80082b8:	f04f 0c00 	mov.w	ip, #0
 80082bc:	45d4      	cmp	ip, sl
 80082be:	dc27      	bgt.n	8008310 <__kernel_rem_pio2f+0xb4>
 80082c0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80082c4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008568 <__kernel_rem_pio2f+0x30c>
 80082c8:	4627      	mov	r7, r4
 80082ca:	2600      	movs	r6, #0
 80082cc:	e016      	b.n	80082fc <__kernel_rem_pio2f+0xa0>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e7dc      	b.n	800828c <__kernel_rem_pio2f+0x30>
 80082d2:	42e7      	cmn	r7, r4
 80082d4:	bf5d      	ittte	pl
 80082d6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80082da:	ee07 3a90 	vmovpl	s15, r3
 80082de:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80082e2:	eef0 7a47 	vmovmi.f32	s15, s14
 80082e6:	ece6 7a01 	vstmia	r6!, {s15}
 80082ea:	3401      	adds	r4, #1
 80082ec:	e7dc      	b.n	80082a8 <__kernel_rem_pio2f+0x4c>
 80082ee:	ecf9 6a01 	vldmia	r9!, {s13}
 80082f2:	ed97 7a00 	vldr	s14, [r7]
 80082f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80082fa:	3601      	adds	r6, #1
 80082fc:	428e      	cmp	r6, r1
 80082fe:	f1a7 0704 	sub.w	r7, r7, #4
 8008302:	ddf4      	ble.n	80082ee <__kernel_rem_pio2f+0x92>
 8008304:	eceb 7a01 	vstmia	fp!, {s15}
 8008308:	f10c 0c01 	add.w	ip, ip, #1
 800830c:	3404      	adds	r4, #4
 800830e:	e7d5      	b.n	80082bc <__kernel_rem_pio2f+0x60>
 8008310:	ab08      	add	r3, sp, #32
 8008312:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008316:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008564 <__kernel_rem_pio2f+0x308>
 800831a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008560 <__kernel_rem_pio2f+0x304>
 800831e:	9304      	str	r3, [sp, #16]
 8008320:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008324:	4656      	mov	r6, sl
 8008326:	00b3      	lsls	r3, r6, #2
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	ab58      	add	r3, sp, #352	; 0x160
 800832c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008330:	ac08      	add	r4, sp, #32
 8008332:	ab44      	add	r3, sp, #272	; 0x110
 8008334:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008338:	46a4      	mov	ip, r4
 800833a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800833e:	4637      	mov	r7, r6
 8008340:	2f00      	cmp	r7, #0
 8008342:	f1a0 0004 	sub.w	r0, r0, #4
 8008346:	dc4f      	bgt.n	80083e8 <__kernel_rem_pio2f+0x18c>
 8008348:	4628      	mov	r0, r5
 800834a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800834e:	f000 fb61 	bl	8008a14 <scalbnf>
 8008352:	eeb0 8a40 	vmov.f32	s16, s0
 8008356:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800835a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800835e:	f000 fb17 	bl	8008990 <floorf>
 8008362:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008366:	eea0 8a67 	vfms.f32	s16, s0, s15
 800836a:	2d00      	cmp	r5, #0
 800836c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008370:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008374:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008378:	ee17 9a90 	vmov	r9, s15
 800837c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008380:	dd44      	ble.n	800840c <__kernel_rem_pio2f+0x1b0>
 8008382:	f106 3cff 	add.w	ip, r6, #4294967295
 8008386:	ab08      	add	r3, sp, #32
 8008388:	f1c5 0e08 	rsb	lr, r5, #8
 800838c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008390:	fa47 f00e 	asr.w	r0, r7, lr
 8008394:	4481      	add	r9, r0
 8008396:	fa00 f00e 	lsl.w	r0, r0, lr
 800839a:	1a3f      	subs	r7, r7, r0
 800839c:	f1c5 0007 	rsb	r0, r5, #7
 80083a0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80083a4:	4107      	asrs	r7, r0
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	dd3f      	ble.n	800842a <__kernel_rem_pio2f+0x1ce>
 80083aa:	f04f 0e00 	mov.w	lr, #0
 80083ae:	f109 0901 	add.w	r9, r9, #1
 80083b2:	4673      	mov	r3, lr
 80083b4:	4576      	cmp	r6, lr
 80083b6:	dc6b      	bgt.n	8008490 <__kernel_rem_pio2f+0x234>
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	dd04      	ble.n	80083c6 <__kernel_rem_pio2f+0x16a>
 80083bc:	2d01      	cmp	r5, #1
 80083be:	d078      	beq.n	80084b2 <__kernel_rem_pio2f+0x256>
 80083c0:	2d02      	cmp	r5, #2
 80083c2:	f000 8081 	beq.w	80084c8 <__kernel_rem_pio2f+0x26c>
 80083c6:	2f02      	cmp	r7, #2
 80083c8:	d12f      	bne.n	800842a <__kernel_rem_pio2f+0x1ce>
 80083ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80083ce:	ee30 8a48 	vsub.f32	s16, s0, s16
 80083d2:	b353      	cbz	r3, 800842a <__kernel_rem_pio2f+0x1ce>
 80083d4:	4628      	mov	r0, r5
 80083d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80083da:	f000 fb1b 	bl	8008a14 <scalbnf>
 80083de:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80083e2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80083e6:	e020      	b.n	800842a <__kernel_rem_pio2f+0x1ce>
 80083e8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80083ec:	3f01      	subs	r7, #1
 80083ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083f6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80083fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083fe:	ecac 0a01 	vstmia	ip!, {s0}
 8008402:	ed90 0a00 	vldr	s0, [r0]
 8008406:	ee37 0a80 	vadd.f32	s0, s15, s0
 800840a:	e799      	b.n	8008340 <__kernel_rem_pio2f+0xe4>
 800840c:	d105      	bne.n	800841a <__kernel_rem_pio2f+0x1be>
 800840e:	1e70      	subs	r0, r6, #1
 8008410:	ab08      	add	r3, sp, #32
 8008412:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008416:	11ff      	asrs	r7, r7, #7
 8008418:	e7c5      	b.n	80083a6 <__kernel_rem_pio2f+0x14a>
 800841a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800841e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008426:	da31      	bge.n	800848c <__kernel_rem_pio2f+0x230>
 8008428:	2700      	movs	r7, #0
 800842a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800842e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008432:	f040 809b 	bne.w	800856c <__kernel_rem_pio2f+0x310>
 8008436:	1e74      	subs	r4, r6, #1
 8008438:	46a4      	mov	ip, r4
 800843a:	2000      	movs	r0, #0
 800843c:	45d4      	cmp	ip, sl
 800843e:	da4a      	bge.n	80084d6 <__kernel_rem_pio2f+0x27a>
 8008440:	2800      	cmp	r0, #0
 8008442:	d07a      	beq.n	800853a <__kernel_rem_pio2f+0x2de>
 8008444:	ab08      	add	r3, sp, #32
 8008446:	3d08      	subs	r5, #8
 8008448:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8081 	beq.w	8008554 <__kernel_rem_pio2f+0x2f8>
 8008452:	4628      	mov	r0, r5
 8008454:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008458:	00a5      	lsls	r5, r4, #2
 800845a:	f000 fadb 	bl	8008a14 <scalbnf>
 800845e:	aa44      	add	r2, sp, #272	; 0x110
 8008460:	1d2b      	adds	r3, r5, #4
 8008462:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008564 <__kernel_rem_pio2f+0x308>
 8008466:	18d1      	adds	r1, r2, r3
 8008468:	4622      	mov	r2, r4
 800846a:	2a00      	cmp	r2, #0
 800846c:	f280 80ae 	bge.w	80085cc <__kernel_rem_pio2f+0x370>
 8008470:	4622      	mov	r2, r4
 8008472:	2a00      	cmp	r2, #0
 8008474:	f2c0 80cc 	blt.w	8008610 <__kernel_rem_pio2f+0x3b4>
 8008478:	a944      	add	r1, sp, #272	; 0x110
 800847a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800847e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800855c <__kernel_rem_pio2f+0x300>
 8008482:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008568 <__kernel_rem_pio2f+0x30c>
 8008486:	2000      	movs	r0, #0
 8008488:	1aa1      	subs	r1, r4, r2
 800848a:	e0b6      	b.n	80085fa <__kernel_rem_pio2f+0x39e>
 800848c:	2702      	movs	r7, #2
 800848e:	e78c      	b.n	80083aa <__kernel_rem_pio2f+0x14e>
 8008490:	6820      	ldr	r0, [r4, #0]
 8008492:	b94b      	cbnz	r3, 80084a8 <__kernel_rem_pio2f+0x24c>
 8008494:	b118      	cbz	r0, 800849e <__kernel_rem_pio2f+0x242>
 8008496:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	2001      	movs	r0, #1
 800849e:	f10e 0e01 	add.w	lr, lr, #1
 80084a2:	3404      	adds	r4, #4
 80084a4:	4603      	mov	r3, r0
 80084a6:	e785      	b.n	80083b4 <__kernel_rem_pio2f+0x158>
 80084a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80084ac:	6020      	str	r0, [r4, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	e7f5      	b.n	800849e <__kernel_rem_pio2f+0x242>
 80084b2:	1e74      	subs	r4, r6, #1
 80084b4:	a808      	add	r0, sp, #32
 80084b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80084ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80084be:	f10d 0c20 	add.w	ip, sp, #32
 80084c2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80084c6:	e77e      	b.n	80083c6 <__kernel_rem_pio2f+0x16a>
 80084c8:	1e74      	subs	r4, r6, #1
 80084ca:	a808      	add	r0, sp, #32
 80084cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80084d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80084d4:	e7f3      	b.n	80084be <__kernel_rem_pio2f+0x262>
 80084d6:	ab08      	add	r3, sp, #32
 80084d8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80084dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084e0:	4318      	orrs	r0, r3
 80084e2:	e7ab      	b.n	800843c <__kernel_rem_pio2f+0x1e0>
 80084e4:	f10c 0c01 	add.w	ip, ip, #1
 80084e8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	d0f9      	beq.n	80084e4 <__kernel_rem_pio2f+0x288>
 80084f0:	9b05      	ldr	r3, [sp, #20]
 80084f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80084f6:	eb0d 0003 	add.w	r0, sp, r3
 80084fa:	9b01      	ldr	r3, [sp, #4]
 80084fc:	18f4      	adds	r4, r6, r3
 80084fe:	ab1c      	add	r3, sp, #112	; 0x70
 8008500:	1c77      	adds	r7, r6, #1
 8008502:	384c      	subs	r0, #76	; 0x4c
 8008504:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008508:	4466      	add	r6, ip
 800850a:	42be      	cmp	r6, r7
 800850c:	f6ff af0b 	blt.w	8008326 <__kernel_rem_pio2f+0xca>
 8008510:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008514:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008520:	f04f 0c00 	mov.w	ip, #0
 8008524:	ece4 7a01 	vstmia	r4!, {s15}
 8008528:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008568 <__kernel_rem_pio2f+0x30c>
 800852c:	46a1      	mov	r9, r4
 800852e:	458c      	cmp	ip, r1
 8008530:	dd07      	ble.n	8008542 <__kernel_rem_pio2f+0x2e6>
 8008532:	ece0 7a01 	vstmia	r0!, {s15}
 8008536:	3701      	adds	r7, #1
 8008538:	e7e7      	b.n	800850a <__kernel_rem_pio2f+0x2ae>
 800853a:	9804      	ldr	r0, [sp, #16]
 800853c:	f04f 0c01 	mov.w	ip, #1
 8008540:	e7d2      	b.n	80084e8 <__kernel_rem_pio2f+0x28c>
 8008542:	ecfe 6a01 	vldmia	lr!, {s13}
 8008546:	ed39 7a01 	vldmdb	r9!, {s14}
 800854a:	f10c 0c01 	add.w	ip, ip, #1
 800854e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008552:	e7ec      	b.n	800852e <__kernel_rem_pio2f+0x2d2>
 8008554:	3c01      	subs	r4, #1
 8008556:	e775      	b.n	8008444 <__kernel_rem_pio2f+0x1e8>
 8008558:	0800bf28 	.word	0x0800bf28
 800855c:	0800befc 	.word	0x0800befc
 8008560:	43800000 	.word	0x43800000
 8008564:	3b800000 	.word	0x3b800000
 8008568:	00000000 	.word	0x00000000
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	eeb0 0a48 	vmov.f32	s0, s16
 8008572:	1a98      	subs	r0, r3, r2
 8008574:	f000 fa4e 	bl	8008a14 <scalbnf>
 8008578:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008560 <__kernel_rem_pio2f+0x304>
 800857c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	db19      	blt.n	80085ba <__kernel_rem_pio2f+0x35e>
 8008586:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008564 <__kernel_rem_pio2f+0x308>
 800858a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800858e:	aa08      	add	r2, sp, #32
 8008590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008594:	1c74      	adds	r4, r6, #1
 8008596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800859a:	3508      	adds	r5, #8
 800859c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80085a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085a8:	ee10 3a10 	vmov	r3, s0
 80085ac:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80085b0:	ee17 3a90 	vmov	r3, s15
 80085b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80085b8:	e74b      	b.n	8008452 <__kernel_rem_pio2f+0x1f6>
 80085ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085be:	aa08      	add	r2, sp, #32
 80085c0:	ee10 3a10 	vmov	r3, s0
 80085c4:	4634      	mov	r4, r6
 80085c6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80085ca:	e742      	b.n	8008452 <__kernel_rem_pio2f+0x1f6>
 80085cc:	a808      	add	r0, sp, #32
 80085ce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80085d2:	9001      	str	r0, [sp, #4]
 80085d4:	ee07 0a90 	vmov	s15, r0
 80085d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085dc:	3a01      	subs	r2, #1
 80085de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80085e6:	ed61 7a01 	vstmdb	r1!, {s15}
 80085ea:	e73e      	b.n	800846a <__kernel_rem_pio2f+0x20e>
 80085ec:	ecfc 6a01 	vldmia	ip!, {s13}
 80085f0:	ecb6 7a01 	vldmia	r6!, {s14}
 80085f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085f8:	3001      	adds	r0, #1
 80085fa:	4550      	cmp	r0, sl
 80085fc:	dc01      	bgt.n	8008602 <__kernel_rem_pio2f+0x3a6>
 80085fe:	4288      	cmp	r0, r1
 8008600:	ddf4      	ble.n	80085ec <__kernel_rem_pio2f+0x390>
 8008602:	a858      	add	r0, sp, #352	; 0x160
 8008604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008608:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800860c:	3a01      	subs	r2, #1
 800860e:	e730      	b.n	8008472 <__kernel_rem_pio2f+0x216>
 8008610:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008612:	2a02      	cmp	r2, #2
 8008614:	dc09      	bgt.n	800862a <__kernel_rem_pio2f+0x3ce>
 8008616:	2a00      	cmp	r2, #0
 8008618:	dc2a      	bgt.n	8008670 <__kernel_rem_pio2f+0x414>
 800861a:	d043      	beq.n	80086a4 <__kernel_rem_pio2f+0x448>
 800861c:	f009 0007 	and.w	r0, r9, #7
 8008620:	b059      	add	sp, #356	; 0x164
 8008622:	ecbd 8b04 	vpop	{d8-d9}
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800862c:	2b03      	cmp	r3, #3
 800862e:	d1f5      	bne.n	800861c <__kernel_rem_pio2f+0x3c0>
 8008630:	ab30      	add	r3, sp, #192	; 0xc0
 8008632:	442b      	add	r3, r5
 8008634:	461a      	mov	r2, r3
 8008636:	4619      	mov	r1, r3
 8008638:	4620      	mov	r0, r4
 800863a:	2800      	cmp	r0, #0
 800863c:	f1a1 0104 	sub.w	r1, r1, #4
 8008640:	dc51      	bgt.n	80086e6 <__kernel_rem_pio2f+0x48a>
 8008642:	4621      	mov	r1, r4
 8008644:	2901      	cmp	r1, #1
 8008646:	f1a2 0204 	sub.w	r2, r2, #4
 800864a:	dc5c      	bgt.n	8008706 <__kernel_rem_pio2f+0x4aa>
 800864c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008568 <__kernel_rem_pio2f+0x30c>
 8008650:	3304      	adds	r3, #4
 8008652:	2c01      	cmp	r4, #1
 8008654:	dc67      	bgt.n	8008726 <__kernel_rem_pio2f+0x4ca>
 8008656:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800865a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800865e:	2f00      	cmp	r7, #0
 8008660:	d167      	bne.n	8008732 <__kernel_rem_pio2f+0x4d6>
 8008662:	edc8 6a00 	vstr	s13, [r8]
 8008666:	ed88 7a01 	vstr	s14, [r8, #4]
 800866a:	edc8 7a02 	vstr	s15, [r8, #8]
 800866e:	e7d5      	b.n	800861c <__kernel_rem_pio2f+0x3c0>
 8008670:	aa30      	add	r2, sp, #192	; 0xc0
 8008672:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008568 <__kernel_rem_pio2f+0x30c>
 8008676:	4413      	add	r3, r2
 8008678:	4622      	mov	r2, r4
 800867a:	2a00      	cmp	r2, #0
 800867c:	da24      	bge.n	80086c8 <__kernel_rem_pio2f+0x46c>
 800867e:	b34f      	cbz	r7, 80086d4 <__kernel_rem_pio2f+0x478>
 8008680:	eef1 7a47 	vneg.f32	s15, s14
 8008684:	edc8 7a00 	vstr	s15, [r8]
 8008688:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800868c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008690:	aa31      	add	r2, sp, #196	; 0xc4
 8008692:	2301      	movs	r3, #1
 8008694:	429c      	cmp	r4, r3
 8008696:	da20      	bge.n	80086da <__kernel_rem_pio2f+0x47e>
 8008698:	b10f      	cbz	r7, 800869e <__kernel_rem_pio2f+0x442>
 800869a:	eef1 7a67 	vneg.f32	s15, s15
 800869e:	edc8 7a01 	vstr	s15, [r8, #4]
 80086a2:	e7bb      	b.n	800861c <__kernel_rem_pio2f+0x3c0>
 80086a4:	aa30      	add	r2, sp, #192	; 0xc0
 80086a6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008568 <__kernel_rem_pio2f+0x30c>
 80086aa:	4413      	add	r3, r2
 80086ac:	2c00      	cmp	r4, #0
 80086ae:	da05      	bge.n	80086bc <__kernel_rem_pio2f+0x460>
 80086b0:	b10f      	cbz	r7, 80086b6 <__kernel_rem_pio2f+0x45a>
 80086b2:	eef1 7a67 	vneg.f32	s15, s15
 80086b6:	edc8 7a00 	vstr	s15, [r8]
 80086ba:	e7af      	b.n	800861c <__kernel_rem_pio2f+0x3c0>
 80086bc:	ed33 7a01 	vldmdb	r3!, {s14}
 80086c0:	3c01      	subs	r4, #1
 80086c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086c6:	e7f1      	b.n	80086ac <__kernel_rem_pio2f+0x450>
 80086c8:	ed73 7a01 	vldmdb	r3!, {s15}
 80086cc:	3a01      	subs	r2, #1
 80086ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086d2:	e7d2      	b.n	800867a <__kernel_rem_pio2f+0x41e>
 80086d4:	eef0 7a47 	vmov.f32	s15, s14
 80086d8:	e7d4      	b.n	8008684 <__kernel_rem_pio2f+0x428>
 80086da:	ecb2 7a01 	vldmia	r2!, {s14}
 80086de:	3301      	adds	r3, #1
 80086e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086e4:	e7d6      	b.n	8008694 <__kernel_rem_pio2f+0x438>
 80086e6:	edd1 7a00 	vldr	s15, [r1]
 80086ea:	edd1 6a01 	vldr	s13, [r1, #4]
 80086ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80086f2:	3801      	subs	r0, #1
 80086f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086f8:	ed81 7a00 	vstr	s14, [r1]
 80086fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008700:	edc1 7a01 	vstr	s15, [r1, #4]
 8008704:	e799      	b.n	800863a <__kernel_rem_pio2f+0x3de>
 8008706:	edd2 7a00 	vldr	s15, [r2]
 800870a:	edd2 6a01 	vldr	s13, [r2, #4]
 800870e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008712:	3901      	subs	r1, #1
 8008714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008718:	ed82 7a00 	vstr	s14, [r2]
 800871c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008720:	edc2 7a01 	vstr	s15, [r2, #4]
 8008724:	e78e      	b.n	8008644 <__kernel_rem_pio2f+0x3e8>
 8008726:	ed33 7a01 	vldmdb	r3!, {s14}
 800872a:	3c01      	subs	r4, #1
 800872c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008730:	e78f      	b.n	8008652 <__kernel_rem_pio2f+0x3f6>
 8008732:	eef1 6a66 	vneg.f32	s13, s13
 8008736:	eeb1 7a47 	vneg.f32	s14, s14
 800873a:	edc8 6a00 	vstr	s13, [r8]
 800873e:	ed88 7a01 	vstr	s14, [r8, #4]
 8008742:	eef1 7a67 	vneg.f32	s15, s15
 8008746:	e790      	b.n	800866a <__kernel_rem_pio2f+0x40e>

08008748 <__kernel_sinf>:
 8008748:	ee10 3a10 	vmov	r3, s0
 800874c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008750:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008754:	da04      	bge.n	8008760 <__kernel_sinf+0x18>
 8008756:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800875a:	ee17 3a90 	vmov	r3, s15
 800875e:	b35b      	cbz	r3, 80087b8 <__kernel_sinf+0x70>
 8008760:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008764:	eddf 7a15 	vldr	s15, [pc, #84]	; 80087bc <__kernel_sinf+0x74>
 8008768:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80087c0 <__kernel_sinf+0x78>
 800876c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008770:	eddf 7a14 	vldr	s15, [pc, #80]	; 80087c4 <__kernel_sinf+0x7c>
 8008774:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008778:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80087c8 <__kernel_sinf+0x80>
 800877c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008780:	eddf 7a12 	vldr	s15, [pc, #72]	; 80087cc <__kernel_sinf+0x84>
 8008784:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008788:	eee6 7a07 	vfma.f32	s15, s12, s14
 800878c:	b930      	cbnz	r0, 800879c <__kernel_sinf+0x54>
 800878e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80087d0 <__kernel_sinf+0x88>
 8008792:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008796:	eea6 0a26 	vfma.f32	s0, s12, s13
 800879a:	4770      	bx	lr
 800879c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80087a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80087a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80087a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80087ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80087d4 <__kernel_sinf+0x8c>
 80087b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80087b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80087c0:	b2d72f34 	.word	0xb2d72f34
 80087c4:	3638ef1b 	.word	0x3638ef1b
 80087c8:	b9500d01 	.word	0xb9500d01
 80087cc:	3c088889 	.word	0x3c088889
 80087d0:	be2aaaab 	.word	0xbe2aaaab
 80087d4:	3e2aaaab 	.word	0x3e2aaaab

080087d8 <atanf>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	ee10 5a10 	vmov	r5, s0
 80087de:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80087e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80087e6:	eef0 7a40 	vmov.f32	s15, s0
 80087ea:	db10      	blt.n	800880e <atanf+0x36>
 80087ec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80087f0:	dd04      	ble.n	80087fc <atanf+0x24>
 80087f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80087f6:	eeb0 0a67 	vmov.f32	s0, s15
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008934 <atanf+0x15c>
 8008800:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8008938 <atanf+0x160>
 8008804:	2d00      	cmp	r5, #0
 8008806:	bfd8      	it	le
 8008808:	eef0 7a40 	vmovle.f32	s15, s0
 800880c:	e7f3      	b.n	80087f6 <atanf+0x1e>
 800880e:	4b4b      	ldr	r3, [pc, #300]	; (800893c <atanf+0x164>)
 8008810:	429c      	cmp	r4, r3
 8008812:	dc10      	bgt.n	8008836 <atanf+0x5e>
 8008814:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008818:	da0a      	bge.n	8008830 <atanf+0x58>
 800881a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008940 <atanf+0x168>
 800881e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008826:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800882a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882e:	dce2      	bgt.n	80087f6 <atanf+0x1e>
 8008830:	f04f 33ff 	mov.w	r3, #4294967295
 8008834:	e013      	b.n	800885e <atanf+0x86>
 8008836:	f000 f8a3 	bl	8008980 <fabsf>
 800883a:	4b42      	ldr	r3, [pc, #264]	; (8008944 <atanf+0x16c>)
 800883c:	429c      	cmp	r4, r3
 800883e:	dc4f      	bgt.n	80088e0 <atanf+0x108>
 8008840:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008844:	429c      	cmp	r4, r3
 8008846:	dc41      	bgt.n	80088cc <atanf+0xf4>
 8008848:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800884c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008850:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008854:	2300      	movs	r3, #0
 8008856:	ee30 0a27 	vadd.f32	s0, s0, s15
 800885a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008864:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008948 <atanf+0x170>
 8008868:	eddf 5a38 	vldr	s11, [pc, #224]	; 800894c <atanf+0x174>
 800886c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008950 <atanf+0x178>
 8008870:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008874:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008878:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008954 <atanf+0x17c>
 800887c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008880:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008958 <atanf+0x180>
 8008884:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008888:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800895c <atanf+0x184>
 800888c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008890:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008960 <atanf+0x188>
 8008894:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008898:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008964 <atanf+0x18c>
 800889c:	eea6 5a87 	vfma.f32	s10, s13, s14
 80088a0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008968 <atanf+0x190>
 80088a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80088a8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800896c <atanf+0x194>
 80088ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 80088b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008970 <atanf+0x198>
 80088b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80088b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80088bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80088c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80088c4:	d121      	bne.n	800890a <atanf+0x132>
 80088c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088ca:	e794      	b.n	80087f6 <atanf+0x1e>
 80088cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80088d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80088d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80088d8:	2301      	movs	r3, #1
 80088da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80088de:	e7be      	b.n	800885e <atanf+0x86>
 80088e0:	4b24      	ldr	r3, [pc, #144]	; (8008974 <atanf+0x19c>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	dc0b      	bgt.n	80088fe <atanf+0x126>
 80088e6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80088ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 80088f2:	2302      	movs	r3, #2
 80088f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80088f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fc:	e7af      	b.n	800885e <atanf+0x86>
 80088fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008902:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008906:	2303      	movs	r3, #3
 8008908:	e7a9      	b.n	800885e <atanf+0x86>
 800890a:	4a1b      	ldr	r2, [pc, #108]	; (8008978 <atanf+0x1a0>)
 800890c:	491b      	ldr	r1, [pc, #108]	; (800897c <atanf+0x1a4>)
 800890e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008912:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008916:	ed93 0a00 	vldr	s0, [r3]
 800891a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800891e:	ed92 0a00 	vldr	s0, [r2]
 8008922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008926:	2d00      	cmp	r5, #0
 8008928:	ee70 7a67 	vsub.f32	s15, s0, s15
 800892c:	bfb8      	it	lt
 800892e:	eef1 7a67 	vneglt.f32	s15, s15
 8008932:	e760      	b.n	80087f6 <atanf+0x1e>
 8008934:	3fc90fdb 	.word	0x3fc90fdb
 8008938:	bfc90fdb 	.word	0xbfc90fdb
 800893c:	3edfffff 	.word	0x3edfffff
 8008940:	7149f2ca 	.word	0x7149f2ca
 8008944:	3f97ffff 	.word	0x3f97ffff
 8008948:	3c8569d7 	.word	0x3c8569d7
 800894c:	3d4bda59 	.word	0x3d4bda59
 8008950:	bd6ef16b 	.word	0xbd6ef16b
 8008954:	3d886b35 	.word	0x3d886b35
 8008958:	3dba2e6e 	.word	0x3dba2e6e
 800895c:	3e124925 	.word	0x3e124925
 8008960:	3eaaaaab 	.word	0x3eaaaaab
 8008964:	bd15a221 	.word	0xbd15a221
 8008968:	bd9d8795 	.word	0xbd9d8795
 800896c:	bde38e38 	.word	0xbde38e38
 8008970:	be4ccccd 	.word	0xbe4ccccd
 8008974:	401bffff 	.word	0x401bffff
 8008978:	0800bf34 	.word	0x0800bf34
 800897c:	0800bf44 	.word	0x0800bf44

08008980 <fabsf>:
 8008980:	ee10 3a10 	vmov	r3, s0
 8008984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008988:	ee00 3a10 	vmov	s0, r3
 800898c:	4770      	bx	lr
	...

08008990 <floorf>:
 8008990:	ee10 3a10 	vmov	r3, s0
 8008994:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008998:	3a7f      	subs	r2, #127	; 0x7f
 800899a:	2a16      	cmp	r2, #22
 800899c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089a0:	dc2a      	bgt.n	80089f8 <floorf+0x68>
 80089a2:	2a00      	cmp	r2, #0
 80089a4:	da11      	bge.n	80089ca <floorf+0x3a>
 80089a6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008a08 <floorf+0x78>
 80089aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80089ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b6:	dd05      	ble.n	80089c4 <floorf+0x34>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	da23      	bge.n	8008a04 <floorf+0x74>
 80089bc:	4a13      	ldr	r2, [pc, #76]	; (8008a0c <floorf+0x7c>)
 80089be:	2900      	cmp	r1, #0
 80089c0:	bf18      	it	ne
 80089c2:	4613      	movne	r3, r2
 80089c4:	ee00 3a10 	vmov	s0, r3
 80089c8:	4770      	bx	lr
 80089ca:	4911      	ldr	r1, [pc, #68]	; (8008a10 <floorf+0x80>)
 80089cc:	4111      	asrs	r1, r2
 80089ce:	420b      	tst	r3, r1
 80089d0:	d0fa      	beq.n	80089c8 <floorf+0x38>
 80089d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008a08 <floorf+0x78>
 80089d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80089da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e2:	ddef      	ble.n	80089c4 <floorf+0x34>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfbe      	ittt	lt
 80089e8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80089ec:	fa40 f202 	asrlt.w	r2, r0, r2
 80089f0:	189b      	addlt	r3, r3, r2
 80089f2:	ea23 0301 	bic.w	r3, r3, r1
 80089f6:	e7e5      	b.n	80089c4 <floorf+0x34>
 80089f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80089fc:	d3e4      	bcc.n	80089c8 <floorf+0x38>
 80089fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a02:	4770      	bx	lr
 8008a04:	2300      	movs	r3, #0
 8008a06:	e7dd      	b.n	80089c4 <floorf+0x34>
 8008a08:	7149f2ca 	.word	0x7149f2ca
 8008a0c:	bf800000 	.word	0xbf800000
 8008a10:	007fffff 	.word	0x007fffff

08008a14 <scalbnf>:
 8008a14:	ee10 3a10 	vmov	r3, s0
 8008a18:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008a1c:	d025      	beq.n	8008a6a <scalbnf+0x56>
 8008a1e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008a22:	d302      	bcc.n	8008a2a <scalbnf+0x16>
 8008a24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a28:	4770      	bx	lr
 8008a2a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008a2e:	d122      	bne.n	8008a76 <scalbnf+0x62>
 8008a30:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <scalbnf+0xc8>)
 8008a32:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008ae0 <scalbnf+0xcc>
 8008a36:	4298      	cmp	r0, r3
 8008a38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a3c:	db16      	blt.n	8008a6c <scalbnf+0x58>
 8008a3e:	ee10 3a10 	vmov	r3, s0
 8008a42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008a46:	3a19      	subs	r2, #25
 8008a48:	4402      	add	r2, r0
 8008a4a:	2afe      	cmp	r2, #254	; 0xfe
 8008a4c:	dd15      	ble.n	8008a7a <scalbnf+0x66>
 8008a4e:	ee10 3a10 	vmov	r3, s0
 8008a52:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008ae4 <scalbnf+0xd0>
 8008a56:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008ae8 <scalbnf+0xd4>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	eeb0 7a67 	vmov.f32	s14, s15
 8008a60:	bfb8      	it	lt
 8008a62:	eef0 7a66 	vmovlt.f32	s15, s13
 8008a66:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008a6a:	4770      	bx	lr
 8008a6c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008aec <scalbnf+0xd8>
 8008a70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a74:	4770      	bx	lr
 8008a76:	0dd2      	lsrs	r2, r2, #23
 8008a78:	e7e6      	b.n	8008a48 <scalbnf+0x34>
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	dd06      	ble.n	8008a8c <scalbnf+0x78>
 8008a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008a86:	ee00 3a10 	vmov	s0, r3
 8008a8a:	4770      	bx	lr
 8008a8c:	f112 0f16 	cmn.w	r2, #22
 8008a90:	da1a      	bge.n	8008ac8 <scalbnf+0xb4>
 8008a92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a96:	4298      	cmp	r0, r3
 8008a98:	ee10 3a10 	vmov	r3, s0
 8008a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aa0:	dd0a      	ble.n	8008ab8 <scalbnf+0xa4>
 8008aa2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008ae4 <scalbnf+0xd0>
 8008aa6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008ae8 <scalbnf+0xd4>
 8008aaa:	eef0 7a40 	vmov.f32	s15, s0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bf18      	it	ne
 8008ab2:	eeb0 0a47 	vmovne.f32	s0, s14
 8008ab6:	e7db      	b.n	8008a70 <scalbnf+0x5c>
 8008ab8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008aec <scalbnf+0xd8>
 8008abc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008af0 <scalbnf+0xdc>
 8008ac0:	eef0 7a40 	vmov.f32	s15, s0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	e7f3      	b.n	8008ab0 <scalbnf+0x9c>
 8008ac8:	3219      	adds	r2, #25
 8008aca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ace:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008ad2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008af4 <scalbnf+0xe0>
 8008ad6:	ee07 3a10 	vmov	s14, r3
 8008ada:	e7c4      	b.n	8008a66 <scalbnf+0x52>
 8008adc:	ffff3cb0 	.word	0xffff3cb0
 8008ae0:	4c000000 	.word	0x4c000000
 8008ae4:	7149f2ca 	.word	0x7149f2ca
 8008ae8:	f149f2ca 	.word	0xf149f2ca
 8008aec:	0da24260 	.word	0x0da24260
 8008af0:	8da24260 	.word	0x8da24260
 8008af4:	33000000 	.word	0x33000000

08008af8 <atoi>:
 8008af8:	220a      	movs	r2, #10
 8008afa:	2100      	movs	r1, #0
 8008afc:	f000 bd62 	b.w	80095c4 <strtol>

08008b00 <__errno>:
 8008b00:	4b01      	ldr	r3, [pc, #4]	; (8008b08 <__errno+0x8>)
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20000014 	.word	0x20000014

08008b0c <__libc_init_array>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	4d0d      	ldr	r5, [pc, #52]	; (8008b44 <__libc_init_array+0x38>)
 8008b10:	4c0d      	ldr	r4, [pc, #52]	; (8008b48 <__libc_init_array+0x3c>)
 8008b12:	1b64      	subs	r4, r4, r5
 8008b14:	10a4      	asrs	r4, r4, #2
 8008b16:	2600      	movs	r6, #0
 8008b18:	42a6      	cmp	r6, r4
 8008b1a:	d109      	bne.n	8008b30 <__libc_init_array+0x24>
 8008b1c:	4d0b      	ldr	r5, [pc, #44]	; (8008b4c <__libc_init_array+0x40>)
 8008b1e:	4c0c      	ldr	r4, [pc, #48]	; (8008b50 <__libc_init_array+0x44>)
 8008b20:	f002 ffa4 	bl	800ba6c <_init>
 8008b24:	1b64      	subs	r4, r4, r5
 8008b26:	10a4      	asrs	r4, r4, #2
 8008b28:	2600      	movs	r6, #0
 8008b2a:	42a6      	cmp	r6, r4
 8008b2c:	d105      	bne.n	8008b3a <__libc_init_array+0x2e>
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b34:	4798      	blx	r3
 8008b36:	3601      	adds	r6, #1
 8008b38:	e7ee      	b.n	8008b18 <__libc_init_array+0xc>
 8008b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3e:	4798      	blx	r3
 8008b40:	3601      	adds	r6, #1
 8008b42:	e7f2      	b.n	8008b2a <__libc_init_array+0x1e>
 8008b44:	0800c33c 	.word	0x0800c33c
 8008b48:	0800c33c 	.word	0x0800c33c
 8008b4c:	0800c33c 	.word	0x0800c33c
 8008b50:	0800c344 	.word	0x0800c344

08008b54 <memcpy>:
 8008b54:	440a      	add	r2, r1
 8008b56:	4291      	cmp	r1, r2
 8008b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b5c:	d100      	bne.n	8008b60 <memcpy+0xc>
 8008b5e:	4770      	bx	lr
 8008b60:	b510      	push	{r4, lr}
 8008b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	d1f9      	bne.n	8008b62 <memcpy+0xe>
 8008b6e:	bd10      	pop	{r4, pc}

08008b70 <memset>:
 8008b70:	4402      	add	r2, r0
 8008b72:	4603      	mov	r3, r0
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d100      	bne.n	8008b7a <memset+0xa>
 8008b78:	4770      	bx	lr
 8008b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b7e:	e7f9      	b.n	8008b74 <memset+0x4>

08008b80 <__cvt>:
 8008b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	ec55 4b10 	vmov	r4, r5, d0
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	460e      	mov	r6, r1
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	462b      	mov	r3, r5
 8008b90:	bfbb      	ittet	lt
 8008b92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b96:	461d      	movlt	r5, r3
 8008b98:	2300      	movge	r3, #0
 8008b9a:	232d      	movlt	r3, #45	; 0x2d
 8008b9c:	700b      	strb	r3, [r1, #0]
 8008b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ba4:	4691      	mov	r9, r2
 8008ba6:	f023 0820 	bic.w	r8, r3, #32
 8008baa:	bfbc      	itt	lt
 8008bac:	4622      	movlt	r2, r4
 8008bae:	4614      	movlt	r4, r2
 8008bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bb4:	d005      	beq.n	8008bc2 <__cvt+0x42>
 8008bb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bba:	d100      	bne.n	8008bbe <__cvt+0x3e>
 8008bbc:	3601      	adds	r6, #1
 8008bbe:	2102      	movs	r1, #2
 8008bc0:	e000      	b.n	8008bc4 <__cvt+0x44>
 8008bc2:	2103      	movs	r1, #3
 8008bc4:	ab03      	add	r3, sp, #12
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	ab02      	add	r3, sp, #8
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	ec45 4b10 	vmov	d0, r4, r5
 8008bd0:	4653      	mov	r3, sl
 8008bd2:	4632      	mov	r2, r6
 8008bd4:	f000 fd8c 	bl	80096f0 <_dtoa_r>
 8008bd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bdc:	4607      	mov	r7, r0
 8008bde:	d102      	bne.n	8008be6 <__cvt+0x66>
 8008be0:	f019 0f01 	tst.w	r9, #1
 8008be4:	d022      	beq.n	8008c2c <__cvt+0xac>
 8008be6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bea:	eb07 0906 	add.w	r9, r7, r6
 8008bee:	d110      	bne.n	8008c12 <__cvt+0x92>
 8008bf0:	783b      	ldrb	r3, [r7, #0]
 8008bf2:	2b30      	cmp	r3, #48	; 0x30
 8008bf4:	d10a      	bne.n	8008c0c <__cvt+0x8c>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f7f7 ff6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c02:	b918      	cbnz	r0, 8008c0c <__cvt+0x8c>
 8008c04:	f1c6 0601 	rsb	r6, r6, #1
 8008c08:	f8ca 6000 	str.w	r6, [sl]
 8008c0c:	f8da 3000 	ldr.w	r3, [sl]
 8008c10:	4499      	add	r9, r3
 8008c12:	2200      	movs	r2, #0
 8008c14:	2300      	movs	r3, #0
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c1e:	b108      	cbz	r0, 8008c24 <__cvt+0xa4>
 8008c20:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c24:	2230      	movs	r2, #48	; 0x30
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	454b      	cmp	r3, r9
 8008c2a:	d307      	bcc.n	8008c3c <__cvt+0xbc>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c30:	1bdb      	subs	r3, r3, r7
 8008c32:	4638      	mov	r0, r7
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	b004      	add	sp, #16
 8008c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3c:	1c59      	adds	r1, r3, #1
 8008c3e:	9103      	str	r1, [sp, #12]
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e7f0      	b.n	8008c26 <__cvt+0xa6>

08008c44 <__exponent>:
 8008c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c46:	4603      	mov	r3, r0
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	bfb8      	it	lt
 8008c4c:	4249      	neglt	r1, r1
 8008c4e:	f803 2b02 	strb.w	r2, [r3], #2
 8008c52:	bfb4      	ite	lt
 8008c54:	222d      	movlt	r2, #45	; 0x2d
 8008c56:	222b      	movge	r2, #43	; 0x2b
 8008c58:	2909      	cmp	r1, #9
 8008c5a:	7042      	strb	r2, [r0, #1]
 8008c5c:	dd2a      	ble.n	8008cb4 <__exponent+0x70>
 8008c5e:	f10d 0407 	add.w	r4, sp, #7
 8008c62:	46a4      	mov	ip, r4
 8008c64:	270a      	movs	r7, #10
 8008c66:	46a6      	mov	lr, r4
 8008c68:	460a      	mov	r2, r1
 8008c6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c6e:	fb07 1516 	mls	r5, r7, r6, r1
 8008c72:	3530      	adds	r5, #48	; 0x30
 8008c74:	2a63      	cmp	r2, #99	; 0x63
 8008c76:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c7e:	4631      	mov	r1, r6
 8008c80:	dcf1      	bgt.n	8008c66 <__exponent+0x22>
 8008c82:	3130      	adds	r1, #48	; 0x30
 8008c84:	f1ae 0502 	sub.w	r5, lr, #2
 8008c88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c8c:	1c44      	adds	r4, r0, #1
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4561      	cmp	r1, ip
 8008c92:	d30a      	bcc.n	8008caa <__exponent+0x66>
 8008c94:	f10d 0209 	add.w	r2, sp, #9
 8008c98:	eba2 020e 	sub.w	r2, r2, lr
 8008c9c:	4565      	cmp	r5, ip
 8008c9e:	bf88      	it	hi
 8008ca0:	2200      	movhi	r2, #0
 8008ca2:	4413      	add	r3, r2
 8008ca4:	1a18      	subs	r0, r3, r0
 8008ca6:	b003      	add	sp, #12
 8008ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cb2:	e7ed      	b.n	8008c90 <__exponent+0x4c>
 8008cb4:	2330      	movs	r3, #48	; 0x30
 8008cb6:	3130      	adds	r1, #48	; 0x30
 8008cb8:	7083      	strb	r3, [r0, #2]
 8008cba:	70c1      	strb	r1, [r0, #3]
 8008cbc:	1d03      	adds	r3, r0, #4
 8008cbe:	e7f1      	b.n	8008ca4 <__exponent+0x60>

08008cc0 <_printf_float>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b02 	vpush	{d8}
 8008cc8:	b08d      	sub	sp, #52	; 0x34
 8008cca:	460c      	mov	r4, r1
 8008ccc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	f001 faf9 	bl	800a2cc <_localeconv_r>
 8008cda:	f8d0 a000 	ldr.w	sl, [r0]
 8008cde:	4650      	mov	r0, sl
 8008ce0:	f7f7 fa7e 	bl	80001e0 <strlen>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008cf4:	3307      	adds	r3, #7
 8008cf6:	f023 0307 	bic.w	r3, r3, #7
 8008cfa:	f103 0208 	add.w	r2, r3, #8
 8008cfe:	f8c8 2000 	str.w	r2, [r8]
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d18:	ee08 0a10 	vmov	s16, r0
 8008d1c:	4b9f      	ldr	r3, [pc, #636]	; (8008f9c <_printf_float+0x2dc>)
 8008d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d22:	f04f 32ff 	mov.w	r2, #4294967295
 8008d26:	f7f7 ff09 	bl	8000b3c <__aeabi_dcmpun>
 8008d2a:	bb88      	cbnz	r0, 8008d90 <_printf_float+0xd0>
 8008d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d30:	4b9a      	ldr	r3, [pc, #616]	; (8008f9c <_printf_float+0x2dc>)
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295
 8008d36:	f7f7 fee3 	bl	8000b00 <__aeabi_dcmple>
 8008d3a:	bb48      	cbnz	r0, 8008d90 <_printf_float+0xd0>
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	2300      	movs	r3, #0
 8008d40:	4640      	mov	r0, r8
 8008d42:	4649      	mov	r1, r9
 8008d44:	f7f7 fed2 	bl	8000aec <__aeabi_dcmplt>
 8008d48:	b110      	cbz	r0, 8008d50 <_printf_float+0x90>
 8008d4a:	232d      	movs	r3, #45	; 0x2d
 8008d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d50:	4b93      	ldr	r3, [pc, #588]	; (8008fa0 <_printf_float+0x2e0>)
 8008d52:	4894      	ldr	r0, [pc, #592]	; (8008fa4 <_printf_float+0x2e4>)
 8008d54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d58:	bf94      	ite	ls
 8008d5a:	4698      	movls	r8, r3
 8008d5c:	4680      	movhi	r8, r0
 8008d5e:	2303      	movs	r3, #3
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	9b05      	ldr	r3, [sp, #20]
 8008d64:	f023 0204 	bic.w	r2, r3, #4
 8008d68:	6022      	str	r2, [r4, #0]
 8008d6a:	f04f 0900 	mov.w	r9, #0
 8008d6e:	9700      	str	r7, [sp, #0]
 8008d70:	4633      	mov	r3, r6
 8008d72:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d74:	4621      	mov	r1, r4
 8008d76:	4628      	mov	r0, r5
 8008d78:	f000 f9d8 	bl	800912c <_printf_common>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f040 8090 	bne.w	8008ea2 <_printf_float+0x1e2>
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	b00d      	add	sp, #52	; 0x34
 8008d88:	ecbd 8b02 	vpop	{d8}
 8008d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d90:	4642      	mov	r2, r8
 8008d92:	464b      	mov	r3, r9
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fed0 	bl	8000b3c <__aeabi_dcmpun>
 8008d9c:	b140      	cbz	r0, 8008db0 <_printf_float+0xf0>
 8008d9e:	464b      	mov	r3, r9
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	bfbc      	itt	lt
 8008da4:	232d      	movlt	r3, #45	; 0x2d
 8008da6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008daa:	487f      	ldr	r0, [pc, #508]	; (8008fa8 <_printf_float+0x2e8>)
 8008dac:	4b7f      	ldr	r3, [pc, #508]	; (8008fac <_printf_float+0x2ec>)
 8008dae:	e7d1      	b.n	8008d54 <_printf_float+0x94>
 8008db0:	6863      	ldr	r3, [r4, #4]
 8008db2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008db6:	9206      	str	r2, [sp, #24]
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	d13f      	bne.n	8008e3c <_printf_float+0x17c>
 8008dbc:	2306      	movs	r3, #6
 8008dbe:	6063      	str	r3, [r4, #4]
 8008dc0:	9b05      	ldr	r3, [sp, #20]
 8008dc2:	6861      	ldr	r1, [r4, #4]
 8008dc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008dc8:	2300      	movs	r3, #0
 8008dca:	9303      	str	r3, [sp, #12]
 8008dcc:	ab0a      	add	r3, sp, #40	; 0x28
 8008dce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008dd2:	ab09      	add	r3, sp, #36	; 0x24
 8008dd4:	ec49 8b10 	vmov	d0, r8, r9
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7ff fecd 	bl	8008b80 <__cvt>
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dea:	2b47      	cmp	r3, #71	; 0x47
 8008dec:	4680      	mov	r8, r0
 8008dee:	d108      	bne.n	8008e02 <_printf_float+0x142>
 8008df0:	1cc8      	adds	r0, r1, #3
 8008df2:	db02      	blt.n	8008dfa <_printf_float+0x13a>
 8008df4:	6863      	ldr	r3, [r4, #4]
 8008df6:	4299      	cmp	r1, r3
 8008df8:	dd41      	ble.n	8008e7e <_printf_float+0x1be>
 8008dfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8008dfe:	fa5f fb8b 	uxtb.w	fp, fp
 8008e02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e06:	d820      	bhi.n	8008e4a <_printf_float+0x18a>
 8008e08:	3901      	subs	r1, #1
 8008e0a:	465a      	mov	r2, fp
 8008e0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e10:	9109      	str	r1, [sp, #36]	; 0x24
 8008e12:	f7ff ff17 	bl	8008c44 <__exponent>
 8008e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e18:	1813      	adds	r3, r2, r0
 8008e1a:	2a01      	cmp	r2, #1
 8008e1c:	4681      	mov	r9, r0
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	dc02      	bgt.n	8008e28 <_printf_float+0x168>
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	07d2      	lsls	r2, r2, #31
 8008e26:	d501      	bpl.n	8008e2c <_printf_float+0x16c>
 8008e28:	3301      	adds	r3, #1
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d09c      	beq.n	8008d6e <_printf_float+0xae>
 8008e34:	232d      	movs	r3, #45	; 0x2d
 8008e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e3a:	e798      	b.n	8008d6e <_printf_float+0xae>
 8008e3c:	9a06      	ldr	r2, [sp, #24]
 8008e3e:	2a47      	cmp	r2, #71	; 0x47
 8008e40:	d1be      	bne.n	8008dc0 <_printf_float+0x100>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1bc      	bne.n	8008dc0 <_printf_float+0x100>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e7b9      	b.n	8008dbe <_printf_float+0xfe>
 8008e4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e4e:	d118      	bne.n	8008e82 <_printf_float+0x1c2>
 8008e50:	2900      	cmp	r1, #0
 8008e52:	6863      	ldr	r3, [r4, #4]
 8008e54:	dd0b      	ble.n	8008e6e <_printf_float+0x1ae>
 8008e56:	6121      	str	r1, [r4, #16]
 8008e58:	b913      	cbnz	r3, 8008e60 <_printf_float+0x1a0>
 8008e5a:	6822      	ldr	r2, [r4, #0]
 8008e5c:	07d0      	lsls	r0, r2, #31
 8008e5e:	d502      	bpl.n	8008e66 <_printf_float+0x1a6>
 8008e60:	3301      	adds	r3, #1
 8008e62:	440b      	add	r3, r1
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e68:	f04f 0900 	mov.w	r9, #0
 8008e6c:	e7de      	b.n	8008e2c <_printf_float+0x16c>
 8008e6e:	b913      	cbnz	r3, 8008e76 <_printf_float+0x1b6>
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	07d2      	lsls	r2, r2, #31
 8008e74:	d501      	bpl.n	8008e7a <_printf_float+0x1ba>
 8008e76:	3302      	adds	r3, #2
 8008e78:	e7f4      	b.n	8008e64 <_printf_float+0x1a4>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e7f2      	b.n	8008e64 <_printf_float+0x1a4>
 8008e7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e84:	4299      	cmp	r1, r3
 8008e86:	db05      	blt.n	8008e94 <_printf_float+0x1d4>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	6121      	str	r1, [r4, #16]
 8008e8c:	07d8      	lsls	r0, r3, #31
 8008e8e:	d5ea      	bpl.n	8008e66 <_printf_float+0x1a6>
 8008e90:	1c4b      	adds	r3, r1, #1
 8008e92:	e7e7      	b.n	8008e64 <_printf_float+0x1a4>
 8008e94:	2900      	cmp	r1, #0
 8008e96:	bfd4      	ite	le
 8008e98:	f1c1 0202 	rsble	r2, r1, #2
 8008e9c:	2201      	movgt	r2, #1
 8008e9e:	4413      	add	r3, r2
 8008ea0:	e7e0      	b.n	8008e64 <_printf_float+0x1a4>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	055a      	lsls	r2, r3, #21
 8008ea6:	d407      	bmi.n	8008eb8 <_printf_float+0x1f8>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	4642      	mov	r2, r8
 8008eac:	4631      	mov	r1, r6
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47b8      	blx	r7
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d12c      	bne.n	8008f10 <_printf_float+0x250>
 8008eb6:	e764      	b.n	8008d82 <_printf_float+0xc2>
 8008eb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ebc:	f240 80e0 	bls.w	8009080 <_printf_float+0x3c0>
 8008ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f7f7 fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d034      	beq.n	8008f3a <_printf_float+0x27a>
 8008ed0:	4a37      	ldr	r2, [pc, #220]	; (8008fb0 <_printf_float+0x2f0>)
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	f43f af51 	beq.w	8008d82 <_printf_float+0xc2>
 8008ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	db02      	blt.n	8008eee <_printf_float+0x22e>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	07d8      	lsls	r0, r3, #31
 8008eec:	d510      	bpl.n	8008f10 <_printf_float+0x250>
 8008eee:	ee18 3a10 	vmov	r3, s16
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	f43f af41 	beq.w	8008d82 <_printf_float+0xc2>
 8008f00:	f04f 0800 	mov.w	r8, #0
 8008f04:	f104 091a 	add.w	r9, r4, #26
 8008f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	4543      	cmp	r3, r8
 8008f0e:	dc09      	bgt.n	8008f24 <_printf_float+0x264>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	079b      	lsls	r3, r3, #30
 8008f14:	f100 8105 	bmi.w	8009122 <_printf_float+0x462>
 8008f18:	68e0      	ldr	r0, [r4, #12]
 8008f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f1c:	4298      	cmp	r0, r3
 8008f1e:	bfb8      	it	lt
 8008f20:	4618      	movlt	r0, r3
 8008f22:	e730      	b.n	8008d86 <_printf_float+0xc6>
 8008f24:	2301      	movs	r3, #1
 8008f26:	464a      	mov	r2, r9
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f af27 	beq.w	8008d82 <_printf_float+0xc2>
 8008f34:	f108 0801 	add.w	r8, r8, #1
 8008f38:	e7e6      	b.n	8008f08 <_printf_float+0x248>
 8008f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dc39      	bgt.n	8008fb4 <_printf_float+0x2f4>
 8008f40:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <_printf_float+0x2f0>)
 8008f42:	2301      	movs	r3, #1
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f43f af19 	beq.w	8008d82 <_printf_float+0xc2>
 8008f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f54:	4313      	orrs	r3, r2
 8008f56:	d102      	bne.n	8008f5e <_printf_float+0x29e>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	07d9      	lsls	r1, r3, #31
 8008f5c:	d5d8      	bpl.n	8008f10 <_printf_float+0x250>
 8008f5e:	ee18 3a10 	vmov	r3, s16
 8008f62:	4652      	mov	r2, sl
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	f43f af09 	beq.w	8008d82 <_printf_float+0xc2>
 8008f70:	f04f 0900 	mov.w	r9, #0
 8008f74:	f104 0a1a 	add.w	sl, r4, #26
 8008f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7a:	425b      	negs	r3, r3
 8008f7c:	454b      	cmp	r3, r9
 8008f7e:	dc01      	bgt.n	8008f84 <_printf_float+0x2c4>
 8008f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f82:	e792      	b.n	8008eaa <_printf_float+0x1ea>
 8008f84:	2301      	movs	r3, #1
 8008f86:	4652      	mov	r2, sl
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	47b8      	blx	r7
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f43f aef7 	beq.w	8008d82 <_printf_float+0xc2>
 8008f94:	f109 0901 	add.w	r9, r9, #1
 8008f98:	e7ee      	b.n	8008f78 <_printf_float+0x2b8>
 8008f9a:	bf00      	nop
 8008f9c:	7fefffff 	.word	0x7fefffff
 8008fa0:	0800bf58 	.word	0x0800bf58
 8008fa4:	0800bf5c 	.word	0x0800bf5c
 8008fa8:	0800bf64 	.word	0x0800bf64
 8008fac:	0800bf60 	.word	0x0800bf60
 8008fb0:	0800bf68 	.word	0x0800bf68
 8008fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	bfa8      	it	ge
 8008fbc:	461a      	movge	r2, r3
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	dc37      	bgt.n	8009034 <_printf_float+0x374>
 8008fc4:	f04f 0b00 	mov.w	fp, #0
 8008fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fcc:	f104 021a 	add.w	r2, r4, #26
 8008fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fd2:	9305      	str	r3, [sp, #20]
 8008fd4:	eba3 0309 	sub.w	r3, r3, r9
 8008fd8:	455b      	cmp	r3, fp
 8008fda:	dc33      	bgt.n	8009044 <_printf_float+0x384>
 8008fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	db3b      	blt.n	800905c <_printf_float+0x39c>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	07da      	lsls	r2, r3, #31
 8008fe8:	d438      	bmi.n	800905c <_printf_float+0x39c>
 8008fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fec:	9a05      	ldr	r2, [sp, #20]
 8008fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ff0:	1a9a      	subs	r2, r3, r2
 8008ff2:	eba3 0901 	sub.w	r9, r3, r1
 8008ff6:	4591      	cmp	r9, r2
 8008ff8:	bfa8      	it	ge
 8008ffa:	4691      	movge	r9, r2
 8008ffc:	f1b9 0f00 	cmp.w	r9, #0
 8009000:	dc35      	bgt.n	800906e <_printf_float+0x3ae>
 8009002:	f04f 0800 	mov.w	r8, #0
 8009006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800900a:	f104 0a1a 	add.w	sl, r4, #26
 800900e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009012:	1a9b      	subs	r3, r3, r2
 8009014:	eba3 0309 	sub.w	r3, r3, r9
 8009018:	4543      	cmp	r3, r8
 800901a:	f77f af79 	ble.w	8008f10 <_printf_float+0x250>
 800901e:	2301      	movs	r3, #1
 8009020:	4652      	mov	r2, sl
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f aeaa 	beq.w	8008d82 <_printf_float+0xc2>
 800902e:	f108 0801 	add.w	r8, r8, #1
 8009032:	e7ec      	b.n	800900e <_printf_float+0x34e>
 8009034:	4613      	mov	r3, r2
 8009036:	4631      	mov	r1, r6
 8009038:	4642      	mov	r2, r8
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	d1c0      	bne.n	8008fc4 <_printf_float+0x304>
 8009042:	e69e      	b.n	8008d82 <_printf_float+0xc2>
 8009044:	2301      	movs	r3, #1
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	9205      	str	r2, [sp, #20]
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f ae97 	beq.w	8008d82 <_printf_float+0xc2>
 8009054:	9a05      	ldr	r2, [sp, #20]
 8009056:	f10b 0b01 	add.w	fp, fp, #1
 800905a:	e7b9      	b.n	8008fd0 <_printf_float+0x310>
 800905c:	ee18 3a10 	vmov	r3, s16
 8009060:	4652      	mov	r2, sl
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	d1be      	bne.n	8008fea <_printf_float+0x32a>
 800906c:	e689      	b.n	8008d82 <_printf_float+0xc2>
 800906e:	9a05      	ldr	r2, [sp, #20]
 8009070:	464b      	mov	r3, r9
 8009072:	4442      	add	r2, r8
 8009074:	4631      	mov	r1, r6
 8009076:	4628      	mov	r0, r5
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	d1c1      	bne.n	8009002 <_printf_float+0x342>
 800907e:	e680      	b.n	8008d82 <_printf_float+0xc2>
 8009080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009082:	2a01      	cmp	r2, #1
 8009084:	dc01      	bgt.n	800908a <_printf_float+0x3ca>
 8009086:	07db      	lsls	r3, r3, #31
 8009088:	d538      	bpl.n	80090fc <_printf_float+0x43c>
 800908a:	2301      	movs	r3, #1
 800908c:	4642      	mov	r2, r8
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	f43f ae74 	beq.w	8008d82 <_printf_float+0xc2>
 800909a:	ee18 3a10 	vmov	r3, s16
 800909e:	4652      	mov	r2, sl
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	f43f ae6b 	beq.w	8008d82 <_printf_float+0xc2>
 80090ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090b0:	2200      	movs	r2, #0
 80090b2:	2300      	movs	r3, #0
 80090b4:	f7f7 fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 80090b8:	b9d8      	cbnz	r0, 80090f2 <_printf_float+0x432>
 80090ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090bc:	f108 0201 	add.w	r2, r8, #1
 80090c0:	3b01      	subs	r3, #1
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	d10e      	bne.n	80090ea <_printf_float+0x42a>
 80090cc:	e659      	b.n	8008d82 <_printf_float+0xc2>
 80090ce:	2301      	movs	r3, #1
 80090d0:	4652      	mov	r2, sl
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f ae52 	beq.w	8008d82 <_printf_float+0xc2>
 80090de:	f108 0801 	add.w	r8, r8, #1
 80090e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e4:	3b01      	subs	r3, #1
 80090e6:	4543      	cmp	r3, r8
 80090e8:	dcf1      	bgt.n	80090ce <_printf_float+0x40e>
 80090ea:	464b      	mov	r3, r9
 80090ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090f0:	e6dc      	b.n	8008eac <_printf_float+0x1ec>
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	f104 0a1a 	add.w	sl, r4, #26
 80090fa:	e7f2      	b.n	80090e2 <_printf_float+0x422>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4642      	mov	r2, r8
 8009100:	e7df      	b.n	80090c2 <_printf_float+0x402>
 8009102:	2301      	movs	r3, #1
 8009104:	464a      	mov	r2, r9
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f ae38 	beq.w	8008d82 <_printf_float+0xc2>
 8009112:	f108 0801 	add.w	r8, r8, #1
 8009116:	68e3      	ldr	r3, [r4, #12]
 8009118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800911a:	1a5b      	subs	r3, r3, r1
 800911c:	4543      	cmp	r3, r8
 800911e:	dcf0      	bgt.n	8009102 <_printf_float+0x442>
 8009120:	e6fa      	b.n	8008f18 <_printf_float+0x258>
 8009122:	f04f 0800 	mov.w	r8, #0
 8009126:	f104 0919 	add.w	r9, r4, #25
 800912a:	e7f4      	b.n	8009116 <_printf_float+0x456>

0800912c <_printf_common>:
 800912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	4616      	mov	r6, r2
 8009132:	4699      	mov	r9, r3
 8009134:	688a      	ldr	r2, [r1, #8]
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800913c:	4293      	cmp	r3, r2
 800913e:	bfb8      	it	lt
 8009140:	4613      	movlt	r3, r2
 8009142:	6033      	str	r3, [r6, #0]
 8009144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009148:	4607      	mov	r7, r0
 800914a:	460c      	mov	r4, r1
 800914c:	b10a      	cbz	r2, 8009152 <_printf_common+0x26>
 800914e:	3301      	adds	r3, #1
 8009150:	6033      	str	r3, [r6, #0]
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	0699      	lsls	r1, r3, #26
 8009156:	bf42      	ittt	mi
 8009158:	6833      	ldrmi	r3, [r6, #0]
 800915a:	3302      	addmi	r3, #2
 800915c:	6033      	strmi	r3, [r6, #0]
 800915e:	6825      	ldr	r5, [r4, #0]
 8009160:	f015 0506 	ands.w	r5, r5, #6
 8009164:	d106      	bne.n	8009174 <_printf_common+0x48>
 8009166:	f104 0a19 	add.w	sl, r4, #25
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	6832      	ldr	r2, [r6, #0]
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	42ab      	cmp	r3, r5
 8009172:	dc26      	bgt.n	80091c2 <_printf_common+0x96>
 8009174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009178:	1e13      	subs	r3, r2, #0
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	bf18      	it	ne
 800917e:	2301      	movne	r3, #1
 8009180:	0692      	lsls	r2, r2, #26
 8009182:	d42b      	bmi.n	80091dc <_printf_common+0xb0>
 8009184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009188:	4649      	mov	r1, r9
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	3001      	adds	r0, #1
 8009190:	d01e      	beq.n	80091d0 <_printf_common+0xa4>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	68e5      	ldr	r5, [r4, #12]
 8009196:	6832      	ldr	r2, [r6, #0]
 8009198:	f003 0306 	and.w	r3, r3, #6
 800919c:	2b04      	cmp	r3, #4
 800919e:	bf08      	it	eq
 80091a0:	1aad      	subeq	r5, r5, r2
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	6922      	ldr	r2, [r4, #16]
 80091a6:	bf0c      	ite	eq
 80091a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091ac:	2500      	movne	r5, #0
 80091ae:	4293      	cmp	r3, r2
 80091b0:	bfc4      	itt	gt
 80091b2:	1a9b      	subgt	r3, r3, r2
 80091b4:	18ed      	addgt	r5, r5, r3
 80091b6:	2600      	movs	r6, #0
 80091b8:	341a      	adds	r4, #26
 80091ba:	42b5      	cmp	r5, r6
 80091bc:	d11a      	bne.n	80091f4 <_printf_common+0xc8>
 80091be:	2000      	movs	r0, #0
 80091c0:	e008      	b.n	80091d4 <_printf_common+0xa8>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4652      	mov	r2, sl
 80091c6:	4649      	mov	r1, r9
 80091c8:	4638      	mov	r0, r7
 80091ca:	47c0      	blx	r8
 80091cc:	3001      	adds	r0, #1
 80091ce:	d103      	bne.n	80091d8 <_printf_common+0xac>
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d8:	3501      	adds	r5, #1
 80091da:	e7c6      	b.n	800916a <_printf_common+0x3e>
 80091dc:	18e1      	adds	r1, r4, r3
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	2030      	movs	r0, #48	; 0x30
 80091e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091e6:	4422      	add	r2, r4
 80091e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091f0:	3302      	adds	r3, #2
 80091f2:	e7c7      	b.n	8009184 <_printf_common+0x58>
 80091f4:	2301      	movs	r3, #1
 80091f6:	4622      	mov	r2, r4
 80091f8:	4649      	mov	r1, r9
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c0      	blx	r8
 80091fe:	3001      	adds	r0, #1
 8009200:	d0e6      	beq.n	80091d0 <_printf_common+0xa4>
 8009202:	3601      	adds	r6, #1
 8009204:	e7d9      	b.n	80091ba <_printf_common+0x8e>
	...

08009208 <_printf_i>:
 8009208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800920c:	7e0f      	ldrb	r7, [r1, #24]
 800920e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009210:	2f78      	cmp	r7, #120	; 0x78
 8009212:	4691      	mov	r9, r2
 8009214:	4680      	mov	r8, r0
 8009216:	460c      	mov	r4, r1
 8009218:	469a      	mov	sl, r3
 800921a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800921e:	d807      	bhi.n	8009230 <_printf_i+0x28>
 8009220:	2f62      	cmp	r7, #98	; 0x62
 8009222:	d80a      	bhi.n	800923a <_printf_i+0x32>
 8009224:	2f00      	cmp	r7, #0
 8009226:	f000 80d8 	beq.w	80093da <_printf_i+0x1d2>
 800922a:	2f58      	cmp	r7, #88	; 0x58
 800922c:	f000 80a3 	beq.w	8009376 <_printf_i+0x16e>
 8009230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009238:	e03a      	b.n	80092b0 <_printf_i+0xa8>
 800923a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800923e:	2b15      	cmp	r3, #21
 8009240:	d8f6      	bhi.n	8009230 <_printf_i+0x28>
 8009242:	a101      	add	r1, pc, #4	; (adr r1, 8009248 <_printf_i+0x40>)
 8009244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009248:	080092a1 	.word	0x080092a1
 800924c:	080092b5 	.word	0x080092b5
 8009250:	08009231 	.word	0x08009231
 8009254:	08009231 	.word	0x08009231
 8009258:	08009231 	.word	0x08009231
 800925c:	08009231 	.word	0x08009231
 8009260:	080092b5 	.word	0x080092b5
 8009264:	08009231 	.word	0x08009231
 8009268:	08009231 	.word	0x08009231
 800926c:	08009231 	.word	0x08009231
 8009270:	08009231 	.word	0x08009231
 8009274:	080093c1 	.word	0x080093c1
 8009278:	080092e5 	.word	0x080092e5
 800927c:	080093a3 	.word	0x080093a3
 8009280:	08009231 	.word	0x08009231
 8009284:	08009231 	.word	0x08009231
 8009288:	080093e3 	.word	0x080093e3
 800928c:	08009231 	.word	0x08009231
 8009290:	080092e5 	.word	0x080092e5
 8009294:	08009231 	.word	0x08009231
 8009298:	08009231 	.word	0x08009231
 800929c:	080093ab 	.word	0x080093ab
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	1d1a      	adds	r2, r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	602a      	str	r2, [r5, #0]
 80092a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0a3      	b.n	80093fc <_printf_i+0x1f4>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	6829      	ldr	r1, [r5, #0]
 80092b8:	0606      	lsls	r6, r0, #24
 80092ba:	f101 0304 	add.w	r3, r1, #4
 80092be:	d50a      	bpl.n	80092d6 <_printf_i+0xce>
 80092c0:	680e      	ldr	r6, [r1, #0]
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	2e00      	cmp	r6, #0
 80092c6:	da03      	bge.n	80092d0 <_printf_i+0xc8>
 80092c8:	232d      	movs	r3, #45	; 0x2d
 80092ca:	4276      	negs	r6, r6
 80092cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d0:	485e      	ldr	r0, [pc, #376]	; (800944c <_printf_i+0x244>)
 80092d2:	230a      	movs	r3, #10
 80092d4:	e019      	b.n	800930a <_printf_i+0x102>
 80092d6:	680e      	ldr	r6, [r1, #0]
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092de:	bf18      	it	ne
 80092e0:	b236      	sxthne	r6, r6
 80092e2:	e7ef      	b.n	80092c4 <_printf_i+0xbc>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	6820      	ldr	r0, [r4, #0]
 80092e8:	1d19      	adds	r1, r3, #4
 80092ea:	6029      	str	r1, [r5, #0]
 80092ec:	0601      	lsls	r1, r0, #24
 80092ee:	d501      	bpl.n	80092f4 <_printf_i+0xec>
 80092f0:	681e      	ldr	r6, [r3, #0]
 80092f2:	e002      	b.n	80092fa <_printf_i+0xf2>
 80092f4:	0646      	lsls	r6, r0, #25
 80092f6:	d5fb      	bpl.n	80092f0 <_printf_i+0xe8>
 80092f8:	881e      	ldrh	r6, [r3, #0]
 80092fa:	4854      	ldr	r0, [pc, #336]	; (800944c <_printf_i+0x244>)
 80092fc:	2f6f      	cmp	r7, #111	; 0x6f
 80092fe:	bf0c      	ite	eq
 8009300:	2308      	moveq	r3, #8
 8009302:	230a      	movne	r3, #10
 8009304:	2100      	movs	r1, #0
 8009306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800930a:	6865      	ldr	r5, [r4, #4]
 800930c:	60a5      	str	r5, [r4, #8]
 800930e:	2d00      	cmp	r5, #0
 8009310:	bfa2      	ittt	ge
 8009312:	6821      	ldrge	r1, [r4, #0]
 8009314:	f021 0104 	bicge.w	r1, r1, #4
 8009318:	6021      	strge	r1, [r4, #0]
 800931a:	b90e      	cbnz	r6, 8009320 <_printf_i+0x118>
 800931c:	2d00      	cmp	r5, #0
 800931e:	d04d      	beq.n	80093bc <_printf_i+0x1b4>
 8009320:	4615      	mov	r5, r2
 8009322:	fbb6 f1f3 	udiv	r1, r6, r3
 8009326:	fb03 6711 	mls	r7, r3, r1, r6
 800932a:	5dc7      	ldrb	r7, [r0, r7]
 800932c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009330:	4637      	mov	r7, r6
 8009332:	42bb      	cmp	r3, r7
 8009334:	460e      	mov	r6, r1
 8009336:	d9f4      	bls.n	8009322 <_printf_i+0x11a>
 8009338:	2b08      	cmp	r3, #8
 800933a:	d10b      	bne.n	8009354 <_printf_i+0x14c>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	07de      	lsls	r6, r3, #31
 8009340:	d508      	bpl.n	8009354 <_printf_i+0x14c>
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	6861      	ldr	r1, [r4, #4]
 8009346:	4299      	cmp	r1, r3
 8009348:	bfde      	ittt	le
 800934a:	2330      	movle	r3, #48	; 0x30
 800934c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009354:	1b52      	subs	r2, r2, r5
 8009356:	6122      	str	r2, [r4, #16]
 8009358:	f8cd a000 	str.w	sl, [sp]
 800935c:	464b      	mov	r3, r9
 800935e:	aa03      	add	r2, sp, #12
 8009360:	4621      	mov	r1, r4
 8009362:	4640      	mov	r0, r8
 8009364:	f7ff fee2 	bl	800912c <_printf_common>
 8009368:	3001      	adds	r0, #1
 800936a:	d14c      	bne.n	8009406 <_printf_i+0x1fe>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	b004      	add	sp, #16
 8009372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009376:	4835      	ldr	r0, [pc, #212]	; (800944c <_printf_i+0x244>)
 8009378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800937c:	6829      	ldr	r1, [r5, #0]
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f851 6b04 	ldr.w	r6, [r1], #4
 8009384:	6029      	str	r1, [r5, #0]
 8009386:	061d      	lsls	r5, r3, #24
 8009388:	d514      	bpl.n	80093b4 <_printf_i+0x1ac>
 800938a:	07df      	lsls	r7, r3, #31
 800938c:	bf44      	itt	mi
 800938e:	f043 0320 	orrmi.w	r3, r3, #32
 8009392:	6023      	strmi	r3, [r4, #0]
 8009394:	b91e      	cbnz	r6, 800939e <_printf_i+0x196>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	f023 0320 	bic.w	r3, r3, #32
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	2310      	movs	r3, #16
 80093a0:	e7b0      	b.n	8009304 <_printf_i+0xfc>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	f043 0320 	orr.w	r3, r3, #32
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	2378      	movs	r3, #120	; 0x78
 80093ac:	4828      	ldr	r0, [pc, #160]	; (8009450 <_printf_i+0x248>)
 80093ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093b2:	e7e3      	b.n	800937c <_printf_i+0x174>
 80093b4:	0659      	lsls	r1, r3, #25
 80093b6:	bf48      	it	mi
 80093b8:	b2b6      	uxthmi	r6, r6
 80093ba:	e7e6      	b.n	800938a <_printf_i+0x182>
 80093bc:	4615      	mov	r5, r2
 80093be:	e7bb      	b.n	8009338 <_printf_i+0x130>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	6826      	ldr	r6, [r4, #0]
 80093c4:	6961      	ldr	r1, [r4, #20]
 80093c6:	1d18      	adds	r0, r3, #4
 80093c8:	6028      	str	r0, [r5, #0]
 80093ca:	0635      	lsls	r5, r6, #24
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	d501      	bpl.n	80093d4 <_printf_i+0x1cc>
 80093d0:	6019      	str	r1, [r3, #0]
 80093d2:	e002      	b.n	80093da <_printf_i+0x1d2>
 80093d4:	0670      	lsls	r0, r6, #25
 80093d6:	d5fb      	bpl.n	80093d0 <_printf_i+0x1c8>
 80093d8:	8019      	strh	r1, [r3, #0]
 80093da:	2300      	movs	r3, #0
 80093dc:	6123      	str	r3, [r4, #16]
 80093de:	4615      	mov	r5, r2
 80093e0:	e7ba      	b.n	8009358 <_printf_i+0x150>
 80093e2:	682b      	ldr	r3, [r5, #0]
 80093e4:	1d1a      	adds	r2, r3, #4
 80093e6:	602a      	str	r2, [r5, #0]
 80093e8:	681d      	ldr	r5, [r3, #0]
 80093ea:	6862      	ldr	r2, [r4, #4]
 80093ec:	2100      	movs	r1, #0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7f6 fefe 	bl	80001f0 <memchr>
 80093f4:	b108      	cbz	r0, 80093fa <_printf_i+0x1f2>
 80093f6:	1b40      	subs	r0, r0, r5
 80093f8:	6060      	str	r0, [r4, #4]
 80093fa:	6863      	ldr	r3, [r4, #4]
 80093fc:	6123      	str	r3, [r4, #16]
 80093fe:	2300      	movs	r3, #0
 8009400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009404:	e7a8      	b.n	8009358 <_printf_i+0x150>
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	462a      	mov	r2, r5
 800940a:	4649      	mov	r1, r9
 800940c:	4640      	mov	r0, r8
 800940e:	47d0      	blx	sl
 8009410:	3001      	adds	r0, #1
 8009412:	d0ab      	beq.n	800936c <_printf_i+0x164>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	079b      	lsls	r3, r3, #30
 8009418:	d413      	bmi.n	8009442 <_printf_i+0x23a>
 800941a:	68e0      	ldr	r0, [r4, #12]
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	4298      	cmp	r0, r3
 8009420:	bfb8      	it	lt
 8009422:	4618      	movlt	r0, r3
 8009424:	e7a4      	b.n	8009370 <_printf_i+0x168>
 8009426:	2301      	movs	r3, #1
 8009428:	4632      	mov	r2, r6
 800942a:	4649      	mov	r1, r9
 800942c:	4640      	mov	r0, r8
 800942e:	47d0      	blx	sl
 8009430:	3001      	adds	r0, #1
 8009432:	d09b      	beq.n	800936c <_printf_i+0x164>
 8009434:	3501      	adds	r5, #1
 8009436:	68e3      	ldr	r3, [r4, #12]
 8009438:	9903      	ldr	r1, [sp, #12]
 800943a:	1a5b      	subs	r3, r3, r1
 800943c:	42ab      	cmp	r3, r5
 800943e:	dcf2      	bgt.n	8009426 <_printf_i+0x21e>
 8009440:	e7eb      	b.n	800941a <_printf_i+0x212>
 8009442:	2500      	movs	r5, #0
 8009444:	f104 0619 	add.w	r6, r4, #25
 8009448:	e7f5      	b.n	8009436 <_printf_i+0x22e>
 800944a:	bf00      	nop
 800944c:	0800bf6a 	.word	0x0800bf6a
 8009450:	0800bf7b 	.word	0x0800bf7b

08009454 <siprintf>:
 8009454:	b40e      	push	{r1, r2, r3}
 8009456:	b500      	push	{lr}
 8009458:	b09c      	sub	sp, #112	; 0x70
 800945a:	ab1d      	add	r3, sp, #116	; 0x74
 800945c:	9002      	str	r0, [sp, #8]
 800945e:	9006      	str	r0, [sp, #24]
 8009460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009464:	4809      	ldr	r0, [pc, #36]	; (800948c <siprintf+0x38>)
 8009466:	9107      	str	r1, [sp, #28]
 8009468:	9104      	str	r1, [sp, #16]
 800946a:	4909      	ldr	r1, [pc, #36]	; (8009490 <siprintf+0x3c>)
 800946c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009470:	9105      	str	r1, [sp, #20]
 8009472:	6800      	ldr	r0, [r0, #0]
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	a902      	add	r1, sp, #8
 8009478:	f001 fc0a 	bl	800ac90 <_svfiprintf_r>
 800947c:	9b02      	ldr	r3, [sp, #8]
 800947e:	2200      	movs	r2, #0
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	b01c      	add	sp, #112	; 0x70
 8009484:	f85d eb04 	ldr.w	lr, [sp], #4
 8009488:	b003      	add	sp, #12
 800948a:	4770      	bx	lr
 800948c:	20000014 	.word	0x20000014
 8009490:	ffff0208 	.word	0xffff0208

08009494 <strstr>:
 8009494:	780a      	ldrb	r2, [r1, #0]
 8009496:	b570      	push	{r4, r5, r6, lr}
 8009498:	b96a      	cbnz	r2, 80094b6 <strstr+0x22>
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	429a      	cmp	r2, r3
 800949e:	d109      	bne.n	80094b4 <strstr+0x20>
 80094a0:	460c      	mov	r4, r1
 80094a2:	4605      	mov	r5, r0
 80094a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0f6      	beq.n	800949a <strstr+0x6>
 80094ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80094b0:	429e      	cmp	r6, r3
 80094b2:	d0f7      	beq.n	80094a4 <strstr+0x10>
 80094b4:	3001      	adds	r0, #1
 80094b6:	7803      	ldrb	r3, [r0, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1ef      	bne.n	800949c <strstr+0x8>
 80094bc:	4618      	mov	r0, r3
 80094be:	e7ec      	b.n	800949a <strstr+0x6>

080094c0 <_strtol_l.constprop.0>:
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c6:	d001      	beq.n	80094cc <_strtol_l.constprop.0+0xc>
 80094c8:	2b24      	cmp	r3, #36	; 0x24
 80094ca:	d906      	bls.n	80094da <_strtol_l.constprop.0+0x1a>
 80094cc:	f7ff fb18 	bl	8008b00 <__errno>
 80094d0:	2316      	movs	r3, #22
 80094d2:	6003      	str	r3, [r0, #0]
 80094d4:	2000      	movs	r0, #0
 80094d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80095c0 <_strtol_l.constprop.0+0x100>
 80094de:	460d      	mov	r5, r1
 80094e0:	462e      	mov	r6, r5
 80094e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80094ea:	f017 0708 	ands.w	r7, r7, #8
 80094ee:	d1f7      	bne.n	80094e0 <_strtol_l.constprop.0+0x20>
 80094f0:	2c2d      	cmp	r4, #45	; 0x2d
 80094f2:	d132      	bne.n	800955a <_strtol_l.constprop.0+0x9a>
 80094f4:	782c      	ldrb	r4, [r5, #0]
 80094f6:	2701      	movs	r7, #1
 80094f8:	1cb5      	adds	r5, r6, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d05b      	beq.n	80095b6 <_strtol_l.constprop.0+0xf6>
 80094fe:	2b10      	cmp	r3, #16
 8009500:	d109      	bne.n	8009516 <_strtol_l.constprop.0+0x56>
 8009502:	2c30      	cmp	r4, #48	; 0x30
 8009504:	d107      	bne.n	8009516 <_strtol_l.constprop.0+0x56>
 8009506:	782c      	ldrb	r4, [r5, #0]
 8009508:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800950c:	2c58      	cmp	r4, #88	; 0x58
 800950e:	d14d      	bne.n	80095ac <_strtol_l.constprop.0+0xec>
 8009510:	786c      	ldrb	r4, [r5, #1]
 8009512:	2310      	movs	r3, #16
 8009514:	3502      	adds	r5, #2
 8009516:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800951a:	f108 38ff 	add.w	r8, r8, #4294967295
 800951e:	f04f 0c00 	mov.w	ip, #0
 8009522:	fbb8 f9f3 	udiv	r9, r8, r3
 8009526:	4666      	mov	r6, ip
 8009528:	fb03 8a19 	mls	sl, r3, r9, r8
 800952c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009530:	f1be 0f09 	cmp.w	lr, #9
 8009534:	d816      	bhi.n	8009564 <_strtol_l.constprop.0+0xa4>
 8009536:	4674      	mov	r4, lr
 8009538:	42a3      	cmp	r3, r4
 800953a:	dd24      	ble.n	8009586 <_strtol_l.constprop.0+0xc6>
 800953c:	f1bc 0f00 	cmp.w	ip, #0
 8009540:	db1e      	blt.n	8009580 <_strtol_l.constprop.0+0xc0>
 8009542:	45b1      	cmp	r9, r6
 8009544:	d31c      	bcc.n	8009580 <_strtol_l.constprop.0+0xc0>
 8009546:	d101      	bne.n	800954c <_strtol_l.constprop.0+0x8c>
 8009548:	45a2      	cmp	sl, r4
 800954a:	db19      	blt.n	8009580 <_strtol_l.constprop.0+0xc0>
 800954c:	fb06 4603 	mla	r6, r6, r3, r4
 8009550:	f04f 0c01 	mov.w	ip, #1
 8009554:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009558:	e7e8      	b.n	800952c <_strtol_l.constprop.0+0x6c>
 800955a:	2c2b      	cmp	r4, #43	; 0x2b
 800955c:	bf04      	itt	eq
 800955e:	782c      	ldrbeq	r4, [r5, #0]
 8009560:	1cb5      	addeq	r5, r6, #2
 8009562:	e7ca      	b.n	80094fa <_strtol_l.constprop.0+0x3a>
 8009564:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009568:	f1be 0f19 	cmp.w	lr, #25
 800956c:	d801      	bhi.n	8009572 <_strtol_l.constprop.0+0xb2>
 800956e:	3c37      	subs	r4, #55	; 0x37
 8009570:	e7e2      	b.n	8009538 <_strtol_l.constprop.0+0x78>
 8009572:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009576:	f1be 0f19 	cmp.w	lr, #25
 800957a:	d804      	bhi.n	8009586 <_strtol_l.constprop.0+0xc6>
 800957c:	3c57      	subs	r4, #87	; 0x57
 800957e:	e7db      	b.n	8009538 <_strtol_l.constprop.0+0x78>
 8009580:	f04f 3cff 	mov.w	ip, #4294967295
 8009584:	e7e6      	b.n	8009554 <_strtol_l.constprop.0+0x94>
 8009586:	f1bc 0f00 	cmp.w	ip, #0
 800958a:	da05      	bge.n	8009598 <_strtol_l.constprop.0+0xd8>
 800958c:	2322      	movs	r3, #34	; 0x22
 800958e:	6003      	str	r3, [r0, #0]
 8009590:	4646      	mov	r6, r8
 8009592:	b942      	cbnz	r2, 80095a6 <_strtol_l.constprop.0+0xe6>
 8009594:	4630      	mov	r0, r6
 8009596:	e79e      	b.n	80094d6 <_strtol_l.constprop.0+0x16>
 8009598:	b107      	cbz	r7, 800959c <_strtol_l.constprop.0+0xdc>
 800959a:	4276      	negs	r6, r6
 800959c:	2a00      	cmp	r2, #0
 800959e:	d0f9      	beq.n	8009594 <_strtol_l.constprop.0+0xd4>
 80095a0:	f1bc 0f00 	cmp.w	ip, #0
 80095a4:	d000      	beq.n	80095a8 <_strtol_l.constprop.0+0xe8>
 80095a6:	1e69      	subs	r1, r5, #1
 80095a8:	6011      	str	r1, [r2, #0]
 80095aa:	e7f3      	b.n	8009594 <_strtol_l.constprop.0+0xd4>
 80095ac:	2430      	movs	r4, #48	; 0x30
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1b1      	bne.n	8009516 <_strtol_l.constprop.0+0x56>
 80095b2:	2308      	movs	r3, #8
 80095b4:	e7af      	b.n	8009516 <_strtol_l.constprop.0+0x56>
 80095b6:	2c30      	cmp	r4, #48	; 0x30
 80095b8:	d0a5      	beq.n	8009506 <_strtol_l.constprop.0+0x46>
 80095ba:	230a      	movs	r3, #10
 80095bc:	e7ab      	b.n	8009516 <_strtol_l.constprop.0+0x56>
 80095be:	bf00      	nop
 80095c0:	0800bf8d 	.word	0x0800bf8d

080095c4 <strtol>:
 80095c4:	4613      	mov	r3, r2
 80095c6:	460a      	mov	r2, r1
 80095c8:	4601      	mov	r1, r0
 80095ca:	4802      	ldr	r0, [pc, #8]	; (80095d4 <strtol+0x10>)
 80095cc:	6800      	ldr	r0, [r0, #0]
 80095ce:	f7ff bf77 	b.w	80094c0 <_strtol_l.constprop.0>
 80095d2:	bf00      	nop
 80095d4:	20000014 	.word	0x20000014

080095d8 <quorem>:
 80095d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	6903      	ldr	r3, [r0, #16]
 80095de:	690c      	ldr	r4, [r1, #16]
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	4607      	mov	r7, r0
 80095e4:	f2c0 8081 	blt.w	80096ea <quorem+0x112>
 80095e8:	3c01      	subs	r4, #1
 80095ea:	f101 0814 	add.w	r8, r1, #20
 80095ee:	f100 0514 	add.w	r5, r0, #20
 80095f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009600:	3301      	adds	r3, #1
 8009602:	429a      	cmp	r2, r3
 8009604:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009608:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800960c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009610:	d331      	bcc.n	8009676 <quorem+0x9e>
 8009612:	f04f 0e00 	mov.w	lr, #0
 8009616:	4640      	mov	r0, r8
 8009618:	46ac      	mov	ip, r5
 800961a:	46f2      	mov	sl, lr
 800961c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009620:	b293      	uxth	r3, r2
 8009622:	fb06 e303 	mla	r3, r6, r3, lr
 8009626:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800962a:	b29b      	uxth	r3, r3
 800962c:	ebaa 0303 	sub.w	r3, sl, r3
 8009630:	f8dc a000 	ldr.w	sl, [ip]
 8009634:	0c12      	lsrs	r2, r2, #16
 8009636:	fa13 f38a 	uxtah	r3, r3, sl
 800963a:	fb06 e202 	mla	r2, r6, r2, lr
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	9b00      	ldr	r3, [sp, #0]
 8009642:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009646:	b292      	uxth	r2, r2
 8009648:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800964c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009650:	f8bd 3000 	ldrh.w	r3, [sp]
 8009654:	4581      	cmp	r9, r0
 8009656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800965a:	f84c 3b04 	str.w	r3, [ip], #4
 800965e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009662:	d2db      	bcs.n	800961c <quorem+0x44>
 8009664:	f855 300b 	ldr.w	r3, [r5, fp]
 8009668:	b92b      	cbnz	r3, 8009676 <quorem+0x9e>
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	3b04      	subs	r3, #4
 800966e:	429d      	cmp	r5, r3
 8009670:	461a      	mov	r2, r3
 8009672:	d32e      	bcc.n	80096d2 <quorem+0xfa>
 8009674:	613c      	str	r4, [r7, #16]
 8009676:	4638      	mov	r0, r7
 8009678:	f001 f8b6 	bl	800a7e8 <__mcmp>
 800967c:	2800      	cmp	r0, #0
 800967e:	db24      	blt.n	80096ca <quorem+0xf2>
 8009680:	3601      	adds	r6, #1
 8009682:	4628      	mov	r0, r5
 8009684:	f04f 0c00 	mov.w	ip, #0
 8009688:	f858 2b04 	ldr.w	r2, [r8], #4
 800968c:	f8d0 e000 	ldr.w	lr, [r0]
 8009690:	b293      	uxth	r3, r2
 8009692:	ebac 0303 	sub.w	r3, ip, r3
 8009696:	0c12      	lsrs	r2, r2, #16
 8009698:	fa13 f38e 	uxtah	r3, r3, lr
 800969c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096aa:	45c1      	cmp	r9, r8
 80096ac:	f840 3b04 	str.w	r3, [r0], #4
 80096b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096b4:	d2e8      	bcs.n	8009688 <quorem+0xb0>
 80096b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096be:	b922      	cbnz	r2, 80096ca <quorem+0xf2>
 80096c0:	3b04      	subs	r3, #4
 80096c2:	429d      	cmp	r5, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	d30a      	bcc.n	80096de <quorem+0x106>
 80096c8:	613c      	str	r4, [r7, #16]
 80096ca:	4630      	mov	r0, r6
 80096cc:	b003      	add	sp, #12
 80096ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	3b04      	subs	r3, #4
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	d1cc      	bne.n	8009674 <quorem+0x9c>
 80096da:	3c01      	subs	r4, #1
 80096dc:	e7c7      	b.n	800966e <quorem+0x96>
 80096de:	6812      	ldr	r2, [r2, #0]
 80096e0:	3b04      	subs	r3, #4
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	d1f0      	bne.n	80096c8 <quorem+0xf0>
 80096e6:	3c01      	subs	r4, #1
 80096e8:	e7eb      	b.n	80096c2 <quorem+0xea>
 80096ea:	2000      	movs	r0, #0
 80096ec:	e7ee      	b.n	80096cc <quorem+0xf4>
	...

080096f0 <_dtoa_r>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	ed2d 8b04 	vpush	{d8-d9}
 80096f8:	ec57 6b10 	vmov	r6, r7, d0
 80096fc:	b093      	sub	sp, #76	; 0x4c
 80096fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009700:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009704:	9106      	str	r1, [sp, #24]
 8009706:	ee10 aa10 	vmov	sl, s0
 800970a:	4604      	mov	r4, r0
 800970c:	9209      	str	r2, [sp, #36]	; 0x24
 800970e:	930c      	str	r3, [sp, #48]	; 0x30
 8009710:	46bb      	mov	fp, r7
 8009712:	b975      	cbnz	r5, 8009732 <_dtoa_r+0x42>
 8009714:	2010      	movs	r0, #16
 8009716:	f000 fddd 	bl	800a2d4 <malloc>
 800971a:	4602      	mov	r2, r0
 800971c:	6260      	str	r0, [r4, #36]	; 0x24
 800971e:	b920      	cbnz	r0, 800972a <_dtoa_r+0x3a>
 8009720:	4ba7      	ldr	r3, [pc, #668]	; (80099c0 <_dtoa_r+0x2d0>)
 8009722:	21ea      	movs	r1, #234	; 0xea
 8009724:	48a7      	ldr	r0, [pc, #668]	; (80099c4 <_dtoa_r+0x2d4>)
 8009726:	f001 fbc3 	bl	800aeb0 <__assert_func>
 800972a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800972e:	6005      	str	r5, [r0, #0]
 8009730:	60c5      	str	r5, [r0, #12]
 8009732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009734:	6819      	ldr	r1, [r3, #0]
 8009736:	b151      	cbz	r1, 800974e <_dtoa_r+0x5e>
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	604a      	str	r2, [r1, #4]
 800973c:	2301      	movs	r3, #1
 800973e:	4093      	lsls	r3, r2
 8009740:	608b      	str	r3, [r1, #8]
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fe0e 	bl	800a364 <_Bfree>
 8009748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	1e3b      	subs	r3, r7, #0
 8009750:	bfaa      	itet	ge
 8009752:	2300      	movge	r3, #0
 8009754:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009758:	f8c8 3000 	strge.w	r3, [r8]
 800975c:	4b9a      	ldr	r3, [pc, #616]	; (80099c8 <_dtoa_r+0x2d8>)
 800975e:	bfbc      	itt	lt
 8009760:	2201      	movlt	r2, #1
 8009762:	f8c8 2000 	strlt.w	r2, [r8]
 8009766:	ea33 030b 	bics.w	r3, r3, fp
 800976a:	d11b      	bne.n	80097a4 <_dtoa_r+0xb4>
 800976c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800976e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009778:	4333      	orrs	r3, r6
 800977a:	f000 8592 	beq.w	800a2a2 <_dtoa_r+0xbb2>
 800977e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009780:	b963      	cbnz	r3, 800979c <_dtoa_r+0xac>
 8009782:	4b92      	ldr	r3, [pc, #584]	; (80099cc <_dtoa_r+0x2dc>)
 8009784:	e022      	b.n	80097cc <_dtoa_r+0xdc>
 8009786:	4b92      	ldr	r3, [pc, #584]	; (80099d0 <_dtoa_r+0x2e0>)
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	3308      	adds	r3, #8
 800978c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	9801      	ldr	r0, [sp, #4]
 8009792:	b013      	add	sp, #76	; 0x4c
 8009794:	ecbd 8b04 	vpop	{d8-d9}
 8009798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	4b8b      	ldr	r3, [pc, #556]	; (80099cc <_dtoa_r+0x2dc>)
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	3303      	adds	r3, #3
 80097a2:	e7f3      	b.n	800978c <_dtoa_r+0x9c>
 80097a4:	2200      	movs	r2, #0
 80097a6:	2300      	movs	r3, #0
 80097a8:	4650      	mov	r0, sl
 80097aa:	4659      	mov	r1, fp
 80097ac:	f7f7 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80097b0:	ec4b ab19 	vmov	d9, sl, fp
 80097b4:	4680      	mov	r8, r0
 80097b6:	b158      	cbz	r0, 80097d0 <_dtoa_r+0xe0>
 80097b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ba:	2301      	movs	r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 856b 	beq.w	800a29c <_dtoa_r+0xbac>
 80097c6:	4883      	ldr	r0, [pc, #524]	; (80099d4 <_dtoa_r+0x2e4>)
 80097c8:	6018      	str	r0, [r3, #0]
 80097ca:	1e43      	subs	r3, r0, #1
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	e7df      	b.n	8009790 <_dtoa_r+0xa0>
 80097d0:	ec4b ab10 	vmov	d0, sl, fp
 80097d4:	aa10      	add	r2, sp, #64	; 0x40
 80097d6:	a911      	add	r1, sp, #68	; 0x44
 80097d8:	4620      	mov	r0, r4
 80097da:	f001 f8ab 	bl	800a934 <__d2b>
 80097de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80097e2:	ee08 0a10 	vmov	s16, r0
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	f000 8084 	beq.w	80098f4 <_dtoa_r+0x204>
 80097ec:	ee19 3a90 	vmov	r3, s19
 80097f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80097f8:	4656      	mov	r6, sl
 80097fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80097fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009802:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009806:	4b74      	ldr	r3, [pc, #464]	; (80099d8 <_dtoa_r+0x2e8>)
 8009808:	2200      	movs	r2, #0
 800980a:	4630      	mov	r0, r6
 800980c:	4639      	mov	r1, r7
 800980e:	f7f6 fd43 	bl	8000298 <__aeabi_dsub>
 8009812:	a365      	add	r3, pc, #404	; (adr r3, 80099a8 <_dtoa_r+0x2b8>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f7f6 fef6 	bl	8000608 <__aeabi_dmul>
 800981c:	a364      	add	r3, pc, #400	; (adr r3, 80099b0 <_dtoa_r+0x2c0>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	f7f6 fd3b 	bl	800029c <__adddf3>
 8009826:	4606      	mov	r6, r0
 8009828:	4628      	mov	r0, r5
 800982a:	460f      	mov	r7, r1
 800982c:	f7f6 fe82 	bl	8000534 <__aeabi_i2d>
 8009830:	a361      	add	r3, pc, #388	; (adr r3, 80099b8 <_dtoa_r+0x2c8>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 fee7 	bl	8000608 <__aeabi_dmul>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7f6 fd2b 	bl	800029c <__adddf3>
 8009846:	4606      	mov	r6, r0
 8009848:	460f      	mov	r7, r1
 800984a:	f7f7 f98d 	bl	8000b68 <__aeabi_d2iz>
 800984e:	2200      	movs	r2, #0
 8009850:	9000      	str	r0, [sp, #0]
 8009852:	2300      	movs	r3, #0
 8009854:	4630      	mov	r0, r6
 8009856:	4639      	mov	r1, r7
 8009858:	f7f7 f948 	bl	8000aec <__aeabi_dcmplt>
 800985c:	b150      	cbz	r0, 8009874 <_dtoa_r+0x184>
 800985e:	9800      	ldr	r0, [sp, #0]
 8009860:	f7f6 fe68 	bl	8000534 <__aeabi_i2d>
 8009864:	4632      	mov	r2, r6
 8009866:	463b      	mov	r3, r7
 8009868:	f7f7 f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800986c:	b910      	cbnz	r0, 8009874 <_dtoa_r+0x184>
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	3b01      	subs	r3, #1
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	9b00      	ldr	r3, [sp, #0]
 8009876:	2b16      	cmp	r3, #22
 8009878:	d85a      	bhi.n	8009930 <_dtoa_r+0x240>
 800987a:	9a00      	ldr	r2, [sp, #0]
 800987c:	4b57      	ldr	r3, [pc, #348]	; (80099dc <_dtoa_r+0x2ec>)
 800987e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	ec51 0b19 	vmov	r0, r1, d9
 800988a:	f7f7 f92f 	bl	8000aec <__aeabi_dcmplt>
 800988e:	2800      	cmp	r0, #0
 8009890:	d050      	beq.n	8009934 <_dtoa_r+0x244>
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	3b01      	subs	r3, #1
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	2300      	movs	r3, #0
 800989a:	930b      	str	r3, [sp, #44]	; 0x2c
 800989c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800989e:	1b5d      	subs	r5, r3, r5
 80098a0:	1e6b      	subs	r3, r5, #1
 80098a2:	9305      	str	r3, [sp, #20]
 80098a4:	bf45      	ittet	mi
 80098a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80098aa:	9304      	strmi	r3, [sp, #16]
 80098ac:	2300      	movpl	r3, #0
 80098ae:	2300      	movmi	r3, #0
 80098b0:	bf4c      	ite	mi
 80098b2:	9305      	strmi	r3, [sp, #20]
 80098b4:	9304      	strpl	r3, [sp, #16]
 80098b6:	9b00      	ldr	r3, [sp, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	db3d      	blt.n	8009938 <_dtoa_r+0x248>
 80098bc:	9b05      	ldr	r3, [sp, #20]
 80098be:	9a00      	ldr	r2, [sp, #0]
 80098c0:	920a      	str	r2, [sp, #40]	; 0x28
 80098c2:	4413      	add	r3, r2
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	2300      	movs	r3, #0
 80098c8:	9307      	str	r3, [sp, #28]
 80098ca:	9b06      	ldr	r3, [sp, #24]
 80098cc:	2b09      	cmp	r3, #9
 80098ce:	f200 8089 	bhi.w	80099e4 <_dtoa_r+0x2f4>
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	bfc4      	itt	gt
 80098d6:	3b04      	subgt	r3, #4
 80098d8:	9306      	strgt	r3, [sp, #24]
 80098da:	9b06      	ldr	r3, [sp, #24]
 80098dc:	f1a3 0302 	sub.w	r3, r3, #2
 80098e0:	bfcc      	ite	gt
 80098e2:	2500      	movgt	r5, #0
 80098e4:	2501      	movle	r5, #1
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	f200 8087 	bhi.w	80099fa <_dtoa_r+0x30a>
 80098ec:	e8df f003 	tbb	[pc, r3]
 80098f0:	59383a2d 	.word	0x59383a2d
 80098f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80098f8:	441d      	add	r5, r3
 80098fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80098fe:	2b20      	cmp	r3, #32
 8009900:	bfc1      	itttt	gt
 8009902:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009906:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800990a:	fa0b f303 	lslgt.w	r3, fp, r3
 800990e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009912:	bfda      	itte	le
 8009914:	f1c3 0320 	rsble	r3, r3, #32
 8009918:	fa06 f003 	lslle.w	r0, r6, r3
 800991c:	4318      	orrgt	r0, r3
 800991e:	f7f6 fdf9 	bl	8000514 <__aeabi_ui2d>
 8009922:	2301      	movs	r3, #1
 8009924:	4606      	mov	r6, r0
 8009926:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800992a:	3d01      	subs	r5, #1
 800992c:	930e      	str	r3, [sp, #56]	; 0x38
 800992e:	e76a      	b.n	8009806 <_dtoa_r+0x116>
 8009930:	2301      	movs	r3, #1
 8009932:	e7b2      	b.n	800989a <_dtoa_r+0x1aa>
 8009934:	900b      	str	r0, [sp, #44]	; 0x2c
 8009936:	e7b1      	b.n	800989c <_dtoa_r+0x1ac>
 8009938:	9b04      	ldr	r3, [sp, #16]
 800993a:	9a00      	ldr	r2, [sp, #0]
 800993c:	1a9b      	subs	r3, r3, r2
 800993e:	9304      	str	r3, [sp, #16]
 8009940:	4253      	negs	r3, r2
 8009942:	9307      	str	r3, [sp, #28]
 8009944:	2300      	movs	r3, #0
 8009946:	930a      	str	r3, [sp, #40]	; 0x28
 8009948:	e7bf      	b.n	80098ca <_dtoa_r+0x1da>
 800994a:	2300      	movs	r3, #0
 800994c:	9308      	str	r3, [sp, #32]
 800994e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	dc55      	bgt.n	8009a00 <_dtoa_r+0x310>
 8009954:	2301      	movs	r3, #1
 8009956:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800995a:	461a      	mov	r2, r3
 800995c:	9209      	str	r2, [sp, #36]	; 0x24
 800995e:	e00c      	b.n	800997a <_dtoa_r+0x28a>
 8009960:	2301      	movs	r3, #1
 8009962:	e7f3      	b.n	800994c <_dtoa_r+0x25c>
 8009964:	2300      	movs	r3, #0
 8009966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009968:	9308      	str	r3, [sp, #32]
 800996a:	9b00      	ldr	r3, [sp, #0]
 800996c:	4413      	add	r3, r2
 800996e:	9302      	str	r3, [sp, #8]
 8009970:	3301      	adds	r3, #1
 8009972:	2b01      	cmp	r3, #1
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	bfb8      	it	lt
 8009978:	2301      	movlt	r3, #1
 800997a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800997c:	2200      	movs	r2, #0
 800997e:	6042      	str	r2, [r0, #4]
 8009980:	2204      	movs	r2, #4
 8009982:	f102 0614 	add.w	r6, r2, #20
 8009986:	429e      	cmp	r6, r3
 8009988:	6841      	ldr	r1, [r0, #4]
 800998a:	d93d      	bls.n	8009a08 <_dtoa_r+0x318>
 800998c:	4620      	mov	r0, r4
 800998e:	f000 fca9 	bl	800a2e4 <_Balloc>
 8009992:	9001      	str	r0, [sp, #4]
 8009994:	2800      	cmp	r0, #0
 8009996:	d13b      	bne.n	8009a10 <_dtoa_r+0x320>
 8009998:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <_dtoa_r+0x2f0>)
 800999a:	4602      	mov	r2, r0
 800999c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099a0:	e6c0      	b.n	8009724 <_dtoa_r+0x34>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e7df      	b.n	8009966 <_dtoa_r+0x276>
 80099a6:	bf00      	nop
 80099a8:	636f4361 	.word	0x636f4361
 80099ac:	3fd287a7 	.word	0x3fd287a7
 80099b0:	8b60c8b3 	.word	0x8b60c8b3
 80099b4:	3fc68a28 	.word	0x3fc68a28
 80099b8:	509f79fb 	.word	0x509f79fb
 80099bc:	3fd34413 	.word	0x3fd34413
 80099c0:	0800c09a 	.word	0x0800c09a
 80099c4:	0800c0b1 	.word	0x0800c0b1
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	0800c096 	.word	0x0800c096
 80099d0:	0800c08d 	.word	0x0800c08d
 80099d4:	0800bf69 	.word	0x0800bf69
 80099d8:	3ff80000 	.word	0x3ff80000
 80099dc:	0800c1a8 	.word	0x0800c1a8
 80099e0:	0800c10c 	.word	0x0800c10c
 80099e4:	2501      	movs	r5, #1
 80099e6:	2300      	movs	r3, #0
 80099e8:	9306      	str	r3, [sp, #24]
 80099ea:	9508      	str	r5, [sp, #32]
 80099ec:	f04f 33ff 	mov.w	r3, #4294967295
 80099f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80099f4:	2200      	movs	r2, #0
 80099f6:	2312      	movs	r3, #18
 80099f8:	e7b0      	b.n	800995c <_dtoa_r+0x26c>
 80099fa:	2301      	movs	r3, #1
 80099fc:	9308      	str	r3, [sp, #32]
 80099fe:	e7f5      	b.n	80099ec <_dtoa_r+0x2fc>
 8009a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a06:	e7b8      	b.n	800997a <_dtoa_r+0x28a>
 8009a08:	3101      	adds	r1, #1
 8009a0a:	6041      	str	r1, [r0, #4]
 8009a0c:	0052      	lsls	r2, r2, #1
 8009a0e:	e7b8      	b.n	8009982 <_dtoa_r+0x292>
 8009a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a12:	9a01      	ldr	r2, [sp, #4]
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	2b0e      	cmp	r3, #14
 8009a1a:	f200 809d 	bhi.w	8009b58 <_dtoa_r+0x468>
 8009a1e:	2d00      	cmp	r5, #0
 8009a20:	f000 809a 	beq.w	8009b58 <_dtoa_r+0x468>
 8009a24:	9b00      	ldr	r3, [sp, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	dd32      	ble.n	8009a90 <_dtoa_r+0x3a0>
 8009a2a:	4ab7      	ldr	r2, [pc, #732]	; (8009d08 <_dtoa_r+0x618>)
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a38:	9b00      	ldr	r3, [sp, #0]
 8009a3a:	05d8      	lsls	r0, r3, #23
 8009a3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009a40:	d516      	bpl.n	8009a70 <_dtoa_r+0x380>
 8009a42:	4bb2      	ldr	r3, [pc, #712]	; (8009d0c <_dtoa_r+0x61c>)
 8009a44:	ec51 0b19 	vmov	r0, r1, d9
 8009a48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a4c:	f7f6 ff06 	bl	800085c <__aeabi_ddiv>
 8009a50:	f007 070f 	and.w	r7, r7, #15
 8009a54:	4682      	mov	sl, r0
 8009a56:	468b      	mov	fp, r1
 8009a58:	2503      	movs	r5, #3
 8009a5a:	4eac      	ldr	r6, [pc, #688]	; (8009d0c <_dtoa_r+0x61c>)
 8009a5c:	b957      	cbnz	r7, 8009a74 <_dtoa_r+0x384>
 8009a5e:	4642      	mov	r2, r8
 8009a60:	464b      	mov	r3, r9
 8009a62:	4650      	mov	r0, sl
 8009a64:	4659      	mov	r1, fp
 8009a66:	f7f6 fef9 	bl	800085c <__aeabi_ddiv>
 8009a6a:	4682      	mov	sl, r0
 8009a6c:	468b      	mov	fp, r1
 8009a6e:	e028      	b.n	8009ac2 <_dtoa_r+0x3d2>
 8009a70:	2502      	movs	r5, #2
 8009a72:	e7f2      	b.n	8009a5a <_dtoa_r+0x36a>
 8009a74:	07f9      	lsls	r1, r7, #31
 8009a76:	d508      	bpl.n	8009a8a <_dtoa_r+0x39a>
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a80:	f7f6 fdc2 	bl	8000608 <__aeabi_dmul>
 8009a84:	3501      	adds	r5, #1
 8009a86:	4680      	mov	r8, r0
 8009a88:	4689      	mov	r9, r1
 8009a8a:	107f      	asrs	r7, r7, #1
 8009a8c:	3608      	adds	r6, #8
 8009a8e:	e7e5      	b.n	8009a5c <_dtoa_r+0x36c>
 8009a90:	f000 809b 	beq.w	8009bca <_dtoa_r+0x4da>
 8009a94:	9b00      	ldr	r3, [sp, #0]
 8009a96:	4f9d      	ldr	r7, [pc, #628]	; (8009d0c <_dtoa_r+0x61c>)
 8009a98:	425e      	negs	r6, r3
 8009a9a:	4b9b      	ldr	r3, [pc, #620]	; (8009d08 <_dtoa_r+0x618>)
 8009a9c:	f006 020f 	and.w	r2, r6, #15
 8009aa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	ec51 0b19 	vmov	r0, r1, d9
 8009aac:	f7f6 fdac 	bl	8000608 <__aeabi_dmul>
 8009ab0:	1136      	asrs	r6, r6, #4
 8009ab2:	4682      	mov	sl, r0
 8009ab4:	468b      	mov	fp, r1
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2502      	movs	r5, #2
 8009aba:	2e00      	cmp	r6, #0
 8009abc:	d17a      	bne.n	8009bb4 <_dtoa_r+0x4c4>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1d3      	bne.n	8009a6a <_dtoa_r+0x37a>
 8009ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 8082 	beq.w	8009bce <_dtoa_r+0x4de>
 8009aca:	4b91      	ldr	r3, [pc, #580]	; (8009d10 <_dtoa_r+0x620>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	4650      	mov	r0, sl
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	f7f7 f80b 	bl	8000aec <__aeabi_dcmplt>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d079      	beq.n	8009bce <_dtoa_r+0x4de>
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d076      	beq.n	8009bce <_dtoa_r+0x4de>
 8009ae0:	9b02      	ldr	r3, [sp, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dd36      	ble.n	8009b54 <_dtoa_r+0x464>
 8009ae6:	9b00      	ldr	r3, [sp, #0]
 8009ae8:	4650      	mov	r0, sl
 8009aea:	4659      	mov	r1, fp
 8009aec:	1e5f      	subs	r7, r3, #1
 8009aee:	2200      	movs	r2, #0
 8009af0:	4b88      	ldr	r3, [pc, #544]	; (8009d14 <_dtoa_r+0x624>)
 8009af2:	f7f6 fd89 	bl	8000608 <__aeabi_dmul>
 8009af6:	9e02      	ldr	r6, [sp, #8]
 8009af8:	4682      	mov	sl, r0
 8009afa:	468b      	mov	fp, r1
 8009afc:	3501      	adds	r5, #1
 8009afe:	4628      	mov	r0, r5
 8009b00:	f7f6 fd18 	bl	8000534 <__aeabi_i2d>
 8009b04:	4652      	mov	r2, sl
 8009b06:	465b      	mov	r3, fp
 8009b08:	f7f6 fd7e 	bl	8000608 <__aeabi_dmul>
 8009b0c:	4b82      	ldr	r3, [pc, #520]	; (8009d18 <_dtoa_r+0x628>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f7f6 fbc4 	bl	800029c <__adddf3>
 8009b14:	46d0      	mov	r8, sl
 8009b16:	46d9      	mov	r9, fp
 8009b18:	4682      	mov	sl, r0
 8009b1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d158      	bne.n	8009bd4 <_dtoa_r+0x4e4>
 8009b22:	4b7e      	ldr	r3, [pc, #504]	; (8009d1c <_dtoa_r+0x62c>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	4640      	mov	r0, r8
 8009b28:	4649      	mov	r1, r9
 8009b2a:	f7f6 fbb5 	bl	8000298 <__aeabi_dsub>
 8009b2e:	4652      	mov	r2, sl
 8009b30:	465b      	mov	r3, fp
 8009b32:	4680      	mov	r8, r0
 8009b34:	4689      	mov	r9, r1
 8009b36:	f7f6 fff7 	bl	8000b28 <__aeabi_dcmpgt>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	f040 8295 	bne.w	800a06a <_dtoa_r+0x97a>
 8009b40:	4652      	mov	r2, sl
 8009b42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b46:	4640      	mov	r0, r8
 8009b48:	4649      	mov	r1, r9
 8009b4a:	f7f6 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	f040 8289 	bne.w	800a066 <_dtoa_r+0x976>
 8009b54:	ec5b ab19 	vmov	sl, fp, d9
 8009b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f2c0 8148 	blt.w	8009df0 <_dtoa_r+0x700>
 8009b60:	9a00      	ldr	r2, [sp, #0]
 8009b62:	2a0e      	cmp	r2, #14
 8009b64:	f300 8144 	bgt.w	8009df0 <_dtoa_r+0x700>
 8009b68:	4b67      	ldr	r3, [pc, #412]	; (8009d08 <_dtoa_r+0x618>)
 8009b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f280 80d5 	bge.w	8009d24 <_dtoa_r+0x634>
 8009b7a:	9b03      	ldr	r3, [sp, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f300 80d1 	bgt.w	8009d24 <_dtoa_r+0x634>
 8009b82:	f040 826f 	bne.w	800a064 <_dtoa_r+0x974>
 8009b86:	4b65      	ldr	r3, [pc, #404]	; (8009d1c <_dtoa_r+0x62c>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 fd3b 	bl	8000608 <__aeabi_dmul>
 8009b92:	4652      	mov	r2, sl
 8009b94:	465b      	mov	r3, fp
 8009b96:	f7f6 ffbd 	bl	8000b14 <__aeabi_dcmpge>
 8009b9a:	9e03      	ldr	r6, [sp, #12]
 8009b9c:	4637      	mov	r7, r6
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f040 8245 	bne.w	800a02e <_dtoa_r+0x93e>
 8009ba4:	9d01      	ldr	r5, [sp, #4]
 8009ba6:	2331      	movs	r3, #49	; 0x31
 8009ba8:	f805 3b01 	strb.w	r3, [r5], #1
 8009bac:	9b00      	ldr	r3, [sp, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	e240      	b.n	800a036 <_dtoa_r+0x946>
 8009bb4:	07f2      	lsls	r2, r6, #31
 8009bb6:	d505      	bpl.n	8009bc4 <_dtoa_r+0x4d4>
 8009bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bbc:	f7f6 fd24 	bl	8000608 <__aeabi_dmul>
 8009bc0:	3501      	adds	r5, #1
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	1076      	asrs	r6, r6, #1
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	e777      	b.n	8009aba <_dtoa_r+0x3ca>
 8009bca:	2502      	movs	r5, #2
 8009bcc:	e779      	b.n	8009ac2 <_dtoa_r+0x3d2>
 8009bce:	9f00      	ldr	r7, [sp, #0]
 8009bd0:	9e03      	ldr	r6, [sp, #12]
 8009bd2:	e794      	b.n	8009afe <_dtoa_r+0x40e>
 8009bd4:	9901      	ldr	r1, [sp, #4]
 8009bd6:	4b4c      	ldr	r3, [pc, #304]	; (8009d08 <_dtoa_r+0x618>)
 8009bd8:	4431      	add	r1, r6
 8009bda:	910d      	str	r1, [sp, #52]	; 0x34
 8009bdc:	9908      	ldr	r1, [sp, #32]
 8009bde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009be2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009be6:	2900      	cmp	r1, #0
 8009be8:	d043      	beq.n	8009c72 <_dtoa_r+0x582>
 8009bea:	494d      	ldr	r1, [pc, #308]	; (8009d20 <_dtoa_r+0x630>)
 8009bec:	2000      	movs	r0, #0
 8009bee:	f7f6 fe35 	bl	800085c <__aeabi_ddiv>
 8009bf2:	4652      	mov	r2, sl
 8009bf4:	465b      	mov	r3, fp
 8009bf6:	f7f6 fb4f 	bl	8000298 <__aeabi_dsub>
 8009bfa:	9d01      	ldr	r5, [sp, #4]
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	468b      	mov	fp, r1
 8009c00:	4649      	mov	r1, r9
 8009c02:	4640      	mov	r0, r8
 8009c04:	f7f6 ffb0 	bl	8000b68 <__aeabi_d2iz>
 8009c08:	4606      	mov	r6, r0
 8009c0a:	f7f6 fc93 	bl	8000534 <__aeabi_i2d>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4640      	mov	r0, r8
 8009c14:	4649      	mov	r1, r9
 8009c16:	f7f6 fb3f 	bl	8000298 <__aeabi_dsub>
 8009c1a:	3630      	adds	r6, #48	; 0x30
 8009c1c:	f805 6b01 	strb.w	r6, [r5], #1
 8009c20:	4652      	mov	r2, sl
 8009c22:	465b      	mov	r3, fp
 8009c24:	4680      	mov	r8, r0
 8009c26:	4689      	mov	r9, r1
 8009c28:	f7f6 ff60 	bl	8000aec <__aeabi_dcmplt>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d163      	bne.n	8009cf8 <_dtoa_r+0x608>
 8009c30:	4642      	mov	r2, r8
 8009c32:	464b      	mov	r3, r9
 8009c34:	4936      	ldr	r1, [pc, #216]	; (8009d10 <_dtoa_r+0x620>)
 8009c36:	2000      	movs	r0, #0
 8009c38:	f7f6 fb2e 	bl	8000298 <__aeabi_dsub>
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	465b      	mov	r3, fp
 8009c40:	f7f6 ff54 	bl	8000aec <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f040 80b5 	bne.w	8009db4 <_dtoa_r+0x6c4>
 8009c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c4c:	429d      	cmp	r5, r3
 8009c4e:	d081      	beq.n	8009b54 <_dtoa_r+0x464>
 8009c50:	4b30      	ldr	r3, [pc, #192]	; (8009d14 <_dtoa_r+0x624>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	4650      	mov	r0, sl
 8009c56:	4659      	mov	r1, fp
 8009c58:	f7f6 fcd6 	bl	8000608 <__aeabi_dmul>
 8009c5c:	4b2d      	ldr	r3, [pc, #180]	; (8009d14 <_dtoa_r+0x624>)
 8009c5e:	4682      	mov	sl, r0
 8009c60:	468b      	mov	fp, r1
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	2200      	movs	r2, #0
 8009c68:	f7f6 fcce 	bl	8000608 <__aeabi_dmul>
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	4689      	mov	r9, r1
 8009c70:	e7c6      	b.n	8009c00 <_dtoa_r+0x510>
 8009c72:	4650      	mov	r0, sl
 8009c74:	4659      	mov	r1, fp
 8009c76:	f7f6 fcc7 	bl	8000608 <__aeabi_dmul>
 8009c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c7c:	9d01      	ldr	r5, [sp, #4]
 8009c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c80:	4682      	mov	sl, r0
 8009c82:	468b      	mov	fp, r1
 8009c84:	4649      	mov	r1, r9
 8009c86:	4640      	mov	r0, r8
 8009c88:	f7f6 ff6e 	bl	8000b68 <__aeabi_d2iz>
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	f7f6 fc51 	bl	8000534 <__aeabi_i2d>
 8009c92:	3630      	adds	r6, #48	; 0x30
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4640      	mov	r0, r8
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7f6 fafc 	bl	8000298 <__aeabi_dsub>
 8009ca0:	f805 6b01 	strb.w	r6, [r5], #1
 8009ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	4680      	mov	r8, r0
 8009caa:	4689      	mov	r9, r1
 8009cac:	f04f 0200 	mov.w	r2, #0
 8009cb0:	d124      	bne.n	8009cfc <_dtoa_r+0x60c>
 8009cb2:	4b1b      	ldr	r3, [pc, #108]	; (8009d20 <_dtoa_r+0x630>)
 8009cb4:	4650      	mov	r0, sl
 8009cb6:	4659      	mov	r1, fp
 8009cb8:	f7f6 faf0 	bl	800029c <__adddf3>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 ff30 	bl	8000b28 <__aeabi_dcmpgt>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d173      	bne.n	8009db4 <_dtoa_r+0x6c4>
 8009ccc:	4652      	mov	r2, sl
 8009cce:	465b      	mov	r3, fp
 8009cd0:	4913      	ldr	r1, [pc, #76]	; (8009d20 <_dtoa_r+0x630>)
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	f7f6 fae0 	bl	8000298 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4640      	mov	r0, r8
 8009cde:	4649      	mov	r1, r9
 8009ce0:	f7f6 ff04 	bl	8000aec <__aeabi_dcmplt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f43f af35 	beq.w	8009b54 <_dtoa_r+0x464>
 8009cea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009cec:	1e6b      	subs	r3, r5, #1
 8009cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cf4:	2b30      	cmp	r3, #48	; 0x30
 8009cf6:	d0f8      	beq.n	8009cea <_dtoa_r+0x5fa>
 8009cf8:	9700      	str	r7, [sp, #0]
 8009cfa:	e049      	b.n	8009d90 <_dtoa_r+0x6a0>
 8009cfc:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <_dtoa_r+0x624>)
 8009cfe:	f7f6 fc83 	bl	8000608 <__aeabi_dmul>
 8009d02:	4680      	mov	r8, r0
 8009d04:	4689      	mov	r9, r1
 8009d06:	e7bd      	b.n	8009c84 <_dtoa_r+0x594>
 8009d08:	0800c1a8 	.word	0x0800c1a8
 8009d0c:	0800c180 	.word	0x0800c180
 8009d10:	3ff00000 	.word	0x3ff00000
 8009d14:	40240000 	.word	0x40240000
 8009d18:	401c0000 	.word	0x401c0000
 8009d1c:	40140000 	.word	0x40140000
 8009d20:	3fe00000 	.word	0x3fe00000
 8009d24:	9d01      	ldr	r5, [sp, #4]
 8009d26:	4656      	mov	r6, sl
 8009d28:	465f      	mov	r7, fp
 8009d2a:	4642      	mov	r2, r8
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	4630      	mov	r0, r6
 8009d30:	4639      	mov	r1, r7
 8009d32:	f7f6 fd93 	bl	800085c <__aeabi_ddiv>
 8009d36:	f7f6 ff17 	bl	8000b68 <__aeabi_d2iz>
 8009d3a:	4682      	mov	sl, r0
 8009d3c:	f7f6 fbfa 	bl	8000534 <__aeabi_i2d>
 8009d40:	4642      	mov	r2, r8
 8009d42:	464b      	mov	r3, r9
 8009d44:	f7f6 fc60 	bl	8000608 <__aeabi_dmul>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009d54:	f7f6 faa0 	bl	8000298 <__aeabi_dsub>
 8009d58:	f805 6b01 	strb.w	r6, [r5], #1
 8009d5c:	9e01      	ldr	r6, [sp, #4]
 8009d5e:	9f03      	ldr	r7, [sp, #12]
 8009d60:	1bae      	subs	r6, r5, r6
 8009d62:	42b7      	cmp	r7, r6
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	d135      	bne.n	8009dd6 <_dtoa_r+0x6e6>
 8009d6a:	f7f6 fa97 	bl	800029c <__adddf3>
 8009d6e:	4642      	mov	r2, r8
 8009d70:	464b      	mov	r3, r9
 8009d72:	4606      	mov	r6, r0
 8009d74:	460f      	mov	r7, r1
 8009d76:	f7f6 fed7 	bl	8000b28 <__aeabi_dcmpgt>
 8009d7a:	b9d0      	cbnz	r0, 8009db2 <_dtoa_r+0x6c2>
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	464b      	mov	r3, r9
 8009d80:	4630      	mov	r0, r6
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7f6 fea8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d88:	b110      	cbz	r0, 8009d90 <_dtoa_r+0x6a0>
 8009d8a:	f01a 0f01 	tst.w	sl, #1
 8009d8e:	d110      	bne.n	8009db2 <_dtoa_r+0x6c2>
 8009d90:	4620      	mov	r0, r4
 8009d92:	ee18 1a10 	vmov	r1, s16
 8009d96:	f000 fae5 	bl	800a364 <_Bfree>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	9800      	ldr	r0, [sp, #0]
 8009d9e:	702b      	strb	r3, [r5, #0]
 8009da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009da2:	3001      	adds	r0, #1
 8009da4:	6018      	str	r0, [r3, #0]
 8009da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f43f acf1 	beq.w	8009790 <_dtoa_r+0xa0>
 8009dae:	601d      	str	r5, [r3, #0]
 8009db0:	e4ee      	b.n	8009790 <_dtoa_r+0xa0>
 8009db2:	9f00      	ldr	r7, [sp, #0]
 8009db4:	462b      	mov	r3, r5
 8009db6:	461d      	mov	r5, r3
 8009db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dbc:	2a39      	cmp	r2, #57	; 0x39
 8009dbe:	d106      	bne.n	8009dce <_dtoa_r+0x6de>
 8009dc0:	9a01      	ldr	r2, [sp, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d1f7      	bne.n	8009db6 <_dtoa_r+0x6c6>
 8009dc6:	9901      	ldr	r1, [sp, #4]
 8009dc8:	2230      	movs	r2, #48	; 0x30
 8009dca:	3701      	adds	r7, #1
 8009dcc:	700a      	strb	r2, [r1, #0]
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	3201      	adds	r2, #1
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	e790      	b.n	8009cf8 <_dtoa_r+0x608>
 8009dd6:	4ba6      	ldr	r3, [pc, #664]	; (800a070 <_dtoa_r+0x980>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f7f6 fc15 	bl	8000608 <__aeabi_dmul>
 8009dde:	2200      	movs	r2, #0
 8009de0:	2300      	movs	r3, #0
 8009de2:	4606      	mov	r6, r0
 8009de4:	460f      	mov	r7, r1
 8009de6:	f7f6 fe77 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d09d      	beq.n	8009d2a <_dtoa_r+0x63a>
 8009dee:	e7cf      	b.n	8009d90 <_dtoa_r+0x6a0>
 8009df0:	9a08      	ldr	r2, [sp, #32]
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	f000 80d7 	beq.w	8009fa6 <_dtoa_r+0x8b6>
 8009df8:	9a06      	ldr	r2, [sp, #24]
 8009dfa:	2a01      	cmp	r2, #1
 8009dfc:	f300 80ba 	bgt.w	8009f74 <_dtoa_r+0x884>
 8009e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	f000 80b2 	beq.w	8009f6c <_dtoa_r+0x87c>
 8009e08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e0c:	9e07      	ldr	r6, [sp, #28]
 8009e0e:	9d04      	ldr	r5, [sp, #16]
 8009e10:	9a04      	ldr	r2, [sp, #16]
 8009e12:	441a      	add	r2, r3
 8009e14:	9204      	str	r2, [sp, #16]
 8009e16:	9a05      	ldr	r2, [sp, #20]
 8009e18:	2101      	movs	r1, #1
 8009e1a:	441a      	add	r2, r3
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	9205      	str	r2, [sp, #20]
 8009e20:	f000 fb58 	bl	800a4d4 <__i2b>
 8009e24:	4607      	mov	r7, r0
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	dd0c      	ble.n	8009e44 <_dtoa_r+0x754>
 8009e2a:	9b05      	ldr	r3, [sp, #20]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dd09      	ble.n	8009e44 <_dtoa_r+0x754>
 8009e30:	42ab      	cmp	r3, r5
 8009e32:	9a04      	ldr	r2, [sp, #16]
 8009e34:	bfa8      	it	ge
 8009e36:	462b      	movge	r3, r5
 8009e38:	1ad2      	subs	r2, r2, r3
 8009e3a:	9204      	str	r2, [sp, #16]
 8009e3c:	9a05      	ldr	r2, [sp, #20]
 8009e3e:	1aed      	subs	r5, r5, r3
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	b31b      	cbz	r3, 8009e90 <_dtoa_r+0x7a0>
 8009e48:	9b08      	ldr	r3, [sp, #32]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 80af 	beq.w	8009fae <_dtoa_r+0x8be>
 8009e50:	2e00      	cmp	r6, #0
 8009e52:	dd13      	ble.n	8009e7c <_dtoa_r+0x78c>
 8009e54:	4639      	mov	r1, r7
 8009e56:	4632      	mov	r2, r6
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fbfb 	bl	800a654 <__pow5mult>
 8009e5e:	ee18 2a10 	vmov	r2, s16
 8009e62:	4601      	mov	r1, r0
 8009e64:	4607      	mov	r7, r0
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 fb4a 	bl	800a500 <__multiply>
 8009e6c:	ee18 1a10 	vmov	r1, s16
 8009e70:	4680      	mov	r8, r0
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fa76 	bl	800a364 <_Bfree>
 8009e78:	ee08 8a10 	vmov	s16, r8
 8009e7c:	9b07      	ldr	r3, [sp, #28]
 8009e7e:	1b9a      	subs	r2, r3, r6
 8009e80:	d006      	beq.n	8009e90 <_dtoa_r+0x7a0>
 8009e82:	ee18 1a10 	vmov	r1, s16
 8009e86:	4620      	mov	r0, r4
 8009e88:	f000 fbe4 	bl	800a654 <__pow5mult>
 8009e8c:	ee08 0a10 	vmov	s16, r0
 8009e90:	2101      	movs	r1, #1
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 fb1e 	bl	800a4d4 <__i2b>
 8009e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	f340 8088 	ble.w	8009fb2 <_dtoa_r+0x8c2>
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	4601      	mov	r1, r0
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fbd4 	bl	800a654 <__pow5mult>
 8009eac:	9b06      	ldr	r3, [sp, #24]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	f340 8081 	ble.w	8009fb8 <_dtoa_r+0x8c8>
 8009eb6:	f04f 0800 	mov.w	r8, #0
 8009eba:	6933      	ldr	r3, [r6, #16]
 8009ebc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ec0:	6918      	ldr	r0, [r3, #16]
 8009ec2:	f000 fab7 	bl	800a434 <__hi0bits>
 8009ec6:	f1c0 0020 	rsb	r0, r0, #32
 8009eca:	9b05      	ldr	r3, [sp, #20]
 8009ecc:	4418      	add	r0, r3
 8009ece:	f010 001f 	ands.w	r0, r0, #31
 8009ed2:	f000 8092 	beq.w	8009ffa <_dtoa_r+0x90a>
 8009ed6:	f1c0 0320 	rsb	r3, r0, #32
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	f340 808a 	ble.w	8009ff4 <_dtoa_r+0x904>
 8009ee0:	f1c0 001c 	rsb	r0, r0, #28
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	4403      	add	r3, r0
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	9b05      	ldr	r3, [sp, #20]
 8009eec:	4403      	add	r3, r0
 8009eee:	4405      	add	r5, r0
 8009ef0:	9305      	str	r3, [sp, #20]
 8009ef2:	9b04      	ldr	r3, [sp, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	dd07      	ble.n	8009f08 <_dtoa_r+0x818>
 8009ef8:	ee18 1a10 	vmov	r1, s16
 8009efc:	461a      	mov	r2, r3
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fc02 	bl	800a708 <__lshift>
 8009f04:	ee08 0a10 	vmov	s16, r0
 8009f08:	9b05      	ldr	r3, [sp, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dd05      	ble.n	8009f1a <_dtoa_r+0x82a>
 8009f0e:	4631      	mov	r1, r6
 8009f10:	461a      	mov	r2, r3
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fbf8 	bl	800a708 <__lshift>
 8009f18:	4606      	mov	r6, r0
 8009f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d06e      	beq.n	8009ffe <_dtoa_r+0x90e>
 8009f20:	ee18 0a10 	vmov	r0, s16
 8009f24:	4631      	mov	r1, r6
 8009f26:	f000 fc5f 	bl	800a7e8 <__mcmp>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	da67      	bge.n	8009ffe <_dtoa_r+0x90e>
 8009f2e:	9b00      	ldr	r3, [sp, #0]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	ee18 1a10 	vmov	r1, s16
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	220a      	movs	r2, #10
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fa33 	bl	800a3a8 <__multadd>
 8009f42:	9b08      	ldr	r3, [sp, #32]
 8009f44:	ee08 0a10 	vmov	s16, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 81b1 	beq.w	800a2b0 <_dtoa_r+0xbc0>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4639      	mov	r1, r7
 8009f52:	220a      	movs	r2, #10
 8009f54:	4620      	mov	r0, r4
 8009f56:	f000 fa27 	bl	800a3a8 <__multadd>
 8009f5a:	9b02      	ldr	r3, [sp, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	4607      	mov	r7, r0
 8009f60:	f300 808e 	bgt.w	800a080 <_dtoa_r+0x990>
 8009f64:	9b06      	ldr	r3, [sp, #24]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dc51      	bgt.n	800a00e <_dtoa_r+0x91e>
 8009f6a:	e089      	b.n	800a080 <_dtoa_r+0x990>
 8009f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f72:	e74b      	b.n	8009e0c <_dtoa_r+0x71c>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	1e5e      	subs	r6, r3, #1
 8009f78:	9b07      	ldr	r3, [sp, #28]
 8009f7a:	42b3      	cmp	r3, r6
 8009f7c:	bfbf      	itttt	lt
 8009f7e:	9b07      	ldrlt	r3, [sp, #28]
 8009f80:	9607      	strlt	r6, [sp, #28]
 8009f82:	1af2      	sublt	r2, r6, r3
 8009f84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f86:	bfb6      	itet	lt
 8009f88:	189b      	addlt	r3, r3, r2
 8009f8a:	1b9e      	subge	r6, r3, r6
 8009f8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	bfb8      	it	lt
 8009f92:	2600      	movlt	r6, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bfb7      	itett	lt
 8009f98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009fa0:	1a9d      	sublt	r5, r3, r2
 8009fa2:	2300      	movlt	r3, #0
 8009fa4:	e734      	b.n	8009e10 <_dtoa_r+0x720>
 8009fa6:	9e07      	ldr	r6, [sp, #28]
 8009fa8:	9d04      	ldr	r5, [sp, #16]
 8009faa:	9f08      	ldr	r7, [sp, #32]
 8009fac:	e73b      	b.n	8009e26 <_dtoa_r+0x736>
 8009fae:	9a07      	ldr	r2, [sp, #28]
 8009fb0:	e767      	b.n	8009e82 <_dtoa_r+0x792>
 8009fb2:	9b06      	ldr	r3, [sp, #24]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	dc18      	bgt.n	8009fea <_dtoa_r+0x8fa>
 8009fb8:	f1ba 0f00 	cmp.w	sl, #0
 8009fbc:	d115      	bne.n	8009fea <_dtoa_r+0x8fa>
 8009fbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fc2:	b993      	cbnz	r3, 8009fea <_dtoa_r+0x8fa>
 8009fc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fc8:	0d1b      	lsrs	r3, r3, #20
 8009fca:	051b      	lsls	r3, r3, #20
 8009fcc:	b183      	cbz	r3, 8009ff0 <_dtoa_r+0x900>
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	9b05      	ldr	r3, [sp, #20]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	9305      	str	r3, [sp, #20]
 8009fda:	f04f 0801 	mov.w	r8, #1
 8009fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f47f af6a 	bne.w	8009eba <_dtoa_r+0x7ca>
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e76f      	b.n	8009eca <_dtoa_r+0x7da>
 8009fea:	f04f 0800 	mov.w	r8, #0
 8009fee:	e7f6      	b.n	8009fde <_dtoa_r+0x8ee>
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	e7f4      	b.n	8009fde <_dtoa_r+0x8ee>
 8009ff4:	f43f af7d 	beq.w	8009ef2 <_dtoa_r+0x802>
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	301c      	adds	r0, #28
 8009ffc:	e772      	b.n	8009ee4 <_dtoa_r+0x7f4>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	dc37      	bgt.n	800a074 <_dtoa_r+0x984>
 800a004:	9b06      	ldr	r3, [sp, #24]
 800a006:	2b02      	cmp	r3, #2
 800a008:	dd34      	ble.n	800a074 <_dtoa_r+0x984>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	9302      	str	r3, [sp, #8]
 800a00e:	9b02      	ldr	r3, [sp, #8]
 800a010:	b96b      	cbnz	r3, 800a02e <_dtoa_r+0x93e>
 800a012:	4631      	mov	r1, r6
 800a014:	2205      	movs	r2, #5
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f9c6 	bl	800a3a8 <__multadd>
 800a01c:	4601      	mov	r1, r0
 800a01e:	4606      	mov	r6, r0
 800a020:	ee18 0a10 	vmov	r0, s16
 800a024:	f000 fbe0 	bl	800a7e8 <__mcmp>
 800a028:	2800      	cmp	r0, #0
 800a02a:	f73f adbb 	bgt.w	8009ba4 <_dtoa_r+0x4b4>
 800a02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a030:	9d01      	ldr	r5, [sp, #4]
 800a032:	43db      	mvns	r3, r3
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	f04f 0800 	mov.w	r8, #0
 800a03a:	4631      	mov	r1, r6
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 f991 	bl	800a364 <_Bfree>
 800a042:	2f00      	cmp	r7, #0
 800a044:	f43f aea4 	beq.w	8009d90 <_dtoa_r+0x6a0>
 800a048:	f1b8 0f00 	cmp.w	r8, #0
 800a04c:	d005      	beq.n	800a05a <_dtoa_r+0x96a>
 800a04e:	45b8      	cmp	r8, r7
 800a050:	d003      	beq.n	800a05a <_dtoa_r+0x96a>
 800a052:	4641      	mov	r1, r8
 800a054:	4620      	mov	r0, r4
 800a056:	f000 f985 	bl	800a364 <_Bfree>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 f981 	bl	800a364 <_Bfree>
 800a062:	e695      	b.n	8009d90 <_dtoa_r+0x6a0>
 800a064:	2600      	movs	r6, #0
 800a066:	4637      	mov	r7, r6
 800a068:	e7e1      	b.n	800a02e <_dtoa_r+0x93e>
 800a06a:	9700      	str	r7, [sp, #0]
 800a06c:	4637      	mov	r7, r6
 800a06e:	e599      	b.n	8009ba4 <_dtoa_r+0x4b4>
 800a070:	40240000 	.word	0x40240000
 800a074:	9b08      	ldr	r3, [sp, #32]
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 80ca 	beq.w	800a210 <_dtoa_r+0xb20>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	9302      	str	r3, [sp, #8]
 800a080:	2d00      	cmp	r5, #0
 800a082:	dd05      	ble.n	800a090 <_dtoa_r+0x9a0>
 800a084:	4639      	mov	r1, r7
 800a086:	462a      	mov	r2, r5
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 fb3d 	bl	800a708 <__lshift>
 800a08e:	4607      	mov	r7, r0
 800a090:	f1b8 0f00 	cmp.w	r8, #0
 800a094:	d05b      	beq.n	800a14e <_dtoa_r+0xa5e>
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 f923 	bl	800a2e4 <_Balloc>
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b928      	cbnz	r0, 800a0ae <_dtoa_r+0x9be>
 800a0a2:	4b87      	ldr	r3, [pc, #540]	; (800a2c0 <_dtoa_r+0xbd0>)
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0aa:	f7ff bb3b 	b.w	8009724 <_dtoa_r+0x34>
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	3202      	adds	r2, #2
 800a0b2:	0092      	lsls	r2, r2, #2
 800a0b4:	f107 010c 	add.w	r1, r7, #12
 800a0b8:	300c      	adds	r0, #12
 800a0ba:	f7fe fd4b 	bl	8008b54 <memcpy>
 800a0be:	2201      	movs	r2, #1
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 fb20 	bl	800a708 <__lshift>
 800a0c8:	9b01      	ldr	r3, [sp, #4]
 800a0ca:	f103 0901 	add.w	r9, r3, #1
 800a0ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	f00a 0301 	and.w	r3, sl, #1
 800a0da:	46b8      	mov	r8, r7
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	4607      	mov	r7, r0
 800a0e0:	4631      	mov	r1, r6
 800a0e2:	ee18 0a10 	vmov	r0, s16
 800a0e6:	f7ff fa77 	bl	80095d8 <quorem>
 800a0ea:	4641      	mov	r1, r8
 800a0ec:	9002      	str	r0, [sp, #8]
 800a0ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0f2:	ee18 0a10 	vmov	r0, s16
 800a0f6:	f000 fb77 	bl	800a7e8 <__mcmp>
 800a0fa:	463a      	mov	r2, r7
 800a0fc:	9003      	str	r0, [sp, #12]
 800a0fe:	4631      	mov	r1, r6
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fb8d 	bl	800a820 <__mdiff>
 800a106:	68c2      	ldr	r2, [r0, #12]
 800a108:	f109 3bff 	add.w	fp, r9, #4294967295
 800a10c:	4605      	mov	r5, r0
 800a10e:	bb02      	cbnz	r2, 800a152 <_dtoa_r+0xa62>
 800a110:	4601      	mov	r1, r0
 800a112:	ee18 0a10 	vmov	r0, s16
 800a116:	f000 fb67 	bl	800a7e8 <__mcmp>
 800a11a:	4602      	mov	r2, r0
 800a11c:	4629      	mov	r1, r5
 800a11e:	4620      	mov	r0, r4
 800a120:	9207      	str	r2, [sp, #28]
 800a122:	f000 f91f 	bl	800a364 <_Bfree>
 800a126:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a12a:	ea43 0102 	orr.w	r1, r3, r2
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	430b      	orrs	r3, r1
 800a132:	464d      	mov	r5, r9
 800a134:	d10f      	bne.n	800a156 <_dtoa_r+0xa66>
 800a136:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a13a:	d02a      	beq.n	800a192 <_dtoa_r+0xaa2>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dd02      	ble.n	800a148 <_dtoa_r+0xa58>
 800a142:	9b02      	ldr	r3, [sp, #8]
 800a144:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a148:	f88b a000 	strb.w	sl, [fp]
 800a14c:	e775      	b.n	800a03a <_dtoa_r+0x94a>
 800a14e:	4638      	mov	r0, r7
 800a150:	e7ba      	b.n	800a0c8 <_dtoa_r+0x9d8>
 800a152:	2201      	movs	r2, #1
 800a154:	e7e2      	b.n	800a11c <_dtoa_r+0xa2c>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	db04      	blt.n	800a166 <_dtoa_r+0xa76>
 800a15c:	9906      	ldr	r1, [sp, #24]
 800a15e:	430b      	orrs	r3, r1
 800a160:	9904      	ldr	r1, [sp, #16]
 800a162:	430b      	orrs	r3, r1
 800a164:	d122      	bne.n	800a1ac <_dtoa_r+0xabc>
 800a166:	2a00      	cmp	r2, #0
 800a168:	ddee      	ble.n	800a148 <_dtoa_r+0xa58>
 800a16a:	ee18 1a10 	vmov	r1, s16
 800a16e:	2201      	movs	r2, #1
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fac9 	bl	800a708 <__lshift>
 800a176:	4631      	mov	r1, r6
 800a178:	ee08 0a10 	vmov	s16, r0
 800a17c:	f000 fb34 	bl	800a7e8 <__mcmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	dc03      	bgt.n	800a18c <_dtoa_r+0xa9c>
 800a184:	d1e0      	bne.n	800a148 <_dtoa_r+0xa58>
 800a186:	f01a 0f01 	tst.w	sl, #1
 800a18a:	d0dd      	beq.n	800a148 <_dtoa_r+0xa58>
 800a18c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a190:	d1d7      	bne.n	800a142 <_dtoa_r+0xa52>
 800a192:	2339      	movs	r3, #57	; 0x39
 800a194:	f88b 3000 	strb.w	r3, [fp]
 800a198:	462b      	mov	r3, r5
 800a19a:	461d      	mov	r5, r3
 800a19c:	3b01      	subs	r3, #1
 800a19e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1a2:	2a39      	cmp	r2, #57	; 0x39
 800a1a4:	d071      	beq.n	800a28a <_dtoa_r+0xb9a>
 800a1a6:	3201      	adds	r2, #1
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	e746      	b.n	800a03a <_dtoa_r+0x94a>
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	dd07      	ble.n	800a1c0 <_dtoa_r+0xad0>
 800a1b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1b4:	d0ed      	beq.n	800a192 <_dtoa_r+0xaa2>
 800a1b6:	f10a 0301 	add.w	r3, sl, #1
 800a1ba:	f88b 3000 	strb.w	r3, [fp]
 800a1be:	e73c      	b.n	800a03a <_dtoa_r+0x94a>
 800a1c0:	9b05      	ldr	r3, [sp, #20]
 800a1c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a1c6:	4599      	cmp	r9, r3
 800a1c8:	d047      	beq.n	800a25a <_dtoa_r+0xb6a>
 800a1ca:	ee18 1a10 	vmov	r1, s16
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 f8e8 	bl	800a3a8 <__multadd>
 800a1d8:	45b8      	cmp	r8, r7
 800a1da:	ee08 0a10 	vmov	s16, r0
 800a1de:	f04f 0300 	mov.w	r3, #0
 800a1e2:	f04f 020a 	mov.w	r2, #10
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	d106      	bne.n	800a1fa <_dtoa_r+0xb0a>
 800a1ec:	f000 f8dc 	bl	800a3a8 <__multadd>
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	f109 0901 	add.w	r9, r9, #1
 800a1f8:	e772      	b.n	800a0e0 <_dtoa_r+0x9f0>
 800a1fa:	f000 f8d5 	bl	800a3a8 <__multadd>
 800a1fe:	4639      	mov	r1, r7
 800a200:	4680      	mov	r8, r0
 800a202:	2300      	movs	r3, #0
 800a204:	220a      	movs	r2, #10
 800a206:	4620      	mov	r0, r4
 800a208:	f000 f8ce 	bl	800a3a8 <__multadd>
 800a20c:	4607      	mov	r7, r0
 800a20e:	e7f1      	b.n	800a1f4 <_dtoa_r+0xb04>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	9302      	str	r3, [sp, #8]
 800a214:	9d01      	ldr	r5, [sp, #4]
 800a216:	ee18 0a10 	vmov	r0, s16
 800a21a:	4631      	mov	r1, r6
 800a21c:	f7ff f9dc 	bl	80095d8 <quorem>
 800a220:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a224:	9b01      	ldr	r3, [sp, #4]
 800a226:	f805 ab01 	strb.w	sl, [r5], #1
 800a22a:	1aea      	subs	r2, r5, r3
 800a22c:	9b02      	ldr	r3, [sp, #8]
 800a22e:	4293      	cmp	r3, r2
 800a230:	dd09      	ble.n	800a246 <_dtoa_r+0xb56>
 800a232:	ee18 1a10 	vmov	r1, s16
 800a236:	2300      	movs	r3, #0
 800a238:	220a      	movs	r2, #10
 800a23a:	4620      	mov	r0, r4
 800a23c:	f000 f8b4 	bl	800a3a8 <__multadd>
 800a240:	ee08 0a10 	vmov	s16, r0
 800a244:	e7e7      	b.n	800a216 <_dtoa_r+0xb26>
 800a246:	9b02      	ldr	r3, [sp, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bfc8      	it	gt
 800a24c:	461d      	movgt	r5, r3
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	bfd8      	it	le
 800a252:	2501      	movle	r5, #1
 800a254:	441d      	add	r5, r3
 800a256:	f04f 0800 	mov.w	r8, #0
 800a25a:	ee18 1a10 	vmov	r1, s16
 800a25e:	2201      	movs	r2, #1
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fa51 	bl	800a708 <__lshift>
 800a266:	4631      	mov	r1, r6
 800a268:	ee08 0a10 	vmov	s16, r0
 800a26c:	f000 fabc 	bl	800a7e8 <__mcmp>
 800a270:	2800      	cmp	r0, #0
 800a272:	dc91      	bgt.n	800a198 <_dtoa_r+0xaa8>
 800a274:	d102      	bne.n	800a27c <_dtoa_r+0xb8c>
 800a276:	f01a 0f01 	tst.w	sl, #1
 800a27a:	d18d      	bne.n	800a198 <_dtoa_r+0xaa8>
 800a27c:	462b      	mov	r3, r5
 800a27e:	461d      	mov	r5, r3
 800a280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a284:	2a30      	cmp	r2, #48	; 0x30
 800a286:	d0fa      	beq.n	800a27e <_dtoa_r+0xb8e>
 800a288:	e6d7      	b.n	800a03a <_dtoa_r+0x94a>
 800a28a:	9a01      	ldr	r2, [sp, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d184      	bne.n	800a19a <_dtoa_r+0xaaa>
 800a290:	9b00      	ldr	r3, [sp, #0]
 800a292:	3301      	adds	r3, #1
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	2331      	movs	r3, #49	; 0x31
 800a298:	7013      	strb	r3, [r2, #0]
 800a29a:	e6ce      	b.n	800a03a <_dtoa_r+0x94a>
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <_dtoa_r+0xbd4>)
 800a29e:	f7ff ba95 	b.w	80097cc <_dtoa_r+0xdc>
 800a2a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f47f aa6e 	bne.w	8009786 <_dtoa_r+0x96>
 800a2aa:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <_dtoa_r+0xbd8>)
 800a2ac:	f7ff ba8e 	b.w	80097cc <_dtoa_r+0xdc>
 800a2b0:	9b02      	ldr	r3, [sp, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dcae      	bgt.n	800a214 <_dtoa_r+0xb24>
 800a2b6:	9b06      	ldr	r3, [sp, #24]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	f73f aea8 	bgt.w	800a00e <_dtoa_r+0x91e>
 800a2be:	e7a9      	b.n	800a214 <_dtoa_r+0xb24>
 800a2c0:	0800c10c 	.word	0x0800c10c
 800a2c4:	0800bf68 	.word	0x0800bf68
 800a2c8:	0800c08d 	.word	0x0800c08d

0800a2cc <_localeconv_r>:
 800a2cc:	4800      	ldr	r0, [pc, #0]	; (800a2d0 <_localeconv_r+0x4>)
 800a2ce:	4770      	bx	lr
 800a2d0:	20000168 	.word	0x20000168

0800a2d4 <malloc>:
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <malloc+0xc>)
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	f000 bc09 	b.w	800aaf0 <_malloc_r>
 800a2de:	bf00      	nop
 800a2e0:	20000014 	.word	0x20000014

0800a2e4 <_Balloc>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	b976      	cbnz	r6, 800a30c <_Balloc+0x28>
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	f7ff fff0 	bl	800a2d4 <malloc>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a2f8:	b920      	cbnz	r0, 800a304 <_Balloc+0x20>
 800a2fa:	4b18      	ldr	r3, [pc, #96]	; (800a35c <_Balloc+0x78>)
 800a2fc:	4818      	ldr	r0, [pc, #96]	; (800a360 <_Balloc+0x7c>)
 800a2fe:	2166      	movs	r1, #102	; 0x66
 800a300:	f000 fdd6 	bl	800aeb0 <__assert_func>
 800a304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a308:	6006      	str	r6, [r0, #0]
 800a30a:	60c6      	str	r6, [r0, #12]
 800a30c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a30e:	68f3      	ldr	r3, [r6, #12]
 800a310:	b183      	cbz	r3, 800a334 <_Balloc+0x50>
 800a312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a31a:	b9b8      	cbnz	r0, 800a34c <_Balloc+0x68>
 800a31c:	2101      	movs	r1, #1
 800a31e:	fa01 f605 	lsl.w	r6, r1, r5
 800a322:	1d72      	adds	r2, r6, #5
 800a324:	0092      	lsls	r2, r2, #2
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fb60 	bl	800a9ec <_calloc_r>
 800a32c:	b160      	cbz	r0, 800a348 <_Balloc+0x64>
 800a32e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a332:	e00e      	b.n	800a352 <_Balloc+0x6e>
 800a334:	2221      	movs	r2, #33	; 0x21
 800a336:	2104      	movs	r1, #4
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fb57 	bl	800a9ec <_calloc_r>
 800a33e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a340:	60f0      	str	r0, [r6, #12]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e4      	bne.n	800a312 <_Balloc+0x2e>
 800a348:	2000      	movs	r0, #0
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	6802      	ldr	r2, [r0, #0]
 800a34e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a352:	2300      	movs	r3, #0
 800a354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a358:	e7f7      	b.n	800a34a <_Balloc+0x66>
 800a35a:	bf00      	nop
 800a35c:	0800c09a 	.word	0x0800c09a
 800a360:	0800c11d 	.word	0x0800c11d

0800a364 <_Bfree>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a368:	4605      	mov	r5, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	b976      	cbnz	r6, 800a38c <_Bfree+0x28>
 800a36e:	2010      	movs	r0, #16
 800a370:	f7ff ffb0 	bl	800a2d4 <malloc>
 800a374:	4602      	mov	r2, r0
 800a376:	6268      	str	r0, [r5, #36]	; 0x24
 800a378:	b920      	cbnz	r0, 800a384 <_Bfree+0x20>
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <_Bfree+0x3c>)
 800a37c:	4809      	ldr	r0, [pc, #36]	; (800a3a4 <_Bfree+0x40>)
 800a37e:	218a      	movs	r1, #138	; 0x8a
 800a380:	f000 fd96 	bl	800aeb0 <__assert_func>
 800a384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a388:	6006      	str	r6, [r0, #0]
 800a38a:	60c6      	str	r6, [r0, #12]
 800a38c:	b13c      	cbz	r4, 800a39e <_Bfree+0x3a>
 800a38e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a390:	6862      	ldr	r2, [r4, #4]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a398:	6021      	str	r1, [r4, #0]
 800a39a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	0800c09a 	.word	0x0800c09a
 800a3a4:	0800c11d 	.word	0x0800c11d

0800a3a8 <__multadd>:
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	690d      	ldr	r5, [r1, #16]
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	461e      	mov	r6, r3
 800a3b4:	f101 0c14 	add.w	ip, r1, #20
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a3be:	b299      	uxth	r1, r3
 800a3c0:	fb02 6101 	mla	r1, r2, r1, r6
 800a3c4:	0c1e      	lsrs	r6, r3, #16
 800a3c6:	0c0b      	lsrs	r3, r1, #16
 800a3c8:	fb02 3306 	mla	r3, r2, r6, r3
 800a3cc:	b289      	uxth	r1, r1
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3d4:	4285      	cmp	r5, r0
 800a3d6:	f84c 1b04 	str.w	r1, [ip], #4
 800a3da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3de:	dcec      	bgt.n	800a3ba <__multadd+0x12>
 800a3e0:	b30e      	cbz	r6, 800a426 <__multadd+0x7e>
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	42ab      	cmp	r3, r5
 800a3e6:	dc19      	bgt.n	800a41c <__multadd+0x74>
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	3101      	adds	r1, #1
 800a3ee:	f7ff ff79 	bl	800a2e4 <_Balloc>
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	b928      	cbnz	r0, 800a402 <__multadd+0x5a>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <__multadd+0x84>)
 800a3fa:	480d      	ldr	r0, [pc, #52]	; (800a430 <__multadd+0x88>)
 800a3fc:	21b5      	movs	r1, #181	; 0xb5
 800a3fe:	f000 fd57 	bl	800aeb0 <__assert_func>
 800a402:	6922      	ldr	r2, [r4, #16]
 800a404:	3202      	adds	r2, #2
 800a406:	f104 010c 	add.w	r1, r4, #12
 800a40a:	0092      	lsls	r2, r2, #2
 800a40c:	300c      	adds	r0, #12
 800a40e:	f7fe fba1 	bl	8008b54 <memcpy>
 800a412:	4621      	mov	r1, r4
 800a414:	4638      	mov	r0, r7
 800a416:	f7ff ffa5 	bl	800a364 <_Bfree>
 800a41a:	4644      	mov	r4, r8
 800a41c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a420:	3501      	adds	r5, #1
 800a422:	615e      	str	r6, [r3, #20]
 800a424:	6125      	str	r5, [r4, #16]
 800a426:	4620      	mov	r0, r4
 800a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a42c:	0800c10c 	.word	0x0800c10c
 800a430:	0800c11d 	.word	0x0800c11d

0800a434 <__hi0bits>:
 800a434:	0c03      	lsrs	r3, r0, #16
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	b9d3      	cbnz	r3, 800a470 <__hi0bits+0x3c>
 800a43a:	0400      	lsls	r0, r0, #16
 800a43c:	2310      	movs	r3, #16
 800a43e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a442:	bf04      	itt	eq
 800a444:	0200      	lsleq	r0, r0, #8
 800a446:	3308      	addeq	r3, #8
 800a448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a44c:	bf04      	itt	eq
 800a44e:	0100      	lsleq	r0, r0, #4
 800a450:	3304      	addeq	r3, #4
 800a452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a456:	bf04      	itt	eq
 800a458:	0080      	lsleq	r0, r0, #2
 800a45a:	3302      	addeq	r3, #2
 800a45c:	2800      	cmp	r0, #0
 800a45e:	db05      	blt.n	800a46c <__hi0bits+0x38>
 800a460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a464:	f103 0301 	add.w	r3, r3, #1
 800a468:	bf08      	it	eq
 800a46a:	2320      	moveq	r3, #32
 800a46c:	4618      	mov	r0, r3
 800a46e:	4770      	bx	lr
 800a470:	2300      	movs	r3, #0
 800a472:	e7e4      	b.n	800a43e <__hi0bits+0xa>

0800a474 <__lo0bits>:
 800a474:	6803      	ldr	r3, [r0, #0]
 800a476:	f013 0207 	ands.w	r2, r3, #7
 800a47a:	4601      	mov	r1, r0
 800a47c:	d00b      	beq.n	800a496 <__lo0bits+0x22>
 800a47e:	07da      	lsls	r2, r3, #31
 800a480:	d423      	bmi.n	800a4ca <__lo0bits+0x56>
 800a482:	0798      	lsls	r0, r3, #30
 800a484:	bf49      	itett	mi
 800a486:	085b      	lsrmi	r3, r3, #1
 800a488:	089b      	lsrpl	r3, r3, #2
 800a48a:	2001      	movmi	r0, #1
 800a48c:	600b      	strmi	r3, [r1, #0]
 800a48e:	bf5c      	itt	pl
 800a490:	600b      	strpl	r3, [r1, #0]
 800a492:	2002      	movpl	r0, #2
 800a494:	4770      	bx	lr
 800a496:	b298      	uxth	r0, r3
 800a498:	b9a8      	cbnz	r0, 800a4c6 <__lo0bits+0x52>
 800a49a:	0c1b      	lsrs	r3, r3, #16
 800a49c:	2010      	movs	r0, #16
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	b90a      	cbnz	r2, 800a4a6 <__lo0bits+0x32>
 800a4a2:	3008      	adds	r0, #8
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	071a      	lsls	r2, r3, #28
 800a4a8:	bf04      	itt	eq
 800a4aa:	091b      	lsreq	r3, r3, #4
 800a4ac:	3004      	addeq	r0, #4
 800a4ae:	079a      	lsls	r2, r3, #30
 800a4b0:	bf04      	itt	eq
 800a4b2:	089b      	lsreq	r3, r3, #2
 800a4b4:	3002      	addeq	r0, #2
 800a4b6:	07da      	lsls	r2, r3, #31
 800a4b8:	d403      	bmi.n	800a4c2 <__lo0bits+0x4e>
 800a4ba:	085b      	lsrs	r3, r3, #1
 800a4bc:	f100 0001 	add.w	r0, r0, #1
 800a4c0:	d005      	beq.n	800a4ce <__lo0bits+0x5a>
 800a4c2:	600b      	str	r3, [r1, #0]
 800a4c4:	4770      	bx	lr
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	e7e9      	b.n	800a49e <__lo0bits+0x2a>
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	4770      	bx	lr
 800a4ce:	2020      	movs	r0, #32
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <__i2b>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	2101      	movs	r1, #1
 800a4da:	f7ff ff03 	bl	800a2e4 <_Balloc>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	b928      	cbnz	r0, 800a4ee <__i2b+0x1a>
 800a4e2:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <__i2b+0x24>)
 800a4e4:	4805      	ldr	r0, [pc, #20]	; (800a4fc <__i2b+0x28>)
 800a4e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4ea:	f000 fce1 	bl	800aeb0 <__assert_func>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	6144      	str	r4, [r0, #20]
 800a4f2:	6103      	str	r3, [r0, #16]
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800c10c 	.word	0x0800c10c
 800a4fc:	0800c11d 	.word	0x0800c11d

0800a500 <__multiply>:
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	4691      	mov	r9, r2
 800a506:	690a      	ldr	r2, [r1, #16]
 800a508:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	bfb8      	it	lt
 800a510:	460b      	movlt	r3, r1
 800a512:	460c      	mov	r4, r1
 800a514:	bfbc      	itt	lt
 800a516:	464c      	movlt	r4, r9
 800a518:	4699      	movlt	r9, r3
 800a51a:	6927      	ldr	r7, [r4, #16]
 800a51c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a520:	68a3      	ldr	r3, [r4, #8]
 800a522:	6861      	ldr	r1, [r4, #4]
 800a524:	eb07 060a 	add.w	r6, r7, sl
 800a528:	42b3      	cmp	r3, r6
 800a52a:	b085      	sub	sp, #20
 800a52c:	bfb8      	it	lt
 800a52e:	3101      	addlt	r1, #1
 800a530:	f7ff fed8 	bl	800a2e4 <_Balloc>
 800a534:	b930      	cbnz	r0, 800a544 <__multiply+0x44>
 800a536:	4602      	mov	r2, r0
 800a538:	4b44      	ldr	r3, [pc, #272]	; (800a64c <__multiply+0x14c>)
 800a53a:	4845      	ldr	r0, [pc, #276]	; (800a650 <__multiply+0x150>)
 800a53c:	f240 115d 	movw	r1, #349	; 0x15d
 800a540:	f000 fcb6 	bl	800aeb0 <__assert_func>
 800a544:	f100 0514 	add.w	r5, r0, #20
 800a548:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a54c:	462b      	mov	r3, r5
 800a54e:	2200      	movs	r2, #0
 800a550:	4543      	cmp	r3, r8
 800a552:	d321      	bcc.n	800a598 <__multiply+0x98>
 800a554:	f104 0314 	add.w	r3, r4, #20
 800a558:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a55c:	f109 0314 	add.w	r3, r9, #20
 800a560:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a564:	9202      	str	r2, [sp, #8]
 800a566:	1b3a      	subs	r2, r7, r4
 800a568:	3a15      	subs	r2, #21
 800a56a:	f022 0203 	bic.w	r2, r2, #3
 800a56e:	3204      	adds	r2, #4
 800a570:	f104 0115 	add.w	r1, r4, #21
 800a574:	428f      	cmp	r7, r1
 800a576:	bf38      	it	cc
 800a578:	2204      	movcc	r2, #4
 800a57a:	9201      	str	r2, [sp, #4]
 800a57c:	9a02      	ldr	r2, [sp, #8]
 800a57e:	9303      	str	r3, [sp, #12]
 800a580:	429a      	cmp	r2, r3
 800a582:	d80c      	bhi.n	800a59e <__multiply+0x9e>
 800a584:	2e00      	cmp	r6, #0
 800a586:	dd03      	ble.n	800a590 <__multiply+0x90>
 800a588:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d05a      	beq.n	800a646 <__multiply+0x146>
 800a590:	6106      	str	r6, [r0, #16]
 800a592:	b005      	add	sp, #20
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	f843 2b04 	str.w	r2, [r3], #4
 800a59c:	e7d8      	b.n	800a550 <__multiply+0x50>
 800a59e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5a2:	f1ba 0f00 	cmp.w	sl, #0
 800a5a6:	d024      	beq.n	800a5f2 <__multiply+0xf2>
 800a5a8:	f104 0e14 	add.w	lr, r4, #20
 800a5ac:	46a9      	mov	r9, r5
 800a5ae:	f04f 0c00 	mov.w	ip, #0
 800a5b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5b6:	f8d9 1000 	ldr.w	r1, [r9]
 800a5ba:	fa1f fb82 	uxth.w	fp, r2
 800a5be:	b289      	uxth	r1, r1
 800a5c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5c8:	f8d9 2000 	ldr.w	r2, [r9]
 800a5cc:	4461      	add	r1, ip
 800a5ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5da:	b289      	uxth	r1, r1
 800a5dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5e0:	4577      	cmp	r7, lr
 800a5e2:	f849 1b04 	str.w	r1, [r9], #4
 800a5e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ea:	d8e2      	bhi.n	800a5b2 <__multiply+0xb2>
 800a5ec:	9a01      	ldr	r2, [sp, #4]
 800a5ee:	f845 c002 	str.w	ip, [r5, r2]
 800a5f2:	9a03      	ldr	r2, [sp, #12]
 800a5f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	f1b9 0f00 	cmp.w	r9, #0
 800a5fe:	d020      	beq.n	800a642 <__multiply+0x142>
 800a600:	6829      	ldr	r1, [r5, #0]
 800a602:	f104 0c14 	add.w	ip, r4, #20
 800a606:	46ae      	mov	lr, r5
 800a608:	f04f 0a00 	mov.w	sl, #0
 800a60c:	f8bc b000 	ldrh.w	fp, [ip]
 800a610:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a614:	fb09 220b 	mla	r2, r9, fp, r2
 800a618:	4492      	add	sl, r2
 800a61a:	b289      	uxth	r1, r1
 800a61c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a620:	f84e 1b04 	str.w	r1, [lr], #4
 800a624:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a628:	f8be 1000 	ldrh.w	r1, [lr]
 800a62c:	0c12      	lsrs	r2, r2, #16
 800a62e:	fb09 1102 	mla	r1, r9, r2, r1
 800a632:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a636:	4567      	cmp	r7, ip
 800a638:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a63c:	d8e6      	bhi.n	800a60c <__multiply+0x10c>
 800a63e:	9a01      	ldr	r2, [sp, #4]
 800a640:	50a9      	str	r1, [r5, r2]
 800a642:	3504      	adds	r5, #4
 800a644:	e79a      	b.n	800a57c <__multiply+0x7c>
 800a646:	3e01      	subs	r6, #1
 800a648:	e79c      	b.n	800a584 <__multiply+0x84>
 800a64a:	bf00      	nop
 800a64c:	0800c10c 	.word	0x0800c10c
 800a650:	0800c11d 	.word	0x0800c11d

0800a654 <__pow5mult>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	4615      	mov	r5, r2
 800a65a:	f012 0203 	ands.w	r2, r2, #3
 800a65e:	4606      	mov	r6, r0
 800a660:	460f      	mov	r7, r1
 800a662:	d007      	beq.n	800a674 <__pow5mult+0x20>
 800a664:	4c25      	ldr	r4, [pc, #148]	; (800a6fc <__pow5mult+0xa8>)
 800a666:	3a01      	subs	r2, #1
 800a668:	2300      	movs	r3, #0
 800a66a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a66e:	f7ff fe9b 	bl	800a3a8 <__multadd>
 800a672:	4607      	mov	r7, r0
 800a674:	10ad      	asrs	r5, r5, #2
 800a676:	d03d      	beq.n	800a6f4 <__pow5mult+0xa0>
 800a678:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a67a:	b97c      	cbnz	r4, 800a69c <__pow5mult+0x48>
 800a67c:	2010      	movs	r0, #16
 800a67e:	f7ff fe29 	bl	800a2d4 <malloc>
 800a682:	4602      	mov	r2, r0
 800a684:	6270      	str	r0, [r6, #36]	; 0x24
 800a686:	b928      	cbnz	r0, 800a694 <__pow5mult+0x40>
 800a688:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <__pow5mult+0xac>)
 800a68a:	481e      	ldr	r0, [pc, #120]	; (800a704 <__pow5mult+0xb0>)
 800a68c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a690:	f000 fc0e 	bl	800aeb0 <__assert_func>
 800a694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a698:	6004      	str	r4, [r0, #0]
 800a69a:	60c4      	str	r4, [r0, #12]
 800a69c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6a4:	b94c      	cbnz	r4, 800a6ba <__pow5mult+0x66>
 800a6a6:	f240 2171 	movw	r1, #625	; 0x271
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ff12 	bl	800a4d4 <__i2b>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	6003      	str	r3, [r0, #0]
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	07eb      	lsls	r3, r5, #31
 800a6c0:	d50a      	bpl.n	800a6d8 <__pow5mult+0x84>
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7ff ff1a 	bl	800a500 <__multiply>
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff fe47 	bl	800a364 <_Bfree>
 800a6d6:	4647      	mov	r7, r8
 800a6d8:	106d      	asrs	r5, r5, #1
 800a6da:	d00b      	beq.n	800a6f4 <__pow5mult+0xa0>
 800a6dc:	6820      	ldr	r0, [r4, #0]
 800a6de:	b938      	cbnz	r0, 800a6f0 <__pow5mult+0x9c>
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7ff ff0b 	bl	800a500 <__multiply>
 800a6ea:	6020      	str	r0, [r4, #0]
 800a6ec:	f8c0 9000 	str.w	r9, [r0]
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	e7e4      	b.n	800a6be <__pow5mult+0x6a>
 800a6f4:	4638      	mov	r0, r7
 800a6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0800c270 	.word	0x0800c270
 800a700:	0800c09a 	.word	0x0800c09a
 800a704:	0800c11d 	.word	0x0800c11d

0800a708 <__lshift>:
 800a708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a70c:	460c      	mov	r4, r1
 800a70e:	6849      	ldr	r1, [r1, #4]
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a716:	68a3      	ldr	r3, [r4, #8]
 800a718:	4607      	mov	r7, r0
 800a71a:	4691      	mov	r9, r2
 800a71c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a720:	f108 0601 	add.w	r6, r8, #1
 800a724:	42b3      	cmp	r3, r6
 800a726:	db0b      	blt.n	800a740 <__lshift+0x38>
 800a728:	4638      	mov	r0, r7
 800a72a:	f7ff fddb 	bl	800a2e4 <_Balloc>
 800a72e:	4605      	mov	r5, r0
 800a730:	b948      	cbnz	r0, 800a746 <__lshift+0x3e>
 800a732:	4602      	mov	r2, r0
 800a734:	4b2a      	ldr	r3, [pc, #168]	; (800a7e0 <__lshift+0xd8>)
 800a736:	482b      	ldr	r0, [pc, #172]	; (800a7e4 <__lshift+0xdc>)
 800a738:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a73c:	f000 fbb8 	bl	800aeb0 <__assert_func>
 800a740:	3101      	adds	r1, #1
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	e7ee      	b.n	800a724 <__lshift+0x1c>
 800a746:	2300      	movs	r3, #0
 800a748:	f100 0114 	add.w	r1, r0, #20
 800a74c:	f100 0210 	add.w	r2, r0, #16
 800a750:	4618      	mov	r0, r3
 800a752:	4553      	cmp	r3, sl
 800a754:	db37      	blt.n	800a7c6 <__lshift+0xbe>
 800a756:	6920      	ldr	r0, [r4, #16]
 800a758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a75c:	f104 0314 	add.w	r3, r4, #20
 800a760:	f019 091f 	ands.w	r9, r9, #31
 800a764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a768:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a76c:	d02f      	beq.n	800a7ce <__lshift+0xc6>
 800a76e:	f1c9 0e20 	rsb	lr, r9, #32
 800a772:	468a      	mov	sl, r1
 800a774:	f04f 0c00 	mov.w	ip, #0
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	fa02 f209 	lsl.w	r2, r2, r9
 800a77e:	ea42 020c 	orr.w	r2, r2, ip
 800a782:	f84a 2b04 	str.w	r2, [sl], #4
 800a786:	f853 2b04 	ldr.w	r2, [r3], #4
 800a78a:	4298      	cmp	r0, r3
 800a78c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a790:	d8f2      	bhi.n	800a778 <__lshift+0x70>
 800a792:	1b03      	subs	r3, r0, r4
 800a794:	3b15      	subs	r3, #21
 800a796:	f023 0303 	bic.w	r3, r3, #3
 800a79a:	3304      	adds	r3, #4
 800a79c:	f104 0215 	add.w	r2, r4, #21
 800a7a0:	4290      	cmp	r0, r2
 800a7a2:	bf38      	it	cc
 800a7a4:	2304      	movcc	r3, #4
 800a7a6:	f841 c003 	str.w	ip, [r1, r3]
 800a7aa:	f1bc 0f00 	cmp.w	ip, #0
 800a7ae:	d001      	beq.n	800a7b4 <__lshift+0xac>
 800a7b0:	f108 0602 	add.w	r6, r8, #2
 800a7b4:	3e01      	subs	r6, #1
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	612e      	str	r6, [r5, #16]
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	f7ff fdd2 	bl	800a364 <_Bfree>
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	e7c1      	b.n	800a752 <__lshift+0x4a>
 800a7ce:	3904      	subs	r1, #4
 800a7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7d8:	4298      	cmp	r0, r3
 800a7da:	d8f9      	bhi.n	800a7d0 <__lshift+0xc8>
 800a7dc:	e7ea      	b.n	800a7b4 <__lshift+0xac>
 800a7de:	bf00      	nop
 800a7e0:	0800c10c 	.word	0x0800c10c
 800a7e4:	0800c11d 	.word	0x0800c11d

0800a7e8 <__mcmp>:
 800a7e8:	b530      	push	{r4, r5, lr}
 800a7ea:	6902      	ldr	r2, [r0, #16]
 800a7ec:	690c      	ldr	r4, [r1, #16]
 800a7ee:	1b12      	subs	r2, r2, r4
 800a7f0:	d10e      	bne.n	800a810 <__mcmp+0x28>
 800a7f2:	f100 0314 	add.w	r3, r0, #20
 800a7f6:	3114      	adds	r1, #20
 800a7f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a800:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a804:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a808:	42a5      	cmp	r5, r4
 800a80a:	d003      	beq.n	800a814 <__mcmp+0x2c>
 800a80c:	d305      	bcc.n	800a81a <__mcmp+0x32>
 800a80e:	2201      	movs	r2, #1
 800a810:	4610      	mov	r0, r2
 800a812:	bd30      	pop	{r4, r5, pc}
 800a814:	4283      	cmp	r3, r0
 800a816:	d3f3      	bcc.n	800a800 <__mcmp+0x18>
 800a818:	e7fa      	b.n	800a810 <__mcmp+0x28>
 800a81a:	f04f 32ff 	mov.w	r2, #4294967295
 800a81e:	e7f7      	b.n	800a810 <__mcmp+0x28>

0800a820 <__mdiff>:
 800a820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	460c      	mov	r4, r1
 800a826:	4606      	mov	r6, r0
 800a828:	4611      	mov	r1, r2
 800a82a:	4620      	mov	r0, r4
 800a82c:	4690      	mov	r8, r2
 800a82e:	f7ff ffdb 	bl	800a7e8 <__mcmp>
 800a832:	1e05      	subs	r5, r0, #0
 800a834:	d110      	bne.n	800a858 <__mdiff+0x38>
 800a836:	4629      	mov	r1, r5
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff fd53 	bl	800a2e4 <_Balloc>
 800a83e:	b930      	cbnz	r0, 800a84e <__mdiff+0x2e>
 800a840:	4b3a      	ldr	r3, [pc, #232]	; (800a92c <__mdiff+0x10c>)
 800a842:	4602      	mov	r2, r0
 800a844:	f240 2132 	movw	r1, #562	; 0x232
 800a848:	4839      	ldr	r0, [pc, #228]	; (800a930 <__mdiff+0x110>)
 800a84a:	f000 fb31 	bl	800aeb0 <__assert_func>
 800a84e:	2301      	movs	r3, #1
 800a850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a858:	bfa4      	itt	ge
 800a85a:	4643      	movge	r3, r8
 800a85c:	46a0      	movge	r8, r4
 800a85e:	4630      	mov	r0, r6
 800a860:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a864:	bfa6      	itte	ge
 800a866:	461c      	movge	r4, r3
 800a868:	2500      	movge	r5, #0
 800a86a:	2501      	movlt	r5, #1
 800a86c:	f7ff fd3a 	bl	800a2e4 <_Balloc>
 800a870:	b920      	cbnz	r0, 800a87c <__mdiff+0x5c>
 800a872:	4b2e      	ldr	r3, [pc, #184]	; (800a92c <__mdiff+0x10c>)
 800a874:	4602      	mov	r2, r0
 800a876:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a87a:	e7e5      	b.n	800a848 <__mdiff+0x28>
 800a87c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a880:	6926      	ldr	r6, [r4, #16]
 800a882:	60c5      	str	r5, [r0, #12]
 800a884:	f104 0914 	add.w	r9, r4, #20
 800a888:	f108 0514 	add.w	r5, r8, #20
 800a88c:	f100 0e14 	add.w	lr, r0, #20
 800a890:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a894:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a898:	f108 0210 	add.w	r2, r8, #16
 800a89c:	46f2      	mov	sl, lr
 800a89e:	2100      	movs	r1, #0
 800a8a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8a8:	fa1f f883 	uxth.w	r8, r3
 800a8ac:	fa11 f18b 	uxtah	r1, r1, fp
 800a8b0:	0c1b      	lsrs	r3, r3, #16
 800a8b2:	eba1 0808 	sub.w	r8, r1, r8
 800a8b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8be:	fa1f f888 	uxth.w	r8, r8
 800a8c2:	1419      	asrs	r1, r3, #16
 800a8c4:	454e      	cmp	r6, r9
 800a8c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8ca:	f84a 3b04 	str.w	r3, [sl], #4
 800a8ce:	d8e7      	bhi.n	800a8a0 <__mdiff+0x80>
 800a8d0:	1b33      	subs	r3, r6, r4
 800a8d2:	3b15      	subs	r3, #21
 800a8d4:	f023 0303 	bic.w	r3, r3, #3
 800a8d8:	3304      	adds	r3, #4
 800a8da:	3415      	adds	r4, #21
 800a8dc:	42a6      	cmp	r6, r4
 800a8de:	bf38      	it	cc
 800a8e0:	2304      	movcc	r3, #4
 800a8e2:	441d      	add	r5, r3
 800a8e4:	4473      	add	r3, lr
 800a8e6:	469e      	mov	lr, r3
 800a8e8:	462e      	mov	r6, r5
 800a8ea:	4566      	cmp	r6, ip
 800a8ec:	d30e      	bcc.n	800a90c <__mdiff+0xec>
 800a8ee:	f10c 0203 	add.w	r2, ip, #3
 800a8f2:	1b52      	subs	r2, r2, r5
 800a8f4:	f022 0203 	bic.w	r2, r2, #3
 800a8f8:	3d03      	subs	r5, #3
 800a8fa:	45ac      	cmp	ip, r5
 800a8fc:	bf38      	it	cc
 800a8fe:	2200      	movcc	r2, #0
 800a900:	441a      	add	r2, r3
 800a902:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a906:	b17b      	cbz	r3, 800a928 <__mdiff+0x108>
 800a908:	6107      	str	r7, [r0, #16]
 800a90a:	e7a3      	b.n	800a854 <__mdiff+0x34>
 800a90c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a910:	fa11 f288 	uxtah	r2, r1, r8
 800a914:	1414      	asrs	r4, r2, #16
 800a916:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a91a:	b292      	uxth	r2, r2
 800a91c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a920:	f84e 2b04 	str.w	r2, [lr], #4
 800a924:	1421      	asrs	r1, r4, #16
 800a926:	e7e0      	b.n	800a8ea <__mdiff+0xca>
 800a928:	3f01      	subs	r7, #1
 800a92a:	e7ea      	b.n	800a902 <__mdiff+0xe2>
 800a92c:	0800c10c 	.word	0x0800c10c
 800a930:	0800c11d 	.word	0x0800c11d

0800a934 <__d2b>:
 800a934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a938:	4689      	mov	r9, r1
 800a93a:	2101      	movs	r1, #1
 800a93c:	ec57 6b10 	vmov	r6, r7, d0
 800a940:	4690      	mov	r8, r2
 800a942:	f7ff fccf 	bl	800a2e4 <_Balloc>
 800a946:	4604      	mov	r4, r0
 800a948:	b930      	cbnz	r0, 800a958 <__d2b+0x24>
 800a94a:	4602      	mov	r2, r0
 800a94c:	4b25      	ldr	r3, [pc, #148]	; (800a9e4 <__d2b+0xb0>)
 800a94e:	4826      	ldr	r0, [pc, #152]	; (800a9e8 <__d2b+0xb4>)
 800a950:	f240 310a 	movw	r1, #778	; 0x30a
 800a954:	f000 faac 	bl	800aeb0 <__assert_func>
 800a958:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a95c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a960:	bb35      	cbnz	r5, 800a9b0 <__d2b+0x7c>
 800a962:	2e00      	cmp	r6, #0
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	d028      	beq.n	800a9ba <__d2b+0x86>
 800a968:	4668      	mov	r0, sp
 800a96a:	9600      	str	r6, [sp, #0]
 800a96c:	f7ff fd82 	bl	800a474 <__lo0bits>
 800a970:	9900      	ldr	r1, [sp, #0]
 800a972:	b300      	cbz	r0, 800a9b6 <__d2b+0x82>
 800a974:	9a01      	ldr	r2, [sp, #4]
 800a976:	f1c0 0320 	rsb	r3, r0, #32
 800a97a:	fa02 f303 	lsl.w	r3, r2, r3
 800a97e:	430b      	orrs	r3, r1
 800a980:	40c2      	lsrs	r2, r0
 800a982:	6163      	str	r3, [r4, #20]
 800a984:	9201      	str	r2, [sp, #4]
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	61a3      	str	r3, [r4, #24]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bf14      	ite	ne
 800a98e:	2202      	movne	r2, #2
 800a990:	2201      	moveq	r2, #1
 800a992:	6122      	str	r2, [r4, #16]
 800a994:	b1d5      	cbz	r5, 800a9cc <__d2b+0x98>
 800a996:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a99a:	4405      	add	r5, r0
 800a99c:	f8c9 5000 	str.w	r5, [r9]
 800a9a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9a4:	f8c8 0000 	str.w	r0, [r8]
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	b003      	add	sp, #12
 800a9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9b4:	e7d5      	b.n	800a962 <__d2b+0x2e>
 800a9b6:	6161      	str	r1, [r4, #20]
 800a9b8:	e7e5      	b.n	800a986 <__d2b+0x52>
 800a9ba:	a801      	add	r0, sp, #4
 800a9bc:	f7ff fd5a 	bl	800a474 <__lo0bits>
 800a9c0:	9b01      	ldr	r3, [sp, #4]
 800a9c2:	6163      	str	r3, [r4, #20]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	6122      	str	r2, [r4, #16]
 800a9c8:	3020      	adds	r0, #32
 800a9ca:	e7e3      	b.n	800a994 <__d2b+0x60>
 800a9cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9d4:	f8c9 0000 	str.w	r0, [r9]
 800a9d8:	6918      	ldr	r0, [r3, #16]
 800a9da:	f7ff fd2b 	bl	800a434 <__hi0bits>
 800a9de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9e2:	e7df      	b.n	800a9a4 <__d2b+0x70>
 800a9e4:	0800c10c 	.word	0x0800c10c
 800a9e8:	0800c11d 	.word	0x0800c11d

0800a9ec <_calloc_r>:
 800a9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800a9f2:	b94c      	cbnz	r4, 800aa08 <_calloc_r+0x1c>
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	9201      	str	r2, [sp, #4]
 800a9f8:	f000 f87a 	bl	800aaf0 <_malloc_r>
 800a9fc:	9a01      	ldr	r2, [sp, #4]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b930      	cbnz	r0, 800aa10 <_calloc_r+0x24>
 800aa02:	4628      	mov	r0, r5
 800aa04:	b003      	add	sp, #12
 800aa06:	bd30      	pop	{r4, r5, pc}
 800aa08:	220c      	movs	r2, #12
 800aa0a:	6002      	str	r2, [r0, #0]
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	e7f8      	b.n	800aa02 <_calloc_r+0x16>
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7fe f8ad 	bl	8008b70 <memset>
 800aa16:	e7f4      	b.n	800aa02 <_calloc_r+0x16>

0800aa18 <_free_r>:
 800aa18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa1a:	2900      	cmp	r1, #0
 800aa1c:	d044      	beq.n	800aaa8 <_free_r+0x90>
 800aa1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa22:	9001      	str	r0, [sp, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f1a1 0404 	sub.w	r4, r1, #4
 800aa2a:	bfb8      	it	lt
 800aa2c:	18e4      	addlt	r4, r4, r3
 800aa2e:	f000 fa9b 	bl	800af68 <__malloc_lock>
 800aa32:	4a1e      	ldr	r2, [pc, #120]	; (800aaac <_free_r+0x94>)
 800aa34:	9801      	ldr	r0, [sp, #4]
 800aa36:	6813      	ldr	r3, [r2, #0]
 800aa38:	b933      	cbnz	r3, 800aa48 <_free_r+0x30>
 800aa3a:	6063      	str	r3, [r4, #4]
 800aa3c:	6014      	str	r4, [r2, #0]
 800aa3e:	b003      	add	sp, #12
 800aa40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa44:	f000 ba96 	b.w	800af74 <__malloc_unlock>
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d908      	bls.n	800aa5e <_free_r+0x46>
 800aa4c:	6825      	ldr	r5, [r4, #0]
 800aa4e:	1961      	adds	r1, r4, r5
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf01      	itttt	eq
 800aa54:	6819      	ldreq	r1, [r3, #0]
 800aa56:	685b      	ldreq	r3, [r3, #4]
 800aa58:	1949      	addeq	r1, r1, r5
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	e7ed      	b.n	800aa3a <_free_r+0x22>
 800aa5e:	461a      	mov	r2, r3
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	b10b      	cbz	r3, 800aa68 <_free_r+0x50>
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d9fa      	bls.n	800aa5e <_free_r+0x46>
 800aa68:	6811      	ldr	r1, [r2, #0]
 800aa6a:	1855      	adds	r5, r2, r1
 800aa6c:	42a5      	cmp	r5, r4
 800aa6e:	d10b      	bne.n	800aa88 <_free_r+0x70>
 800aa70:	6824      	ldr	r4, [r4, #0]
 800aa72:	4421      	add	r1, r4
 800aa74:	1854      	adds	r4, r2, r1
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	6011      	str	r1, [r2, #0]
 800aa7a:	d1e0      	bne.n	800aa3e <_free_r+0x26>
 800aa7c:	681c      	ldr	r4, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	6053      	str	r3, [r2, #4]
 800aa82:	4421      	add	r1, r4
 800aa84:	6011      	str	r1, [r2, #0]
 800aa86:	e7da      	b.n	800aa3e <_free_r+0x26>
 800aa88:	d902      	bls.n	800aa90 <_free_r+0x78>
 800aa8a:	230c      	movs	r3, #12
 800aa8c:	6003      	str	r3, [r0, #0]
 800aa8e:	e7d6      	b.n	800aa3e <_free_r+0x26>
 800aa90:	6825      	ldr	r5, [r4, #0]
 800aa92:	1961      	adds	r1, r4, r5
 800aa94:	428b      	cmp	r3, r1
 800aa96:	bf04      	itt	eq
 800aa98:	6819      	ldreq	r1, [r3, #0]
 800aa9a:	685b      	ldreq	r3, [r3, #4]
 800aa9c:	6063      	str	r3, [r4, #4]
 800aa9e:	bf04      	itt	eq
 800aaa0:	1949      	addeq	r1, r1, r5
 800aaa2:	6021      	streq	r1, [r4, #0]
 800aaa4:	6054      	str	r4, [r2, #4]
 800aaa6:	e7ca      	b.n	800aa3e <_free_r+0x26>
 800aaa8:	b003      	add	sp, #12
 800aaaa:	bd30      	pop	{r4, r5, pc}
 800aaac:	20000640 	.word	0x20000640

0800aab0 <sbrk_aligned>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	4e0e      	ldr	r6, [pc, #56]	; (800aaec <sbrk_aligned+0x3c>)
 800aab4:	460c      	mov	r4, r1
 800aab6:	6831      	ldr	r1, [r6, #0]
 800aab8:	4605      	mov	r5, r0
 800aaba:	b911      	cbnz	r1, 800aac2 <sbrk_aligned+0x12>
 800aabc:	f000 f9e8 	bl	800ae90 <_sbrk_r>
 800aac0:	6030      	str	r0, [r6, #0]
 800aac2:	4621      	mov	r1, r4
 800aac4:	4628      	mov	r0, r5
 800aac6:	f000 f9e3 	bl	800ae90 <_sbrk_r>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	d00a      	beq.n	800aae4 <sbrk_aligned+0x34>
 800aace:	1cc4      	adds	r4, r0, #3
 800aad0:	f024 0403 	bic.w	r4, r4, #3
 800aad4:	42a0      	cmp	r0, r4
 800aad6:	d007      	beq.n	800aae8 <sbrk_aligned+0x38>
 800aad8:	1a21      	subs	r1, r4, r0
 800aada:	4628      	mov	r0, r5
 800aadc:	f000 f9d8 	bl	800ae90 <_sbrk_r>
 800aae0:	3001      	adds	r0, #1
 800aae2:	d101      	bne.n	800aae8 <sbrk_aligned+0x38>
 800aae4:	f04f 34ff 	mov.w	r4, #4294967295
 800aae8:	4620      	mov	r0, r4
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	20000644 	.word	0x20000644

0800aaf0 <_malloc_r>:
 800aaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	1ccd      	adds	r5, r1, #3
 800aaf6:	f025 0503 	bic.w	r5, r5, #3
 800aafa:	3508      	adds	r5, #8
 800aafc:	2d0c      	cmp	r5, #12
 800aafe:	bf38      	it	cc
 800ab00:	250c      	movcc	r5, #12
 800ab02:	2d00      	cmp	r5, #0
 800ab04:	4607      	mov	r7, r0
 800ab06:	db01      	blt.n	800ab0c <_malloc_r+0x1c>
 800ab08:	42a9      	cmp	r1, r5
 800ab0a:	d905      	bls.n	800ab18 <_malloc_r+0x28>
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	603b      	str	r3, [r7, #0]
 800ab10:	2600      	movs	r6, #0
 800ab12:	4630      	mov	r0, r6
 800ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab18:	4e2e      	ldr	r6, [pc, #184]	; (800abd4 <_malloc_r+0xe4>)
 800ab1a:	f000 fa25 	bl	800af68 <__malloc_lock>
 800ab1e:	6833      	ldr	r3, [r6, #0]
 800ab20:	461c      	mov	r4, r3
 800ab22:	bb34      	cbnz	r4, 800ab72 <_malloc_r+0x82>
 800ab24:	4629      	mov	r1, r5
 800ab26:	4638      	mov	r0, r7
 800ab28:	f7ff ffc2 	bl	800aab0 <sbrk_aligned>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	4604      	mov	r4, r0
 800ab30:	d14d      	bne.n	800abce <_malloc_r+0xde>
 800ab32:	6834      	ldr	r4, [r6, #0]
 800ab34:	4626      	mov	r6, r4
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	d140      	bne.n	800abbc <_malloc_r+0xcc>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4638      	mov	r0, r7
 800ab40:	eb04 0803 	add.w	r8, r4, r3
 800ab44:	f000 f9a4 	bl	800ae90 <_sbrk_r>
 800ab48:	4580      	cmp	r8, r0
 800ab4a:	d13a      	bne.n	800abc2 <_malloc_r+0xd2>
 800ab4c:	6821      	ldr	r1, [r4, #0]
 800ab4e:	3503      	adds	r5, #3
 800ab50:	1a6d      	subs	r5, r5, r1
 800ab52:	f025 0503 	bic.w	r5, r5, #3
 800ab56:	3508      	adds	r5, #8
 800ab58:	2d0c      	cmp	r5, #12
 800ab5a:	bf38      	it	cc
 800ab5c:	250c      	movcc	r5, #12
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff ffa5 	bl	800aab0 <sbrk_aligned>
 800ab66:	3001      	adds	r0, #1
 800ab68:	d02b      	beq.n	800abc2 <_malloc_r+0xd2>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	442b      	add	r3, r5
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	e00e      	b.n	800ab90 <_malloc_r+0xa0>
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	1b52      	subs	r2, r2, r5
 800ab76:	d41e      	bmi.n	800abb6 <_malloc_r+0xc6>
 800ab78:	2a0b      	cmp	r2, #11
 800ab7a:	d916      	bls.n	800abaa <_malloc_r+0xba>
 800ab7c:	1961      	adds	r1, r4, r5
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	6025      	str	r5, [r4, #0]
 800ab82:	bf18      	it	ne
 800ab84:	6059      	strne	r1, [r3, #4]
 800ab86:	6863      	ldr	r3, [r4, #4]
 800ab88:	bf08      	it	eq
 800ab8a:	6031      	streq	r1, [r6, #0]
 800ab8c:	5162      	str	r2, [r4, r5]
 800ab8e:	604b      	str	r3, [r1, #4]
 800ab90:	4638      	mov	r0, r7
 800ab92:	f104 060b 	add.w	r6, r4, #11
 800ab96:	f000 f9ed 	bl	800af74 <__malloc_unlock>
 800ab9a:	f026 0607 	bic.w	r6, r6, #7
 800ab9e:	1d23      	adds	r3, r4, #4
 800aba0:	1af2      	subs	r2, r6, r3
 800aba2:	d0b6      	beq.n	800ab12 <_malloc_r+0x22>
 800aba4:	1b9b      	subs	r3, r3, r6
 800aba6:	50a3      	str	r3, [r4, r2]
 800aba8:	e7b3      	b.n	800ab12 <_malloc_r+0x22>
 800abaa:	6862      	ldr	r2, [r4, #4]
 800abac:	42a3      	cmp	r3, r4
 800abae:	bf0c      	ite	eq
 800abb0:	6032      	streq	r2, [r6, #0]
 800abb2:	605a      	strne	r2, [r3, #4]
 800abb4:	e7ec      	b.n	800ab90 <_malloc_r+0xa0>
 800abb6:	4623      	mov	r3, r4
 800abb8:	6864      	ldr	r4, [r4, #4]
 800abba:	e7b2      	b.n	800ab22 <_malloc_r+0x32>
 800abbc:	4634      	mov	r4, r6
 800abbe:	6876      	ldr	r6, [r6, #4]
 800abc0:	e7b9      	b.n	800ab36 <_malloc_r+0x46>
 800abc2:	230c      	movs	r3, #12
 800abc4:	603b      	str	r3, [r7, #0]
 800abc6:	4638      	mov	r0, r7
 800abc8:	f000 f9d4 	bl	800af74 <__malloc_unlock>
 800abcc:	e7a1      	b.n	800ab12 <_malloc_r+0x22>
 800abce:	6025      	str	r5, [r4, #0]
 800abd0:	e7de      	b.n	800ab90 <_malloc_r+0xa0>
 800abd2:	bf00      	nop
 800abd4:	20000640 	.word	0x20000640

0800abd8 <__ssputs_r>:
 800abd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abdc:	688e      	ldr	r6, [r1, #8]
 800abde:	429e      	cmp	r6, r3
 800abe0:	4682      	mov	sl, r0
 800abe2:	460c      	mov	r4, r1
 800abe4:	4690      	mov	r8, r2
 800abe6:	461f      	mov	r7, r3
 800abe8:	d838      	bhi.n	800ac5c <__ssputs_r+0x84>
 800abea:	898a      	ldrh	r2, [r1, #12]
 800abec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abf0:	d032      	beq.n	800ac58 <__ssputs_r+0x80>
 800abf2:	6825      	ldr	r5, [r4, #0]
 800abf4:	6909      	ldr	r1, [r1, #16]
 800abf6:	eba5 0901 	sub.w	r9, r5, r1
 800abfa:	6965      	ldr	r5, [r4, #20]
 800abfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac04:	3301      	adds	r3, #1
 800ac06:	444b      	add	r3, r9
 800ac08:	106d      	asrs	r5, r5, #1
 800ac0a:	429d      	cmp	r5, r3
 800ac0c:	bf38      	it	cc
 800ac0e:	461d      	movcc	r5, r3
 800ac10:	0553      	lsls	r3, r2, #21
 800ac12:	d531      	bpl.n	800ac78 <__ssputs_r+0xa0>
 800ac14:	4629      	mov	r1, r5
 800ac16:	f7ff ff6b 	bl	800aaf0 <_malloc_r>
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	b950      	cbnz	r0, 800ac34 <__ssputs_r+0x5c>
 800ac1e:	230c      	movs	r3, #12
 800ac20:	f8ca 3000 	str.w	r3, [sl]
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac2a:	81a3      	strh	r3, [r4, #12]
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac34:	6921      	ldr	r1, [r4, #16]
 800ac36:	464a      	mov	r2, r9
 800ac38:	f7fd ff8c 	bl	8008b54 <memcpy>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	6126      	str	r6, [r4, #16]
 800ac4a:	6165      	str	r5, [r4, #20]
 800ac4c:	444e      	add	r6, r9
 800ac4e:	eba5 0509 	sub.w	r5, r5, r9
 800ac52:	6026      	str	r6, [r4, #0]
 800ac54:	60a5      	str	r5, [r4, #8]
 800ac56:	463e      	mov	r6, r7
 800ac58:	42be      	cmp	r6, r7
 800ac5a:	d900      	bls.n	800ac5e <__ssputs_r+0x86>
 800ac5c:	463e      	mov	r6, r7
 800ac5e:	6820      	ldr	r0, [r4, #0]
 800ac60:	4632      	mov	r2, r6
 800ac62:	4641      	mov	r1, r8
 800ac64:	f000 f966 	bl	800af34 <memmove>
 800ac68:	68a3      	ldr	r3, [r4, #8]
 800ac6a:	1b9b      	subs	r3, r3, r6
 800ac6c:	60a3      	str	r3, [r4, #8]
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	4433      	add	r3, r6
 800ac72:	6023      	str	r3, [r4, #0]
 800ac74:	2000      	movs	r0, #0
 800ac76:	e7db      	b.n	800ac30 <__ssputs_r+0x58>
 800ac78:	462a      	mov	r2, r5
 800ac7a:	f000 f981 	bl	800af80 <_realloc_r>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d1e1      	bne.n	800ac48 <__ssputs_r+0x70>
 800ac84:	6921      	ldr	r1, [r4, #16]
 800ac86:	4650      	mov	r0, sl
 800ac88:	f7ff fec6 	bl	800aa18 <_free_r>
 800ac8c:	e7c7      	b.n	800ac1e <__ssputs_r+0x46>
	...

0800ac90 <_svfiprintf_r>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	4698      	mov	r8, r3
 800ac96:	898b      	ldrh	r3, [r1, #12]
 800ac98:	061b      	lsls	r3, r3, #24
 800ac9a:	b09d      	sub	sp, #116	; 0x74
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	460d      	mov	r5, r1
 800aca0:	4614      	mov	r4, r2
 800aca2:	d50e      	bpl.n	800acc2 <_svfiprintf_r+0x32>
 800aca4:	690b      	ldr	r3, [r1, #16]
 800aca6:	b963      	cbnz	r3, 800acc2 <_svfiprintf_r+0x32>
 800aca8:	2140      	movs	r1, #64	; 0x40
 800acaa:	f7ff ff21 	bl	800aaf0 <_malloc_r>
 800acae:	6028      	str	r0, [r5, #0]
 800acb0:	6128      	str	r0, [r5, #16]
 800acb2:	b920      	cbnz	r0, 800acbe <_svfiprintf_r+0x2e>
 800acb4:	230c      	movs	r3, #12
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295
 800acbc:	e0d1      	b.n	800ae62 <_svfiprintf_r+0x1d2>
 800acbe:	2340      	movs	r3, #64	; 0x40
 800acc0:	616b      	str	r3, [r5, #20]
 800acc2:	2300      	movs	r3, #0
 800acc4:	9309      	str	r3, [sp, #36]	; 0x24
 800acc6:	2320      	movs	r3, #32
 800acc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800accc:	f8cd 800c 	str.w	r8, [sp, #12]
 800acd0:	2330      	movs	r3, #48	; 0x30
 800acd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae7c <_svfiprintf_r+0x1ec>
 800acd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acda:	f04f 0901 	mov.w	r9, #1
 800acde:	4623      	mov	r3, r4
 800ace0:	469a      	mov	sl, r3
 800ace2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace6:	b10a      	cbz	r2, 800acec <_svfiprintf_r+0x5c>
 800ace8:	2a25      	cmp	r2, #37	; 0x25
 800acea:	d1f9      	bne.n	800ace0 <_svfiprintf_r+0x50>
 800acec:	ebba 0b04 	subs.w	fp, sl, r4
 800acf0:	d00b      	beq.n	800ad0a <_svfiprintf_r+0x7a>
 800acf2:	465b      	mov	r3, fp
 800acf4:	4622      	mov	r2, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	4638      	mov	r0, r7
 800acfa:	f7ff ff6d 	bl	800abd8 <__ssputs_r>
 800acfe:	3001      	adds	r0, #1
 800ad00:	f000 80aa 	beq.w	800ae58 <_svfiprintf_r+0x1c8>
 800ad04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad06:	445a      	add	r2, fp
 800ad08:	9209      	str	r2, [sp, #36]	; 0x24
 800ad0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 80a2 	beq.w	800ae58 <_svfiprintf_r+0x1c8>
 800ad14:	2300      	movs	r3, #0
 800ad16:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad1e:	f10a 0a01 	add.w	sl, sl, #1
 800ad22:	9304      	str	r3, [sp, #16]
 800ad24:	9307      	str	r3, [sp, #28]
 800ad26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad2c:	4654      	mov	r4, sl
 800ad2e:	2205      	movs	r2, #5
 800ad30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad34:	4851      	ldr	r0, [pc, #324]	; (800ae7c <_svfiprintf_r+0x1ec>)
 800ad36:	f7f5 fa5b 	bl	80001f0 <memchr>
 800ad3a:	9a04      	ldr	r2, [sp, #16]
 800ad3c:	b9d8      	cbnz	r0, 800ad76 <_svfiprintf_r+0xe6>
 800ad3e:	06d0      	lsls	r0, r2, #27
 800ad40:	bf44      	itt	mi
 800ad42:	2320      	movmi	r3, #32
 800ad44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad48:	0711      	lsls	r1, r2, #28
 800ad4a:	bf44      	itt	mi
 800ad4c:	232b      	movmi	r3, #43	; 0x2b
 800ad4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad52:	f89a 3000 	ldrb.w	r3, [sl]
 800ad56:	2b2a      	cmp	r3, #42	; 0x2a
 800ad58:	d015      	beq.n	800ad86 <_svfiprintf_r+0xf6>
 800ad5a:	9a07      	ldr	r2, [sp, #28]
 800ad5c:	4654      	mov	r4, sl
 800ad5e:	2000      	movs	r0, #0
 800ad60:	f04f 0c0a 	mov.w	ip, #10
 800ad64:	4621      	mov	r1, r4
 800ad66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad6a:	3b30      	subs	r3, #48	; 0x30
 800ad6c:	2b09      	cmp	r3, #9
 800ad6e:	d94e      	bls.n	800ae0e <_svfiprintf_r+0x17e>
 800ad70:	b1b0      	cbz	r0, 800ada0 <_svfiprintf_r+0x110>
 800ad72:	9207      	str	r2, [sp, #28]
 800ad74:	e014      	b.n	800ada0 <_svfiprintf_r+0x110>
 800ad76:	eba0 0308 	sub.w	r3, r0, r8
 800ad7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	46a2      	mov	sl, r4
 800ad84:	e7d2      	b.n	800ad2c <_svfiprintf_r+0x9c>
 800ad86:	9b03      	ldr	r3, [sp, #12]
 800ad88:	1d19      	adds	r1, r3, #4
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	9103      	str	r1, [sp, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	bfbb      	ittet	lt
 800ad92:	425b      	neglt	r3, r3
 800ad94:	f042 0202 	orrlt.w	r2, r2, #2
 800ad98:	9307      	strge	r3, [sp, #28]
 800ad9a:	9307      	strlt	r3, [sp, #28]
 800ad9c:	bfb8      	it	lt
 800ad9e:	9204      	strlt	r2, [sp, #16]
 800ada0:	7823      	ldrb	r3, [r4, #0]
 800ada2:	2b2e      	cmp	r3, #46	; 0x2e
 800ada4:	d10c      	bne.n	800adc0 <_svfiprintf_r+0x130>
 800ada6:	7863      	ldrb	r3, [r4, #1]
 800ada8:	2b2a      	cmp	r3, #42	; 0x2a
 800adaa:	d135      	bne.n	800ae18 <_svfiprintf_r+0x188>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	1d1a      	adds	r2, r3, #4
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	9203      	str	r2, [sp, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bfb8      	it	lt
 800adb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800adbc:	3402      	adds	r4, #2
 800adbe:	9305      	str	r3, [sp, #20]
 800adc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae8c <_svfiprintf_r+0x1fc>
 800adc4:	7821      	ldrb	r1, [r4, #0]
 800adc6:	2203      	movs	r2, #3
 800adc8:	4650      	mov	r0, sl
 800adca:	f7f5 fa11 	bl	80001f0 <memchr>
 800adce:	b140      	cbz	r0, 800ade2 <_svfiprintf_r+0x152>
 800add0:	2340      	movs	r3, #64	; 0x40
 800add2:	eba0 000a 	sub.w	r0, r0, sl
 800add6:	fa03 f000 	lsl.w	r0, r3, r0
 800adda:	9b04      	ldr	r3, [sp, #16]
 800addc:	4303      	orrs	r3, r0
 800adde:	3401      	adds	r4, #1
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade6:	4826      	ldr	r0, [pc, #152]	; (800ae80 <_svfiprintf_r+0x1f0>)
 800ade8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adec:	2206      	movs	r2, #6
 800adee:	f7f5 f9ff 	bl	80001f0 <memchr>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d038      	beq.n	800ae68 <_svfiprintf_r+0x1d8>
 800adf6:	4b23      	ldr	r3, [pc, #140]	; (800ae84 <_svfiprintf_r+0x1f4>)
 800adf8:	bb1b      	cbnz	r3, 800ae42 <_svfiprintf_r+0x1b2>
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	3307      	adds	r3, #7
 800adfe:	f023 0307 	bic.w	r3, r3, #7
 800ae02:	3308      	adds	r3, #8
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	4433      	add	r3, r6
 800ae0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0c:	e767      	b.n	800acde <_svfiprintf_r+0x4e>
 800ae0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae12:	460c      	mov	r4, r1
 800ae14:	2001      	movs	r0, #1
 800ae16:	e7a5      	b.n	800ad64 <_svfiprintf_r+0xd4>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	3401      	adds	r4, #1
 800ae1c:	9305      	str	r3, [sp, #20]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f04f 0c0a 	mov.w	ip, #10
 800ae24:	4620      	mov	r0, r4
 800ae26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae2a:	3a30      	subs	r2, #48	; 0x30
 800ae2c:	2a09      	cmp	r2, #9
 800ae2e:	d903      	bls.n	800ae38 <_svfiprintf_r+0x1a8>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d0c5      	beq.n	800adc0 <_svfiprintf_r+0x130>
 800ae34:	9105      	str	r1, [sp, #20]
 800ae36:	e7c3      	b.n	800adc0 <_svfiprintf_r+0x130>
 800ae38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e7f0      	b.n	800ae24 <_svfiprintf_r+0x194>
 800ae42:	ab03      	add	r3, sp, #12
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	462a      	mov	r2, r5
 800ae48:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <_svfiprintf_r+0x1f8>)
 800ae4a:	a904      	add	r1, sp, #16
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f7fd ff37 	bl	8008cc0 <_printf_float>
 800ae52:	1c42      	adds	r2, r0, #1
 800ae54:	4606      	mov	r6, r0
 800ae56:	d1d6      	bne.n	800ae06 <_svfiprintf_r+0x176>
 800ae58:	89ab      	ldrh	r3, [r5, #12]
 800ae5a:	065b      	lsls	r3, r3, #25
 800ae5c:	f53f af2c 	bmi.w	800acb8 <_svfiprintf_r+0x28>
 800ae60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae62:	b01d      	add	sp, #116	; 0x74
 800ae64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae68:	ab03      	add	r3, sp, #12
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <_svfiprintf_r+0x1f8>)
 800ae70:	a904      	add	r1, sp, #16
 800ae72:	4638      	mov	r0, r7
 800ae74:	f7fe f9c8 	bl	8009208 <_printf_i>
 800ae78:	e7eb      	b.n	800ae52 <_svfiprintf_r+0x1c2>
 800ae7a:	bf00      	nop
 800ae7c:	0800c27c 	.word	0x0800c27c
 800ae80:	0800c286 	.word	0x0800c286
 800ae84:	08008cc1 	.word	0x08008cc1
 800ae88:	0800abd9 	.word	0x0800abd9
 800ae8c:	0800c282 	.word	0x0800c282

0800ae90 <_sbrk_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d06      	ldr	r5, [pc, #24]	; (800aeac <_sbrk_r+0x1c>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	602b      	str	r3, [r5, #0]
 800ae9c:	f7f7 fdca 	bl	8002a34 <_sbrk>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_sbrk_r+0x1a>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_sbrk_r+0x1a>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	20000648 	.word	0x20000648

0800aeb0 <__assert_func>:
 800aeb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeb2:	4614      	mov	r4, r2
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	4b09      	ldr	r3, [pc, #36]	; (800aedc <__assert_func+0x2c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4605      	mov	r5, r0
 800aebc:	68d8      	ldr	r0, [r3, #12]
 800aebe:	b14c      	cbz	r4, 800aed4 <__assert_func+0x24>
 800aec0:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <__assert_func+0x30>)
 800aec2:	9100      	str	r1, [sp, #0]
 800aec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aec8:	4906      	ldr	r1, [pc, #24]	; (800aee4 <__assert_func+0x34>)
 800aeca:	462b      	mov	r3, r5
 800aecc:	f000 f80e 	bl	800aeec <fiprintf>
 800aed0:	f000 faac 	bl	800b42c <abort>
 800aed4:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <__assert_func+0x38>)
 800aed6:	461c      	mov	r4, r3
 800aed8:	e7f3      	b.n	800aec2 <__assert_func+0x12>
 800aeda:	bf00      	nop
 800aedc:	20000014 	.word	0x20000014
 800aee0:	0800c28d 	.word	0x0800c28d
 800aee4:	0800c29a 	.word	0x0800c29a
 800aee8:	0800c2c8 	.word	0x0800c2c8

0800aeec <fiprintf>:
 800aeec:	b40e      	push	{r1, r2, r3}
 800aeee:	b503      	push	{r0, r1, lr}
 800aef0:	4601      	mov	r1, r0
 800aef2:	ab03      	add	r3, sp, #12
 800aef4:	4805      	ldr	r0, [pc, #20]	; (800af0c <fiprintf+0x20>)
 800aef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	f000 f897 	bl	800b030 <_vfiprintf_r>
 800af02:	b002      	add	sp, #8
 800af04:	f85d eb04 	ldr.w	lr, [sp], #4
 800af08:	b003      	add	sp, #12
 800af0a:	4770      	bx	lr
 800af0c:	20000014 	.word	0x20000014

0800af10 <__ascii_mbtowc>:
 800af10:	b082      	sub	sp, #8
 800af12:	b901      	cbnz	r1, 800af16 <__ascii_mbtowc+0x6>
 800af14:	a901      	add	r1, sp, #4
 800af16:	b142      	cbz	r2, 800af2a <__ascii_mbtowc+0x1a>
 800af18:	b14b      	cbz	r3, 800af2e <__ascii_mbtowc+0x1e>
 800af1a:	7813      	ldrb	r3, [r2, #0]
 800af1c:	600b      	str	r3, [r1, #0]
 800af1e:	7812      	ldrb	r2, [r2, #0]
 800af20:	1e10      	subs	r0, r2, #0
 800af22:	bf18      	it	ne
 800af24:	2001      	movne	r0, #1
 800af26:	b002      	add	sp, #8
 800af28:	4770      	bx	lr
 800af2a:	4610      	mov	r0, r2
 800af2c:	e7fb      	b.n	800af26 <__ascii_mbtowc+0x16>
 800af2e:	f06f 0001 	mvn.w	r0, #1
 800af32:	e7f8      	b.n	800af26 <__ascii_mbtowc+0x16>

0800af34 <memmove>:
 800af34:	4288      	cmp	r0, r1
 800af36:	b510      	push	{r4, lr}
 800af38:	eb01 0402 	add.w	r4, r1, r2
 800af3c:	d902      	bls.n	800af44 <memmove+0x10>
 800af3e:	4284      	cmp	r4, r0
 800af40:	4623      	mov	r3, r4
 800af42:	d807      	bhi.n	800af54 <memmove+0x20>
 800af44:	1e43      	subs	r3, r0, #1
 800af46:	42a1      	cmp	r1, r4
 800af48:	d008      	beq.n	800af5c <memmove+0x28>
 800af4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af52:	e7f8      	b.n	800af46 <memmove+0x12>
 800af54:	4402      	add	r2, r0
 800af56:	4601      	mov	r1, r0
 800af58:	428a      	cmp	r2, r1
 800af5a:	d100      	bne.n	800af5e <memmove+0x2a>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af66:	e7f7      	b.n	800af58 <memmove+0x24>

0800af68 <__malloc_lock>:
 800af68:	4801      	ldr	r0, [pc, #4]	; (800af70 <__malloc_lock+0x8>)
 800af6a:	f000 bc1f 	b.w	800b7ac <__retarget_lock_acquire_recursive>
 800af6e:	bf00      	nop
 800af70:	2000064c 	.word	0x2000064c

0800af74 <__malloc_unlock>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__malloc_unlock+0x8>)
 800af76:	f000 bc1a 	b.w	800b7ae <__retarget_lock_release_recursive>
 800af7a:	bf00      	nop
 800af7c:	2000064c 	.word	0x2000064c

0800af80 <_realloc_r>:
 800af80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af84:	4680      	mov	r8, r0
 800af86:	4614      	mov	r4, r2
 800af88:	460e      	mov	r6, r1
 800af8a:	b921      	cbnz	r1, 800af96 <_realloc_r+0x16>
 800af8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af90:	4611      	mov	r1, r2
 800af92:	f7ff bdad 	b.w	800aaf0 <_malloc_r>
 800af96:	b92a      	cbnz	r2, 800afa4 <_realloc_r+0x24>
 800af98:	f7ff fd3e 	bl	800aa18 <_free_r>
 800af9c:	4625      	mov	r5, r4
 800af9e:	4628      	mov	r0, r5
 800afa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa4:	f000 fc6a 	bl	800b87c <_malloc_usable_size_r>
 800afa8:	4284      	cmp	r4, r0
 800afaa:	4607      	mov	r7, r0
 800afac:	d802      	bhi.n	800afb4 <_realloc_r+0x34>
 800afae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afb2:	d812      	bhi.n	800afda <_realloc_r+0x5a>
 800afb4:	4621      	mov	r1, r4
 800afb6:	4640      	mov	r0, r8
 800afb8:	f7ff fd9a 	bl	800aaf0 <_malloc_r>
 800afbc:	4605      	mov	r5, r0
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d0ed      	beq.n	800af9e <_realloc_r+0x1e>
 800afc2:	42bc      	cmp	r4, r7
 800afc4:	4622      	mov	r2, r4
 800afc6:	4631      	mov	r1, r6
 800afc8:	bf28      	it	cs
 800afca:	463a      	movcs	r2, r7
 800afcc:	f7fd fdc2 	bl	8008b54 <memcpy>
 800afd0:	4631      	mov	r1, r6
 800afd2:	4640      	mov	r0, r8
 800afd4:	f7ff fd20 	bl	800aa18 <_free_r>
 800afd8:	e7e1      	b.n	800af9e <_realloc_r+0x1e>
 800afda:	4635      	mov	r5, r6
 800afdc:	e7df      	b.n	800af9e <_realloc_r+0x1e>

0800afde <__sfputc_r>:
 800afde:	6893      	ldr	r3, [r2, #8]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	b410      	push	{r4}
 800afe6:	6093      	str	r3, [r2, #8]
 800afe8:	da08      	bge.n	800affc <__sfputc_r+0x1e>
 800afea:	6994      	ldr	r4, [r2, #24]
 800afec:	42a3      	cmp	r3, r4
 800afee:	db01      	blt.n	800aff4 <__sfputc_r+0x16>
 800aff0:	290a      	cmp	r1, #10
 800aff2:	d103      	bne.n	800affc <__sfputc_r+0x1e>
 800aff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aff8:	f000 b94a 	b.w	800b290 <__swbuf_r>
 800affc:	6813      	ldr	r3, [r2, #0]
 800affe:	1c58      	adds	r0, r3, #1
 800b000:	6010      	str	r0, [r2, #0]
 800b002:	7019      	strb	r1, [r3, #0]
 800b004:	4608      	mov	r0, r1
 800b006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <__sfputs_r>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	4606      	mov	r6, r0
 800b010:	460f      	mov	r7, r1
 800b012:	4614      	mov	r4, r2
 800b014:	18d5      	adds	r5, r2, r3
 800b016:	42ac      	cmp	r4, r5
 800b018:	d101      	bne.n	800b01e <__sfputs_r+0x12>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e007      	b.n	800b02e <__sfputs_r+0x22>
 800b01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b022:	463a      	mov	r2, r7
 800b024:	4630      	mov	r0, r6
 800b026:	f7ff ffda 	bl	800afde <__sfputc_r>
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	d1f3      	bne.n	800b016 <__sfputs_r+0xa>
 800b02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b030 <_vfiprintf_r>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	460d      	mov	r5, r1
 800b036:	b09d      	sub	sp, #116	; 0x74
 800b038:	4614      	mov	r4, r2
 800b03a:	4698      	mov	r8, r3
 800b03c:	4606      	mov	r6, r0
 800b03e:	b118      	cbz	r0, 800b048 <_vfiprintf_r+0x18>
 800b040:	6983      	ldr	r3, [r0, #24]
 800b042:	b90b      	cbnz	r3, 800b048 <_vfiprintf_r+0x18>
 800b044:	f000 fb14 	bl	800b670 <__sinit>
 800b048:	4b89      	ldr	r3, [pc, #548]	; (800b270 <_vfiprintf_r+0x240>)
 800b04a:	429d      	cmp	r5, r3
 800b04c:	d11b      	bne.n	800b086 <_vfiprintf_r+0x56>
 800b04e:	6875      	ldr	r5, [r6, #4]
 800b050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b052:	07d9      	lsls	r1, r3, #31
 800b054:	d405      	bmi.n	800b062 <_vfiprintf_r+0x32>
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	059a      	lsls	r2, r3, #22
 800b05a:	d402      	bmi.n	800b062 <_vfiprintf_r+0x32>
 800b05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b05e:	f000 fba5 	bl	800b7ac <__retarget_lock_acquire_recursive>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	071b      	lsls	r3, r3, #28
 800b066:	d501      	bpl.n	800b06c <_vfiprintf_r+0x3c>
 800b068:	692b      	ldr	r3, [r5, #16]
 800b06a:	b9eb      	cbnz	r3, 800b0a8 <_vfiprintf_r+0x78>
 800b06c:	4629      	mov	r1, r5
 800b06e:	4630      	mov	r0, r6
 800b070:	f000 f96e 	bl	800b350 <__swsetup_r>
 800b074:	b1c0      	cbz	r0, 800b0a8 <_vfiprintf_r+0x78>
 800b076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b078:	07dc      	lsls	r4, r3, #31
 800b07a:	d50e      	bpl.n	800b09a <_vfiprintf_r+0x6a>
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	b01d      	add	sp, #116	; 0x74
 800b082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b086:	4b7b      	ldr	r3, [pc, #492]	; (800b274 <_vfiprintf_r+0x244>)
 800b088:	429d      	cmp	r5, r3
 800b08a:	d101      	bne.n	800b090 <_vfiprintf_r+0x60>
 800b08c:	68b5      	ldr	r5, [r6, #8]
 800b08e:	e7df      	b.n	800b050 <_vfiprintf_r+0x20>
 800b090:	4b79      	ldr	r3, [pc, #484]	; (800b278 <_vfiprintf_r+0x248>)
 800b092:	429d      	cmp	r5, r3
 800b094:	bf08      	it	eq
 800b096:	68f5      	ldreq	r5, [r6, #12]
 800b098:	e7da      	b.n	800b050 <_vfiprintf_r+0x20>
 800b09a:	89ab      	ldrh	r3, [r5, #12]
 800b09c:	0598      	lsls	r0, r3, #22
 800b09e:	d4ed      	bmi.n	800b07c <_vfiprintf_r+0x4c>
 800b0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0a2:	f000 fb84 	bl	800b7ae <__retarget_lock_release_recursive>
 800b0a6:	e7e9      	b.n	800b07c <_vfiprintf_r+0x4c>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ac:	2320      	movs	r3, #32
 800b0ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b6:	2330      	movs	r3, #48	; 0x30
 800b0b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b27c <_vfiprintf_r+0x24c>
 800b0bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0c0:	f04f 0901 	mov.w	r9, #1
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	469a      	mov	sl, r3
 800b0c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0cc:	b10a      	cbz	r2, 800b0d2 <_vfiprintf_r+0xa2>
 800b0ce:	2a25      	cmp	r2, #37	; 0x25
 800b0d0:	d1f9      	bne.n	800b0c6 <_vfiprintf_r+0x96>
 800b0d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d6:	d00b      	beq.n	800b0f0 <_vfiprintf_r+0xc0>
 800b0d8:	465b      	mov	r3, fp
 800b0da:	4622      	mov	r2, r4
 800b0dc:	4629      	mov	r1, r5
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f7ff ff94 	bl	800b00c <__sfputs_r>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	f000 80aa 	beq.w	800b23e <_vfiprintf_r+0x20e>
 800b0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ec:	445a      	add	r2, fp
 800b0ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 80a2 	beq.w	800b23e <_vfiprintf_r+0x20e>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b104:	f10a 0a01 	add.w	sl, sl, #1
 800b108:	9304      	str	r3, [sp, #16]
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b110:	931a      	str	r3, [sp, #104]	; 0x68
 800b112:	4654      	mov	r4, sl
 800b114:	2205      	movs	r2, #5
 800b116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11a:	4858      	ldr	r0, [pc, #352]	; (800b27c <_vfiprintf_r+0x24c>)
 800b11c:	f7f5 f868 	bl	80001f0 <memchr>
 800b120:	9a04      	ldr	r2, [sp, #16]
 800b122:	b9d8      	cbnz	r0, 800b15c <_vfiprintf_r+0x12c>
 800b124:	06d1      	lsls	r1, r2, #27
 800b126:	bf44      	itt	mi
 800b128:	2320      	movmi	r3, #32
 800b12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b12e:	0713      	lsls	r3, r2, #28
 800b130:	bf44      	itt	mi
 800b132:	232b      	movmi	r3, #43	; 0x2b
 800b134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b138:	f89a 3000 	ldrb.w	r3, [sl]
 800b13c:	2b2a      	cmp	r3, #42	; 0x2a
 800b13e:	d015      	beq.n	800b16c <_vfiprintf_r+0x13c>
 800b140:	9a07      	ldr	r2, [sp, #28]
 800b142:	4654      	mov	r4, sl
 800b144:	2000      	movs	r0, #0
 800b146:	f04f 0c0a 	mov.w	ip, #10
 800b14a:	4621      	mov	r1, r4
 800b14c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b150:	3b30      	subs	r3, #48	; 0x30
 800b152:	2b09      	cmp	r3, #9
 800b154:	d94e      	bls.n	800b1f4 <_vfiprintf_r+0x1c4>
 800b156:	b1b0      	cbz	r0, 800b186 <_vfiprintf_r+0x156>
 800b158:	9207      	str	r2, [sp, #28]
 800b15a:	e014      	b.n	800b186 <_vfiprintf_r+0x156>
 800b15c:	eba0 0308 	sub.w	r3, r0, r8
 800b160:	fa09 f303 	lsl.w	r3, r9, r3
 800b164:	4313      	orrs	r3, r2
 800b166:	9304      	str	r3, [sp, #16]
 800b168:	46a2      	mov	sl, r4
 800b16a:	e7d2      	b.n	800b112 <_vfiprintf_r+0xe2>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	1d19      	adds	r1, r3, #4
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	9103      	str	r1, [sp, #12]
 800b174:	2b00      	cmp	r3, #0
 800b176:	bfbb      	ittet	lt
 800b178:	425b      	neglt	r3, r3
 800b17a:	f042 0202 	orrlt.w	r2, r2, #2
 800b17e:	9307      	strge	r3, [sp, #28]
 800b180:	9307      	strlt	r3, [sp, #28]
 800b182:	bfb8      	it	lt
 800b184:	9204      	strlt	r2, [sp, #16]
 800b186:	7823      	ldrb	r3, [r4, #0]
 800b188:	2b2e      	cmp	r3, #46	; 0x2e
 800b18a:	d10c      	bne.n	800b1a6 <_vfiprintf_r+0x176>
 800b18c:	7863      	ldrb	r3, [r4, #1]
 800b18e:	2b2a      	cmp	r3, #42	; 0x2a
 800b190:	d135      	bne.n	800b1fe <_vfiprintf_r+0x1ce>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	1d1a      	adds	r2, r3, #4
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	9203      	str	r2, [sp, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	bfb8      	it	lt
 800b19e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1a2:	3402      	adds	r4, #2
 800b1a4:	9305      	str	r3, [sp, #20]
 800b1a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b28c <_vfiprintf_r+0x25c>
 800b1aa:	7821      	ldrb	r1, [r4, #0]
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	f7f5 f81e 	bl	80001f0 <memchr>
 800b1b4:	b140      	cbz	r0, 800b1c8 <_vfiprintf_r+0x198>
 800b1b6:	2340      	movs	r3, #64	; 0x40
 800b1b8:	eba0 000a 	sub.w	r0, r0, sl
 800b1bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b1c0:	9b04      	ldr	r3, [sp, #16]
 800b1c2:	4303      	orrs	r3, r0
 800b1c4:	3401      	adds	r4, #1
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1cc:	482c      	ldr	r0, [pc, #176]	; (800b280 <_vfiprintf_r+0x250>)
 800b1ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1d2:	2206      	movs	r2, #6
 800b1d4:	f7f5 f80c 	bl	80001f0 <memchr>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d03f      	beq.n	800b25c <_vfiprintf_r+0x22c>
 800b1dc:	4b29      	ldr	r3, [pc, #164]	; (800b284 <_vfiprintf_r+0x254>)
 800b1de:	bb1b      	cbnz	r3, 800b228 <_vfiprintf_r+0x1f8>
 800b1e0:	9b03      	ldr	r3, [sp, #12]
 800b1e2:	3307      	adds	r3, #7
 800b1e4:	f023 0307 	bic.w	r3, r3, #7
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	9303      	str	r3, [sp, #12]
 800b1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ee:	443b      	add	r3, r7
 800b1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f2:	e767      	b.n	800b0c4 <_vfiprintf_r+0x94>
 800b1f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	e7a5      	b.n	800b14a <_vfiprintf_r+0x11a>
 800b1fe:	2300      	movs	r3, #0
 800b200:	3401      	adds	r4, #1
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	4619      	mov	r1, r3
 800b206:	f04f 0c0a 	mov.w	ip, #10
 800b20a:	4620      	mov	r0, r4
 800b20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b210:	3a30      	subs	r2, #48	; 0x30
 800b212:	2a09      	cmp	r2, #9
 800b214:	d903      	bls.n	800b21e <_vfiprintf_r+0x1ee>
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0c5      	beq.n	800b1a6 <_vfiprintf_r+0x176>
 800b21a:	9105      	str	r1, [sp, #20]
 800b21c:	e7c3      	b.n	800b1a6 <_vfiprintf_r+0x176>
 800b21e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b222:	4604      	mov	r4, r0
 800b224:	2301      	movs	r3, #1
 800b226:	e7f0      	b.n	800b20a <_vfiprintf_r+0x1da>
 800b228:	ab03      	add	r3, sp, #12
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	462a      	mov	r2, r5
 800b22e:	4b16      	ldr	r3, [pc, #88]	; (800b288 <_vfiprintf_r+0x258>)
 800b230:	a904      	add	r1, sp, #16
 800b232:	4630      	mov	r0, r6
 800b234:	f7fd fd44 	bl	8008cc0 <_printf_float>
 800b238:	4607      	mov	r7, r0
 800b23a:	1c78      	adds	r0, r7, #1
 800b23c:	d1d6      	bne.n	800b1ec <_vfiprintf_r+0x1bc>
 800b23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b240:	07d9      	lsls	r1, r3, #31
 800b242:	d405      	bmi.n	800b250 <_vfiprintf_r+0x220>
 800b244:	89ab      	ldrh	r3, [r5, #12]
 800b246:	059a      	lsls	r2, r3, #22
 800b248:	d402      	bmi.n	800b250 <_vfiprintf_r+0x220>
 800b24a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24c:	f000 faaf 	bl	800b7ae <__retarget_lock_release_recursive>
 800b250:	89ab      	ldrh	r3, [r5, #12]
 800b252:	065b      	lsls	r3, r3, #25
 800b254:	f53f af12 	bmi.w	800b07c <_vfiprintf_r+0x4c>
 800b258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b25a:	e711      	b.n	800b080 <_vfiprintf_r+0x50>
 800b25c:	ab03      	add	r3, sp, #12
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	462a      	mov	r2, r5
 800b262:	4b09      	ldr	r3, [pc, #36]	; (800b288 <_vfiprintf_r+0x258>)
 800b264:	a904      	add	r1, sp, #16
 800b266:	4630      	mov	r0, r6
 800b268:	f7fd ffce 	bl	8009208 <_printf_i>
 800b26c:	e7e4      	b.n	800b238 <_vfiprintf_r+0x208>
 800b26e:	bf00      	nop
 800b270:	0800c2f4 	.word	0x0800c2f4
 800b274:	0800c314 	.word	0x0800c314
 800b278:	0800c2d4 	.word	0x0800c2d4
 800b27c:	0800c27c 	.word	0x0800c27c
 800b280:	0800c286 	.word	0x0800c286
 800b284:	08008cc1 	.word	0x08008cc1
 800b288:	0800b00d 	.word	0x0800b00d
 800b28c:	0800c282 	.word	0x0800c282

0800b290 <__swbuf_r>:
 800b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b292:	460e      	mov	r6, r1
 800b294:	4614      	mov	r4, r2
 800b296:	4605      	mov	r5, r0
 800b298:	b118      	cbz	r0, 800b2a2 <__swbuf_r+0x12>
 800b29a:	6983      	ldr	r3, [r0, #24]
 800b29c:	b90b      	cbnz	r3, 800b2a2 <__swbuf_r+0x12>
 800b29e:	f000 f9e7 	bl	800b670 <__sinit>
 800b2a2:	4b21      	ldr	r3, [pc, #132]	; (800b328 <__swbuf_r+0x98>)
 800b2a4:	429c      	cmp	r4, r3
 800b2a6:	d12b      	bne.n	800b300 <__swbuf_r+0x70>
 800b2a8:	686c      	ldr	r4, [r5, #4]
 800b2aa:	69a3      	ldr	r3, [r4, #24]
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	071a      	lsls	r2, r3, #28
 800b2b2:	d52f      	bpl.n	800b314 <__swbuf_r+0x84>
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	b36b      	cbz	r3, 800b314 <__swbuf_r+0x84>
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	6820      	ldr	r0, [r4, #0]
 800b2bc:	1ac0      	subs	r0, r0, r3
 800b2be:	6963      	ldr	r3, [r4, #20]
 800b2c0:	b2f6      	uxtb	r6, r6
 800b2c2:	4283      	cmp	r3, r0
 800b2c4:	4637      	mov	r7, r6
 800b2c6:	dc04      	bgt.n	800b2d2 <__swbuf_r+0x42>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f000 f93c 	bl	800b548 <_fflush_r>
 800b2d0:	bb30      	cbnz	r0, 800b320 <__swbuf_r+0x90>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	60a3      	str	r3, [r4, #8]
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	6022      	str	r2, [r4, #0]
 800b2de:	701e      	strb	r6, [r3, #0]
 800b2e0:	6963      	ldr	r3, [r4, #20]
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	d004      	beq.n	800b2f2 <__swbuf_r+0x62>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	07db      	lsls	r3, r3, #31
 800b2ec:	d506      	bpl.n	800b2fc <__swbuf_r+0x6c>
 800b2ee:	2e0a      	cmp	r6, #10
 800b2f0:	d104      	bne.n	800b2fc <__swbuf_r+0x6c>
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f000 f927 	bl	800b548 <_fflush_r>
 800b2fa:	b988      	cbnz	r0, 800b320 <__swbuf_r+0x90>
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <__swbuf_r+0x9c>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d101      	bne.n	800b30a <__swbuf_r+0x7a>
 800b306:	68ac      	ldr	r4, [r5, #8]
 800b308:	e7cf      	b.n	800b2aa <__swbuf_r+0x1a>
 800b30a:	4b09      	ldr	r3, [pc, #36]	; (800b330 <__swbuf_r+0xa0>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	bf08      	it	eq
 800b310:	68ec      	ldreq	r4, [r5, #12]
 800b312:	e7ca      	b.n	800b2aa <__swbuf_r+0x1a>
 800b314:	4621      	mov	r1, r4
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f81a 	bl	800b350 <__swsetup_r>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0cb      	beq.n	800b2b8 <__swbuf_r+0x28>
 800b320:	f04f 37ff 	mov.w	r7, #4294967295
 800b324:	e7ea      	b.n	800b2fc <__swbuf_r+0x6c>
 800b326:	bf00      	nop
 800b328:	0800c2f4 	.word	0x0800c2f4
 800b32c:	0800c314 	.word	0x0800c314
 800b330:	0800c2d4 	.word	0x0800c2d4

0800b334 <__ascii_wctomb>:
 800b334:	b149      	cbz	r1, 800b34a <__ascii_wctomb+0x16>
 800b336:	2aff      	cmp	r2, #255	; 0xff
 800b338:	bf85      	ittet	hi
 800b33a:	238a      	movhi	r3, #138	; 0x8a
 800b33c:	6003      	strhi	r3, [r0, #0]
 800b33e:	700a      	strbls	r2, [r1, #0]
 800b340:	f04f 30ff 	movhi.w	r0, #4294967295
 800b344:	bf98      	it	ls
 800b346:	2001      	movls	r0, #1
 800b348:	4770      	bx	lr
 800b34a:	4608      	mov	r0, r1
 800b34c:	4770      	bx	lr
	...

0800b350 <__swsetup_r>:
 800b350:	4b32      	ldr	r3, [pc, #200]	; (800b41c <__swsetup_r+0xcc>)
 800b352:	b570      	push	{r4, r5, r6, lr}
 800b354:	681d      	ldr	r5, [r3, #0]
 800b356:	4606      	mov	r6, r0
 800b358:	460c      	mov	r4, r1
 800b35a:	b125      	cbz	r5, 800b366 <__swsetup_r+0x16>
 800b35c:	69ab      	ldr	r3, [r5, #24]
 800b35e:	b913      	cbnz	r3, 800b366 <__swsetup_r+0x16>
 800b360:	4628      	mov	r0, r5
 800b362:	f000 f985 	bl	800b670 <__sinit>
 800b366:	4b2e      	ldr	r3, [pc, #184]	; (800b420 <__swsetup_r+0xd0>)
 800b368:	429c      	cmp	r4, r3
 800b36a:	d10f      	bne.n	800b38c <__swsetup_r+0x3c>
 800b36c:	686c      	ldr	r4, [r5, #4]
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b374:	0719      	lsls	r1, r3, #28
 800b376:	d42c      	bmi.n	800b3d2 <__swsetup_r+0x82>
 800b378:	06dd      	lsls	r5, r3, #27
 800b37a:	d411      	bmi.n	800b3a0 <__swsetup_r+0x50>
 800b37c:	2309      	movs	r3, #9
 800b37e:	6033      	str	r3, [r6, #0]
 800b380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b384:	81a3      	strh	r3, [r4, #12]
 800b386:	f04f 30ff 	mov.w	r0, #4294967295
 800b38a:	e03e      	b.n	800b40a <__swsetup_r+0xba>
 800b38c:	4b25      	ldr	r3, [pc, #148]	; (800b424 <__swsetup_r+0xd4>)
 800b38e:	429c      	cmp	r4, r3
 800b390:	d101      	bne.n	800b396 <__swsetup_r+0x46>
 800b392:	68ac      	ldr	r4, [r5, #8]
 800b394:	e7eb      	b.n	800b36e <__swsetup_r+0x1e>
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <__swsetup_r+0xd8>)
 800b398:	429c      	cmp	r4, r3
 800b39a:	bf08      	it	eq
 800b39c:	68ec      	ldreq	r4, [r5, #12]
 800b39e:	e7e6      	b.n	800b36e <__swsetup_r+0x1e>
 800b3a0:	0758      	lsls	r0, r3, #29
 800b3a2:	d512      	bpl.n	800b3ca <__swsetup_r+0x7a>
 800b3a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3a6:	b141      	cbz	r1, 800b3ba <__swsetup_r+0x6a>
 800b3a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ac:	4299      	cmp	r1, r3
 800b3ae:	d002      	beq.n	800b3b6 <__swsetup_r+0x66>
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff fb31 	bl	800aa18 <_free_r>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6363      	str	r3, [r4, #52]	; 0x34
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	6063      	str	r3, [r4, #4]
 800b3c6:	6923      	ldr	r3, [r4, #16]
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f043 0308 	orr.w	r3, r3, #8
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	6923      	ldr	r3, [r4, #16]
 800b3d4:	b94b      	cbnz	r3, 800b3ea <__swsetup_r+0x9a>
 800b3d6:	89a3      	ldrh	r3, [r4, #12]
 800b3d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3e0:	d003      	beq.n	800b3ea <__swsetup_r+0x9a>
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f000 fa09 	bl	800b7fc <__smakebuf_r>
 800b3ea:	89a0      	ldrh	r0, [r4, #12]
 800b3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3f0:	f010 0301 	ands.w	r3, r0, #1
 800b3f4:	d00a      	beq.n	800b40c <__swsetup_r+0xbc>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60a3      	str	r3, [r4, #8]
 800b3fa:	6963      	ldr	r3, [r4, #20]
 800b3fc:	425b      	negs	r3, r3
 800b3fe:	61a3      	str	r3, [r4, #24]
 800b400:	6923      	ldr	r3, [r4, #16]
 800b402:	b943      	cbnz	r3, 800b416 <__swsetup_r+0xc6>
 800b404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b408:	d1ba      	bne.n	800b380 <__swsetup_r+0x30>
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	0781      	lsls	r1, r0, #30
 800b40e:	bf58      	it	pl
 800b410:	6963      	ldrpl	r3, [r4, #20]
 800b412:	60a3      	str	r3, [r4, #8]
 800b414:	e7f4      	b.n	800b400 <__swsetup_r+0xb0>
 800b416:	2000      	movs	r0, #0
 800b418:	e7f7      	b.n	800b40a <__swsetup_r+0xba>
 800b41a:	bf00      	nop
 800b41c:	20000014 	.word	0x20000014
 800b420:	0800c2f4 	.word	0x0800c2f4
 800b424:	0800c314 	.word	0x0800c314
 800b428:	0800c2d4 	.word	0x0800c2d4

0800b42c <abort>:
 800b42c:	b508      	push	{r3, lr}
 800b42e:	2006      	movs	r0, #6
 800b430:	f000 fa54 	bl	800b8dc <raise>
 800b434:	2001      	movs	r0, #1
 800b436:	f7f7 fa85 	bl	8002944 <_exit>
	...

0800b43c <__sflush_r>:
 800b43c:	898a      	ldrh	r2, [r1, #12]
 800b43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b442:	4605      	mov	r5, r0
 800b444:	0710      	lsls	r0, r2, #28
 800b446:	460c      	mov	r4, r1
 800b448:	d458      	bmi.n	800b4fc <__sflush_r+0xc0>
 800b44a:	684b      	ldr	r3, [r1, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dc05      	bgt.n	800b45c <__sflush_r+0x20>
 800b450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	dc02      	bgt.n	800b45c <__sflush_r+0x20>
 800b456:	2000      	movs	r0, #0
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b45e:	2e00      	cmp	r6, #0
 800b460:	d0f9      	beq.n	800b456 <__sflush_r+0x1a>
 800b462:	2300      	movs	r3, #0
 800b464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b468:	682f      	ldr	r7, [r5, #0]
 800b46a:	602b      	str	r3, [r5, #0]
 800b46c:	d032      	beq.n	800b4d4 <__sflush_r+0x98>
 800b46e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	075a      	lsls	r2, r3, #29
 800b474:	d505      	bpl.n	800b482 <__sflush_r+0x46>
 800b476:	6863      	ldr	r3, [r4, #4]
 800b478:	1ac0      	subs	r0, r0, r3
 800b47a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b47c:	b10b      	cbz	r3, 800b482 <__sflush_r+0x46>
 800b47e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b480:	1ac0      	subs	r0, r0, r3
 800b482:	2300      	movs	r3, #0
 800b484:	4602      	mov	r2, r0
 800b486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b488:	6a21      	ldr	r1, [r4, #32]
 800b48a:	4628      	mov	r0, r5
 800b48c:	47b0      	blx	r6
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	d106      	bne.n	800b4a2 <__sflush_r+0x66>
 800b494:	6829      	ldr	r1, [r5, #0]
 800b496:	291d      	cmp	r1, #29
 800b498:	d82c      	bhi.n	800b4f4 <__sflush_r+0xb8>
 800b49a:	4a2a      	ldr	r2, [pc, #168]	; (800b544 <__sflush_r+0x108>)
 800b49c:	40ca      	lsrs	r2, r1
 800b49e:	07d6      	lsls	r6, r2, #31
 800b4a0:	d528      	bpl.n	800b4f4 <__sflush_r+0xb8>
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	6062      	str	r2, [r4, #4]
 800b4a6:	04d9      	lsls	r1, r3, #19
 800b4a8:	6922      	ldr	r2, [r4, #16]
 800b4aa:	6022      	str	r2, [r4, #0]
 800b4ac:	d504      	bpl.n	800b4b8 <__sflush_r+0x7c>
 800b4ae:	1c42      	adds	r2, r0, #1
 800b4b0:	d101      	bne.n	800b4b6 <__sflush_r+0x7a>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	b903      	cbnz	r3, 800b4b8 <__sflush_r+0x7c>
 800b4b6:	6560      	str	r0, [r4, #84]	; 0x54
 800b4b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ba:	602f      	str	r7, [r5, #0]
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d0ca      	beq.n	800b456 <__sflush_r+0x1a>
 800b4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	d002      	beq.n	800b4ce <__sflush_r+0x92>
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f7ff faa5 	bl	800aa18 <_free_r>
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b4d2:	e7c1      	b.n	800b458 <__sflush_r+0x1c>
 800b4d4:	6a21      	ldr	r1, [r4, #32]
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	4628      	mov	r0, r5
 800b4da:	47b0      	blx	r6
 800b4dc:	1c41      	adds	r1, r0, #1
 800b4de:	d1c7      	bne.n	800b470 <__sflush_r+0x34>
 800b4e0:	682b      	ldr	r3, [r5, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0c4      	beq.n	800b470 <__sflush_r+0x34>
 800b4e6:	2b1d      	cmp	r3, #29
 800b4e8:	d001      	beq.n	800b4ee <__sflush_r+0xb2>
 800b4ea:	2b16      	cmp	r3, #22
 800b4ec:	d101      	bne.n	800b4f2 <__sflush_r+0xb6>
 800b4ee:	602f      	str	r7, [r5, #0]
 800b4f0:	e7b1      	b.n	800b456 <__sflush_r+0x1a>
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	e7ad      	b.n	800b458 <__sflush_r+0x1c>
 800b4fc:	690f      	ldr	r7, [r1, #16]
 800b4fe:	2f00      	cmp	r7, #0
 800b500:	d0a9      	beq.n	800b456 <__sflush_r+0x1a>
 800b502:	0793      	lsls	r3, r2, #30
 800b504:	680e      	ldr	r6, [r1, #0]
 800b506:	bf08      	it	eq
 800b508:	694b      	ldreq	r3, [r1, #20]
 800b50a:	600f      	str	r7, [r1, #0]
 800b50c:	bf18      	it	ne
 800b50e:	2300      	movne	r3, #0
 800b510:	eba6 0807 	sub.w	r8, r6, r7
 800b514:	608b      	str	r3, [r1, #8]
 800b516:	f1b8 0f00 	cmp.w	r8, #0
 800b51a:	dd9c      	ble.n	800b456 <__sflush_r+0x1a>
 800b51c:	6a21      	ldr	r1, [r4, #32]
 800b51e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b520:	4643      	mov	r3, r8
 800b522:	463a      	mov	r2, r7
 800b524:	4628      	mov	r0, r5
 800b526:	47b0      	blx	r6
 800b528:	2800      	cmp	r0, #0
 800b52a:	dc06      	bgt.n	800b53a <__sflush_r+0xfe>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b532:	81a3      	strh	r3, [r4, #12]
 800b534:	f04f 30ff 	mov.w	r0, #4294967295
 800b538:	e78e      	b.n	800b458 <__sflush_r+0x1c>
 800b53a:	4407      	add	r7, r0
 800b53c:	eba8 0800 	sub.w	r8, r8, r0
 800b540:	e7e9      	b.n	800b516 <__sflush_r+0xda>
 800b542:	bf00      	nop
 800b544:	20400001 	.word	0x20400001

0800b548 <_fflush_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	690b      	ldr	r3, [r1, #16]
 800b54c:	4605      	mov	r5, r0
 800b54e:	460c      	mov	r4, r1
 800b550:	b913      	cbnz	r3, 800b558 <_fflush_r+0x10>
 800b552:	2500      	movs	r5, #0
 800b554:	4628      	mov	r0, r5
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	b118      	cbz	r0, 800b562 <_fflush_r+0x1a>
 800b55a:	6983      	ldr	r3, [r0, #24]
 800b55c:	b90b      	cbnz	r3, 800b562 <_fflush_r+0x1a>
 800b55e:	f000 f887 	bl	800b670 <__sinit>
 800b562:	4b14      	ldr	r3, [pc, #80]	; (800b5b4 <_fflush_r+0x6c>)
 800b564:	429c      	cmp	r4, r3
 800b566:	d11b      	bne.n	800b5a0 <_fflush_r+0x58>
 800b568:	686c      	ldr	r4, [r5, #4]
 800b56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0ef      	beq.n	800b552 <_fflush_r+0xa>
 800b572:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b574:	07d0      	lsls	r0, r2, #31
 800b576:	d404      	bmi.n	800b582 <_fflush_r+0x3a>
 800b578:	0599      	lsls	r1, r3, #22
 800b57a:	d402      	bmi.n	800b582 <_fflush_r+0x3a>
 800b57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b57e:	f000 f915 	bl	800b7ac <__retarget_lock_acquire_recursive>
 800b582:	4628      	mov	r0, r5
 800b584:	4621      	mov	r1, r4
 800b586:	f7ff ff59 	bl	800b43c <__sflush_r>
 800b58a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b58c:	07da      	lsls	r2, r3, #31
 800b58e:	4605      	mov	r5, r0
 800b590:	d4e0      	bmi.n	800b554 <_fflush_r+0xc>
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	059b      	lsls	r3, r3, #22
 800b596:	d4dd      	bmi.n	800b554 <_fflush_r+0xc>
 800b598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b59a:	f000 f908 	bl	800b7ae <__retarget_lock_release_recursive>
 800b59e:	e7d9      	b.n	800b554 <_fflush_r+0xc>
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <_fflush_r+0x70>)
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	d101      	bne.n	800b5aa <_fflush_r+0x62>
 800b5a6:	68ac      	ldr	r4, [r5, #8]
 800b5a8:	e7df      	b.n	800b56a <_fflush_r+0x22>
 800b5aa:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <_fflush_r+0x74>)
 800b5ac:	429c      	cmp	r4, r3
 800b5ae:	bf08      	it	eq
 800b5b0:	68ec      	ldreq	r4, [r5, #12]
 800b5b2:	e7da      	b.n	800b56a <_fflush_r+0x22>
 800b5b4:	0800c2f4 	.word	0x0800c2f4
 800b5b8:	0800c314 	.word	0x0800c314
 800b5bc:	0800c2d4 	.word	0x0800c2d4

0800b5c0 <std>:
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ce:	6083      	str	r3, [r0, #8]
 800b5d0:	8181      	strh	r1, [r0, #12]
 800b5d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b5d4:	81c2      	strh	r2, [r0, #14]
 800b5d6:	6183      	str	r3, [r0, #24]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	2208      	movs	r2, #8
 800b5dc:	305c      	adds	r0, #92	; 0x5c
 800b5de:	f7fd fac7 	bl	8008b70 <memset>
 800b5e2:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <std+0x38>)
 800b5e4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5e6:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <std+0x3c>)
 800b5e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5ea:	4b05      	ldr	r3, [pc, #20]	; (800b600 <std+0x40>)
 800b5ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ee:	4b05      	ldr	r3, [pc, #20]	; (800b604 <std+0x44>)
 800b5f0:	6224      	str	r4, [r4, #32]
 800b5f2:	6323      	str	r3, [r4, #48]	; 0x30
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	bf00      	nop
 800b5f8:	0800b915 	.word	0x0800b915
 800b5fc:	0800b937 	.word	0x0800b937
 800b600:	0800b96f 	.word	0x0800b96f
 800b604:	0800b993 	.word	0x0800b993

0800b608 <_cleanup_r>:
 800b608:	4901      	ldr	r1, [pc, #4]	; (800b610 <_cleanup_r+0x8>)
 800b60a:	f000 b8af 	b.w	800b76c <_fwalk_reent>
 800b60e:	bf00      	nop
 800b610:	0800b549 	.word	0x0800b549

0800b614 <__sfmoreglue>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	2268      	movs	r2, #104	; 0x68
 800b618:	1e4d      	subs	r5, r1, #1
 800b61a:	4355      	muls	r5, r2
 800b61c:	460e      	mov	r6, r1
 800b61e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b622:	f7ff fa65 	bl	800aaf0 <_malloc_r>
 800b626:	4604      	mov	r4, r0
 800b628:	b140      	cbz	r0, 800b63c <__sfmoreglue+0x28>
 800b62a:	2100      	movs	r1, #0
 800b62c:	e9c0 1600 	strd	r1, r6, [r0]
 800b630:	300c      	adds	r0, #12
 800b632:	60a0      	str	r0, [r4, #8]
 800b634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b638:	f7fd fa9a 	bl	8008b70 <memset>
 800b63c:	4620      	mov	r0, r4
 800b63e:	bd70      	pop	{r4, r5, r6, pc}

0800b640 <__sfp_lock_acquire>:
 800b640:	4801      	ldr	r0, [pc, #4]	; (800b648 <__sfp_lock_acquire+0x8>)
 800b642:	f000 b8b3 	b.w	800b7ac <__retarget_lock_acquire_recursive>
 800b646:	bf00      	nop
 800b648:	2000064d 	.word	0x2000064d

0800b64c <__sfp_lock_release>:
 800b64c:	4801      	ldr	r0, [pc, #4]	; (800b654 <__sfp_lock_release+0x8>)
 800b64e:	f000 b8ae 	b.w	800b7ae <__retarget_lock_release_recursive>
 800b652:	bf00      	nop
 800b654:	2000064d 	.word	0x2000064d

0800b658 <__sinit_lock_acquire>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__sinit_lock_acquire+0x8>)
 800b65a:	f000 b8a7 	b.w	800b7ac <__retarget_lock_acquire_recursive>
 800b65e:	bf00      	nop
 800b660:	2000064e 	.word	0x2000064e

0800b664 <__sinit_lock_release>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__sinit_lock_release+0x8>)
 800b666:	f000 b8a2 	b.w	800b7ae <__retarget_lock_release_recursive>
 800b66a:	bf00      	nop
 800b66c:	2000064e 	.word	0x2000064e

0800b670 <__sinit>:
 800b670:	b510      	push	{r4, lr}
 800b672:	4604      	mov	r4, r0
 800b674:	f7ff fff0 	bl	800b658 <__sinit_lock_acquire>
 800b678:	69a3      	ldr	r3, [r4, #24]
 800b67a:	b11b      	cbz	r3, 800b684 <__sinit+0x14>
 800b67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b680:	f7ff bff0 	b.w	800b664 <__sinit_lock_release>
 800b684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b688:	6523      	str	r3, [r4, #80]	; 0x50
 800b68a:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <__sinit+0x68>)
 800b68c:	4a13      	ldr	r2, [pc, #76]	; (800b6dc <__sinit+0x6c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	62a2      	str	r2, [r4, #40]	; 0x28
 800b692:	42a3      	cmp	r3, r4
 800b694:	bf04      	itt	eq
 800b696:	2301      	moveq	r3, #1
 800b698:	61a3      	streq	r3, [r4, #24]
 800b69a:	4620      	mov	r0, r4
 800b69c:	f000 f820 	bl	800b6e0 <__sfp>
 800b6a0:	6060      	str	r0, [r4, #4]
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 f81c 	bl	800b6e0 <__sfp>
 800b6a8:	60a0      	str	r0, [r4, #8]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 f818 	bl	800b6e0 <__sfp>
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	60e0      	str	r0, [r4, #12]
 800b6b4:	2104      	movs	r1, #4
 800b6b6:	6860      	ldr	r0, [r4, #4]
 800b6b8:	f7ff ff82 	bl	800b5c0 <std>
 800b6bc:	68a0      	ldr	r0, [r4, #8]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	2109      	movs	r1, #9
 800b6c2:	f7ff ff7d 	bl	800b5c0 <std>
 800b6c6:	68e0      	ldr	r0, [r4, #12]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	2112      	movs	r1, #18
 800b6cc:	f7ff ff78 	bl	800b5c0 <std>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	61a3      	str	r3, [r4, #24]
 800b6d4:	e7d2      	b.n	800b67c <__sinit+0xc>
 800b6d6:	bf00      	nop
 800b6d8:	0800bf54 	.word	0x0800bf54
 800b6dc:	0800b609 	.word	0x0800b609

0800b6e0 <__sfp>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	f7ff ffac 	bl	800b640 <__sfp_lock_acquire>
 800b6e8:	4b1e      	ldr	r3, [pc, #120]	; (800b764 <__sfp+0x84>)
 800b6ea:	681e      	ldr	r6, [r3, #0]
 800b6ec:	69b3      	ldr	r3, [r6, #24]
 800b6ee:	b913      	cbnz	r3, 800b6f6 <__sfp+0x16>
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7ff ffbd 	bl	800b670 <__sinit>
 800b6f6:	3648      	adds	r6, #72	; 0x48
 800b6f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	d503      	bpl.n	800b708 <__sfp+0x28>
 800b700:	6833      	ldr	r3, [r6, #0]
 800b702:	b30b      	cbz	r3, 800b748 <__sfp+0x68>
 800b704:	6836      	ldr	r6, [r6, #0]
 800b706:	e7f7      	b.n	800b6f8 <__sfp+0x18>
 800b708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b70c:	b9d5      	cbnz	r5, 800b744 <__sfp+0x64>
 800b70e:	4b16      	ldr	r3, [pc, #88]	; (800b768 <__sfp+0x88>)
 800b710:	60e3      	str	r3, [r4, #12]
 800b712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b716:	6665      	str	r5, [r4, #100]	; 0x64
 800b718:	f000 f847 	bl	800b7aa <__retarget_lock_init_recursive>
 800b71c:	f7ff ff96 	bl	800b64c <__sfp_lock_release>
 800b720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b728:	6025      	str	r5, [r4, #0]
 800b72a:	61a5      	str	r5, [r4, #24]
 800b72c:	2208      	movs	r2, #8
 800b72e:	4629      	mov	r1, r5
 800b730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b734:	f7fd fa1c 	bl	8008b70 <memset>
 800b738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b73c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b740:	4620      	mov	r0, r4
 800b742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b744:	3468      	adds	r4, #104	; 0x68
 800b746:	e7d9      	b.n	800b6fc <__sfp+0x1c>
 800b748:	2104      	movs	r1, #4
 800b74a:	4638      	mov	r0, r7
 800b74c:	f7ff ff62 	bl	800b614 <__sfmoreglue>
 800b750:	4604      	mov	r4, r0
 800b752:	6030      	str	r0, [r6, #0]
 800b754:	2800      	cmp	r0, #0
 800b756:	d1d5      	bne.n	800b704 <__sfp+0x24>
 800b758:	f7ff ff78 	bl	800b64c <__sfp_lock_release>
 800b75c:	230c      	movs	r3, #12
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	e7ee      	b.n	800b740 <__sfp+0x60>
 800b762:	bf00      	nop
 800b764:	0800bf54 	.word	0x0800bf54
 800b768:	ffff0001 	.word	0xffff0001

0800b76c <_fwalk_reent>:
 800b76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b770:	4606      	mov	r6, r0
 800b772:	4688      	mov	r8, r1
 800b774:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b778:	2700      	movs	r7, #0
 800b77a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b77e:	f1b9 0901 	subs.w	r9, r9, #1
 800b782:	d505      	bpl.n	800b790 <_fwalk_reent+0x24>
 800b784:	6824      	ldr	r4, [r4, #0]
 800b786:	2c00      	cmp	r4, #0
 800b788:	d1f7      	bne.n	800b77a <_fwalk_reent+0xe>
 800b78a:	4638      	mov	r0, r7
 800b78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b790:	89ab      	ldrh	r3, [r5, #12]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d907      	bls.n	800b7a6 <_fwalk_reent+0x3a>
 800b796:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b79a:	3301      	adds	r3, #1
 800b79c:	d003      	beq.n	800b7a6 <_fwalk_reent+0x3a>
 800b79e:	4629      	mov	r1, r5
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	47c0      	blx	r8
 800b7a4:	4307      	orrs	r7, r0
 800b7a6:	3568      	adds	r5, #104	; 0x68
 800b7a8:	e7e9      	b.n	800b77e <_fwalk_reent+0x12>

0800b7aa <__retarget_lock_init_recursive>:
 800b7aa:	4770      	bx	lr

0800b7ac <__retarget_lock_acquire_recursive>:
 800b7ac:	4770      	bx	lr

0800b7ae <__retarget_lock_release_recursive>:
 800b7ae:	4770      	bx	lr

0800b7b0 <__swhatbuf_r>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	460e      	mov	r6, r1
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	2900      	cmp	r1, #0
 800b7ba:	b096      	sub	sp, #88	; 0x58
 800b7bc:	4614      	mov	r4, r2
 800b7be:	461d      	mov	r5, r3
 800b7c0:	da08      	bge.n	800b7d4 <__swhatbuf_r+0x24>
 800b7c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	602a      	str	r2, [r5, #0]
 800b7ca:	061a      	lsls	r2, r3, #24
 800b7cc:	d410      	bmi.n	800b7f0 <__swhatbuf_r+0x40>
 800b7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d2:	e00e      	b.n	800b7f2 <__swhatbuf_r+0x42>
 800b7d4:	466a      	mov	r2, sp
 800b7d6:	f000 f903 	bl	800b9e0 <_fstat_r>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	dbf1      	blt.n	800b7c2 <__swhatbuf_r+0x12>
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7e8:	425a      	negs	r2, r3
 800b7ea:	415a      	adcs	r2, r3
 800b7ec:	602a      	str	r2, [r5, #0]
 800b7ee:	e7ee      	b.n	800b7ce <__swhatbuf_r+0x1e>
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	b016      	add	sp, #88	; 0x58
 800b7f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7fc <__smakebuf_r>:
 800b7fc:	898b      	ldrh	r3, [r1, #12]
 800b7fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b800:	079d      	lsls	r5, r3, #30
 800b802:	4606      	mov	r6, r0
 800b804:	460c      	mov	r4, r1
 800b806:	d507      	bpl.n	800b818 <__smakebuf_r+0x1c>
 800b808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	6123      	str	r3, [r4, #16]
 800b810:	2301      	movs	r3, #1
 800b812:	6163      	str	r3, [r4, #20]
 800b814:	b002      	add	sp, #8
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	ab01      	add	r3, sp, #4
 800b81a:	466a      	mov	r2, sp
 800b81c:	f7ff ffc8 	bl	800b7b0 <__swhatbuf_r>
 800b820:	9900      	ldr	r1, [sp, #0]
 800b822:	4605      	mov	r5, r0
 800b824:	4630      	mov	r0, r6
 800b826:	f7ff f963 	bl	800aaf0 <_malloc_r>
 800b82a:	b948      	cbnz	r0, 800b840 <__smakebuf_r+0x44>
 800b82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b830:	059a      	lsls	r2, r3, #22
 800b832:	d4ef      	bmi.n	800b814 <__smakebuf_r+0x18>
 800b834:	f023 0303 	bic.w	r3, r3, #3
 800b838:	f043 0302 	orr.w	r3, r3, #2
 800b83c:	81a3      	strh	r3, [r4, #12]
 800b83e:	e7e3      	b.n	800b808 <__smakebuf_r+0xc>
 800b840:	4b0d      	ldr	r3, [pc, #52]	; (800b878 <__smakebuf_r+0x7c>)
 800b842:	62b3      	str	r3, [r6, #40]	; 0x28
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	6020      	str	r0, [r4, #0]
 800b848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	9b00      	ldr	r3, [sp, #0]
 800b850:	6163      	str	r3, [r4, #20]
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	6120      	str	r0, [r4, #16]
 800b856:	b15b      	cbz	r3, 800b870 <__smakebuf_r+0x74>
 800b858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b85c:	4630      	mov	r0, r6
 800b85e:	f000 f8d1 	bl	800ba04 <_isatty_r>
 800b862:	b128      	cbz	r0, 800b870 <__smakebuf_r+0x74>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	f023 0303 	bic.w	r3, r3, #3
 800b86a:	f043 0301 	orr.w	r3, r3, #1
 800b86e:	81a3      	strh	r3, [r4, #12]
 800b870:	89a0      	ldrh	r0, [r4, #12]
 800b872:	4305      	orrs	r5, r0
 800b874:	81a5      	strh	r5, [r4, #12]
 800b876:	e7cd      	b.n	800b814 <__smakebuf_r+0x18>
 800b878:	0800b609 	.word	0x0800b609

0800b87c <_malloc_usable_size_r>:
 800b87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b880:	1f18      	subs	r0, r3, #4
 800b882:	2b00      	cmp	r3, #0
 800b884:	bfbc      	itt	lt
 800b886:	580b      	ldrlt	r3, [r1, r0]
 800b888:	18c0      	addlt	r0, r0, r3
 800b88a:	4770      	bx	lr

0800b88c <_raise_r>:
 800b88c:	291f      	cmp	r1, #31
 800b88e:	b538      	push	{r3, r4, r5, lr}
 800b890:	4604      	mov	r4, r0
 800b892:	460d      	mov	r5, r1
 800b894:	d904      	bls.n	800b8a0 <_raise_r+0x14>
 800b896:	2316      	movs	r3, #22
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	f04f 30ff 	mov.w	r0, #4294967295
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8a2:	b112      	cbz	r2, 800b8aa <_raise_r+0x1e>
 800b8a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8a8:	b94b      	cbnz	r3, 800b8be <_raise_r+0x32>
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 f830 	bl	800b910 <_getpid_r>
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4601      	mov	r1, r0
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ba:	f000 b817 	b.w	800b8ec <_kill_r>
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d00a      	beq.n	800b8d8 <_raise_r+0x4c>
 800b8c2:	1c59      	adds	r1, r3, #1
 800b8c4:	d103      	bne.n	800b8ce <_raise_r+0x42>
 800b8c6:	2316      	movs	r3, #22
 800b8c8:	6003      	str	r3, [r0, #0]
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	e7e7      	b.n	800b89e <_raise_r+0x12>
 800b8ce:	2400      	movs	r4, #0
 800b8d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	4798      	blx	r3
 800b8d8:	2000      	movs	r0, #0
 800b8da:	e7e0      	b.n	800b89e <_raise_r+0x12>

0800b8dc <raise>:
 800b8dc:	4b02      	ldr	r3, [pc, #8]	; (800b8e8 <raise+0xc>)
 800b8de:	4601      	mov	r1, r0
 800b8e0:	6818      	ldr	r0, [r3, #0]
 800b8e2:	f7ff bfd3 	b.w	800b88c <_raise_r>
 800b8e6:	bf00      	nop
 800b8e8:	20000014 	.word	0x20000014

0800b8ec <_kill_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	; (800b90c <_kill_r+0x20>)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	f7f7 f813 	bl	8002924 <_kill>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	d102      	bne.n	800b908 <_kill_r+0x1c>
 800b902:	682b      	ldr	r3, [r5, #0]
 800b904:	b103      	cbz	r3, 800b908 <_kill_r+0x1c>
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	bd38      	pop	{r3, r4, r5, pc}
 800b90a:	bf00      	nop
 800b90c:	20000648 	.word	0x20000648

0800b910 <_getpid_r>:
 800b910:	f7f7 b800 	b.w	8002914 <_getpid>

0800b914 <__sread>:
 800b914:	b510      	push	{r4, lr}
 800b916:	460c      	mov	r4, r1
 800b918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b91c:	f000 f894 	bl	800ba48 <_read_r>
 800b920:	2800      	cmp	r0, #0
 800b922:	bfab      	itete	ge
 800b924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b926:	89a3      	ldrhlt	r3, [r4, #12]
 800b928:	181b      	addge	r3, r3, r0
 800b92a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b92e:	bfac      	ite	ge
 800b930:	6563      	strge	r3, [r4, #84]	; 0x54
 800b932:	81a3      	strhlt	r3, [r4, #12]
 800b934:	bd10      	pop	{r4, pc}

0800b936 <__swrite>:
 800b936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93a:	461f      	mov	r7, r3
 800b93c:	898b      	ldrh	r3, [r1, #12]
 800b93e:	05db      	lsls	r3, r3, #23
 800b940:	4605      	mov	r5, r0
 800b942:	460c      	mov	r4, r1
 800b944:	4616      	mov	r6, r2
 800b946:	d505      	bpl.n	800b954 <__swrite+0x1e>
 800b948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b94c:	2302      	movs	r3, #2
 800b94e:	2200      	movs	r2, #0
 800b950:	f000 f868 	bl	800ba24 <_lseek_r>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b95a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	4632      	mov	r2, r6
 800b962:	463b      	mov	r3, r7
 800b964:	4628      	mov	r0, r5
 800b966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b96a:	f000 b817 	b.w	800b99c <_write_r>

0800b96e <__sseek>:
 800b96e:	b510      	push	{r4, lr}
 800b970:	460c      	mov	r4, r1
 800b972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b976:	f000 f855 	bl	800ba24 <_lseek_r>
 800b97a:	1c43      	adds	r3, r0, #1
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	bf15      	itete	ne
 800b980:	6560      	strne	r0, [r4, #84]	; 0x54
 800b982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b98a:	81a3      	strheq	r3, [r4, #12]
 800b98c:	bf18      	it	ne
 800b98e:	81a3      	strhne	r3, [r4, #12]
 800b990:	bd10      	pop	{r4, pc}

0800b992 <__sclose>:
 800b992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b996:	f000 b813 	b.w	800b9c0 <_close_r>
	...

0800b99c <_write_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d07      	ldr	r5, [pc, #28]	; (800b9bc <_write_r+0x20>)
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	4608      	mov	r0, r1
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	602a      	str	r2, [r5, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f7f6 fff1 	bl	8002992 <_write>
 800b9b0:	1c43      	adds	r3, r0, #1
 800b9b2:	d102      	bne.n	800b9ba <_write_r+0x1e>
 800b9b4:	682b      	ldr	r3, [r5, #0]
 800b9b6:	b103      	cbz	r3, 800b9ba <_write_r+0x1e>
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	20000648 	.word	0x20000648

0800b9c0 <_close_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4d06      	ldr	r5, [pc, #24]	; (800b9dc <_close_r+0x1c>)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	f7f6 fffd 	bl	80029ca <_close>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_close_r+0x1a>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_close_r+0x1a>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	20000648 	.word	0x20000648

0800b9e0 <_fstat_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d07      	ldr	r5, [pc, #28]	; (800ba00 <_fstat_r+0x20>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	f7f6 fff8 	bl	80029e2 <_fstat>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	d102      	bne.n	800b9fc <_fstat_r+0x1c>
 800b9f6:	682b      	ldr	r3, [r5, #0]
 800b9f8:	b103      	cbz	r3, 800b9fc <_fstat_r+0x1c>
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	bd38      	pop	{r3, r4, r5, pc}
 800b9fe:	bf00      	nop
 800ba00:	20000648 	.word	0x20000648

0800ba04 <_isatty_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d06      	ldr	r5, [pc, #24]	; (800ba20 <_isatty_r+0x1c>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	602b      	str	r3, [r5, #0]
 800ba10:	f7f6 fff7 	bl	8002a02 <_isatty>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_isatty_r+0x1a>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_isatty_r+0x1a>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20000648 	.word	0x20000648

0800ba24 <_lseek_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d07      	ldr	r5, [pc, #28]	; (800ba44 <_lseek_r+0x20>)
 800ba28:	4604      	mov	r4, r0
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	2200      	movs	r2, #0
 800ba30:	602a      	str	r2, [r5, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f7f6 fff0 	bl	8002a18 <_lseek>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_lseek_r+0x1e>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_lseek_r+0x1e>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	20000648 	.word	0x20000648

0800ba48 <_read_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d07      	ldr	r5, [pc, #28]	; (800ba68 <_read_r+0x20>)
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	4608      	mov	r0, r1
 800ba50:	4611      	mov	r1, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	602a      	str	r2, [r5, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f7f6 ff7e 	bl	8002958 <_read>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_read_r+0x1e>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_read_r+0x1e>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20000648 	.word	0x20000648

0800ba6c <_init>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	bf00      	nop
 800ba70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba72:	bc08      	pop	{r3}
 800ba74:	469e      	mov	lr, r3
 800ba76:	4770      	bx	lr

0800ba78 <_fini>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	bf00      	nop
 800ba7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7e:	bc08      	pop	{r3}
 800ba80:	469e      	mov	lr, r3
 800ba82:	4770      	bx	lr
